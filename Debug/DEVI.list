
DEVI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d744  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  0800d858  0800d858  0001d858  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df00  0800df00  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800df00  0800df00  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800df00  0800df00  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df00  0800df00  0001df00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df04  0800df04  0001df04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800df08  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  200001f0  0800e0f8  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  0800e0f8  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010dbd  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f66  00000000  00000000  00031019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d8  00000000  00000000  00033f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d07  00000000  00000000  00035058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a0b0  00000000  00000000  00035d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015fc7  00000000  00000000  0004fe0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f41a  00000000  00000000  00065dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ec4  00000000  00000000  000f51f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000fb0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d83c 	.word	0x0800d83c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800d83c 	.word	0x0800d83c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__aeabi_d2lz>:
 8001038:	b538      	push	{r3, r4, r5, lr}
 800103a:	4605      	mov	r5, r0
 800103c:	460c      	mov	r4, r1
 800103e:	2200      	movs	r2, #0
 8001040:	2300      	movs	r3, #0
 8001042:	4628      	mov	r0, r5
 8001044:	4621      	mov	r1, r4
 8001046:	f7ff fcc3 	bl	80009d0 <__aeabi_dcmplt>
 800104a:	b928      	cbnz	r0, 8001058 <__aeabi_d2lz+0x20>
 800104c:	4628      	mov	r0, r5
 800104e:	4621      	mov	r1, r4
 8001050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001054:	f000 b80a 	b.w	800106c <__aeabi_d2ulz>
 8001058:	4628      	mov	r0, r5
 800105a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800105e:	f000 f805 	bl	800106c <__aeabi_d2ulz>
 8001062:	4240      	negs	r0, r0
 8001064:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001068:	bd38      	pop	{r3, r4, r5, pc}
 800106a:	bf00      	nop

0800106c <__aeabi_d2ulz>:
 800106c:	b5d0      	push	{r4, r6, r7, lr}
 800106e:	2200      	movs	r2, #0
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <__aeabi_d2ulz+0x34>)
 8001072:	4606      	mov	r6, r0
 8001074:	460f      	mov	r7, r1
 8001076:	f7ff fa39 	bl	80004ec <__aeabi_dmul>
 800107a:	f7ff fd0f 	bl	8000a9c <__aeabi_d2uiz>
 800107e:	4604      	mov	r4, r0
 8001080:	f7ff f9ba 	bl	80003f8 <__aeabi_ui2d>
 8001084:	2200      	movs	r2, #0
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <__aeabi_d2ulz+0x38>)
 8001088:	f7ff fa30 	bl	80004ec <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4630      	mov	r0, r6
 8001092:	4639      	mov	r1, r7
 8001094:	f7ff f872 	bl	800017c <__aeabi_dsub>
 8001098:	f7ff fd00 	bl	8000a9c <__aeabi_d2uiz>
 800109c:	4621      	mov	r1, r4
 800109e:	bdd0      	pop	{r4, r6, r7, pc}
 80010a0:	3df00000 	.word	0x3df00000
 80010a4:	41f00000 	.word	0x41f00000

080010a8 <btn_pressing_callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void btn_pressing_callback(Button_Typdef *ButtonX)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	if (stateDevice == IDLE) {
 80010b0:	4b24      	ldr	r3, [pc, #144]	; (8001144 <btn_pressing_callback+0x9c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d10f      	bne.n	80010d8 <btn_pressing_callback+0x30>
		MQSensor_powerOn(&MQSensor, true);
 80010b8:	2101      	movs	r1, #1
 80010ba:	4823      	ldr	r0, [pc, #140]	; (8001148 <btn_pressing_callback+0xa0>)
 80010bc:	f000 f98a 	bl	80013d4 <MQSensor_powerOn>
		MQSensor.start_heating_time = HAL_GetTick();
 80010c0:	f002 f830 	bl	8003124 <HAL_GetTick>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4a20      	ldr	r2, [pc, #128]	; (8001148 <btn_pressing_callback+0xa0>)
 80010c8:	6093      	str	r3, [r2, #8]
		stateDevice = HEATING;
 80010ca:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <btn_pressing_callback+0x9c>)
 80010cc:	2202      	movs	r2, #2
 80010ce:	701a      	strb	r2, [r3, #0]
		lcd_clear_display(&hlcd);
 80010d0:	481e      	ldr	r0, [pc, #120]	; (800114c <btn_pressing_callback+0xa4>)
 80010d2:	f006 fdbf 	bl	8007c54 <lcd_clear_display>
		return;
 80010d6:	e031      	b.n	800113c <btn_pressing_callback+0x94>
	}

	if (stateDevice == HEATING) {
 80010d8:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <btn_pressing_callback+0x9c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d10a      	bne.n	80010f6 <btn_pressing_callback+0x4e>
		lcd_clear_display(&hlcd);
 80010e0:	481a      	ldr	r0, [pc, #104]	; (800114c <btn_pressing_callback+0xa4>)
 80010e2:	f006 fdb7 	bl	8007c54 <lcd_clear_display>
		MQSensor_powerOn(&MQSensor, false);
 80010e6:	2100      	movs	r1, #0
 80010e8:	4817      	ldr	r0, [pc, #92]	; (8001148 <btn_pressing_callback+0xa0>)
 80010ea:	f000 f973 	bl	80013d4 <MQSensor_powerOn>
		stateDevice = IDLE;
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <btn_pressing_callback+0x9c>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
		return;
 80010f4:	e022      	b.n	800113c <btn_pressing_callback+0x94>
	}

	if (stateDevice == COMMUNICATING) {
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <btn_pressing_callback+0x9c>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d11e      	bne.n	800113c <btn_pressing_callback+0x94>
		lcd_clear_display(&hlcd);
 80010fe:	4813      	ldr	r0, [pc, #76]	; (800114c <btn_pressing_callback+0xa4>)
 8001100:	f006 fda8 	bl	8007c54 <lcd_clear_display>
		stateDevice = IDLE;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <btn_pressing_callback+0x9c>)
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]
		char str[] = "AHT03\n";
 800110a:	4a11      	ldr	r2, [pc, #68]	; (8001150 <btn_pressing_callback+0xa8>)
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001114:	6018      	str	r0, [r3, #0]
 8001116:	3304      	adds	r3, #4
 8001118:	8019      	strh	r1, [r3, #0]
 800111a:	3302      	adds	r3, #2
 800111c:	0c0a      	lsrs	r2, r1, #16
 800111e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 500);
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff f81d 	bl	8000164 <strlen>
 800112a:	4603      	mov	r3, r0
 800112c:	b29a      	uxth	r2, r3
 800112e:	f107 0108 	add.w	r1, r7, #8
 8001132:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001136:	4807      	ldr	r0, [pc, #28]	; (8001154 <btn_pressing_callback+0xac>)
 8001138:	f005 fee8 	bl	8006f0c <HAL_UART_Transmit>
		return;
	}

}
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000039c 	.word	0x2000039c
 8001148:	20000368 	.word	0x20000368
 800114c:	20000340 	.word	0x20000340
 8001150:	0800d858 	.word	0x0800d858
 8001154:	200002f8 	.word	0x200002f8

08001158 <btn_press_short_callback>:

void btn_press_short_callback(Button_Typdef *ButtonX)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr

0800116a <btn_release_callback>:

void btn_release_callback(Button_Typdef *ButtonX)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]

}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <btn_press_timeout_callback>:

void btn_press_timeout_callback(Button_Typdef *ButtonX)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	hold_count++;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <btn_press_timeout_callback+0x24>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	b2da      	uxtb	r2, r3
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <btn_press_timeout_callback+0x24>)
 800118e:	701a      	strb	r2, [r3, #0]
	flag = true;
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <btn_press_timeout_callback+0x28>)
 8001192:	2201      	movs	r2, #1
 8001194:	701a      	strb	r2, [r3, #0]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	2000034c 	.word	0x2000034c
 80011a4:	2000034d 	.word	0x2000034d

080011a8 <button_init>:

void button_init(Button_Typdef *ButtonX,GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	4613      	mov	r3, r2
 80011b4:	80fb      	strh	r3, [r7, #6]
	ButtonX->GPIOx = GPIOx;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	611a      	str	r2, [r3, #16]
	ButtonX->GPIO_Pin = GPIO_Pin;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	88fa      	ldrh	r2, [r7, #6]
 80011c0:	829a      	strh	r2, [r3, #20]
}
 80011c2:	bf00      	nop
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <button_handle>:

void button_handle(Button_Typdef *ButtonX)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	/* */
	uint8_t sta = HAL_GPIO_ReadPin(ButtonX->GPIOx, ButtonX->GPIO_Pin);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691a      	ldr	r2, [r3, #16]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	8a9b      	ldrh	r3, [r3, #20]
 80011dc:	4619      	mov	r1, r3
 80011de:	4610      	mov	r0, r2
 80011e0:	f003 fa18 	bl	8004614 <HAL_GPIO_ReadPin>
 80011e4:	4603      	mov	r3, r0
 80011e6:	73fb      	strb	r3, [r7, #15]
	if (sta != ButtonX->btn_filter) {
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	789b      	ldrb	r3, [r3, #2]
 80011ec:	7bfa      	ldrb	r2, [r7, #15]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d00a      	beq.n	8001208 <button_handle+0x3c>
		ButtonX->btn_filter = sta;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	709a      	strb	r2, [r3, #2]
		ButtonX->is_debouncing = true;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	70da      	strb	r2, [r3, #3]
		ButtonX->time_deboune = HAL_GetTick();
 80011fe:	f001 ff91 	bl	8003124 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	605a      	str	r2, [r3, #4]
	}

	/* */
	if ((sta == ButtonX->btn_filter) && (HAL_GetTick() - ButtonX->time_deboune) > 15) {
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	789b      	ldrb	r3, [r3, #2]
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	429a      	cmp	r2, r3
 8001210:	d10e      	bne.n	8001230 <button_handle+0x64>
 8001212:	f001 ff87 	bl	8003124 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b0f      	cmp	r3, #15
 8001220:	d906      	bls.n	8001230 <button_handle+0x64>
		ButtonX->is_debouncing = false;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	70da      	strb	r2, [r3, #3]
		ButtonX->btn_current = ButtonX->btn_filter;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	789a      	ldrb	r2, [r3, #2]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	701a      	strb	r2, [r3, #0]
	}

	/* */
	if (ButtonX->btn_current != ButtonX->btn_last)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	781a      	ldrb	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	785b      	ldrb	r3, [r3, #1]
 8001238:	429a      	cmp	r2, r3
 800123a:	d029      	beq.n	8001290 <button_handle+0xc4>
	{
		if(ButtonX->btn_current == GPIO_PIN_RESET) // Press the button
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d10b      	bne.n	800125c <button_handle+0x90>
		{
			ButtonX->is_press_timeout = true;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	731a      	strb	r2, [r3, #12]
			btn_pressing_callback(ButtonX);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ff2c 	bl	80010a8 <btn_pressing_callback>
			ButtonX->time_start_press = HAL_GetTick();
 8001250:	f001 ff68 	bl	8003124 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	e015      	b.n	8001288 <button_handle+0xbc>
		}
		else if(ButtonX->btn_current == GPIO_PIN_SET) // Release the button
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d111      	bne.n	8001288 <button_handle+0xbc>
		{
			if(HAL_GetTick() - ButtonX->time_start_press <= SHORT_PRESS_TIME)
 8001264:	f001 ff5e 	bl	8003124 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001274:	d802      	bhi.n	800127c <button_handle+0xb0>
			{
				btn_press_short_callback(ButtonX);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ff6e 	bl	8001158 <btn_press_short_callback>
			}
			btn_release_callback(ButtonX);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff74 	bl	800116a <btn_release_callback>
			ButtonX->is_press_timeout = false;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	731a      	strb	r2, [r3, #12]
		}
		ButtonX->btn_last = ButtonX->btn_current;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	781a      	ldrb	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	705a      	strb	r2, [r3, #1]
	}

	/* */
	if(ButtonX->is_press_timeout && (HAL_GetTick() - ButtonX->time_start_press >= HOLD_DOWN_TIME))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7b1b      	ldrb	r3, [r3, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00f      	beq.n	80012b8 <button_handle+0xec>
 8001298:	f001 ff44 	bl	8003124 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d905      	bls.n	80012b8 <button_handle+0xec>
	{
		ButtonX->is_press_timeout = false;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	731a      	strb	r2, [r3, #12]
		btn_press_timeout_callback(ButtonX);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ff62 	bl	800117c <btn_press_timeout_callback>
	}

} /* END button_handle */
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <MQSensor_Init>:

void MQSensor_Init(MQSensor_Typdef *sensor, GPIO_TypeDef *HT_GPIOx, uint16_t HT_GPIO_Pin, ADC_HandleTypeDef* hadc,  uint32_t Channel)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	4613      	mov	r3, r2
 80012ce:	80fb      	strh	r3, [r7, #6]
	sensor->HT_GPIOx = HT_GPIOx;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	601a      	str	r2, [r3, #0]
	sensor->HT_GPIO_Pin = HT_GPIO_Pin;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	88fa      	ldrh	r2, [r7, #6]
 80012da:	809a      	strh	r2, [r3, #4]
	sensor->hadc = hadc;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	611a      	str	r2, [r3, #16]
	sensor->Channel = Channel;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	615a      	str	r2, [r3, #20]

	HAL_ADCEx_Calibration_Start(sensor->hadc);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f002 fb9f 	bl	8003a30 <HAL_ADCEx_Calibration_Start>

}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <MQSensor_get_adc>:

HAL_StatusTypeDef MQSensor_get_adc(MQSensor_Typdef *sensor)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	MQSensor_powerOn(&MQSensor, true);
 8001304:	2101      	movs	r1, #1
 8001306:	4832      	ldr	r0, [pc, #200]	; (80013d0 <MQSensor_get_adc+0xd4>)
 8001308:	f000 f864 	bl	80013d4 <MQSensor_powerOn>
	HAL_Delay(10);
 800130c:	200a      	movs	r0, #10
 800130e:	f001 ff13 	bl	8003138 <HAL_Delay>
	HAL_StatusTypeDef ret = HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	75fb      	strb	r3, [r7, #23]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
	sConfig.Channel = sensor->Channel;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001328:	2301      	movs	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800132c:	2307      	movs	r3, #7
 800132e:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(sensor->hadc, &sConfig) != HAL_OK)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	f107 0208 	add.w	r2, r7, #8
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f002 f9e4 	bl	8003708 <HAL_ADC_ConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MQSensor_get_adc+0x4e>
	{
		Error_Handler();
 8001346:	f001 fc05 	bl	8002b54 <Error_Handler>
	}

	ret = HAL_ADC_Start(sensor->hadc);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	4618      	mov	r0, r3
 8001350:	f001 ffee 	bl	8003330 <HAL_ADC_Start>
 8001354:	4603      	mov	r3, r0
 8001356:	75fb      	strb	r3, [r7, #23]
	if(ret) {
 8001358:	7dfb      	ldrb	r3, [r7, #23]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d005      	beq.n	800136a <MQSensor_get_adc+0x6e>
		MQSensor_powerOn(&MQSensor, false);
 800135e:	2100      	movs	r1, #0
 8001360:	481b      	ldr	r0, [pc, #108]	; (80013d0 <MQSensor_get_adc+0xd4>)
 8001362:	f000 f837 	bl	80013d4 <MQSensor_powerOn>
		return ret;
 8001366:	7dfb      	ldrb	r3, [r7, #23]
 8001368:	e02e      	b.n	80013c8 <MQSensor_get_adc+0xcc>
	}
	ret = HAL_ADC_PollForConversion(sensor->hadc, 1000);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001372:	4618      	mov	r0, r3
 8001374:	f002 f8b6 	bl	80034e4 <HAL_ADC_PollForConversion>
 8001378:	4603      	mov	r3, r0
 800137a:	75fb      	strb	r3, [r7, #23]
	if(ret) {
 800137c:	7dfb      	ldrb	r3, [r7, #23]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d005      	beq.n	800138e <MQSensor_get_adc+0x92>
		MQSensor_powerOn(&MQSensor, false);
 8001382:	2100      	movs	r1, #0
 8001384:	4812      	ldr	r0, [pc, #72]	; (80013d0 <MQSensor_get_adc+0xd4>)
 8001386:	f000 f825 	bl	80013d4 <MQSensor_powerOn>
		return ret;
 800138a:	7dfb      	ldrb	r3, [r7, #23]
 800138c:	e01c      	b.n	80013c8 <MQSensor_get_adc+0xcc>
	}
	sensor->adc_value = HAL_ADC_GetValue(sensor->hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	4618      	mov	r0, r3
 8001394:	f002 f9ac 	bl	80036f0 <HAL_ADC_GetValue>
 8001398:	4602      	mov	r2, r0
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	619a      	str	r2, [r3, #24]
	ret = HAL_ADC_Stop(sensor->hadc);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f002 f872 	bl	800348c <HAL_ADC_Stop>
 80013a8:	4603      	mov	r3, r0
 80013aa:	75fb      	strb	r3, [r7, #23]
	if(ret) {
 80013ac:	7dfb      	ldrb	r3, [r7, #23]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d005      	beq.n	80013be <MQSensor_get_adc+0xc2>
		MQSensor_powerOn(&MQSensor, false);
 80013b2:	2100      	movs	r1, #0
 80013b4:	4806      	ldr	r0, [pc, #24]	; (80013d0 <MQSensor_get_adc+0xd4>)
 80013b6:	f000 f80d 	bl	80013d4 <MQSensor_powerOn>
		return ret;
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
 80013bc:	e004      	b.n	80013c8 <MQSensor_get_adc+0xcc>
	}
	MQSensor_powerOn(&MQSensor, false);
 80013be:	2100      	movs	r1, #0
 80013c0:	4803      	ldr	r0, [pc, #12]	; (80013d0 <MQSensor_get_adc+0xd4>)
 80013c2:	f000 f807 	bl	80013d4 <MQSensor_powerOn>
	return ret;
 80013c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000368 	.word	0x20000368

080013d4 <MQSensor_powerOn>:

void MQSensor_powerOn(MQSensor_Typdef *sensor, bool power)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sensor->HT_GPIOx, sensor->HT_GPIO_Pin, power ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6818      	ldr	r0, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	889b      	ldrh	r3, [r3, #4]
 80013e8:	78fa      	ldrb	r2, [r7, #3]
 80013ea:	4619      	mov	r1, r3
 80013ec:	f003 f929 	bl	8004642 <HAL_GPIO_WritePin>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <MQSensor_calc>:

void MQSensor_calc(MQSensor_Typdef *sensor)
{
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
//	sensor->ppm = sensor->adc_value;
	Rs = 5*RL/((float)MQSensor.adc_value*3.3/4095)-RL;
 8001400:	4b43      	ldr	r3, [pc, #268]	; (8001510 <MQSensor_calc+0x118>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4943      	ldr	r1, [pc, #268]	; (8001514 <MQSensor_calc+0x11c>)
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fcc6 	bl	8000d98 <__aeabi_fmul>
 800140c:	4603      	mov	r3, r0
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f814 	bl	800043c <__aeabi_f2d>
 8001414:	4604      	mov	r4, r0
 8001416:	460d      	mov	r5, r1
 8001418:	4b3f      	ldr	r3, [pc, #252]	; (8001518 <MQSensor_calc+0x120>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fc63 	bl	8000ce8 <__aeabi_ui2f>
 8001422:	4603      	mov	r3, r0
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f809 	bl	800043c <__aeabi_f2d>
 800142a:	a331      	add	r3, pc, #196	; (adr r3, 80014f0 <MQSensor_calc+0xf8>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	f7ff f85c 	bl	80004ec <__aeabi_dmul>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	a32e      	add	r3, pc, #184	; (adr r3, 80014f8 <MQSensor_calc+0x100>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	f7ff f97d 	bl	8000740 <__aeabi_ddiv>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4620      	mov	r0, r4
 800144c:	4629      	mov	r1, r5
 800144e:	f7ff f977 	bl	8000740 <__aeabi_ddiv>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4614      	mov	r4, r2
 8001458:	461d      	mov	r5, r3
 800145a:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <MQSensor_calc+0x118>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7fe ffec 	bl	800043c <__aeabi_f2d>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4620      	mov	r0, r4
 800146a:	4629      	mov	r1, r5
 800146c:	f7fe fe86 	bl	800017c <__aeabi_dsub>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fb30 	bl	8000adc <__aeabi_d2f>
 800147c:	4603      	mov	r3, r0
 800147e:	4a27      	ldr	r2, [pc, #156]	; (800151c <MQSensor_calc+0x124>)
 8001480:	6013      	str	r3, [r2, #0]
	float y = Rs/R0;
 8001482:	4b26      	ldr	r3, [pc, #152]	; (800151c <MQSensor_calc+0x124>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a26      	ldr	r2, [pc, #152]	; (8001520 <MQSensor_calc+0x128>)
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fd37 	bl	8000f00 <__aeabi_fdiv>
 8001492:	4603      	mov	r3, r0
 8001494:	60fb      	str	r3, [r7, #12]
	sensor->ppm = pow(10, (log(y)-0.85)/(-0.56));
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f7fe ffd0 	bl	800043c <__aeabi_f2d>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	f00b f8dc 	bl	800c660 <log>
 80014a8:	a315      	add	r3, pc, #84	; (adr r3, 8001500 <MQSensor_calc+0x108>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	f7fe fe65 	bl	800017c <__aeabi_dsub>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	a313      	add	r3, pc, #76	; (adr r3, 8001508 <MQSensor_calc+0x110>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	f7ff f93e 	bl	8000740 <__aeabi_ddiv>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	f04f 0000 	mov.w	r0, #0
 80014cc:	4915      	ldr	r1, [pc, #84]	; (8001524 <MQSensor_calc+0x12c>)
 80014ce:	f00b f8f9 	bl	800c6c4 <pow>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fadf 	bl	8000a9c <__aeabi_d2uiz>
 80014de:	4602      	mov	r2, r0
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	621a      	str	r2, [r3, #32]

}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bdb0      	pop	{r4, r5, r7, pc}
 80014ec:	f3af 8000 	nop.w
 80014f0:	66666666 	.word	0x66666666
 80014f4:	400a6666 	.word	0x400a6666
 80014f8:	00000000 	.word	0x00000000
 80014fc:	40affe00 	.word	0x40affe00
 8001500:	33333333 	.word	0x33333333
 8001504:	3feb3333 	.word	0x3feb3333
 8001508:	1eb851ec 	.word	0x1eb851ec
 800150c:	bfe1eb85 	.word	0xbfe1eb85
 8001510:	20000004 	.word	0x20000004
 8001514:	40a00000 	.word	0x40a00000
 8001518:	20000368 	.word	0x20000368
 800151c:	200003bc 	.word	0x200003bc
 8001520:	200003b8 	.word	0x200003b8
 8001524:	40240000 	.word	0x40240000

08001528 <AHTSensor_Init>:

void AHTSensor_Init(AHTSensor_Typdef *sensor, I2C_HandleTypeDef *hi2c, uint16_t SensAddress)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af02      	add	r7, sp, #8
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	4613      	mov	r3, r2
 8001534:	80fb      	strh	r3, [r7, #6]
	sensor->SensAddress = SensAddress;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	88fa      	ldrh	r2, [r7, #6]
 800153a:	809a      	strh	r2, [r3, #4]
	sensor->hi2c = hi2c;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	601a      	str	r2, [r3, #0]

	uint8_t cmd[3];
	cmd[0] = 0xA8;
 8001542:	23a8      	movs	r3, #168	; 0xa8
 8001544:	753b      	strb	r3, [r7, #20]
	cmd[1] = 0x00;
 8001546:	2300      	movs	r3, #0
 8001548:	757b      	strb	r3, [r7, #21]
	cmd[2] = 0x00;
 800154a:	2300      	movs	r3, #0
 800154c:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Master_Transmit(sensor->hi2c, SensAddress<<1, cmd, 3, 1000);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6818      	ldr	r0, [r3, #0]
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	b299      	uxth	r1, r3
 8001558:	f107 0214 	add.w	r2, r7, #20
 800155c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2303      	movs	r3, #3
 8001564:	f003 f9e2 	bl	800492c <HAL_I2C_Master_Transmit>
	HAL_Delay(450);
 8001568:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 800156c:	f001 fde4 	bl	8003138 <HAL_Delay>

	cmd[0] = 0xE1;
 8001570:	23e1      	movs	r3, #225	; 0xe1
 8001572:	753b      	strb	r3, [r7, #20]
	cmd[1] = 0x08;
 8001574:	2308      	movs	r3, #8
 8001576:	757b      	strb	r3, [r7, #21]
	cmd[2] = 0x00;
 8001578:	2300      	movs	r3, #0
 800157a:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Master_Transmit(sensor->hi2c, SensAddress<<1, cmd, 3, 1000);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	b299      	uxth	r1, r3
 8001586:	f107 0214 	add.w	r2, r7, #20
 800158a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	2303      	movs	r3, #3
 8001592:	f003 f9cb 	bl	800492c <HAL_I2C_Master_Transmit>
	HAL_Delay(450);
 8001596:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 800159a:	f001 fdcd 	bl	8003138 <HAL_Delay>

}
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <AHTSensor_Read>:

void AHTSensor_Read(AHTSensor_Typdef *sensor)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af02      	add	r7, sp, #8
 80015ae:	6078      	str	r0, [r7, #4]
	uint8_t cmd[3];
	uint8_t buff[6];
	cmd[0] = 0xAC;
 80015b0:	23ac      	movs	r3, #172	; 0xac
 80015b2:	753b      	strb	r3, [r7, #20]
	cmd[1] = 0x08;
 80015b4:	2308      	movs	r3, #8
 80015b6:	757b      	strb	r3, [r7, #21]
	cmd[2] = 0x00;
 80015b8:	2300      	movs	r3, #0
 80015ba:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Master_Transmit(sensor->hi2c, sensor->SensAddress<<1, cmd, 3, 1000);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6818      	ldr	r0, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	889b      	ldrh	r3, [r3, #4]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	b299      	uxth	r1, r3
 80015c8:	f107 0214 	add.w	r2, r7, #20
 80015cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	2303      	movs	r3, #3
 80015d4:	f003 f9aa 	bl	800492c <HAL_I2C_Master_Transmit>
	HAL_Delay(300);
 80015d8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80015dc:	f001 fdac 	bl	8003138 <HAL_Delay>
	HAL_I2C_Master_Receive(sensor->hi2c, sensor->SensAddress<<1, buff, 6, 1000);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6818      	ldr	r0, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	889b      	ldrh	r3, [r3, #4]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	b299      	uxth	r1, r3
 80015ec:	f107 020c 	add.w	r2, r7, #12
 80015f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2306      	movs	r3, #6
 80015f8:	f003 fa96 	bl	8004b28 <HAL_I2C_Master_Receive>
	sensor->humi = (buff[1]<<12 | buff[2]<<4 | (buff[3] & 0xf0) >> 4) * 100.0 / (1 << 20);
 80015fc:	7b7b      	ldrb	r3, [r7, #13]
 80015fe:	031a      	lsls	r2, r3, #12
 8001600:	7bbb      	ldrb	r3, [r7, #14]
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	4313      	orrs	r3, r2
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	0912      	lsrs	r2, r2, #4
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	4313      	orrs	r3, r2
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ff02 	bl	8000418 <__aeabi_i2d>
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <AHTSensor_Read+0xfc>)
 800161a:	f7fe ff67 	bl	80004ec <__aeabi_dmul>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <AHTSensor_Read+0x100>)
 800162c:	f7ff f888 	bl	8000740 <__aeabi_ddiv>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4610      	mov	r0, r2
 8001636:	4619      	mov	r1, r3
 8001638:	f7ff fa50 	bl	8000adc <__aeabi_d2f>
 800163c:	4602      	mov	r2, r0
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60da      	str	r2, [r3, #12]
	sensor->temp = ((buff[3] & 0xf) << 16 | buff[4] << 8 | buff[5]) * 200.0 / (1 << 20) - 55;
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800164a:	7c3b      	ldrb	r3, [r7, #16]
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	4313      	orrs	r3, r2
 8001650:	7c7a      	ldrb	r2, [r7, #17]
 8001652:	4313      	orrs	r3, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe fedf 	bl	8000418 <__aeabi_i2d>
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <AHTSensor_Read+0x104>)
 8001660:	f7fe ff44 	bl	80004ec <__aeabi_dmul>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <AHTSensor_Read+0x100>)
 8001672:	f7ff f865 	bl	8000740 <__aeabi_ddiv>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <AHTSensor_Read+0x108>)
 8001684:	f7fe fd7a 	bl	800017c <__aeabi_dsub>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f7ff fa24 	bl	8000adc <__aeabi_d2f>
 8001694:	4602      	mov	r2, r0
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	609a      	str	r2, [r3, #8]
}
 800169a:	bf00      	nop
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40590000 	.word	0x40590000
 80016a8:	41300000 	.word	0x41300000
 80016ac:	40690000 	.word	0x40690000
 80016b0:	404b8000 	.word	0x404b8000

080016b4 <Flash_Earse>:

MLB_EraseError Flash_Earse(uint32_t address)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
	MLB_EraseError eraseError;
	eraseError.status = HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	763b      	strb	r3, [r7, #24]
	eraseError.pageError = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	767b      	strb	r3, [r7, #25]
 80016c6:	2300      	movs	r3, #0
 80016c8:	76bb      	strb	r3, [r7, #26]
 80016ca:	2300      	movs	r3, #0
 80016cc:	76fb      	strb	r3, [r7, #27]
 80016ce:	2300      	movs	r3, #0
 80016d0:	773b      	strb	r3, [r7, #28]

	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.Banks = FLASH_BANK_1;
 80016d2:	2301      	movs	r3, #1
 80016d4:	60fb      	str	r3, [r7, #12]
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
	EraseInit.PageAddress = address;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	613b      	str	r3, [r7, #16]
	EraseInit.NbPages = 1;
 80016de:	2301      	movs	r3, #1
 80016e0:	617b      	str	r3, [r7, #20]

	eraseError.status = HAL_FLASH_Unlock();
 80016e2:	f002 fc83 	bl	8003fec <HAL_FLASH_Unlock>
 80016e6:	4603      	mov	r3, r0
 80016e8:	763b      	strb	r3, [r7, #24]
	if(eraseError.status)
 80016ea:	7e3b      	ldrb	r3, [r7, #24]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d008      	beq.n	8001702 <Flash_Earse+0x4e>
		return eraseError;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	461a      	mov	r2, r3
 80016f4:	f107 0318 	add.w	r3, r7, #24
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	6010      	str	r0, [r2, #0]
 80016fc:	791b      	ldrb	r3, [r3, #4]
 80016fe:	7113      	strb	r3, [r2, #4]
 8001700:	e02e      	b.n	8001760 <Flash_Earse+0xac>

	eraseError.status = HAL_FLASHEx_Erase(&EraseInit, &eraseError.pageError);
 8001702:	f107 0318 	add.w	r3, r7, #24
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f002 fd54 	bl	80041bc <HAL_FLASHEx_Erase>
 8001714:	4603      	mov	r3, r0
 8001716:	763b      	strb	r3, [r7, #24]
	if(eraseError.status)
 8001718:	7e3b      	ldrb	r3, [r7, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d008      	beq.n	8001730 <Flash_Earse+0x7c>
		return eraseError;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	461a      	mov	r2, r3
 8001722:	f107 0318 	add.w	r3, r7, #24
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	6010      	str	r0, [r2, #0]
 800172a:	791b      	ldrb	r3, [r3, #4]
 800172c:	7113      	strb	r3, [r2, #4]
 800172e:	e017      	b.n	8001760 <Flash_Earse+0xac>

	eraseError.status = HAL_FLASH_Lock();
 8001730:	f002 fc82 	bl	8004038 <HAL_FLASH_Lock>
 8001734:	4603      	mov	r3, r0
 8001736:	763b      	strb	r3, [r7, #24]
	if(eraseError.status)
 8001738:	7e3b      	ldrb	r3, [r7, #24]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d008      	beq.n	8001750 <Flash_Earse+0x9c>
		return eraseError;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	461a      	mov	r2, r3
 8001742:	f107 0318 	add.w	r3, r7, #24
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	6010      	str	r0, [r2, #0]
 800174a:	791b      	ldrb	r3, [r3, #4]
 800174c:	7113      	strb	r3, [r2, #4]
 800174e:	e007      	b.n	8001760 <Flash_Earse+0xac>

	return eraseError;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	461a      	mov	r2, r3
 8001754:	f107 0318 	add.w	r3, r7, #24
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	6010      	str	r0, [r2, #0]
 800175c:	791b      	ldrb	r3, [r3, #4]
 800175e:	7113      	strb	r3, [r2, #4]
}
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	3720      	adds	r7, #32
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <Flash_Write_Array>:

HAL_StatusTypeDef Flash_Write_Array(uint32_t address, uint8_t *arr,  uint16_t len)
{
 8001768:	b5b0      	push	{r4, r5, r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	4613      	mov	r3, r2
 8001774:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef ret = HAL_OK;
 8001776:	2300      	movs	r3, #0
 8001778:	747b      	strb	r3, [r7, #17]
	uint16_t *pt = (uint16_t *)arr;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	617b      	str	r3, [r7, #20]
	ret = HAL_FLASH_Unlock();
 800177e:	f002 fc35 	bl	8003fec <HAL_FLASH_Unlock>
 8001782:	4603      	mov	r3, r0
 8001784:	747b      	strb	r3, [r7, #17]
	if (ret)
 8001786:	7c7b      	ldrb	r3, [r7, #17]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <Flash_Write_Array+0x28>
		return ret;
 800178c:	7c7b      	ldrb	r3, [r7, #17]
 800178e:	e031      	b.n	80017f4 <Flash_Write_Array+0x8c>
	for (uint16_t i = 0; i < (len+1)/2; ++i) {
 8001790:	2300      	movs	r3, #0
 8001792:	827b      	strh	r3, [r7, #18]
 8001794:	e01c      	b.n	80017d0 <Flash_Write_Array+0x68>
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2*i, *pt);
 8001796:	8a7b      	ldrh	r3, [r7, #18]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	461a      	mov	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	18d1      	adds	r1, r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	2200      	movs	r2, #0
 80017a8:	461c      	mov	r4, r3
 80017aa:	4615      	mov	r5, r2
 80017ac:	4622      	mov	r2, r4
 80017ae:	462b      	mov	r3, r5
 80017b0:	2001      	movs	r0, #1
 80017b2:	f002 fbab 	bl	8003f0c <HAL_FLASH_Program>
 80017b6:	4603      	mov	r3, r0
 80017b8:	747b      	strb	r3, [r7, #17]
		if (ret)
 80017ba:	7c7b      	ldrb	r3, [r7, #17]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <Flash_Write_Array+0x5c>
			return ret;
 80017c0:	7c7b      	ldrb	r3, [r7, #17]
 80017c2:	e017      	b.n	80017f4 <Flash_Write_Array+0x8c>
		pt++;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	3302      	adds	r3, #2
 80017c8:	617b      	str	r3, [r7, #20]
	for (uint16_t i = 0; i < (len+1)/2; ++i) {
 80017ca:	8a7b      	ldrh	r3, [r7, #18]
 80017cc:	3301      	adds	r3, #1
 80017ce:	827b      	strh	r3, [r7, #18]
 80017d0:	8a7a      	ldrh	r2, [r7, #18]
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	3301      	adds	r3, #1
 80017d6:	0fd9      	lsrs	r1, r3, #31
 80017d8:	440b      	add	r3, r1
 80017da:	105b      	asrs	r3, r3, #1
 80017dc:	429a      	cmp	r2, r3
 80017de:	dbda      	blt.n	8001796 <Flash_Write_Array+0x2e>
	}
	ret = HAL_FLASH_Lock();
 80017e0:	f002 fc2a 	bl	8004038 <HAL_FLASH_Lock>
 80017e4:	4603      	mov	r3, r0
 80017e6:	747b      	strb	r3, [r7, #17]
	if (ret)
 80017e8:	7c7b      	ldrb	r3, [r7, #17]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <Flash_Write_Array+0x8a>
		return ret;
 80017ee:	7c7b      	ldrb	r3, [r7, #17]
 80017f0:	e000      	b.n	80017f4 <Flash_Write_Array+0x8c>

	return ret;
 80017f2:	7c7b      	ldrb	r3, [r7, #17]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bdb0      	pop	{r4, r5, r7, pc}

080017fc <Flash_Read_Array>:

HAL_StatusTypeDef Flash_Read_Array(uint32_t address, uint8_t *arr,  uint16_t len)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	4613      	mov	r3, r2
 8001808:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef ret = HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	747b      	strb	r3, [r7, #17]
	uint16_t *pt = (uint16_t *)arr;
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	617b      	str	r3, [r7, #20]
	ret = HAL_FLASH_Unlock();
 8001812:	f002 fbeb 	bl	8003fec <HAL_FLASH_Unlock>
 8001816:	4603      	mov	r3, r0
 8001818:	747b      	strb	r3, [r7, #17]
	if (ret)
 800181a:	7c7b      	ldrb	r3, [r7, #17]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <Flash_Read_Array+0x28>
		return ret;
 8001820:	7c7b      	ldrb	r3, [r7, #17]
 8001822:	e027      	b.n	8001874 <Flash_Read_Array+0x78>
	for (uint16_t i = 0; i < (len+1)/2; ++i) {
 8001824:	2300      	movs	r3, #0
 8001826:	827b      	strh	r3, [r7, #18]
 8001828:	e012      	b.n	8001850 <Flash_Read_Array+0x54>
		*pt = *(uint16_t *)(address + 2*i);
 800182a:	8a7b      	ldrh	r3, [r7, #18]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	881a      	ldrh	r2, [r3, #0]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	801a      	strh	r2, [r3, #0]
		if (ret)
 800183a:	7c7b      	ldrb	r3, [r7, #17]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <Flash_Read_Array+0x48>
			return ret;
 8001840:	7c7b      	ldrb	r3, [r7, #17]
 8001842:	e017      	b.n	8001874 <Flash_Read_Array+0x78>
		pt++;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3302      	adds	r3, #2
 8001848:	617b      	str	r3, [r7, #20]
	for (uint16_t i = 0; i < (len+1)/2; ++i) {
 800184a:	8a7b      	ldrh	r3, [r7, #18]
 800184c:	3301      	adds	r3, #1
 800184e:	827b      	strh	r3, [r7, #18]
 8001850:	8a7a      	ldrh	r2, [r7, #18]
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	3301      	adds	r3, #1
 8001856:	0fd9      	lsrs	r1, r3, #31
 8001858:	440b      	add	r3, r1
 800185a:	105b      	asrs	r3, r3, #1
 800185c:	429a      	cmp	r2, r3
 800185e:	dbe4      	blt.n	800182a <Flash_Read_Array+0x2e>
	}
	ret = HAL_FLASH_Lock();
 8001860:	f002 fbea 	bl	8004038 <HAL_FLASH_Lock>
 8001864:	4603      	mov	r3, r0
 8001866:	747b      	strb	r3, [r7, #17]
	if (ret)
 8001868:	7c7b      	ldrb	r3, [r7, #17]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <Flash_Read_Array+0x76>
		return ret;
 800186e:	7c7b      	ldrb	r3, [r7, #17]
 8001870:	e000      	b.n	8001874 <Flash_Read_Array+0x78>
	return ret;
 8001872:	7c7b      	ldrb	r3, [r7, #17]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <Flash_Write_Struct>:

HAL_StatusTypeDef Flash_Write_Struct(uint32_t address, Sensor_Data_Typdef data)
{
 800187c:	b084      	sub	sp, #16
 800187e:	b580      	push	{r7, lr}
 8001880:	b084      	sub	sp, #16
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	f107 001c 	add.w	r0, r7, #28
 800188a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HAL_StatusTypeDef ret = Flash_Write_Array(address, (uint8_t*)&data, sizeof(data));
 800188e:	f107 031c 	add.w	r3, r7, #28
 8001892:	2214      	movs	r2, #20
 8001894:	4619      	mov	r1, r3
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff ff66 	bl	8001768 <Flash_Write_Array>
 800189c:	4603      	mov	r3, r0
 800189e:	73fb      	strb	r3, [r7, #15]
	return ret;
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018ac:	b004      	add	sp, #16
 80018ae:	4770      	bx	lr

080018b0 <Flash_Read_Struct>:

HAL_StatusTypeDef Flash_Read_Struct(uint32_t address, Sensor_Data_Typdef *data)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret = Flash_Read_Array(address, (uint8_t*)data, sizeof(Sensor_Data_Typdef));
 80018ba:	2214      	movs	r2, #20
 80018bc:	6839      	ldr	r1, [r7, #0]
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff ff9c 	bl	80017fc <Flash_Read_Array>
 80018c4:	4603      	mov	r3, r0
 80018c6:	73fb      	strb	r3, [r7, #15]
	return ret;
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <heating_display>:

void heating_display()
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
	if ((HAL_GetTick()-MQSensor.previous_heating_time) < 60000 && MQSensor.is_heating) {
 80018da:	f001 fc23 	bl	8003124 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <heating_display+0x80>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d807      	bhi.n	80018fe <heating_display+0x2a>
 80018ee:	4b19      	ldr	r3, [pc, #100]	; (8001954 <heating_display+0x80>)
 80018f0:	7f1b      	ldrb	r3, [r3, #28]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <heating_display+0x2a>
		stateDevice = MEASURING;
 80018f6:	4b18      	ldr	r3, [pc, #96]	; (8001958 <heating_display+0x84>)
 80018f8:	2203      	movs	r2, #3
 80018fa:	701a      	strb	r2, [r3, #0]
		return;
 80018fc:	e026      	b.n	800194c <heating_display+0x78>
	}
	uint8_t tick = 20 - (HAL_GetTick()-MQSensor.start_heating_time)/1000;
 80018fe:	f001 fc11 	bl	8003124 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <heating_display+0x80>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	4a14      	ldr	r2, [pc, #80]	; (800195c <heating_display+0x88>)
 800190c:	fba2 2303 	umull	r2, r3, r2, r3
 8001910:	099b      	lsrs	r3, r3, #6
 8001912:	b2db      	uxtb	r3, r3
 8001914:	f1c3 0314 	rsb	r3, r3, #20
 8001918:	71fb      	strb	r3, [r7, #7]
	lcd_set_cursor(&hlcd, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	4810      	ldr	r0, [pc, #64]	; (8001960 <heating_display+0x8c>)
 8001920:	f006 f9a8 	bl	8007c74 <lcd_set_cursor>
	lcd_printf(&hlcd, "Heating %2ds", tick);
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	461a      	mov	r2, r3
 8001928:	490e      	ldr	r1, [pc, #56]	; (8001964 <heating_display+0x90>)
 800192a:	480d      	ldr	r0, [pc, #52]	; (8001960 <heating_display+0x8c>)
 800192c:	f006 f9dc 	bl	8007ce8 <lcd_printf>
	if (tick == 255) {
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	2bff      	cmp	r3, #255	; 0xff
 8001934:	d10a      	bne.n	800194c <heating_display+0x78>
		MQSensor.previous_heating_time = HAL_GetTick();
 8001936:	f001 fbf5 	bl	8003124 <HAL_GetTick>
 800193a:	4603      	mov	r3, r0
 800193c:	4a05      	ldr	r2, [pc, #20]	; (8001954 <heating_display+0x80>)
 800193e:	60d3      	str	r3, [r2, #12]
		MQSensor.is_heating = true;
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <heating_display+0x80>)
 8001942:	2201      	movs	r2, #1
 8001944:	771a      	strb	r2, [r3, #28]
		stateDevice = MEASURING;
 8001946:	4b04      	ldr	r3, [pc, #16]	; (8001958 <heating_display+0x84>)
 8001948:	2203      	movs	r2, #3
 800194a:	701a      	strb	r2, [r3, #0]
	}
}
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000368 	.word	0x20000368
 8001958:	2000039c 	.word	0x2000039c
 800195c:	10624dd3 	.word	0x10624dd3
 8001960:	20000340 	.word	0x20000340
 8001964:	0800d860 	.word	0x0800d860

08001968 <measuring_display>:

void measuring_display(bool isCpltMeas)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
	if (isCpltMeas)
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d012      	beq.n	800199e <measuring_display+0x36>
	{
		lcd_clear_display(&hlcd);
 8001978:	4811      	ldr	r0, [pc, #68]	; (80019c0 <measuring_display+0x58>)
 800197a:	f006 f96b 	bl	8007c54 <lcd_clear_display>
		lcd_set_cursor(&hlcd, 0, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2100      	movs	r1, #0
 8001982:	480f      	ldr	r0, [pc, #60]	; (80019c0 <measuring_display+0x58>)
 8001984:	f006 f976 	bl	8007c74 <lcd_set_cursor>
		lcd_printf(&hlcd, "Gas %4ld PPM", MQSensor.ppm);
 8001988:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <measuring_display+0x5c>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	461a      	mov	r2, r3
 800198e:	490e      	ldr	r1, [pc, #56]	; (80019c8 <measuring_display+0x60>)
 8001990:	480b      	ldr	r0, [pc, #44]	; (80019c0 <measuring_display+0x58>)
 8001992:	f006 f9a9 	bl	8007ce8 <lcd_printf>
		stateDevice = IDLE;
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <measuring_display+0x64>)
 8001998:	2201      	movs	r2, #1
 800199a:	701a      	strb	r2, [r3, #0]
	else {
		lcd_clear_display(&hlcd);
		lcd_set_cursor(&hlcd, 0, 0);
		lcd_printf(&hlcd, "Measuring ...");
	}
}
 800199c:	e00b      	b.n	80019b6 <measuring_display+0x4e>
		lcd_clear_display(&hlcd);
 800199e:	4808      	ldr	r0, [pc, #32]	; (80019c0 <measuring_display+0x58>)
 80019a0:	f006 f958 	bl	8007c54 <lcd_clear_display>
		lcd_set_cursor(&hlcd, 0, 0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2100      	movs	r1, #0
 80019a8:	4805      	ldr	r0, [pc, #20]	; (80019c0 <measuring_display+0x58>)
 80019aa:	f006 f963 	bl	8007c74 <lcd_set_cursor>
		lcd_printf(&hlcd, "Measuring ...");
 80019ae:	4908      	ldr	r1, [pc, #32]	; (80019d0 <measuring_display+0x68>)
 80019b0:	4803      	ldr	r0, [pc, #12]	; (80019c0 <measuring_display+0x58>)
 80019b2:	f006 f999 	bl	8007ce8 <lcd_printf>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000340 	.word	0x20000340
 80019c4:	20000368 	.word	0x20000368
 80019c8:	0800d870 	.word	0x0800d870
 80019cc:	2000039c 	.word	0x2000039c
 80019d0:	0800d880 	.word	0x0800d880

080019d4 <idle_display>:

void idle_display()
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
	lcd_set_cursor(&hlcd, 1, 0);
 80019d8:	2200      	movs	r2, #0
 80019da:	2101      	movs	r1, #1
 80019dc:	4804      	ldr	r0, [pc, #16]	; (80019f0 <idle_display+0x1c>)
 80019de:	f006 f949 	bl	8007c74 <lcd_set_cursor>
	lcd_printf(&hlcd, "Press to measure");
 80019e2:	4904      	ldr	r1, [pc, #16]	; (80019f4 <idle_display+0x20>)
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <idle_display+0x1c>)
 80019e6:	f006 f97f 	bl	8007ce8 <lcd_printf>
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000340 	.word	0x20000340
 80019f4:	0800d890 	.word	0x0800d890

080019f8 <store_data>:

void store_data()
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b0b5      	sub	sp, #212	; 0xd4
 80019fc:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &data_w.sTime, RTC_FORMAT_BIN);
 80019fe:	2200      	movs	r2, #0
 8001a00:	4950      	ldr	r1, [pc, #320]	; (8001b44 <store_data+0x14c>)
 8001a02:	4851      	ldr	r0, [pc, #324]	; (8001b48 <store_data+0x150>)
 8001a04:	f004 fd2e 	bl	8006464 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &data_w.sDate, RTC_FORMAT_BIN);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	4950      	ldr	r1, [pc, #320]	; (8001b4c <store_data+0x154>)
 8001a0c:	484e      	ldr	r0, [pc, #312]	; (8001b48 <store_data+0x150>)
 8001a0e:	f004 feb7 	bl	8006780 <HAL_RTC_GetDate>
	data_w.ppm = MQSensor.ppm;
 8001a12:	4b4f      	ldr	r3, [pc, #316]	; (8001b50 <store_data+0x158>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4a4f      	ldr	r2, [pc, #316]	; (8001b54 <store_data+0x15c>)
 8001a18:	6093      	str	r3, [r2, #8]
	data_w.tem = AHTSensor.temp;
 8001a1a:	4b4f      	ldr	r3, [pc, #316]	; (8001b58 <store_data+0x160>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	4a4d      	ldr	r2, [pc, #308]	; (8001b54 <store_data+0x15c>)
 8001a20:	6113      	str	r3, [r2, #16]
	data_w.humi = AHTSensor.humi;
 8001a22:	4b4d      	ldr	r3, [pc, #308]	; (8001b58 <store_data+0x160>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	4a4b      	ldr	r2, [pc, #300]	; (8001b54 <store_data+0x15c>)
 8001a28:	60d3      	str	r3, [r2, #12]
	data_w.flag = 0;
 8001a2a:	4b4a      	ldr	r3, [pc, #296]	; (8001b54 <store_data+0x15c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]

	uint32_t addr = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 8001a30:	2102      	movs	r1, #2
 8001a32:	4845      	ldr	r0, [pc, #276]	; (8001b48 <store_data+0x150>)
 8001a34:	f005 f9fe 	bl	8006e34 <HAL_RTCEx_BKUPRead>
 8001a38:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
	Flash_Read_Struct(addr, &data_r);
 8001a3c:	4947      	ldr	r1, [pc, #284]	; (8001b5c <store_data+0x164>)
 8001a3e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001a42:	f7ff ff35 	bl	80018b0 <Flash_Read_Struct>

	if ((!addr) || (data_r.flag==0)) {
 8001a46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <store_data+0x5e>
 8001a4e:	4b43      	ldr	r3, [pc, #268]	; (8001b5c <store_data+0x164>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d108      	bne.n	8001a68 <store_data+0x70>
		Flash_Earse(ADDRESS_DATA_STORAGE);
 8001a56:	463b      	mov	r3, r7
 8001a58:	4941      	ldr	r1, [pc, #260]	; (8001b60 <store_data+0x168>)
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fe2a 	bl	80016b4 <Flash_Earse>
		addr = ADDRESS_DATA_STORAGE - ((sizeof(Sensor_Data_Typdef)+1)/2)*2;
 8001a60:	4b40      	ldr	r3, [pc, #256]	; (8001b64 <store_data+0x16c>)
 8001a62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001a66:	e053      	b.n	8001b10 <store_data+0x118>
	}
	else if (addr > (0x08000000 + 64*1024 - 2*(((sizeof(Sensor_Data_Typdef)+1)/2)*2)))
 8001a68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a6c:	4a3e      	ldr	r2, [pc, #248]	; (8001b68 <store_data+0x170>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d94e      	bls.n	8001b10 <store_data+0x118>
	{
		Sensor_Data_Typdef data[9];
		for (uint8_t i = 0; i < 9; ++i) {
 8001a72:	2300      	movs	r3, #0
 8001a74:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 8001a78:	e017      	b.n	8001aaa <store_data+0xb2>
			Flash_Read_Struct(addr-9-i, &data[i]);
 8001a7a:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8001a7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	f1a3 0009 	sub.w	r0, r3, #9
 8001a88:	f897 20c3 	ldrb.w	r2, [r7, #195]	; 0xc3
 8001a8c:	f107 010c 	add.w	r1, r7, #12
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f7ff ff08 	bl	80018b0 <Flash_Read_Struct>
		for (uint8_t i = 0; i < 9; ++i) {
 8001aa0:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 8001aaa:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d9e3      	bls.n	8001a7a <store_data+0x82>
		}
		addr = ADDRESS_DATA_STORAGE;
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <store_data+0x168>)
 8001ab4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		Flash_Earse(ADDRESS_DATA_STORAGE);
 8001ab8:	463b      	mov	r3, r7
 8001aba:	4929      	ldr	r1, [pc, #164]	; (8001b60 <store_data+0x168>)
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fdf9 	bl	80016b4 <Flash_Earse>
		for (uint8_t i = 0; i < 9; ++i) {
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
 8001ac8:	e01e      	b.n	8001b08 <store_data+0x110>
			Flash_Write_Struct(addr, data[i]);
 8001aca:	f897 20c2 	ldrb.w	r2, [r7, #194]	; 0xc2
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	33c8      	adds	r3, #200	; 0xc8
 8001ad8:	443b      	add	r3, r7
 8001ada:	3bbc      	subs	r3, #188	; 0xbc
 8001adc:	466c      	mov	r4, sp
 8001ade:	f103 020c 	add.w	r2, r3, #12
 8001ae2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ae6:	e884 0003 	stmia.w	r4, {r0, r1}
 8001aea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aec:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001af0:	f7ff fec4 	bl	800187c <Flash_Write_Struct>
			addr+=((sizeof(Sensor_Data_Typdef)+1)/2)*2;
 8001af4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001af8:	3314      	adds	r3, #20
 8001afa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		for (uint8_t i = 0; i < 9; ++i) {
 8001afe:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8001b02:	3301      	adds	r3, #1
 8001b04:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
 8001b08:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d9dc      	bls.n	8001aca <store_data+0xd2>
		}
	}

	Flash_Write_Struct(addr, data_w);
 8001b10:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <store_data+0x15c>)
 8001b12:	466c      	mov	r4, sp
 8001b14:	f103 020c 	add.w	r2, r3, #12
 8001b18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b1c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b22:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001b26:	f7ff fea9 	bl	800187c <Flash_Write_Struct>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, addr+((sizeof(Sensor_Data_Typdef)+1)/2)*2);
 8001b2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b2e:	3314      	adds	r3, #20
 8001b30:	461a      	mov	r2, r3
 8001b32:	2102      	movs	r1, #2
 8001b34:	4804      	ldr	r0, [pc, #16]	; (8001b48 <store_data+0x150>)
 8001b36:	f005 f963 	bl	8006e00 <HAL_RTCEx_BKUPWrite>

	// store
}
 8001b3a:	bf00      	nop
 8001b3c:	37cc      	adds	r7, #204	; 0xcc
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd90      	pop	{r4, r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200003d5 	.word	0x200003d5
 8001b48:	200002e4 	.word	0x200002e4
 8001b4c:	200003d8 	.word	0x200003d8
 8001b50:	20000368 	.word	0x20000368
 8001b54:	200003d4 	.word	0x200003d4
 8001b58:	2000038c 	.word	0x2000038c
 8001b5c:	200003c0 	.word	0x200003c0
 8001b60:	0800fc00 	.word	0x0800fc00
 8001b64:	0800fbec 	.word	0x0800fbec
 8001b68:	0800ffd8 	.word	0x0800ffd8

08001b6c <warning>:

void warning()
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, (MQSensor.ppm > var_EL) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <warning+0x28>)
 8001b72:	6a1a      	ldr	r2, [r3, #32]
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <warning+0x2c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	bf8c      	ite	hi
 8001b7c:	2301      	movhi	r3, #1
 8001b7e:	2300      	movls	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461a      	mov	r2, r3
 8001b84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b88:	4804      	ldr	r0, [pc, #16]	; (8001b9c <warning+0x30>)
 8001b8a:	f002 fd5a 	bl	8004642 <HAL_GPIO_WritePin>
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000368 	.word	0x20000368
 8001b98:	20000008 	.word	0x20000008
 8001b9c:	40010c00 	.word	0x40010c00

08001ba0 <send_OK>:

void send_OK()
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
	char str[] = "AHT00\n";
 8001ba6:	4a0d      	ldr	r2, [pc, #52]	; (8001bdc <send_OK+0x3c>)
 8001ba8:	463b      	mov	r3, r7
 8001baa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bae:	6018      	str	r0, [r3, #0]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	8019      	strh	r1, [r3, #0]
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	0c0a      	lsrs	r2, r1, #16
 8001bb8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 1000);
 8001bba:	463b      	mov	r3, r7
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fad1 	bl	8000164 <strlen>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	4639      	mov	r1, r7
 8001bc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bcc:	4804      	ldr	r0, [pc, #16]	; (8001be0 <send_OK+0x40>)
 8001bce:	f005 f99d 	bl	8006f0c <HAL_UART_Transmit>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	0800d8a4 	.word	0x0800d8a4
 8001be0:	200002f8 	.word	0x200002f8

08001be4 <send_allData>:

void send_allData()
{
 8001be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001be8:	b097      	sub	sp, #92	; 0x5c
 8001bea:	af0a      	add	r7, sp, #40	; 0x28
	uint32_t addr = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 8001bec:	2102      	movs	r1, #2
 8001bee:	4839      	ldr	r0, [pc, #228]	; (8001cd4 <send_allData+0xf0>)
 8001bf0:	f005 f920 	bl	8006e34 <HAL_RTCEx_BKUPRead>
 8001bf4:	62b8      	str	r0, [r7, #40]	; 0x28
	if (addr==0 || addr==ADDRESS_DATA_STORAGE) {
 8001bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <send_allData+0x20>
 8001bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfe:	4a36      	ldr	r2, [pc, #216]	; (8001cd8 <send_allData+0xf4>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d106      	bne.n	8001c12 <send_allData+0x2e>
		sendUart(&huart1, "{}");
 8001c04:	4935      	ldr	r1, [pc, #212]	; (8001cdc <send_allData+0xf8>)
 8001c06:	4836      	ldr	r0, [pc, #216]	; (8001ce0 <send_allData+0xfc>)
 8001c08:	f000 f86e 	bl	8001ce8 <sendUart>
		send_OK();
 8001c0c:	f7ff ffc8 	bl	8001ba0 <send_OK>
		return;
 8001c10:	e05c      	b.n	8001ccc <send_allData+0xe8>
	}
	uint32_t rate = ((sizeof(Sensor_Data_Typdef)+1)/2)*2;
 8001c12:	2314      	movs	r3, #20
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24

	Sensor_Data_Typdef data_n;
	for (uint8_t i = 0; i < 10; ++i) {
 8001c16:	2300      	movs	r3, #0
 8001c18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001c1c:	e04d      	b.n	8001cba <send_allData+0xd6>
		if ((addr-(i+1)*rate + 0x08000000) < ADDRESS_DATA_STORAGE) break;
 8001c1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c22:	3301      	adds	r3, #1
 8001c24:	461a      	mov	r2, r3
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	fb02 f303 	mul.w	r3, r2, r3
 8001c2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001c34:	4a28      	ldr	r2, [pc, #160]	; (8001cd8 <send_allData+0xf4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d344      	bcc.n	8001cc4 <send_allData+0xe0>
		Flash_Read_Struct(addr-(i+1)*rate, &data_n);
 8001c3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c3e:	3301      	adds	r3, #1
 8001c40:	461a      	mov	r2, r3
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	fb02 f303 	mul.w	r3, r2, r3
 8001c48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	f107 0210 	add.w	r2, r7, #16
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fe2c 	bl	80018b0 <Flash_Read_Struct>
		sendUart(&huart1, "{\"date\":\"20%02d-%02d-%02d\",\"time\":\"%02d:%02d:%02d\",\"ppm\":%d,\"humi\":%.2f,\"tem\":%.2f}",
				data_n.sDate.Year, data_n.sDate.Month, data_n.sDate.Date,
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
		sendUart(&huart1, "{\"date\":\"20%02d-%02d-%02d\",\"time\":\"%02d:%02d:%02d\",\"ppm\":%d,\"humi\":%.2f,\"tem\":%.2f}",
 8001c5a:	4698      	mov	r8, r3
				data_n.sDate.Year, data_n.sDate.Month, data_n.sDate.Date,
 8001c5c:	7d7b      	ldrb	r3, [r7, #21]
		sendUart(&huart1, "{\"date\":\"20%02d-%02d-%02d\",\"time\":\"%02d:%02d:%02d\",\"ppm\":%d,\"humi\":%.2f,\"tem\":%.2f}",
 8001c5e:	4699      	mov	r9, r3
				data_n.sDate.Year, data_n.sDate.Month, data_n.sDate.Date,
 8001c60:	7dbb      	ldrb	r3, [r7, #22]
		sendUart(&huart1, "{\"date\":\"20%02d-%02d-%02d\",\"time\":\"%02d:%02d:%02d\",\"ppm\":%d,\"humi\":%.2f,\"tem\":%.2f}",
 8001c62:	60fb      	str	r3, [r7, #12]
				data_n.sTime.Hours, data_n.sTime.Minutes, data_n.sTime.Seconds,
 8001c64:	7c7b      	ldrb	r3, [r7, #17]
		sendUart(&huart1, "{\"date\":\"20%02d-%02d-%02d\",\"time\":\"%02d:%02d:%02d\",\"ppm\":%d,\"humi\":%.2f,\"tem\":%.2f}",
 8001c66:	60bb      	str	r3, [r7, #8]
				data_n.sTime.Hours, data_n.sTime.Minutes, data_n.sTime.Seconds,
 8001c68:	7cbb      	ldrb	r3, [r7, #18]
		sendUart(&huart1, "{\"date\":\"20%02d-%02d-%02d\",\"time\":\"%02d:%02d:%02d\",\"ppm\":%d,\"humi\":%.2f,\"tem\":%.2f}",
 8001c6a:	607b      	str	r3, [r7, #4]
				data_n.sTime.Hours, data_n.sTime.Minutes, data_n.sTime.Seconds,
 8001c6c:	7cfb      	ldrb	r3, [r7, #19]
		sendUart(&huart1, "{\"date\":\"20%02d-%02d-%02d\",\"time\":\"%02d:%02d:%02d\",\"ppm\":%d,\"humi\":%.2f,\"tem\":%.2f}",
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	69be      	ldr	r6, [r7, #24]
				data_n.ppm, data_n.humi, data_n.tem);
 8001c72:	69fb      	ldr	r3, [r7, #28]
		sendUart(&huart1, "{\"date\":\"20%02d-%02d-%02d\",\"time\":\"%02d:%02d:%02d\",\"ppm\":%d,\"humi\":%.2f,\"tem\":%.2f}",
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fbe1 	bl	800043c <__aeabi_f2d>
 8001c7a:	4604      	mov	r4, r0
 8001c7c:	460d      	mov	r5, r1
				data_n.ppm, data_n.humi, data_n.tem);
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
		sendUart(&huart1, "{\"date\":\"20%02d-%02d-%02d\",\"time\":\"%02d:%02d:%02d\",\"ppm\":%d,\"humi\":%.2f,\"tem\":%.2f}",
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fbdb 	bl	800043c <__aeabi_f2d>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001c8e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001c92:	9604      	str	r6, [sp, #16]
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	9203      	str	r2, [sp, #12]
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	9202      	str	r2, [sp, #8]
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	9201      	str	r2, [sp, #4]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	464b      	mov	r3, r9
 8001ca6:	4642      	mov	r2, r8
 8001ca8:	490e      	ldr	r1, [pc, #56]	; (8001ce4 <send_allData+0x100>)
 8001caa:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <send_allData+0xfc>)
 8001cac:	f000 f81c 	bl	8001ce8 <sendUart>
	for (uint8_t i = 0; i < 10; ++i) {
 8001cb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001cba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cbe:	2b09      	cmp	r3, #9
 8001cc0:	d9ad      	bls.n	8001c1e <send_allData+0x3a>
 8001cc2:	e000      	b.n	8001cc6 <send_allData+0xe2>
		if ((addr-(i+1)*rate + 0x08000000) < ADDRESS_DATA_STORAGE) break;
 8001cc4:	bf00      	nop
	}
	send_OK();
 8001cc6:	f7ff ff6b 	bl	8001ba0 <send_OK>
	return;
 8001cca:	bf00      	nop
}
 8001ccc:	3734      	adds	r7, #52	; 0x34
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cd4:	200002e4 	.word	0x200002e4
 8001cd8:	0800fc00 	.word	0x0800fc00
 8001cdc:	0800d8ac 	.word	0x0800d8ac
 8001ce0:	200002f8 	.word	0x200002f8
 8001ce4:	0800d8b0 	.word	0x0800d8b0

08001ce8 <sendUart>:

HAL_StatusTypeDef sendUart(UART_HandleTypeDef *huart, const char* str, ...)
{
 8001ce8:	b40e      	push	{r1, r2, r3}
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b09d      	sub	sp, #116	; 0x74
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
	char pData[100];
	va_list args;
	va_start(args, str);
 8001cf2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001cf6:	60bb      	str	r3, [r7, #8]
	vsprintf(pData, str, args);
 8001cf8:	f107 030c 	add.w	r3, r7, #12
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001d00:	4618      	mov	r0, r3
 8001d02:	f007 f8a3 	bl	8008e4c <vsiprintf>

	va_end(args);
	return HAL_UART_Transmit(huart, (uint8_t *)pData, strlen((char*)pData), 300);
 8001d06:	f107 030c 	add.w	r3, r7, #12
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fa2a 	bl	8000164 <strlen>
 8001d10:	4603      	mov	r3, r0
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	f107 010c 	add.w	r1, r7, #12
 8001d18:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f005 f8f5 	bl	8006f0c <HAL_UART_Transmit>
 8001d22:	4603      	mov	r3, r0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3774      	adds	r7, #116	; 0x74
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d2e:	b003      	add	sp, #12
 8001d30:	4770      	bx	lr

08001d32 <printDebug>:

HAL_StatusTypeDef printDebug(UART_HandleTypeDef *huart, char *pData, const char* str, ...)
{
 8001d32:	b40c      	push	{r2, r3}
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
	 va_list args;
	 va_start(args, str);
 8001d3e:	f107 031c 	add.w	r3, r7, #28
 8001d42:	60fb      	str	r3, [r7, #12]
	 vsprintf(pData, str, args);
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	69b9      	ldr	r1, [r7, #24]
 8001d48:	6838      	ldr	r0, [r7, #0]
 8001d4a:	f007 f87f 	bl	8008e4c <vsiprintf>

	 va_end(args);
	 return HAL_UART_Transmit(huart, (uint8_t *)pData, strlen((char*)pData), 1000);
 8001d4e:	6838      	ldr	r0, [r7, #0]
 8001d50:	f7fe fa08 	bl	8000164 <strlen>
 8001d54:	4603      	mov	r3, r0
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d5c:	6839      	ldr	r1, [r7, #0]
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f005 f8d4 	bl	8006f0c <HAL_UART_Transmit>
 8001d64:	4603      	mov	r3, r0

}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d70:	b002      	add	sp, #8
 8001d72:	4770      	bx	lr

08001d74 <send_test>:

HAL_StatusTypeDef send_test()
{
 8001d74:	b5b0      	push	{r4, r5, r7, lr}
 8001d76:	b096      	sub	sp, #88	; 0x58
 8001d78:	af04      	add	r7, sp, #16
#ifdef SEND_TEST
	RTC_TimeTypeDef sTime = {0};
 8001d7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d7e:	2100      	movs	r1, #0
 8001d80:	460a      	mov	r2, r1
 8001d82:	801a      	strh	r2, [r3, #0]
 8001d84:	460a      	mov	r2, r1
 8001d86:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef sDay = {0};
 8001d88:	2300      	movs	r3, #0
 8001d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t tx_buff[50];
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001d8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d90:	2200      	movs	r2, #0
 8001d92:	4619      	mov	r1, r3
 8001d94:	48b9      	ldr	r0, [pc, #740]	; (800207c <send_test+0x308>)
 8001d96:	f004 fb65 	bl	8006464 <HAL_RTC_GetTime>
	sprintf((char *)tx_buff, "%d:%d:%d\n", sTime.Hours , sTime.Minutes, sTime.Seconds);
 8001d9a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001d9e:	461a      	mov	r2, r3
 8001da0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001da4:	4619      	mov	r1, r3
 8001da6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001daa:	f107 0008 	add.w	r0, r7, #8
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	460b      	mov	r3, r1
 8001db2:	49b3      	ldr	r1, [pc, #716]	; (8002080 <send_test+0x30c>)
 8001db4:	f006 ffd0 	bl	8008d58 <siprintf>
	ret = HAL_UART_Transmit(&huart1, tx_buff, strlen((char*)tx_buff), 1000);
 8001db8:	f107 0308 	add.w	r3, r7, #8
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe f9d1 	bl	8000164 <strlen>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	f107 0108 	add.w	r1, r7, #8
 8001dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dce:	48ad      	ldr	r0, [pc, #692]	; (8002084 <send_test+0x310>)
 8001dd0:	f005 f89c 	bl	8006f0c <HAL_UART_Transmit>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4bab      	ldr	r3, [pc, #684]	; (8002088 <send_test+0x314>)
 8001dda:	701a      	strb	r2, [r3, #0]

	HAL_RTC_GetDate(&hrtc, &sDay, RTC_FORMAT_BIN);
 8001ddc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001de0:	2200      	movs	r2, #0
 8001de2:	4619      	mov	r1, r3
 8001de4:	48a5      	ldr	r0, [pc, #660]	; (800207c <send_test+0x308>)
 8001de6:	f004 fccb 	bl	8006780 <HAL_RTC_GetDate>
	sprintf((char *)tx_buff, "%d-%d/%d/%d\n", sDay.WeekDay , sDay.Date, sDay.Month, sDay.Year);
 8001dea:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001dee:	4619      	mov	r1, r3
 8001df0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001df4:	461c      	mov	r4, r3
 8001df6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001dfa:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001dfe:	f107 0008 	add.w	r0, r7, #8
 8001e02:	9201      	str	r2, [sp, #4]
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	4623      	mov	r3, r4
 8001e08:	460a      	mov	r2, r1
 8001e0a:	49a0      	ldr	r1, [pc, #640]	; (800208c <send_test+0x318>)
 8001e0c:	f006 ffa4 	bl	8008d58 <siprintf>
	ret = HAL_UART_Transmit(&huart1, tx_buff, strlen((char*)tx_buff), 1000);
 8001e10:	f107 0308 	add.w	r3, r7, #8
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe f9a5 	bl	8000164 <strlen>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	f107 0108 	add.w	r1, r7, #8
 8001e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e26:	4897      	ldr	r0, [pc, #604]	; (8002084 <send_test+0x310>)
 8001e28:	f005 f870 	bl	8006f0c <HAL_UART_Transmit>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4b95      	ldr	r3, [pc, #596]	; (8002088 <send_test+0x314>)
 8001e32:	701a      	strb	r2, [r3, #0]

	uint32_t check = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 8001e34:	2102      	movs	r1, #2
 8001e36:	4891      	ldr	r0, [pc, #580]	; (800207c <send_test+0x308>)
 8001e38:	f004 fffc 	bl	8006e34 <HAL_RTCEx_BKUPRead>
 8001e3c:	6478      	str	r0, [r7, #68]	; 0x44
	sprintf((char *)tx_buff, "RTC_BKP_DR2=%2ld\n", check);
 8001e3e:	f107 0308 	add.w	r3, r7, #8
 8001e42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e44:	4992      	ldr	r1, [pc, #584]	; (8002090 <send_test+0x31c>)
 8001e46:	4618      	mov	r0, r3
 8001e48:	f006 ff86 	bl	8008d58 <siprintf>
	ret = HAL_UART_Transmit(&huart1, tx_buff, strlen((char*)tx_buff), 1000);
 8001e4c:	f107 0308 	add.w	r3, r7, #8
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe f987 	bl	8000164 <strlen>
 8001e56:	4603      	mov	r3, r0
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	f107 0108 	add.w	r1, r7, #8
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	4888      	ldr	r0, [pc, #544]	; (8002084 <send_test+0x310>)
 8001e64:	f005 f852 	bl	8006f0c <HAL_UART_Transmit>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	4b86      	ldr	r3, [pc, #536]	; (8002088 <send_test+0x314>)
 8001e6e:	701a      	strb	r2, [r3, #0]
		sprintf((char *)tx_buff, "%d\n", arr_r[i]);
		ret = HAL_UART_Transmit(&huart1, tx_buff, strlen((char*)tx_buff), 100);
	}
	*/

	data_w.flag = 0;
 8001e70:	4b88      	ldr	r3, [pc, #544]	; (8002094 <send_test+0x320>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]
	data_w.sDate = sDay;
 8001e76:	4a87      	ldr	r2, [pc, #540]	; (8002094 <send_test+0x320>)
 8001e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e7a:	6053      	str	r3, [r2, #4]
	data_w.sTime = sTime;
 8001e7c:	4b85      	ldr	r3, [pc, #532]	; (8002094 <send_test+0x320>)
 8001e7e:	3301      	adds	r3, #1
 8001e80:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001e84:	8811      	ldrh	r1, [r2, #0]
 8001e86:	7892      	ldrb	r2, [r2, #2]
 8001e88:	8019      	strh	r1, [r3, #0]
 8001e8a:	709a      	strb	r2, [r3, #2]
	data_w.ppm = MQSensor.ppm;
 8001e8c:	4b82      	ldr	r3, [pc, #520]	; (8002098 <send_test+0x324>)
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	4a80      	ldr	r2, [pc, #512]	; (8002094 <send_test+0x320>)
 8001e92:	6093      	str	r3, [r2, #8]
	sprintf((char *)tx_buff, "Address data_w=%ld\nSzie data_w=%d\n", (uint32_t)&data_w, sizeof(data_w));
 8001e94:	4a7f      	ldr	r2, [pc, #508]	; (8002094 <send_test+0x320>)
 8001e96:	f107 0008 	add.w	r0, r7, #8
 8001e9a:	2314      	movs	r3, #20
 8001e9c:	497f      	ldr	r1, [pc, #508]	; (800209c <send_test+0x328>)
 8001e9e:	f006 ff5b 	bl	8008d58 <siprintf>
	ret = HAL_UART_Transmit(&huart1, tx_buff, strlen((char*)tx_buff), 1000);
 8001ea2:	f107 0308 	add.w	r3, r7, #8
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe f95c 	bl	8000164 <strlen>
 8001eac:	4603      	mov	r3, r0
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	f107 0108 	add.w	r1, r7, #8
 8001eb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb8:	4872      	ldr	r0, [pc, #456]	; (8002084 <send_test+0x310>)
 8001eba:	f005 f827 	bl	8006f0c <HAL_UART_Transmit>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b71      	ldr	r3, [pc, #452]	; (8002088 <send_test+0x314>)
 8001ec4:	701a      	strb	r2, [r3, #0]

	ret = Flash_Read_Struct(check+((sizeof(Sensor_Data_Typdef)+1)/2)*2, &data_r);
 8001ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ec8:	3314      	adds	r3, #20
 8001eca:	4975      	ldr	r1, [pc, #468]	; (80020a0 <send_test+0x32c>)
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fcef 	bl	80018b0 <Flash_Read_Struct>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b6c      	ldr	r3, [pc, #432]	; (8002088 <send_test+0x314>)
 8001ed8:	701a      	strb	r2, [r3, #0]
	if ((!check) || (data_r.flag==0)) {
 8001eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <send_test+0x174>
 8001ee0:	4b6f      	ldr	r3, [pc, #444]	; (80020a0 <send_test+0x32c>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d106      	bne.n	8001ef6 <send_test+0x182>
		Flash_Earse(ADDRESS_DATA_STORAGE);
 8001ee8:	463b      	mov	r3, r7
 8001eea:	496e      	ldr	r1, [pc, #440]	; (80020a4 <send_test+0x330>)
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fbe1 	bl	80016b4 <Flash_Earse>
		check = ADDRESS_DATA_STORAGE - ((sizeof(Sensor_Data_Typdef)+1)/2)*2;
 8001ef2:	4b6d      	ldr	r3, [pc, #436]	; (80020a8 <send_test+0x334>)
 8001ef4:	647b      	str	r3, [r7, #68]	; 0x44
	}

//	sprintf((char *)tx_buff, "data_r.flag=%d\n!data_r.flag=%d\n", data_r.flag, !data_r.flag);
//	ret = HAL_UART_Transmit(&huart1, tx_buff, strlen((char*)tx_buff), 1000);

	ret = Flash_Write_Struct(check+((sizeof(Sensor_Data_Typdef)+1)/2)*2, data_w);
 8001ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ef8:	f103 0414 	add.w	r4, r3, #20
 8001efc:	4b65      	ldr	r3, [pc, #404]	; (8002094 <send_test+0x320>)
 8001efe:	466d      	mov	r5, sp
 8001f00:	f103 020c 	add.w	r2, r3, #12
 8001f04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f08:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f7ff fcb4 	bl	800187c <Flash_Write_Struct>
 8001f14:	4603      	mov	r3, r0
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b5b      	ldr	r3, [pc, #364]	; (8002088 <send_test+0x314>)
 8001f1a:	701a      	strb	r2, [r3, #0]
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, check+((sizeof(Sensor_Data_Typdef)+1)/2)*2);
 8001f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f1e:	3314      	adds	r3, #20
 8001f20:	461a      	mov	r2, r3
 8001f22:	2102      	movs	r1, #2
 8001f24:	4855      	ldr	r0, [pc, #340]	; (800207c <send_test+0x308>)
 8001f26:	f004 ff6b 	bl	8006e00 <HAL_RTCEx_BKUPWrite>

	check = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 8001f2a:	2102      	movs	r1, #2
 8001f2c:	4853      	ldr	r0, [pc, #332]	; (800207c <send_test+0x308>)
 8001f2e:	f004 ff81 	bl	8006e34 <HAL_RTCEx_BKUPRead>
 8001f32:	6478      	str	r0, [r7, #68]	; 0x44
	sprintf((char *)tx_buff, "RTC_BKP_DR2=%2ld\n", check);
 8001f34:	f107 0308 	add.w	r3, r7, #8
 8001f38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f3a:	4955      	ldr	r1, [pc, #340]	; (8002090 <send_test+0x31c>)
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f006 ff0b 	bl	8008d58 <siprintf>
	ret = HAL_UART_Transmit(&huart1, tx_buff, strlen((char*)tx_buff), 1000);
 8001f42:	f107 0308 	add.w	r3, r7, #8
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe f90c 	bl	8000164 <strlen>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	f107 0108 	add.w	r1, r7, #8
 8001f54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f58:	484a      	ldr	r0, [pc, #296]	; (8002084 <send_test+0x310>)
 8001f5a:	f004 ffd7 	bl	8006f0c <HAL_UART_Transmit>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b49      	ldr	r3, [pc, #292]	; (8002088 <send_test+0x314>)
 8001f64:	701a      	strb	r2, [r3, #0]

	ret = Flash_Read_Struct(check, &data_r);
 8001f66:	494e      	ldr	r1, [pc, #312]	; (80020a0 <send_test+0x32c>)
 8001f68:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001f6a:	f7ff fca1 	bl	80018b0 <Flash_Read_Struct>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b45      	ldr	r3, [pc, #276]	; (8002088 <send_test+0x314>)
 8001f74:	701a      	strb	r2, [r3, #0]
	sprintf((char *)tx_buff, "Time=%d:%d:%d\n", data_r.sTime.Hours , data_r.sTime.Minutes, data_r.sTime.Seconds);
 8001f76:	4b4a      	ldr	r3, [pc, #296]	; (80020a0 <send_test+0x32c>)
 8001f78:	785b      	ldrb	r3, [r3, #1]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4b48      	ldr	r3, [pc, #288]	; (80020a0 <send_test+0x32c>)
 8001f7e:	789b      	ldrb	r3, [r3, #2]
 8001f80:	4619      	mov	r1, r3
 8001f82:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <send_test+0x32c>)
 8001f84:	78db      	ldrb	r3, [r3, #3]
 8001f86:	f107 0008 	add.w	r0, r7, #8
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4947      	ldr	r1, [pc, #284]	; (80020ac <send_test+0x338>)
 8001f90:	f006 fee2 	bl	8008d58 <siprintf>
	ret = HAL_UART_Transmit(&huart1, tx_buff, strlen((char*)tx_buff), 1000);
 8001f94:	f107 0308 	add.w	r3, r7, #8
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe f8e3 	bl	8000164 <strlen>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	f107 0108 	add.w	r1, r7, #8
 8001fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001faa:	4836      	ldr	r0, [pc, #216]	; (8002084 <send_test+0x310>)
 8001fac:	f004 ffae 	bl	8006f0c <HAL_UART_Transmit>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4b34      	ldr	r3, [pc, #208]	; (8002088 <send_test+0x314>)
 8001fb6:	701a      	strb	r2, [r3, #0]
	sprintf((char *)tx_buff, "Date=%d-%d/%d/%d\n", data_r.sDate.WeekDay , data_r.sDate.Date, data_r.sDate.Month, data_r.sDate.Year);
 8001fb8:	4b39      	ldr	r3, [pc, #228]	; (80020a0 <send_test+0x32c>)
 8001fba:	791b      	ldrb	r3, [r3, #4]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <send_test+0x32c>)
 8001fc0:	799b      	ldrb	r3, [r3, #6]
 8001fc2:	461c      	mov	r4, r3
 8001fc4:	4b36      	ldr	r3, [pc, #216]	; (80020a0 <send_test+0x32c>)
 8001fc6:	795b      	ldrb	r3, [r3, #5]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <send_test+0x32c>)
 8001fcc:	79db      	ldrb	r3, [r3, #7]
 8001fce:	f107 0008 	add.w	r0, r7, #8
 8001fd2:	9301      	str	r3, [sp, #4]
 8001fd4:	9200      	str	r2, [sp, #0]
 8001fd6:	4623      	mov	r3, r4
 8001fd8:	460a      	mov	r2, r1
 8001fda:	4935      	ldr	r1, [pc, #212]	; (80020b0 <send_test+0x33c>)
 8001fdc:	f006 febc 	bl	8008d58 <siprintf>
	ret = HAL_UART_Transmit(&huart1, tx_buff, strlen((char*)tx_buff), 1000);
 8001fe0:	f107 0308 	add.w	r3, r7, #8
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe f8bd 	bl	8000164 <strlen>
 8001fea:	4603      	mov	r3, r0
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	f107 0108 	add.w	r1, r7, #8
 8001ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff6:	4823      	ldr	r0, [pc, #140]	; (8002084 <send_test+0x310>)
 8001ff8:	f004 ff88 	bl	8006f0c <HAL_UART_Transmit>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b21      	ldr	r3, [pc, #132]	; (8002088 <send_test+0x314>)
 8002002:	701a      	strb	r2, [r3, #0]
	sprintf((char *)tx_buff, "PPM=%ld\n", data_r.ppm);
 8002004:	4b26      	ldr	r3, [pc, #152]	; (80020a0 <send_test+0x32c>)
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	f107 0308 	add.w	r3, r7, #8
 800200c:	4929      	ldr	r1, [pc, #164]	; (80020b4 <send_test+0x340>)
 800200e:	4618      	mov	r0, r3
 8002010:	f006 fea2 	bl	8008d58 <siprintf>
	ret = HAL_UART_Transmit(&huart1, tx_buff, strlen((char*)tx_buff), 1000);
 8002014:	f107 0308 	add.w	r3, r7, #8
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe f8a3 	bl	8000164 <strlen>
 800201e:	4603      	mov	r3, r0
 8002020:	b29a      	uxth	r2, r3
 8002022:	f107 0108 	add.w	r1, r7, #8
 8002026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800202a:	4816      	ldr	r0, [pc, #88]	; (8002084 <send_test+0x310>)
 800202c:	f004 ff6e 	bl	8006f0c <HAL_UART_Transmit>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	4b14      	ldr	r3, [pc, #80]	; (8002088 <send_test+0x314>)
 8002036:	701a      	strb	r2, [r3, #0]

	AHTSensor_Read(&AHTSensor); // AHTSensor.humi
 8002038:	481f      	ldr	r0, [pc, #124]	; (80020b8 <send_test+0x344>)
 800203a:	f7ff fab5 	bl	80015a8 <AHTSensor_Read>
//	sprintf((char *)tx_buff, "AHT: humi=%.2f temp=%.2f\n", AHTSensor.humi, AHTSensor.temp);
	printDebug(&huart1, (char *)tx_buff, "AHT: humi=%.2f temp=%.2f\n", AHTSensor.humi, AHTSensor.temp);
 800203e:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <send_test+0x344>)
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe f9fa 	bl	800043c <__aeabi_f2d>
 8002048:	4604      	mov	r4, r0
 800204a:	460d      	mov	r5, r1
 800204c:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <send_test+0x344>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe f9f3 	bl	800043c <__aeabi_f2d>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	f107 0108 	add.w	r1, r7, #8
 800205e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002062:	e9cd 4500 	strd	r4, r5, [sp]
 8002066:	4a15      	ldr	r2, [pc, #84]	; (80020bc <send_test+0x348>)
 8002068:	4806      	ldr	r0, [pc, #24]	; (8002084 <send_test+0x310>)
 800206a:	f7ff fe62 	bl	8001d32 <printDebug>

	return ret;
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <send_test+0x314>)
 8002070:	781b      	ldrb	r3, [r3, #0]
#endif /* SEND_TEST */
}
 8002072:	4618      	mov	r0, r3
 8002074:	3748      	adds	r7, #72	; 0x48
 8002076:	46bd      	mov	sp, r7
 8002078:	bdb0      	pop	{r4, r5, r7, pc}
 800207a:	bf00      	nop
 800207c:	200002e4 	.word	0x200002e4
 8002080:	0800d904 	.word	0x0800d904
 8002084:	200002f8 	.word	0x200002f8
 8002088:	200003b5 	.word	0x200003b5
 800208c:	0800d910 	.word	0x0800d910
 8002090:	0800d920 	.word	0x0800d920
 8002094:	200003d4 	.word	0x200003d4
 8002098:	20000368 	.word	0x20000368
 800209c:	0800d934 	.word	0x0800d934
 80020a0:	200003c0 	.word	0x200003c0
 80020a4:	0800fc00 	.word	0x0800fc00
 80020a8:	0800fbec 	.word	0x0800fbec
 80020ac:	0800d958 	.word	0x0800d958
 80020b0:	0800d968 	.word	0x0800d968
 80020b4:	0800d97c 	.word	0x0800d97c
 80020b8:	2000038c 	.word	0x2000038c
 80020bc:	0800d988 	.word	0x0800d988

080020c0 <setTime>:

HAL_StatusTypeDef setTime(RTC_HandleTypeDef *hrtc, char* str)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef sTime = {0};
 80020ca:	f107 0308 	add.w	r3, r7, #8
 80020ce:	2100      	movs	r1, #0
 80020d0:	460a      	mov	r2, r1
 80020d2:	801a      	strh	r2, [r3, #0]
 80020d4:	460a      	mov	r2, r1
 80020d6:	709a      	strb	r2, [r3, #2]
	char* token = strtok(str, " ");
 80020d8:	4916      	ldr	r1, [pc, #88]	; (8002134 <setTime+0x74>)
 80020da:	6838      	ldr	r0, [r7, #0]
 80020dc:	f006 fec8 	bl	8008e70 <strtok>
 80020e0:	60f8      	str	r0, [r7, #12]
	sTime.Hours = atoi(token);
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f005 fe7b 	bl	8007dde <atoi>
 80020e8:	4603      	mov	r3, r0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	723b      	strb	r3, [r7, #8]
	token = strtok(NULL, " ");
 80020ee:	4911      	ldr	r1, [pc, #68]	; (8002134 <setTime+0x74>)
 80020f0:	2000      	movs	r0, #0
 80020f2:	f006 febd 	bl	8008e70 <strtok>
 80020f6:	60f8      	str	r0, [r7, #12]
	sTime.Minutes = atoi(token);
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f005 fe70 	bl	8007dde <atoi>
 80020fe:	4603      	mov	r3, r0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	727b      	strb	r3, [r7, #9]
	token = strtok(NULL, " ");
 8002104:	490b      	ldr	r1, [pc, #44]	; (8002134 <setTime+0x74>)
 8002106:	2000      	movs	r0, #0
 8002108:	f006 feb2 	bl	8008e70 <strtok>
 800210c:	60f8      	str	r0, [r7, #12]
	sTime.Seconds = atoi(token);
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f005 fe65 	bl	8007dde <atoi>
 8002114:	4603      	mov	r3, r0
 8002116:	b2db      	uxtb	r3, r3
 8002118:	72bb      	strb	r3, [r7, #10]

	return HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 800211a:	f107 0308 	add.w	r3, r7, #8
 800211e:	2200      	movs	r2, #0
 8002120:	4619      	mov	r1, r3
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f004 f906 	bl	8006334 <HAL_RTC_SetTime>
 8002128:	4603      	mov	r3, r0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	0800d9a4 	.word	0x0800d9a4

08002138 <setDate>:

HAL_StatusTypeDef setDate(RTC_HandleTypeDef *hrtc, char* str)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
	RTC_DateTypeDef DateToUpdate = {0};
 8002142:	2300      	movs	r3, #0
 8002144:	60bb      	str	r3, [r7, #8]
	char* token = strtok(str, " ");
 8002146:	4916      	ldr	r1, [pc, #88]	; (80021a0 <setDate+0x68>)
 8002148:	6838      	ldr	r0, [r7, #0]
 800214a:	f006 fe91 	bl	8008e70 <strtok>
 800214e:	60f8      	str	r0, [r7, #12]
	DateToUpdate.Year = atoi(token);
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f005 fe44 	bl	8007dde <atoi>
 8002156:	4603      	mov	r3, r0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	72fb      	strb	r3, [r7, #11]
	token = strtok(NULL, " ");
 800215c:	4910      	ldr	r1, [pc, #64]	; (80021a0 <setDate+0x68>)
 800215e:	2000      	movs	r0, #0
 8002160:	f006 fe86 	bl	8008e70 <strtok>
 8002164:	60f8      	str	r0, [r7, #12]
	DateToUpdate.Month = atoi(token);
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f005 fe39 	bl	8007dde <atoi>
 800216c:	4603      	mov	r3, r0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	727b      	strb	r3, [r7, #9]
	token = strtok(NULL, " ");
 8002172:	490b      	ldr	r1, [pc, #44]	; (80021a0 <setDate+0x68>)
 8002174:	2000      	movs	r0, #0
 8002176:	f006 fe7b 	bl	8008e70 <strtok>
 800217a:	60f8      	str	r0, [r7, #12]
	DateToUpdate.Date = atoi(token);
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f005 fe2e 	bl	8007dde <atoi>
 8002182:	4603      	mov	r3, r0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	72bb      	strb	r3, [r7, #10]

	return HAL_RTC_SetDate(hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 8002188:	f107 0308 	add.w	r3, r7, #8
 800218c:	2200      	movs	r2, #0
 800218e:	4619      	mov	r1, r3
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f004 fa3f 	bl	8006614 <HAL_RTC_SetDate>
 8002196:	4603      	mov	r3, r0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	0800d9a4 	.word	0x0800d9a4

080021a4 <communicating_handle>:

void communicating_handle()
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
	if (disp_flag) {
 80021aa:	4ba6      	ldr	r3, [pc, #664]	; (8002444 <communicating_handle+0x2a0>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00b      	beq.n	80021ca <communicating_handle+0x26>
		lcd_set_cursor(&hlcd, 0, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2100      	movs	r1, #0
 80021b6:	48a4      	ldr	r0, [pc, #656]	; (8002448 <communicating_handle+0x2a4>)
 80021b8:	f005 fd5c 	bl	8007c74 <lcd_set_cursor>
		lcd_printf(&hlcd, "Communicating ...");
 80021bc:	49a3      	ldr	r1, [pc, #652]	; (800244c <communicating_handle+0x2a8>)
 80021be:	48a2      	ldr	r0, [pc, #648]	; (8002448 <communicating_handle+0x2a4>)
 80021c0:	f005 fd92 	bl	8007ce8 <lcd_printf>
		disp_flag = false;
 80021c4:	4b9f      	ldr	r3, [pc, #636]	; (8002444 <communicating_handle+0x2a0>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
	}
	if (uart_flag)
 80021ca:	4ba1      	ldr	r3, [pc, #644]	; (8002450 <communicating_handle+0x2ac>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 8134 	beq.w	800243c <communicating_handle+0x298>
	{
		uart_flag = false;
 80021d4:	4b9e      	ldr	r3, [pc, #632]	; (8002450 <communicating_handle+0x2ac>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]

		if (strlen((char *)rx_buffer) > 5)
 80021da:	489e      	ldr	r0, [pc, #632]	; (8002454 <communicating_handle+0x2b0>)
 80021dc:	f7fd ffc2 	bl	8000164 <strlen>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b05      	cmp	r3, #5
 80021e4:	d94c      	bls.n	8002280 <communicating_handle+0xdc>
		{
			HAL_UART_Receive_IT(&huart1, rx_buffer, 5);
 80021e6:	2205      	movs	r2, #5
 80021e8:	499a      	ldr	r1, [pc, #616]	; (8002454 <communicating_handle+0x2b0>)
 80021ea:	489b      	ldr	r0, [pc, #620]	; (8002458 <communicating_handle+0x2b4>)
 80021ec:	f004 ff11 	bl	8007012 <HAL_UART_Receive_IT>

			if (setLevel_flag) {
 80021f0:	4b9a      	ldr	r3, [pc, #616]	; (800245c <communicating_handle+0x2b8>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d013      	beq.n	8002220 <communicating_handle+0x7c>
				setLevel_flag = 0;
 80021f8:	4b98      	ldr	r3, [pc, #608]	; (800245c <communicating_handle+0x2b8>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
				var_EL = atoi((char *)rx_buffer);
 80021fe:	4895      	ldr	r0, [pc, #596]	; (8002454 <communicating_handle+0x2b0>)
 8002200:	f005 fded 	bl	8007dde <atoi>
 8002204:	4603      	mov	r3, r0
 8002206:	461a      	mov	r2, r3
 8002208:	4b95      	ldr	r3, [pc, #596]	; (8002460 <communicating_handle+0x2bc>)
 800220a:	601a      	str	r2, [r3, #0]
				memset((char *)rx_buffer, '\0', sizeofBuff);
 800220c:	2214      	movs	r2, #20
 800220e:	2100      	movs	r1, #0
 8002210:	4890      	ldr	r0, [pc, #576]	; (8002454 <communicating_handle+0x2b0>)
 8002212:	f006 fe25 	bl	8008e60 <memset>
				sendUart(&huart1, "AT00\n");
 8002216:	4993      	ldr	r1, [pc, #588]	; (8002464 <communicating_handle+0x2c0>)
 8002218:	488f      	ldr	r0, [pc, #572]	; (8002458 <communicating_handle+0x2b4>)
 800221a:	f7ff fd65 	bl	8001ce8 <sendUart>
				return;
 800221e:	e10d      	b.n	800243c <communicating_handle+0x298>
			}

			if (setTime_flag) {
 8002220:	4b91      	ldr	r3, [pc, #580]	; (8002468 <communicating_handle+0x2c4>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d013      	beq.n	8002250 <communicating_handle+0xac>
				setTime_flag = 0;
 8002228:	4b8f      	ldr	r3, [pc, #572]	; (8002468 <communicating_handle+0x2c4>)
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
				if (setTime(&hrtc, (char *)rx_buffer)) {
 800222e:	4989      	ldr	r1, [pc, #548]	; (8002454 <communicating_handle+0x2b0>)
 8002230:	488e      	ldr	r0, [pc, #568]	; (800246c <communicating_handle+0x2c8>)
 8002232:	f7ff ff45 	bl	80020c0 <setTime>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d004      	beq.n	8002246 <communicating_handle+0xa2>
					sendUart(&huart1, "AT02\n");
 800223c:	498c      	ldr	r1, [pc, #560]	; (8002470 <communicating_handle+0x2cc>)
 800223e:	4886      	ldr	r0, [pc, #536]	; (8002458 <communicating_handle+0x2b4>)
 8002240:	f7ff fd52 	bl	8001ce8 <sendUart>
					return;
 8002244:	e0fa      	b.n	800243c <communicating_handle+0x298>
				}
				sendUart(&huart1, "AT00\n");
 8002246:	4987      	ldr	r1, [pc, #540]	; (8002464 <communicating_handle+0x2c0>)
 8002248:	4883      	ldr	r0, [pc, #524]	; (8002458 <communicating_handle+0x2b4>)
 800224a:	f7ff fd4d 	bl	8001ce8 <sendUart>
				return;
 800224e:	e0f5      	b.n	800243c <communicating_handle+0x298>
			}

			if (setDate_flag) {
 8002250:	4b88      	ldr	r3, [pc, #544]	; (8002474 <communicating_handle+0x2d0>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d013      	beq.n	8002280 <communicating_handle+0xdc>
				setDate_flag = 0;
 8002258:	4b86      	ldr	r3, [pc, #536]	; (8002474 <communicating_handle+0x2d0>)
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
				if (setDate(&hrtc, (char *)rx_buffer)) {
 800225e:	497d      	ldr	r1, [pc, #500]	; (8002454 <communicating_handle+0x2b0>)
 8002260:	4882      	ldr	r0, [pc, #520]	; (800246c <communicating_handle+0x2c8>)
 8002262:	f7ff ff69 	bl	8002138 <setDate>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d004      	beq.n	8002276 <communicating_handle+0xd2>
					sendUart(&huart1, "AT02\n");
 800226c:	4980      	ldr	r1, [pc, #512]	; (8002470 <communicating_handle+0x2cc>)
 800226e:	487a      	ldr	r0, [pc, #488]	; (8002458 <communicating_handle+0x2b4>)
 8002270:	f7ff fd3a 	bl	8001ce8 <sendUart>
					return;
 8002274:	e0e2      	b.n	800243c <communicating_handle+0x298>
				}
				sendUart(&huart1, "AT00\n");
 8002276:	497b      	ldr	r1, [pc, #492]	; (8002464 <communicating_handle+0x2c0>)
 8002278:	4877      	ldr	r0, [pc, #476]	; (8002458 <communicating_handle+0x2b4>)
 800227a:	f7ff fd35 	bl	8001ce8 <sendUart>
				return;
 800227e:	e0dd      	b.n	800243c <communicating_handle+0x298>
			}
		}

		// Request Connect
		if (!strcmp((char *)rx_buffer, "AT01")) {
 8002280:	497d      	ldr	r1, [pc, #500]	; (8002478 <communicating_handle+0x2d4>)
 8002282:	4874      	ldr	r0, [pc, #464]	; (8002454 <communicating_handle+0x2b0>)
 8002284:	f7fd ff64 	bl	8000150 <strcmp>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d110      	bne.n	80022b0 <communicating_handle+0x10c>
			send_OK();
 800228e:	f7ff fc87 	bl	8001ba0 <send_OK>
			memset((char *)rx_buffer, '\0', sizeofBuff);
 8002292:	2214      	movs	r2, #20
 8002294:	2100      	movs	r1, #0
 8002296:	486f      	ldr	r0, [pc, #444]	; (8002454 <communicating_handle+0x2b0>)
 8002298:	f006 fde2 	bl	8008e60 <memset>
			ret = HAL_UART_Receive_IT(&huart1, rx_buffer, 5);
 800229c:	2205      	movs	r2, #5
 800229e:	496d      	ldr	r1, [pc, #436]	; (8002454 <communicating_handle+0x2b0>)
 80022a0:	486d      	ldr	r0, [pc, #436]	; (8002458 <communicating_handle+0x2b4>)
 80022a2:	f004 feb6 	bl	8007012 <HAL_UART_Receive_IT>
 80022a6:	4603      	mov	r3, r0
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b74      	ldr	r3, [pc, #464]	; (800247c <communicating_handle+0x2d8>)
 80022ac:	701a      	strb	r2, [r3, #0]
			return;
 80022ae:	e0c5      	b.n	800243c <communicating_handle+0x298>
		}

		// Close Connect
		if (!strcmp((char *)rx_buffer, "AT04")) {
 80022b0:	4973      	ldr	r1, [pc, #460]	; (8002480 <communicating_handle+0x2dc>)
 80022b2:	4868      	ldr	r0, [pc, #416]	; (8002454 <communicating_handle+0x2b0>)
 80022b4:	f7fd ff4c 	bl	8000150 <strcmp>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d116      	bne.n	80022ec <communicating_handle+0x148>
			send_OK();
 80022be:	f7ff fc6f 	bl	8001ba0 <send_OK>
			memset((char *)rx_buffer, '\0', sizeofBuff);
 80022c2:	2214      	movs	r2, #20
 80022c4:	2100      	movs	r1, #0
 80022c6:	4863      	ldr	r0, [pc, #396]	; (8002454 <communicating_handle+0x2b0>)
 80022c8:	f006 fdca 	bl	8008e60 <memset>
			ret = HAL_UART_Receive_IT(&huart1, rx_buffer, 5);
 80022cc:	2205      	movs	r2, #5
 80022ce:	4961      	ldr	r1, [pc, #388]	; (8002454 <communicating_handle+0x2b0>)
 80022d0:	4861      	ldr	r0, [pc, #388]	; (8002458 <communicating_handle+0x2b4>)
 80022d2:	f004 fe9e 	bl	8007012 <HAL_UART_Receive_IT>
 80022d6:	4603      	mov	r3, r0
 80022d8:	461a      	mov	r2, r3
 80022da:	4b68      	ldr	r3, [pc, #416]	; (800247c <communicating_handle+0x2d8>)
 80022dc:	701a      	strb	r2, [r3, #0]
			stateDevice = IDLE;
 80022de:	4b69      	ldr	r3, [pc, #420]	; (8002484 <communicating_handle+0x2e0>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]
			lcd_clear_display(&hlcd);
 80022e4:	4858      	ldr	r0, [pc, #352]	; (8002448 <communicating_handle+0x2a4>)
 80022e6:	f005 fcb5 	bl	8007c54 <lcd_clear_display>
			return;
 80022ea:	e0a7      	b.n	800243c <communicating_handle+0x298>
		}

		// TEST
		if (!strcmp((char *)rx_buffer, "AT05")) {
 80022ec:	4966      	ldr	r1, [pc, #408]	; (8002488 <communicating_handle+0x2e4>)
 80022ee:	4859      	ldr	r0, [pc, #356]	; (8002454 <communicating_handle+0x2b0>)
 80022f0:	f7fd ff2e 	bl	8000150 <strcmp>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d110      	bne.n	800231c <communicating_handle+0x178>
//			send_OK();
			memset((char *)rx_buffer, '\0', sizeofBuff);
 80022fa:	2214      	movs	r2, #20
 80022fc:	2100      	movs	r1, #0
 80022fe:	4855      	ldr	r0, [pc, #340]	; (8002454 <communicating_handle+0x2b0>)
 8002300:	f006 fdae 	bl	8008e60 <memset>
			send_test();
 8002304:	f7ff fd36 	bl	8001d74 <send_test>
			ret = HAL_UART_Receive_IT(&huart1, rx_buffer, 5);
 8002308:	2205      	movs	r2, #5
 800230a:	4952      	ldr	r1, [pc, #328]	; (8002454 <communicating_handle+0x2b0>)
 800230c:	4852      	ldr	r0, [pc, #328]	; (8002458 <communicating_handle+0x2b4>)
 800230e:	f004 fe80 	bl	8007012 <HAL_UART_Receive_IT>
 8002312:	4603      	mov	r3, r0
 8002314:	461a      	mov	r2, r3
 8002316:	4b59      	ldr	r3, [pc, #356]	; (800247c <communicating_handle+0x2d8>)
 8002318:	701a      	strb	r2, [r3, #0]
			return;
 800231a:	e08f      	b.n	800243c <communicating_handle+0x298>
		}

		// all Data
		if (!strcmp((char *)rx_buffer, "AT06")) {
 800231c:	495b      	ldr	r1, [pc, #364]	; (800248c <communicating_handle+0x2e8>)
 800231e:	484d      	ldr	r0, [pc, #308]	; (8002454 <communicating_handle+0x2b0>)
 8002320:	f7fd ff16 	bl	8000150 <strcmp>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d110      	bne.n	800234c <communicating_handle+0x1a8>
			send_allData();
 800232a:	f7ff fc5b 	bl	8001be4 <send_allData>
			memset((char *)rx_buffer, '\0', sizeofBuff);
 800232e:	2214      	movs	r2, #20
 8002330:	2100      	movs	r1, #0
 8002332:	4848      	ldr	r0, [pc, #288]	; (8002454 <communicating_handle+0x2b0>)
 8002334:	f006 fd94 	bl	8008e60 <memset>
			ret = HAL_UART_Receive_IT(&huart1, rx_buffer, 5);
 8002338:	2205      	movs	r2, #5
 800233a:	4946      	ldr	r1, [pc, #280]	; (8002454 <communicating_handle+0x2b0>)
 800233c:	4846      	ldr	r0, [pc, #280]	; (8002458 <communicating_handle+0x2b4>)
 800233e:	f004 fe68 	bl	8007012 <HAL_UART_Receive_IT>
 8002342:	4603      	mov	r3, r0
 8002344:	461a      	mov	r2, r3
 8002346:	4b4d      	ldr	r3, [pc, #308]	; (800247c <communicating_handle+0x2d8>)
 8002348:	701a      	strb	r2, [r3, #0]
			return;
 800234a:	e077      	b.n	800243c <communicating_handle+0x298>
		}

		// set Time
		if (!strcmp((char *)rx_buffer, "AT07")) {
 800234c:	4950      	ldr	r1, [pc, #320]	; (8002490 <communicating_handle+0x2ec>)
 800234e:	4841      	ldr	r0, [pc, #260]	; (8002454 <communicating_handle+0x2b0>)
 8002350:	f7fd fefe 	bl	8000150 <strcmp>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d113      	bne.n	8002382 <communicating_handle+0x1de>
			send_OK();
 800235a:	f7ff fc21 	bl	8001ba0 <send_OK>
			setTime_flag = 1;
 800235e:	4b42      	ldr	r3, [pc, #264]	; (8002468 <communicating_handle+0x2c4>)
 8002360:	2201      	movs	r2, #1
 8002362:	701a      	strb	r2, [r3, #0]
			memset((char *)rx_buffer, '\0', sizeofBuff);
 8002364:	2214      	movs	r2, #20
 8002366:	2100      	movs	r1, #0
 8002368:	483a      	ldr	r0, [pc, #232]	; (8002454 <communicating_handle+0x2b0>)
 800236a:	f006 fd79 	bl	8008e60 <memset>
			ret = HAL_UART_Receive_IT(&huart1, rx_buffer, 9);
 800236e:	2209      	movs	r2, #9
 8002370:	4938      	ldr	r1, [pc, #224]	; (8002454 <communicating_handle+0x2b0>)
 8002372:	4839      	ldr	r0, [pc, #228]	; (8002458 <communicating_handle+0x2b4>)
 8002374:	f004 fe4d 	bl	8007012 <HAL_UART_Receive_IT>
 8002378:	4603      	mov	r3, r0
 800237a:	461a      	mov	r2, r3
 800237c:	4b3f      	ldr	r3, [pc, #252]	; (800247c <communicating_handle+0x2d8>)
 800237e:	701a      	strb	r2, [r3, #0]
			return;
 8002380:	e05c      	b.n	800243c <communicating_handle+0x298>
		}

		// set Day
		if (!strcmp((char *)rx_buffer, "AT08")) {
 8002382:	4944      	ldr	r1, [pc, #272]	; (8002494 <communicating_handle+0x2f0>)
 8002384:	4833      	ldr	r0, [pc, #204]	; (8002454 <communicating_handle+0x2b0>)
 8002386:	f7fd fee3 	bl	8000150 <strcmp>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d113      	bne.n	80023b8 <communicating_handle+0x214>
			send_OK();
 8002390:	f7ff fc06 	bl	8001ba0 <send_OK>
			setDate_flag = 1;
 8002394:	4b37      	ldr	r3, [pc, #220]	; (8002474 <communicating_handle+0x2d0>)
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
			memset((char *)rx_buffer, '\0', sizeofBuff);
 800239a:	2214      	movs	r2, #20
 800239c:	2100      	movs	r1, #0
 800239e:	482d      	ldr	r0, [pc, #180]	; (8002454 <communicating_handle+0x2b0>)
 80023a0:	f006 fd5e 	bl	8008e60 <memset>
			ret = HAL_UART_Receive_IT(&huart1, rx_buffer, 9);
 80023a4:	2209      	movs	r2, #9
 80023a6:	492b      	ldr	r1, [pc, #172]	; (8002454 <communicating_handle+0x2b0>)
 80023a8:	482b      	ldr	r0, [pc, #172]	; (8002458 <communicating_handle+0x2b4>)
 80023aa:	f004 fe32 	bl	8007012 <HAL_UART_Receive_IT>
 80023ae:	4603      	mov	r3, r0
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b32      	ldr	r3, [pc, #200]	; (800247c <communicating_handle+0x2d8>)
 80023b4:	701a      	strb	r2, [r3, #0]
			return;
 80023b6:	e041      	b.n	800243c <communicating_handle+0x298>
		}

		// set Threshold
		if (!strcmp((char *)rx_buffer, "AT09")) {
 80023b8:	4937      	ldr	r1, [pc, #220]	; (8002498 <communicating_handle+0x2f4>)
 80023ba:	4826      	ldr	r0, [pc, #152]	; (8002454 <communicating_handle+0x2b0>)
 80023bc:	f7fd fec8 	bl	8000150 <strcmp>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d113      	bne.n	80023ee <communicating_handle+0x24a>
			send_OK();
 80023c6:	f7ff fbeb 	bl	8001ba0 <send_OK>
			setLevel_flag = 1;
 80023ca:	4b24      	ldr	r3, [pc, #144]	; (800245c <communicating_handle+0x2b8>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
			memset((char *)rx_buffer, '\0', sizeofBuff);
 80023d0:	2214      	movs	r2, #20
 80023d2:	2100      	movs	r1, #0
 80023d4:	481f      	ldr	r0, [pc, #124]	; (8002454 <communicating_handle+0x2b0>)
 80023d6:	f006 fd43 	bl	8008e60 <memset>
			ret = HAL_UART_Receive_IT(&huart1, rx_buffer, 7);
 80023da:	2207      	movs	r2, #7
 80023dc:	491d      	ldr	r1, [pc, #116]	; (8002454 <communicating_handle+0x2b0>)
 80023de:	481e      	ldr	r0, [pc, #120]	; (8002458 <communicating_handle+0x2b4>)
 80023e0:	f004 fe17 	bl	8007012 <HAL_UART_Receive_IT>
 80023e4:	4603      	mov	r3, r0
 80023e6:	461a      	mov	r2, r3
 80023e8:	4b24      	ldr	r3, [pc, #144]	; (800247c <communicating_handle+0x2d8>)
 80023ea:	701a      	strb	r2, [r3, #0]
			return;
 80023ec:	e026      	b.n	800243c <communicating_handle+0x298>
		}

		// delete flash
		if (!strcmp((char *)rx_buffer, "AT11")) {
 80023ee:	492b      	ldr	r1, [pc, #172]	; (800249c <communicating_handle+0x2f8>)
 80023f0:	4818      	ldr	r0, [pc, #96]	; (8002454 <communicating_handle+0x2b0>)
 80023f2:	f7fd fead 	bl	8000150 <strcmp>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d11a      	bne.n	8002432 <communicating_handle+0x28e>
			send_OK();
 80023fc:	f7ff fbd0 	bl	8001ba0 <send_OK>
			Flash_Earse(ADDRESS_DATA_STORAGE);
 8002400:	463b      	mov	r3, r7
 8002402:	4927      	ldr	r1, [pc, #156]	; (80024a0 <communicating_handle+0x2fc>)
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff f955 	bl	80016b4 <Flash_Earse>
			HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, 0);
 800240a:	2200      	movs	r2, #0
 800240c:	2102      	movs	r1, #2
 800240e:	4817      	ldr	r0, [pc, #92]	; (800246c <communicating_handle+0x2c8>)
 8002410:	f004 fcf6 	bl	8006e00 <HAL_RTCEx_BKUPWrite>
			memset((char *)rx_buffer, '\0', sizeofBuff);
 8002414:	2214      	movs	r2, #20
 8002416:	2100      	movs	r1, #0
 8002418:	480e      	ldr	r0, [pc, #56]	; (8002454 <communicating_handle+0x2b0>)
 800241a:	f006 fd21 	bl	8008e60 <memset>
			ret = HAL_UART_Receive_IT(&huart1, rx_buffer, 5);
 800241e:	2205      	movs	r2, #5
 8002420:	490c      	ldr	r1, [pc, #48]	; (8002454 <communicating_handle+0x2b0>)
 8002422:	480d      	ldr	r0, [pc, #52]	; (8002458 <communicating_handle+0x2b4>)
 8002424:	f004 fdf5 	bl	8007012 <HAL_UART_Receive_IT>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	4b13      	ldr	r3, [pc, #76]	; (800247c <communicating_handle+0x2d8>)
 800242e:	701a      	strb	r2, [r3, #0]
			return;
 8002430:	e004      	b.n	800243c <communicating_handle+0x298>
		}

		HAL_UART_Receive_IT(&huart1, rx_buffer, 5);
 8002432:	2205      	movs	r2, #5
 8002434:	4907      	ldr	r1, [pc, #28]	; (8002454 <communicating_handle+0x2b0>)
 8002436:	4808      	ldr	r0, [pc, #32]	; (8002458 <communicating_handle+0x2b4>)
 8002438:	f004 fdeb 	bl	8007012 <HAL_UART_Receive_IT>
	}
}
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000000 	.word	0x20000000
 8002448:	20000340 	.word	0x20000340
 800244c:	0800d9a8 	.word	0x0800d9a8
 8002450:	200003b4 	.word	0x200003b4
 8002454:	200003a0 	.word	0x200003a0
 8002458:	200002f8 	.word	0x200002f8
 800245c:	200003ea 	.word	0x200003ea
 8002460:	20000008 	.word	0x20000008
 8002464:	0800d9bc 	.word	0x0800d9bc
 8002468:	200003e8 	.word	0x200003e8
 800246c:	200002e4 	.word	0x200002e4
 8002470:	0800d9c4 	.word	0x0800d9c4
 8002474:	200003e9 	.word	0x200003e9
 8002478:	0800d9cc 	.word	0x0800d9cc
 800247c:	200003b5 	.word	0x200003b5
 8002480:	0800d9d4 	.word	0x0800d9d4
 8002484:	2000039c 	.word	0x2000039c
 8002488:	0800d9dc 	.word	0x0800d9dc
 800248c:	0800d9e4 	.word	0x0800d9e4
 8002490:	0800d9ec 	.word	0x0800d9ec
 8002494:	0800d9f4 	.word	0x0800d9f4
 8002498:	0800d9fc 	.word	0x0800d9fc
 800249c:	0800da04 	.word	0x0800da04
 80024a0:	0800fc00 	.word	0x0800fc00

080024a4 <uart_handle>:

void uart_handle()
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
	if (uart_flag) {
 80024a8:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <uart_handle+0x50>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d01f      	beq.n	80024f0 <uart_handle+0x4c>
		if (stateDevice == IDLE) {
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <uart_handle+0x54>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d11b      	bne.n	80024f0 <uart_handle+0x4c>
			if (!strcmp((char *)rx_buffer, "AT01")) {
 80024b8:	4910      	ldr	r1, [pc, #64]	; (80024fc <uart_handle+0x58>)
 80024ba:	4811      	ldr	r0, [pc, #68]	; (8002500 <uart_handle+0x5c>)
 80024bc:	f7fd fe48 	bl	8000150 <strcmp>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <uart_handle+0x36>
				lcd_clear_display(&hlcd);
 80024c6:	480f      	ldr	r0, [pc, #60]	; (8002504 <uart_handle+0x60>)
 80024c8:	f005 fbc4 	bl	8007c54 <lcd_clear_display>
				stateDevice = COMMUNICATING;
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <uart_handle+0x54>)
 80024ce:	2204      	movs	r2, #4
 80024d0:	701a      	strb	r2, [r3, #0]
				disp_flag = true;
 80024d2:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <uart_handle+0x64>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	701a      	strb	r2, [r3, #0]
				return;
 80024d8:	e00a      	b.n	80024f0 <uart_handle+0x4c>
			}
			else
			{
				memset((char *)rx_buffer, '\0', sizeofBuff);
 80024da:	2214      	movs	r2, #20
 80024dc:	2100      	movs	r1, #0
 80024de:	4808      	ldr	r0, [pc, #32]	; (8002500 <uart_handle+0x5c>)
 80024e0:	f006 fcbe 	bl	8008e60 <memset>
				HAL_UART_Receive_IT(&huart1, rx_buffer, 5);
 80024e4:	2205      	movs	r2, #5
 80024e6:	4906      	ldr	r1, [pc, #24]	; (8002500 <uart_handle+0x5c>)
 80024e8:	4808      	ldr	r0, [pc, #32]	; (800250c <uart_handle+0x68>)
 80024ea:	f004 fd92 	bl	8007012 <HAL_UART_Receive_IT>
				return;
 80024ee:	bf00      	nop

		if (stateDevice == COMMUNICATING) {

		}
	}
}
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200003b4 	.word	0x200003b4
 80024f8:	2000039c 	.word	0x2000039c
 80024fc:	0800d9cc 	.word	0x0800d9cc
 8002500:	200003a0 	.word	0x200003a0
 8002504:	20000340 	.word	0x20000340
 8002508:	20000000 	.word	0x20000000
 800250c:	200002f8 	.word	0x200002f8

08002510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002510:	b5b0      	push	{r4, r5, r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002516:	f000 fdad 	bl	8003074 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800251a:	f000 f8d9 	bl	80026d0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800251e:	f000 fa79 	bl	8002a14 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002522:	f000 f973 	bl	800280c <MX_I2C1_Init>
  MX_I2C2_Init();
 8002526:	f000 f99f 	bl	8002868 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800252a:	f000 fa49 	bl	80029c0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800252e:	f000 f92f 	bl	8002790 <MX_ADC1_Init>
  MX_RTC_Init();
 8002532:	f000 f9c7 	bl	80028c4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  lcd_init(&hlcd, &hi2c2, LCD_ADDR_DEFAULT);
 8002536:	2227      	movs	r2, #39	; 0x27
 8002538:	4955      	ldr	r1, [pc, #340]	; (8002690 <main+0x180>)
 800253a:	4856      	ldr	r0, [pc, #344]	; (8002694 <main+0x184>)
 800253c:	f005 fc0b 	bl	8007d56 <lcd_init>
  button_init(&button1, GPIOA, GPIO_PIN_8);
 8002540:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002544:	4954      	ldr	r1, [pc, #336]	; (8002698 <main+0x188>)
 8002546:	4855      	ldr	r0, [pc, #340]	; (800269c <main+0x18c>)
 8002548:	f7fe fe2e 	bl	80011a8 <button_init>
  MQSensor_Init(&MQSensor, HT_CTRL_GPIO_Port, HT_CTRL_Pin, &hadc1, ADC_CHANNEL_0);
 800254c:	2300      	movs	r3, #0
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	4b53      	ldr	r3, [pc, #332]	; (80026a0 <main+0x190>)
 8002552:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002556:	4953      	ldr	r1, [pc, #332]	; (80026a4 <main+0x194>)
 8002558:	4853      	ldr	r0, [pc, #332]	; (80026a8 <main+0x198>)
 800255a:	f7fe feb1 	bl	80012c0 <MQSensor_Init>
  AHTSensor_Init(&AHTSensor, &hi2c1, AHT10_ADDR);
 800255e:	2238      	movs	r2, #56	; 0x38
 8002560:	4952      	ldr	r1, [pc, #328]	; (80026ac <main+0x19c>)
 8002562:	4853      	ldr	r0, [pc, #332]	; (80026b0 <main+0x1a0>)
 8002564:	f7fe ffe0 	bl	8001528 <AHTSensor_Init>

  stateDevice = IDLE;
 8002568:	4b52      	ldr	r3, [pc, #328]	; (80026b4 <main+0x1a4>)
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]

  disp_flag = true;
 800256e:	4b52      	ldr	r3, [pc, #328]	; (80026b8 <main+0x1a8>)
 8002570:	2201      	movs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart1, rx_buffer, 5);
 8002574:	2205      	movs	r2, #5
 8002576:	4951      	ldr	r1, [pc, #324]	; (80026bc <main+0x1ac>)
 8002578:	4851      	ldr	r0, [pc, #324]	; (80026c0 <main+0x1b0>)
 800257a:	f004 fd4a 	bl	8007012 <HAL_UART_Receive_IT>
  AHTSensor_Read(&AHTSensor);
 800257e:	484c      	ldr	r0, [pc, #304]	; (80026b0 <main+0x1a0>)
 8002580:	f7ff f812 	bl	80015a8 <AHTSensor_Read>
  idle_display();
 8002584:	f7ff fa26 	bl	80019d4 <idle_display>
//  MQSensor_powerOn(&MQSensor, true);
//  HAL_Delay(20000);
//
//  MQSensor_get_adc(&MQSensor);
//  MQSensor_powerOn(&MQSensor, false);
  MQSensor_get_adc(&MQSensor);
 8002588:	4847      	ldr	r0, [pc, #284]	; (80026a8 <main+0x198>)
 800258a:	f7fe feb7 	bl	80012fc <MQSensor_get_adc>
  R0 = 5*RL/((float)MQSensor.adc_value*3.3/4095)-RL;
 800258e:	4b4d      	ldr	r3, [pc, #308]	; (80026c4 <main+0x1b4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	494d      	ldr	r1, [pc, #308]	; (80026c8 <main+0x1b8>)
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe fbff 	bl	8000d98 <__aeabi_fmul>
 800259a:	4603      	mov	r3, r0
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd ff4d 	bl	800043c <__aeabi_f2d>
 80025a2:	4604      	mov	r4, r0
 80025a4:	460d      	mov	r5, r1
 80025a6:	4b40      	ldr	r3, [pc, #256]	; (80026a8 <main+0x198>)
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe fb9c 	bl	8000ce8 <__aeabi_ui2f>
 80025b0:	4603      	mov	r3, r0
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd ff42 	bl	800043c <__aeabi_f2d>
 80025b8:	a331      	add	r3, pc, #196	; (adr r3, 8002680 <main+0x170>)
 80025ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025be:	f7fd ff95 	bl	80004ec <__aeabi_dmul>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4610      	mov	r0, r2
 80025c8:	4619      	mov	r1, r3
 80025ca:	a32f      	add	r3, pc, #188	; (adr r3, 8002688 <main+0x178>)
 80025cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d0:	f7fe f8b6 	bl	8000740 <__aeabi_ddiv>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4620      	mov	r0, r4
 80025da:	4629      	mov	r1, r5
 80025dc:	f7fe f8b0 	bl	8000740 <__aeabi_ddiv>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4614      	mov	r4, r2
 80025e6:	461d      	mov	r5, r3
 80025e8:	4b36      	ldr	r3, [pc, #216]	; (80026c4 <main+0x1b4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fd ff25 	bl	800043c <__aeabi_f2d>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4620      	mov	r0, r4
 80025f8:	4629      	mov	r1, r5
 80025fa:	f7fd fdbf 	bl	800017c <__aeabi_dsub>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	4610      	mov	r0, r2
 8002604:	4619      	mov	r1, r3
 8002606:	f7fe fa69 	bl	8000adc <__aeabi_d2f>
 800260a:	4603      	mov	r3, r0
 800260c:	4a2f      	ldr	r2, [pc, #188]	; (80026cc <main+0x1bc>)
 800260e:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  button_handle(&button1);
 8002610:	4822      	ldr	r0, [pc, #136]	; (800269c <main+0x18c>)
 8002612:	f7fe fddb 	bl	80011cc <button_handle>
	  switch (stateDevice) {
 8002616:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <main+0x1a4>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	3b01      	subs	r3, #1
 800261c:	2b03      	cmp	r3, #3
 800261e:	d82a      	bhi.n	8002676 <main+0x166>
 8002620:	a201      	add	r2, pc, #4	; (adr r2, 8002628 <main+0x118>)
 8002622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002626:	bf00      	nop
 8002628:	08002639 	.word	0x08002639
 800262c:	08002643 	.word	0x08002643
 8002630:	08002649 	.word	0x08002649
 8002634:	08002671 	.word	0x08002671
	  	case IDLE:
	  		idle_display();
 8002638:	f7ff f9cc 	bl	80019d4 <idle_display>
	  		uart_handle();
 800263c:	f7ff ff32 	bl	80024a4 <uart_handle>
	  		break;
 8002640:	e01d      	b.n	800267e <main+0x16e>
		case HEATING:
			heating_display();
 8002642:	f7ff f947 	bl	80018d4 <heating_display>
			break;
 8002646:	e01a      	b.n	800267e <main+0x16e>
		case MEASURING:
			measuring_display(false);
 8002648:	2000      	movs	r0, #0
 800264a:	f7ff f98d 	bl	8001968 <measuring_display>
			MQSensor_get_adc(&MQSensor);
 800264e:	4816      	ldr	r0, [pc, #88]	; (80026a8 <main+0x198>)
 8002650:	f7fe fe54 	bl	80012fc <MQSensor_get_adc>
			MQSensor_calc(&MQSensor);
 8002654:	4814      	ldr	r0, [pc, #80]	; (80026a8 <main+0x198>)
 8002656:	f7fe fecf 	bl	80013f8 <MQSensor_calc>
			warning();
 800265a:	f7ff fa87 	bl	8001b6c <warning>
			AHTSensor_Read(&AHTSensor);
 800265e:	4814      	ldr	r0, [pc, #80]	; (80026b0 <main+0x1a0>)
 8002660:	f7fe ffa2 	bl	80015a8 <AHTSensor_Read>
			measuring_display(true);
 8002664:	2001      	movs	r0, #1
 8002666:	f7ff f97f 	bl	8001968 <measuring_display>
			store_data();
 800266a:	f7ff f9c5 	bl	80019f8 <store_data>
			break;
 800266e:	e006      	b.n	800267e <main+0x16e>
		case COMMUNICATING:
			communicating_handle();
 8002670:	f7ff fd98 	bl	80021a4 <communicating_handle>
			break;
 8002674:	e003      	b.n	800267e <main+0x16e>
		default:
			stateDevice = IDLE;
 8002676:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <main+0x1a4>)
 8002678:	2201      	movs	r2, #1
 800267a:	701a      	strb	r2, [r3, #0]
			break;
 800267c:	bf00      	nop
	  button_handle(&button1);
 800267e:	e7c7      	b.n	8002610 <main+0x100>
 8002680:	66666666 	.word	0x66666666
 8002684:	400a6666 	.word	0x400a6666
 8002688:	00000000 	.word	0x00000000
 800268c:	40affe00 	.word	0x40affe00
 8002690:	20000290 	.word	0x20000290
 8002694:	20000340 	.word	0x20000340
 8002698:	40010800 	.word	0x40010800
 800269c:	20000350 	.word	0x20000350
 80026a0:	2000020c 	.word	0x2000020c
 80026a4:	40010c00 	.word	0x40010c00
 80026a8:	20000368 	.word	0x20000368
 80026ac:	2000023c 	.word	0x2000023c
 80026b0:	2000038c 	.word	0x2000038c
 80026b4:	2000039c 	.word	0x2000039c
 80026b8:	20000000 	.word	0x20000000
 80026bc:	200003a0 	.word	0x200003a0
 80026c0:	200002f8 	.word	0x200002f8
 80026c4:	20000004 	.word	0x20000004
 80026c8:	40a00000 	.word	0x40a00000
 80026cc:	200003b8 	.word	0x200003b8

080026d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b094      	sub	sp, #80	; 0x50
 80026d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026da:	2228      	movs	r2, #40	; 0x28
 80026dc:	2100      	movs	r1, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	f006 fbbe 	bl	8008e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002700:	2305      	movs	r3, #5
 8002702:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002704:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002708:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800270a:	2300      	movs	r3, #0
 800270c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800270e:	2301      	movs	r3, #1
 8002710:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002712:	2301      	movs	r3, #1
 8002714:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002716:	2302      	movs	r3, #2
 8002718:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800271a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800271e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002720:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002724:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800272a:	4618      	mov	r0, r3
 800272c:	f002 fffa 	bl	8005724 <HAL_RCC_OscConfig>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002736:	f000 fa0d 	bl	8002b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800273a:	230f      	movs	r3, #15
 800273c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800273e:	2302      	movs	r3, #2
 8002740:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800274a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800274c:	2300      	movs	r3, #0
 800274e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	2102      	movs	r1, #2
 8002756:	4618      	mov	r0, r3
 8002758:	f003 fa66 	bl	8005c28 <HAL_RCC_ClockConfig>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002762:	f000 f9f7 	bl	8002b54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8002766:	2303      	movs	r3, #3
 8002768:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800276a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800276e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002770:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002774:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	4618      	mov	r0, r3
 800277a:	f003 fbe3 	bl	8005f44 <HAL_RCCEx_PeriphCLKConfig>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002784:	f000 f9e6 	bl	8002b54 <Error_Handler>
  }
}
 8002788:	bf00      	nop
 800278a:	3750      	adds	r7, #80	; 0x50
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002796:	1d3b      	adds	r3, r7, #4
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80027a0:	4b18      	ldr	r3, [pc, #96]	; (8002804 <MX_ADC1_Init+0x74>)
 80027a2:	4a19      	ldr	r2, [pc, #100]	; (8002808 <MX_ADC1_Init+0x78>)
 80027a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80027a6:	4b17      	ldr	r3, [pc, #92]	; (8002804 <MX_ADC1_Init+0x74>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80027ac:	4b15      	ldr	r3, [pc, #84]	; (8002804 <MX_ADC1_Init+0x74>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027b2:	4b14      	ldr	r3, [pc, #80]	; (8002804 <MX_ADC1_Init+0x74>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027b8:	4b12      	ldr	r3, [pc, #72]	; (8002804 <MX_ADC1_Init+0x74>)
 80027ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80027be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027c0:	4b10      	ldr	r3, [pc, #64]	; (8002804 <MX_ADC1_Init+0x74>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80027c6:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <MX_ADC1_Init+0x74>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027cc:	480d      	ldr	r0, [pc, #52]	; (8002804 <MX_ADC1_Init+0x74>)
 80027ce:	f000 fcd7 	bl	8003180 <HAL_ADC_Init>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80027d8:	f000 f9bc 	bl	8002b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80027dc:	2300      	movs	r3, #0
 80027de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80027e0:	2301      	movs	r3, #1
 80027e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80027e4:	2307      	movs	r3, #7
 80027e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027e8:	1d3b      	adds	r3, r7, #4
 80027ea:	4619      	mov	r1, r3
 80027ec:	4805      	ldr	r0, [pc, #20]	; (8002804 <MX_ADC1_Init+0x74>)
 80027ee:	f000 ff8b 	bl	8003708 <HAL_ADC_ConfigChannel>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80027f8:	f000 f9ac 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	2000020c 	.word	0x2000020c
 8002808:	40012400 	.word	0x40012400

0800280c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002810:	4b12      	ldr	r3, [pc, #72]	; (800285c <MX_I2C1_Init+0x50>)
 8002812:	4a13      	ldr	r2, [pc, #76]	; (8002860 <MX_I2C1_Init+0x54>)
 8002814:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002816:	4b11      	ldr	r3, [pc, #68]	; (800285c <MX_I2C1_Init+0x50>)
 8002818:	4a12      	ldr	r2, [pc, #72]	; (8002864 <MX_I2C1_Init+0x58>)
 800281a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <MX_I2C1_Init+0x50>)
 800281e:	2200      	movs	r2, #0
 8002820:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002822:	4b0e      	ldr	r3, [pc, #56]	; (800285c <MX_I2C1_Init+0x50>)
 8002824:	2200      	movs	r2, #0
 8002826:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <MX_I2C1_Init+0x50>)
 800282a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800282e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002830:	4b0a      	ldr	r3, [pc, #40]	; (800285c <MX_I2C1_Init+0x50>)
 8002832:	2200      	movs	r2, #0
 8002834:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002836:	4b09      	ldr	r3, [pc, #36]	; (800285c <MX_I2C1_Init+0x50>)
 8002838:	2200      	movs	r2, #0
 800283a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800283c:	4b07      	ldr	r3, [pc, #28]	; (800285c <MX_I2C1_Init+0x50>)
 800283e:	2200      	movs	r2, #0
 8002840:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <MX_I2C1_Init+0x50>)
 8002844:	2200      	movs	r2, #0
 8002846:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002848:	4804      	ldr	r0, [pc, #16]	; (800285c <MX_I2C1_Init+0x50>)
 800284a:	f001 ff2b 	bl	80046a4 <HAL_I2C_Init>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002854:	f000 f97e 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8002858:	bf00      	nop
 800285a:	bd80      	pop	{r7, pc}
 800285c:	2000023c 	.word	0x2000023c
 8002860:	40005400 	.word	0x40005400
 8002864:	000186a0 	.word	0x000186a0

08002868 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_Init 0 */
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800286c:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <MX_I2C2_Init+0x50>)
 800286e:	4a13      	ldr	r2, [pc, #76]	; (80028bc <MX_I2C2_Init+0x54>)
 8002870:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002872:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <MX_I2C2_Init+0x50>)
 8002874:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <MX_I2C2_Init+0x58>)
 8002876:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002878:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <MX_I2C2_Init+0x50>)
 800287a:	2200      	movs	r2, #0
 800287c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800287e:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <MX_I2C2_Init+0x50>)
 8002880:	2200      	movs	r2, #0
 8002882:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002884:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <MX_I2C2_Init+0x50>)
 8002886:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800288a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800288c:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <MX_I2C2_Init+0x50>)
 800288e:	2200      	movs	r2, #0
 8002890:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <MX_I2C2_Init+0x50>)
 8002894:	2200      	movs	r2, #0
 8002896:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002898:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <MX_I2C2_Init+0x50>)
 800289a:	2200      	movs	r2, #0
 800289c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <MX_I2C2_Init+0x50>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80028a4:	4804      	ldr	r0, [pc, #16]	; (80028b8 <MX_I2C2_Init+0x50>)
 80028a6:	f001 fefd 	bl	80046a4 <HAL_I2C_Init>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80028b0:	f000 f950 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  /* USER CODE END I2C2_Init 2 */

}
 80028b4:	bf00      	nop
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000290 	.word	0x20000290
 80028bc:	40005800 	.word	0x40005800
 80028c0:	000186a0 	.word	0x000186a0

080028c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80028ca:	1d3b      	adds	r3, r7, #4
 80028cc:	2100      	movs	r1, #0
 80028ce:	460a      	mov	r2, r1
 80028d0:	801a      	strh	r2, [r3, #0]
 80028d2:	460a      	mov	r2, r1
 80028d4:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80028d6:	2300      	movs	r3, #0
 80028d8:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028da:	4b37      	ldr	r3, [pc, #220]	; (80029b8 <MX_RTC_Init+0xf4>)
 80028dc:	4a37      	ldr	r2, [pc, #220]	; (80029bc <MX_RTC_Init+0xf8>)
 80028de:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80028e0:	4b35      	ldr	r3, [pc, #212]	; (80029b8 <MX_RTC_Init+0xf4>)
 80028e2:	f04f 32ff 	mov.w	r2, #4294967295
 80028e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80028e8:	4b33      	ldr	r3, [pc, #204]	; (80029b8 <MX_RTC_Init+0xf4>)
 80028ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ee:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028f0:	4831      	ldr	r0, [pc, #196]	; (80029b8 <MX_RTC_Init+0xf4>)
 80028f2:	f003 fc93 	bl	800621c <HAL_RTC_Init>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80028fc:	f000 f92a 	bl	8002b54 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != RTC_BKP_SET_TIME)
 8002900:	2101      	movs	r1, #1
 8002902:	482d      	ldr	r0, [pc, #180]	; (80029b8 <MX_RTC_Init+0xf4>)
 8002904:	f004 fa96 	bl	8006e34 <HAL_RTCEx_BKUPRead>
 8002908:	4603      	mov	r3, r0
 800290a:	f242 6206 	movw	r2, #9734	; 0x2606
 800290e:	4293      	cmp	r3, r2
 8002910:	d023      	beq.n	800295a <MX_RTC_Init+0x96>
  {
	  	sTime.Hours = 18;
 8002912:	2312      	movs	r3, #18
 8002914:	713b      	strb	r3, [r7, #4]
	    sTime.Minutes = 5;
 8002916:	2305      	movs	r3, #5
 8002918:	717b      	strb	r3, [r7, #5]
	    sTime.Seconds = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	71bb      	strb	r3, [r7, #6]

	    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800291e:	1d3b      	adds	r3, r7, #4
 8002920:	2200      	movs	r2, #0
 8002922:	4619      	mov	r1, r3
 8002924:	4824      	ldr	r0, [pc, #144]	; (80029b8 <MX_RTC_Init+0xf4>)
 8002926:	f003 fd05 	bl	8006334 <HAL_RTC_SetTime>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_RTC_Init+0x70>
	    {
	      Error_Handler();
 8002930:	f000 f910 	bl	8002b54 <Error_Handler>
	    }
	    DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002934:	2306      	movs	r3, #6
 8002936:	703b      	strb	r3, [r7, #0]
	    DateToUpdate.Month = RTC_MONTH_SEPTEMBER;
 8002938:	2309      	movs	r3, #9
 800293a:	707b      	strb	r3, [r7, #1]
	    DateToUpdate.Date = 23;
 800293c:	2317      	movs	r3, #23
 800293e:	70bb      	strb	r3, [r7, #2]
	    DateToUpdate.Year = 23;
 8002940:	2317      	movs	r3, #23
 8002942:	70fb      	strb	r3, [r7, #3]

	    if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8002944:	463b      	mov	r3, r7
 8002946:	2200      	movs	r2, #0
 8002948:	4619      	mov	r1, r3
 800294a:	481b      	ldr	r0, [pc, #108]	; (80029b8 <MX_RTC_Init+0xf4>)
 800294c:	f003 fe62 	bl	8006614 <HAL_RTC_SetDate>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_RTC_Init+0x96>
	    {
	      Error_Handler();
 8002956:	f000 f8fd 	bl	8002b54 <Error_Handler>
	    }
  }

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_BKP_SET_TIME);
 800295a:	f242 6206 	movw	r2, #9734	; 0x2606
 800295e:	2101      	movs	r1, #1
 8002960:	4815      	ldr	r0, [pc, #84]	; (80029b8 <MX_RTC_Init+0xf4>)
 8002962:	f004 fa4d 	bl	8006e00 <HAL_RTCEx_BKUPWrite>
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 17;
 8002966:	2311      	movs	r3, #17
 8002968:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 56;
 800296a:	2338      	movs	r3, #56	; 0x38
 800296c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	2200      	movs	r2, #0
 8002976:	4619      	mov	r1, r3
 8002978:	480f      	ldr	r0, [pc, #60]	; (80029b8 <MX_RTC_Init+0xf4>)
 800297a:	f003 fcdb 	bl	8006334 <HAL_RTC_SetTime>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8002984:	f000 f8e6 	bl	8002b54 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002988:	2306      	movs	r3, #6
 800298a:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_SEPTEMBER;
 800298c:	2309      	movs	r3, #9
 800298e:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 23;
 8002990:	2317      	movs	r3, #23
 8002992:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 23;
 8002994:	2317      	movs	r3, #23
 8002996:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8002998:	463b      	mov	r3, r7
 800299a:	2200      	movs	r2, #0
 800299c:	4619      	mov	r1, r3
 800299e:	4806      	ldr	r0, [pc, #24]	; (80029b8 <MX_RTC_Init+0xf4>)
 80029a0:	f003 fe38 	bl	8006614 <HAL_RTC_SetDate>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_RTC_Init+0xea>
  {
    Error_Handler();
 80029aa:	f000 f8d3 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200002e4 	.word	0x200002e4
 80029bc:	40002800 	.word	0x40002800

080029c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <MX_USART1_UART_Init+0x4c>)
 80029c6:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <MX_USART1_UART_Init+0x50>)
 80029c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <MX_USART1_UART_Init+0x4c>)
 80029cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029d2:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <MX_USART1_UART_Init+0x4c>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <MX_USART1_UART_Init+0x4c>)
 80029da:	2200      	movs	r2, #0
 80029dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029de:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <MX_USART1_UART_Init+0x4c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029e4:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <MX_USART1_UART_Init+0x4c>)
 80029e6:	220c      	movs	r2, #12
 80029e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <MX_USART1_UART_Init+0x4c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <MX_USART1_UART_Init+0x4c>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029f6:	4805      	ldr	r0, [pc, #20]	; (8002a0c <MX_USART1_UART_Init+0x4c>)
 80029f8:	f004 fa38 	bl	8006e6c <HAL_UART_Init>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a02:	f000 f8a7 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	200002f8 	.word	0x200002f8
 8002a10:	40013800 	.word	0x40013800

08002a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1a:	f107 0310 	add.w	r3, r7, #16
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	605a      	str	r2, [r3, #4]
 8002a24:	609a      	str	r2, [r3, #8]
 8002a26:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a28:	4b39      	ldr	r3, [pc, #228]	; (8002b10 <MX_GPIO_Init+0xfc>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	4a38      	ldr	r2, [pc, #224]	; (8002b10 <MX_GPIO_Init+0xfc>)
 8002a2e:	f043 0310 	orr.w	r3, r3, #16
 8002a32:	6193      	str	r3, [r2, #24]
 8002a34:	4b36      	ldr	r3, [pc, #216]	; (8002b10 <MX_GPIO_Init+0xfc>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a40:	4b33      	ldr	r3, [pc, #204]	; (8002b10 <MX_GPIO_Init+0xfc>)
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	4a32      	ldr	r2, [pc, #200]	; (8002b10 <MX_GPIO_Init+0xfc>)
 8002a46:	f043 0320 	orr.w	r3, r3, #32
 8002a4a:	6193      	str	r3, [r2, #24]
 8002a4c:	4b30      	ldr	r3, [pc, #192]	; (8002b10 <MX_GPIO_Init+0xfc>)
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a58:	4b2d      	ldr	r3, [pc, #180]	; (8002b10 <MX_GPIO_Init+0xfc>)
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	4a2c      	ldr	r2, [pc, #176]	; (8002b10 <MX_GPIO_Init+0xfc>)
 8002a5e:	f043 0304 	orr.w	r3, r3, #4
 8002a62:	6193      	str	r3, [r2, #24]
 8002a64:	4b2a      	ldr	r3, [pc, #168]	; (8002b10 <MX_GPIO_Init+0xfc>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	607b      	str	r3, [r7, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a70:	4b27      	ldr	r3, [pc, #156]	; (8002b10 <MX_GPIO_Init+0xfc>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	4a26      	ldr	r2, [pc, #152]	; (8002b10 <MX_GPIO_Init+0xfc>)
 8002a76:	f043 0308 	orr.w	r3, r3, #8
 8002a7a:	6193      	str	r3, [r2, #24]
 8002a7c:	4b24      	ldr	r3, [pc, #144]	; (8002b10 <MX_GPIO_Init+0xfc>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	603b      	str	r3, [r7, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a8e:	4821      	ldr	r0, [pc, #132]	; (8002b14 <MX_GPIO_Init+0x100>)
 8002a90:	f001 fdd7 	bl	8004642 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|HT_CTRL_Pin, GPIO_PIN_RESET);
 8002a94:	2200      	movs	r2, #0
 8002a96:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002a9a:	481f      	ldr	r0, [pc, #124]	; (8002b18 <MX_GPIO_Init+0x104>)
 8002a9c:	f001 fdd1 	bl	8004642 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002aa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002ab2:	f107 0310 	add.w	r3, r7, #16
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4816      	ldr	r0, [pc, #88]	; (8002b14 <MX_GPIO_Init+0x100>)
 8002aba:	f001 fc27 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin HT_CTRL_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|HT_CTRL_Pin;
 8002abe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002ac2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002acc:	2302      	movs	r3, #2
 8002ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad0:	f107 0310 	add.w	r3, r7, #16
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4810      	ldr	r0, [pc, #64]	; (8002b18 <MX_GPIO_Init+0x104>)
 8002ad8:	f001 fc18 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8002adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ae2:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <MX_GPIO_Init+0x108>)
 8002ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8002aea:	f107 0310 	add.w	r3, r7, #16
 8002aee:	4619      	mov	r1, r3
 8002af0:	480b      	ldr	r0, [pc, #44]	; (8002b20 <MX_GPIO_Init+0x10c>)
 8002af2:	f001 fc0b 	bl	800430c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2102      	movs	r1, #2
 8002afa:	2017      	movs	r0, #23
 8002afc:	f001 f91d 	bl	8003d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b00:	2017      	movs	r0, #23
 8002b02:	f001 f936 	bl	8003d72 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b06:	bf00      	nop
 8002b08:	3720      	adds	r7, #32
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40011000 	.word	0x40011000
 8002b18:	40010c00 	.word	0x40010c00
 8002b1c:	10210000 	.word	0x10210000
 8002b20:	40010800 	.word	0x40010800

08002b24 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	80fb      	strh	r3, [r7, #6]
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  if (GPIO_Pin == GPIO_PIN_8) {

  }
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  uart_flag = true;
 8002b40:	4b03      	ldr	r3, [pc, #12]	; (8002b50 <HAL_UART_RxCpltCallback+0x18>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	701a      	strb	r2, [r3, #0]
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	200003b4 	.word	0x200003b4

08002b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr

08002b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b66:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <HAL_MspInit+0x5c>)
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	4a14      	ldr	r2, [pc, #80]	; (8002bbc <HAL_MspInit+0x5c>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6193      	str	r3, [r2, #24]
 8002b72:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_MspInit+0x5c>)
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <HAL_MspInit+0x5c>)
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	4a0e      	ldr	r2, [pc, #56]	; (8002bbc <HAL_MspInit+0x5c>)
 8002b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b88:	61d3      	str	r3, [r2, #28]
 8002b8a:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <HAL_MspInit+0x5c>)
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b92:	607b      	str	r3, [r7, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b96:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <HAL_MspInit+0x60>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <HAL_MspInit+0x60>)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40010000 	.word	0x40010000

08002bc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bcc:	f107 0310 	add.w	r3, r7, #16
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a14      	ldr	r2, [pc, #80]	; (8002c30 <HAL_ADC_MspInit+0x6c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d121      	bne.n	8002c28 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002be4:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <HAL_ADC_MspInit+0x70>)
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	4a12      	ldr	r2, [pc, #72]	; (8002c34 <HAL_ADC_MspInit+0x70>)
 8002bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bee:	6193      	str	r3, [r2, #24]
 8002bf0:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <HAL_ADC_MspInit+0x70>)
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfc:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <HAL_ADC_MspInit+0x70>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	4a0c      	ldr	r2, [pc, #48]	; (8002c34 <HAL_ADC_MspInit+0x70>)
 8002c02:	f043 0304 	orr.w	r3, r3, #4
 8002c06:	6193      	str	r3, [r2, #24]
 8002c08:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <HAL_ADC_MspInit+0x70>)
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = MQ2_ADC_Pin;
 8002c14:	2301      	movs	r3, #1
 8002c16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(MQ2_ADC_GPIO_Port, &GPIO_InitStruct);
 8002c1c:	f107 0310 	add.w	r3, r7, #16
 8002c20:	4619      	mov	r1, r3
 8002c22:	4805      	ldr	r0, [pc, #20]	; (8002c38 <HAL_ADC_MspInit+0x74>)
 8002c24:	f001 fb72 	bl	800430c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c28:	bf00      	nop
 8002c2a:	3720      	adds	r7, #32
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40012400 	.word	0x40012400
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40010800 	.word	0x40010800

08002c3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	; 0x28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 0318 	add.w	r3, r7, #24
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a2b      	ldr	r2, [pc, #172]	; (8002d04 <HAL_I2C_MspInit+0xc8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d124      	bne.n	8002ca6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5c:	4b2a      	ldr	r3, [pc, #168]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	4a29      	ldr	r2, [pc, #164]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002c62:	f043 0308 	orr.w	r3, r3, #8
 8002c66:	6193      	str	r3, [r2, #24]
 8002c68:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = AHT10_SCL_Pin|AHT10_SDA_Pin;
 8002c74:	23c0      	movs	r3, #192	; 0xc0
 8002c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c78:	2312      	movs	r3, #18
 8002c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c80:	f107 0318 	add.w	r3, r7, #24
 8002c84:	4619      	mov	r1, r3
 8002c86:	4821      	ldr	r0, [pc, #132]	; (8002d0c <HAL_I2C_MspInit+0xd0>)
 8002c88:	f001 fb40 	bl	800430c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c8c:	4b1e      	ldr	r3, [pc, #120]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	4a1d      	ldr	r2, [pc, #116]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002c92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c96:	61d3      	str	r3, [r2, #28]
 8002c98:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002ca4:	e029      	b.n	8002cfa <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a19      	ldr	r2, [pc, #100]	; (8002d10 <HAL_I2C_MspInit+0xd4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d124      	bne.n	8002cfa <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb0:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002cb6:	f043 0308 	orr.w	r3, r3, #8
 8002cba:	6193      	str	r3, [r2, #24]
 8002cbc:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002cc8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cce:	2312      	movs	r3, #18
 8002cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd6:	f107 0318 	add.w	r3, r7, #24
 8002cda:	4619      	mov	r1, r3
 8002cdc:	480b      	ldr	r0, [pc, #44]	; (8002d0c <HAL_I2C_MspInit+0xd0>)
 8002cde:	f001 fb15 	bl	800430c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	4a08      	ldr	r2, [pc, #32]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002ce8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cec:	61d3      	str	r3, [r2, #28]
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_I2C_MspInit+0xcc>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
}
 8002cfa:	bf00      	nop
 8002cfc:	3728      	adds	r7, #40	; 0x28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40005400 	.word	0x40005400
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40010c00 	.word	0x40010c00
 8002d10:	40005800 	.word	0x40005800

08002d14 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a0f      	ldr	r2, [pc, #60]	; (8002d60 <HAL_RTC_MspInit+0x4c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d118      	bne.n	8002d58 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002d26:	f002 fcf1 	bl	800570c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <HAL_RTC_MspInit+0x50>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	4a0d      	ldr	r2, [pc, #52]	; (8002d64 <HAL_RTC_MspInit+0x50>)
 8002d30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d34:	61d3      	str	r3, [r2, #28]
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_RTC_MspInit+0x50>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d42:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <HAL_RTC_MspInit+0x54>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 1, 0);
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	2003      	movs	r0, #3
 8002d4e:	f000 fff4 	bl	8003d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002d52:	2003      	movs	r0, #3
 8002d54:	f001 f80d 	bl	8003d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40002800 	.word	0x40002800
 8002d64:	40021000 	.word	0x40021000
 8002d68:	4242043c 	.word	0x4242043c

08002d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d74:	f107 0310 	add.w	r3, r7, #16
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a20      	ldr	r2, [pc, #128]	; (8002e08 <HAL_UART_MspInit+0x9c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d139      	bne.n	8002e00 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d8c:	4b1f      	ldr	r3, [pc, #124]	; (8002e0c <HAL_UART_MspInit+0xa0>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	4a1e      	ldr	r2, [pc, #120]	; (8002e0c <HAL_UART_MspInit+0xa0>)
 8002d92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d96:	6193      	str	r3, [r2, #24]
 8002d98:	4b1c      	ldr	r3, [pc, #112]	; (8002e0c <HAL_UART_MspInit+0xa0>)
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da4:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <HAL_UART_MspInit+0xa0>)
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	4a18      	ldr	r2, [pc, #96]	; (8002e0c <HAL_UART_MspInit+0xa0>)
 8002daa:	f043 0304 	orr.w	r3, r3, #4
 8002dae:	6193      	str	r3, [r2, #24]
 8002db0:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <HAL_UART_MspInit+0xa0>)
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dca:	f107 0310 	add.w	r3, r7, #16
 8002dce:	4619      	mov	r1, r3
 8002dd0:	480f      	ldr	r0, [pc, #60]	; (8002e10 <HAL_UART_MspInit+0xa4>)
 8002dd2:	f001 fa9b 	bl	800430c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de4:	f107 0310 	add.w	r3, r7, #16
 8002de8:	4619      	mov	r1, r3
 8002dea:	4809      	ldr	r0, [pc, #36]	; (8002e10 <HAL_UART_MspInit+0xa4>)
 8002dec:	f001 fa8e 	bl	800430c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002df0:	2200      	movs	r2, #0
 8002df2:	2102      	movs	r1, #2
 8002df4:	2025      	movs	r0, #37	; 0x25
 8002df6:	f000 ffa0 	bl	8003d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002dfa:	2025      	movs	r0, #37	; 0x25
 8002dfc:	f000 ffb9 	bl	8003d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e00:	bf00      	nop
 8002e02:	3720      	adds	r7, #32
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40013800 	.word	0x40013800
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40010800 	.word	0x40010800

08002e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e18:	e7fe      	b.n	8002e18 <NMI_Handler+0x4>

08002e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e1e:	e7fe      	b.n	8002e1e <HardFault_Handler+0x4>

08002e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e24:	e7fe      	b.n	8002e24 <MemManage_Handler+0x4>

08002e26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e2a:	e7fe      	b.n	8002e2a <BusFault_Handler+0x4>

08002e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e30:	e7fe      	b.n	8002e30 <UsageFault_Handler+0x4>

08002e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e32:	b480      	push	{r7}
 8002e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr

08002e3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr

08002e56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e5a:	f000 f951 	bl	8003100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8002e68:	4802      	ldr	r0, [pc, #8]	; (8002e74 <RTC_IRQHandler+0x10>)
 8002e6a:	f003 ff7f 	bl	8006d6c <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	200002e4 	.word	0x200002e4

08002e78 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8002e7c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002e80:	f001 fbf8 	bl	8004674 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e84:	bf00      	nop
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e8c:	4802      	ldr	r0, [pc, #8]	; (8002e98 <USART1_IRQHandler+0x10>)
 8002e8e:	f004 f8e5 	bl	800705c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	200002f8 	.word	0x200002f8

08002e9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return 1;
 8002ea0:	2301      	movs	r3, #1
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <_kill>:

int _kill(int pid, int sig)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002eb4:	f006 f882 	bl	8008fbc <__errno>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2216      	movs	r2, #22
 8002ebc:	601a      	str	r2, [r3, #0]
  return -1;
 8002ebe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <_exit>:

void _exit (int status)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ed2:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff ffe7 	bl	8002eaa <_kill>
  while (1) {}    /* Make sure we hang here */
 8002edc:	e7fe      	b.n	8002edc <_exit+0x12>

08002ede <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b086      	sub	sp, #24
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e00a      	b.n	8002f06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ef0:	f3af 8000 	nop.w
 8002ef4:	4601      	mov	r1, r0
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	60ba      	str	r2, [r7, #8]
 8002efc:	b2ca      	uxtb	r2, r1
 8002efe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	3301      	adds	r3, #1
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	dbf0      	blt.n	8002ef0 <_read+0x12>
  }

  return len;
 8002f0e:	687b      	ldr	r3, [r7, #4]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	e009      	b.n	8002f3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	60ba      	str	r2, [r7, #8]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	dbf1      	blt.n	8002f2a <_write+0x12>
  }
  return len;
 8002f46:	687b      	ldr	r3, [r7, #4]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <_close>:

int _close(int file)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr

08002f66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
 8002f6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f76:	605a      	str	r2, [r3, #4]
  return 0;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <_isatty>:

int _isatty(int file)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f8c:	2301      	movs	r3, #1
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr

08002f98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr

08002fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fb8:	4a14      	ldr	r2, [pc, #80]	; (800300c <_sbrk+0x5c>)
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <_sbrk+0x60>)
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <_sbrk+0x64>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d102      	bne.n	8002fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <_sbrk+0x64>)
 8002fce:	4a12      	ldr	r2, [pc, #72]	; (8003018 <_sbrk+0x68>)
 8002fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fd2:	4b10      	ldr	r3, [pc, #64]	; (8003014 <_sbrk+0x64>)
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4413      	add	r3, r2
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d207      	bcs.n	8002ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fe0:	f005 ffec 	bl	8008fbc <__errno>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	220c      	movs	r2, #12
 8002fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295
 8002fee:	e009      	b.n	8003004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ff0:	4b08      	ldr	r3, [pc, #32]	; (8003014 <_sbrk+0x64>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ff6:	4b07      	ldr	r3, [pc, #28]	; (8003014 <_sbrk+0x64>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	4a05      	ldr	r2, [pc, #20]	; (8003014 <_sbrk+0x64>)
 8003000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003002:	68fb      	ldr	r3, [r7, #12]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20005000 	.word	0x20005000
 8003010:	00000400 	.word	0x00000400
 8003014:	200003ec 	.word	0x200003ec
 8003018:	20000568 	.word	0x20000568

0800301c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr

08003028 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003028:	f7ff fff8 	bl	800301c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800302c:	480b      	ldr	r0, [pc, #44]	; (800305c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800302e:	490c      	ldr	r1, [pc, #48]	; (8003060 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003030:	4a0c      	ldr	r2, [pc, #48]	; (8003064 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003034:	e002      	b.n	800303c <LoopCopyDataInit>

08003036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800303a:	3304      	adds	r3, #4

0800303c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800303c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800303e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003040:	d3f9      	bcc.n	8003036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003042:	4a09      	ldr	r2, [pc, #36]	; (8003068 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003044:	4c09      	ldr	r4, [pc, #36]	; (800306c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003048:	e001      	b.n	800304e <LoopFillZerobss>

0800304a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800304a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800304c:	3204      	adds	r2, #4

0800304e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800304e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003050:	d3fb      	bcc.n	800304a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003052:	f005 ffb9 	bl	8008fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003056:	f7ff fa5b 	bl	8002510 <main>
  bx lr
 800305a:	4770      	bx	lr
  ldr r0, =_sdata
 800305c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003060:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003064:	0800df08 	.word	0x0800df08
  ldr r2, =_sbss
 8003068:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800306c:	20000564 	.word	0x20000564

08003070 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003070:	e7fe      	b.n	8003070 <ADC1_2_IRQHandler>
	...

08003074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003078:	4b08      	ldr	r3, [pc, #32]	; (800309c <HAL_Init+0x28>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a07      	ldr	r2, [pc, #28]	; (800309c <HAL_Init+0x28>)
 800307e:	f043 0310 	orr.w	r3, r3, #16
 8003082:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003084:	2003      	movs	r0, #3
 8003086:	f000 fe4d 	bl	8003d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800308a:	200f      	movs	r0, #15
 800308c:	f000 f808 	bl	80030a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003090:	f7ff fd66 	bl	8002b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40022000 	.word	0x40022000

080030a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030a8:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <HAL_InitTick+0x54>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <HAL_InitTick+0x58>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	4619      	mov	r1, r3
 80030b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fe65 	bl	8003d8e <HAL_SYSTICK_Config>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e00e      	b.n	80030ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b0f      	cmp	r3, #15
 80030d2:	d80a      	bhi.n	80030ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030d4:	2200      	movs	r2, #0
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	f04f 30ff 	mov.w	r0, #4294967295
 80030dc:	f000 fe2d 	bl	8003d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030e0:	4a06      	ldr	r2, [pc, #24]	; (80030fc <HAL_InitTick+0x5c>)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	e000      	b.n	80030ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	2000000c 	.word	0x2000000c
 80030f8:	20000014 	.word	0x20000014
 80030fc:	20000010 	.word	0x20000010

08003100 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_IncTick+0x1c>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	4b05      	ldr	r3, [pc, #20]	; (8003120 <HAL_IncTick+0x20>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4413      	add	r3, r2
 8003110:	4a03      	ldr	r2, [pc, #12]	; (8003120 <HAL_IncTick+0x20>)
 8003112:	6013      	str	r3, [r2, #0]
}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr
 800311c:	20000014 	.word	0x20000014
 8003120:	200003f0 	.word	0x200003f0

08003124 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return uwTick;
 8003128:	4b02      	ldr	r3, [pc, #8]	; (8003134 <HAL_GetTick+0x10>)
 800312a:	681b      	ldr	r3, [r3, #0]
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr
 8003134:	200003f0 	.word	0x200003f0

08003138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003140:	f7ff fff0 	bl	8003124 <HAL_GetTick>
 8003144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003150:	d005      	beq.n	800315e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003152:	4b0a      	ldr	r3, [pc, #40]	; (800317c <HAL_Delay+0x44>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800315e:	bf00      	nop
 8003160:	f7ff ffe0 	bl	8003124 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	429a      	cmp	r2, r3
 800316e:	d8f7      	bhi.n	8003160 <HAL_Delay+0x28>
  {
  }
}
 8003170:	bf00      	nop
 8003172:	bf00      	nop
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20000014 	.word	0x20000014

08003180 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e0be      	b.n	8003320 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d109      	bne.n	80031c4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff fd00 	bl	8002bc4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 fbf1 	bl	80039ac <ADC_ConversionStop_Disable>
 80031ca:	4603      	mov	r3, r0
 80031cc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	f003 0310 	and.w	r3, r3, #16
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f040 8099 	bne.w	800330e <HAL_ADC_Init+0x18e>
 80031dc:	7dfb      	ldrb	r3, [r7, #23]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f040 8095 	bne.w	800330e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031ec:	f023 0302 	bic.w	r3, r3, #2
 80031f0:	f043 0202 	orr.w	r2, r3, #2
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003200:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	7b1b      	ldrb	r3, [r3, #12]
 8003206:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003208:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	4313      	orrs	r3, r2
 800320e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003218:	d003      	beq.n	8003222 <HAL_ADC_Init+0xa2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d102      	bne.n	8003228 <HAL_ADC_Init+0xa8>
 8003222:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003226:	e000      	b.n	800322a <HAL_ADC_Init+0xaa>
 8003228:	2300      	movs	r3, #0
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	7d1b      	ldrb	r3, [r3, #20]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d119      	bne.n	800326c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	7b1b      	ldrb	r3, [r3, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d109      	bne.n	8003254 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	3b01      	subs	r3, #1
 8003246:	035a      	lsls	r2, r3, #13
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	e00b      	b.n	800326c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	f043 0220 	orr.w	r2, r3, #32
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	f043 0201 	orr.w	r2, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	430a      	orrs	r2, r1
 800327e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	4b28      	ldr	r3, [pc, #160]	; (8003328 <HAL_ADC_Init+0x1a8>)
 8003288:	4013      	ands	r3, r2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6812      	ldr	r2, [r2, #0]
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	430b      	orrs	r3, r1
 8003292:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800329c:	d003      	beq.n	80032a6 <HAL_ADC_Init+0x126>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d104      	bne.n	80032b0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	051b      	lsls	r3, r3, #20
 80032ae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	4b18      	ldr	r3, [pc, #96]	; (800332c <HAL_ADC_Init+0x1ac>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d10b      	bne.n	80032ec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	f023 0303 	bic.w	r3, r3, #3
 80032e2:	f043 0201 	orr.w	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032ea:	e018      	b.n	800331e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	f023 0312 	bic.w	r3, r3, #18
 80032f4:	f043 0210 	orr.w	r2, r3, #16
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	f043 0201 	orr.w	r2, r3, #1
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800330c:	e007      	b.n	800331e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	f043 0210 	orr.w	r2, r3, #16
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800331e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	ffe1f7fd 	.word	0xffe1f7fd
 800332c:	ff1f0efe 	.word	0xff1f0efe

08003330 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_ADC_Start+0x1a>
 8003346:	2302      	movs	r3, #2
 8003348:	e098      	b.n	800347c <HAL_ADC_Start+0x14c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fad0 	bl	80038f8 <ADC_Enable>
 8003358:	4603      	mov	r3, r0
 800335a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f040 8087 	bne.w	8003472 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800336c:	f023 0301 	bic.w	r3, r3, #1
 8003370:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a41      	ldr	r2, [pc, #260]	; (8003484 <HAL_ADC_Start+0x154>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d105      	bne.n	800338e <HAL_ADC_Start+0x5e>
 8003382:	4b41      	ldr	r3, [pc, #260]	; (8003488 <HAL_ADC_Start+0x158>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d115      	bne.n	80033ba <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d026      	beq.n	80033f6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033b8:	e01d      	b.n	80033f6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a2f      	ldr	r2, [pc, #188]	; (8003488 <HAL_ADC_Start+0x158>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d004      	beq.n	80033da <HAL_ADC_Start+0xaa>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a2b      	ldr	r2, [pc, #172]	; (8003484 <HAL_ADC_Start+0x154>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d10d      	bne.n	80033f6 <HAL_ADC_Start+0xc6>
 80033da:	4b2b      	ldr	r3, [pc, #172]	; (8003488 <HAL_ADC_Start+0x158>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d007      	beq.n	80033f6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d006      	beq.n	8003410 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003406:	f023 0206 	bic.w	r2, r3, #6
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	62da      	str	r2, [r3, #44]	; 0x2c
 800340e:	e002      	b.n	8003416 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f06f 0202 	mvn.w	r2, #2
 8003426:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003432:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003436:	d113      	bne.n	8003460 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800343c:	4a11      	ldr	r2, [pc, #68]	; (8003484 <HAL_ADC_Start+0x154>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d105      	bne.n	800344e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003442:	4b11      	ldr	r3, [pc, #68]	; (8003488 <HAL_ADC_Start+0x158>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800344a:	2b00      	cmp	r3, #0
 800344c:	d108      	bne.n	8003460 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800345c:	609a      	str	r2, [r3, #8]
 800345e:	e00c      	b.n	800347a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	e003      	b.n	800347a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800347a:	7bfb      	ldrb	r3, [r7, #15]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40012800 	.word	0x40012800
 8003488:	40012400 	.word	0x40012400

0800348c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_ADC_Stop+0x1a>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e01a      	b.n	80034dc <HAL_ADC_Stop+0x50>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fa7c 	bl	80039ac <ADC_ConversionStop_Disable>
 80034b4:	4603      	mov	r3, r0
 80034b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034c6:	f023 0301 	bic.w	r3, r3, #1
 80034ca:	f043 0201 	orr.w	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80034da:	7bfb      	ldrb	r3, [r7, #15]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80034e4:	b590      	push	{r4, r7, lr}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80034fa:	f7ff fe13 	bl	8003124 <HAL_GetTick>
 80034fe:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00b      	beq.n	8003526 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003512:	f043 0220 	orr.w	r2, r3, #32
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e0d3      	b.n	80036ce <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003530:	2b00      	cmp	r3, #0
 8003532:	d131      	bne.n	8003598 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800353e:	2b00      	cmp	r3, #0
 8003540:	d12a      	bne.n	8003598 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003542:	e021      	b.n	8003588 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354a:	d01d      	beq.n	8003588 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <HAL_ADC_PollForConversion+0x7e>
 8003552:	f7ff fde7 	bl	8003124 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d212      	bcs.n	8003588 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10b      	bne.n	8003588 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	f043 0204 	orr.w	r2, r3, #4
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e0a2      	b.n	80036ce <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0d6      	beq.n	8003544 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003596:	e070      	b.n	800367a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003598:	4b4f      	ldr	r3, [pc, #316]	; (80036d8 <HAL_ADC_PollForConversion+0x1f4>)
 800359a:	681c      	ldr	r4, [r3, #0]
 800359c:	2002      	movs	r0, #2
 800359e:	f002 fd87 	bl	80060b0 <HAL_RCCEx_GetPeriphCLKFreq>
 80035a2:	4603      	mov	r3, r0
 80035a4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6919      	ldr	r1, [r3, #16]
 80035ae:	4b4b      	ldr	r3, [pc, #300]	; (80036dc <HAL_ADC_PollForConversion+0x1f8>)
 80035b0:	400b      	ands	r3, r1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d118      	bne.n	80035e8 <HAL_ADC_PollForConversion+0x104>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68d9      	ldr	r1, [r3, #12]
 80035bc:	4b48      	ldr	r3, [pc, #288]	; (80036e0 <HAL_ADC_PollForConversion+0x1fc>)
 80035be:	400b      	ands	r3, r1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d111      	bne.n	80035e8 <HAL_ADC_PollForConversion+0x104>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6919      	ldr	r1, [r3, #16]
 80035ca:	4b46      	ldr	r3, [pc, #280]	; (80036e4 <HAL_ADC_PollForConversion+0x200>)
 80035cc:	400b      	ands	r3, r1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d108      	bne.n	80035e4 <HAL_ADC_PollForConversion+0x100>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68d9      	ldr	r1, [r3, #12]
 80035d8:	4b43      	ldr	r3, [pc, #268]	; (80036e8 <HAL_ADC_PollForConversion+0x204>)
 80035da:	400b      	ands	r3, r1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_ADC_PollForConversion+0x100>
 80035e0:	2314      	movs	r3, #20
 80035e2:	e020      	b.n	8003626 <HAL_ADC_PollForConversion+0x142>
 80035e4:	2329      	movs	r3, #41	; 0x29
 80035e6:	e01e      	b.n	8003626 <HAL_ADC_PollForConversion+0x142>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6919      	ldr	r1, [r3, #16]
 80035ee:	4b3d      	ldr	r3, [pc, #244]	; (80036e4 <HAL_ADC_PollForConversion+0x200>)
 80035f0:	400b      	ands	r3, r1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <HAL_ADC_PollForConversion+0x120>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68d9      	ldr	r1, [r3, #12]
 80035fc:	4b3a      	ldr	r3, [pc, #232]	; (80036e8 <HAL_ADC_PollForConversion+0x204>)
 80035fe:	400b      	ands	r3, r1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00d      	beq.n	8003620 <HAL_ADC_PollForConversion+0x13c>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6919      	ldr	r1, [r3, #16]
 800360a:	4b38      	ldr	r3, [pc, #224]	; (80036ec <HAL_ADC_PollForConversion+0x208>)
 800360c:	400b      	ands	r3, r1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d108      	bne.n	8003624 <HAL_ADC_PollForConversion+0x140>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68d9      	ldr	r1, [r3, #12]
 8003618:	4b34      	ldr	r3, [pc, #208]	; (80036ec <HAL_ADC_PollForConversion+0x208>)
 800361a:	400b      	ands	r3, r1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_ADC_PollForConversion+0x140>
 8003620:	2354      	movs	r3, #84	; 0x54
 8003622:	e000      	b.n	8003626 <HAL_ADC_PollForConversion+0x142>
 8003624:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003626:	fb02 f303 	mul.w	r3, r2, r3
 800362a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800362c:	e021      	b.n	8003672 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003634:	d01a      	beq.n	800366c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d007      	beq.n	800364c <HAL_ADC_PollForConversion+0x168>
 800363c:	f7ff fd72 	bl	8003124 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d20f      	bcs.n	800366c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	429a      	cmp	r2, r3
 8003652:	d90b      	bls.n	800366c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003658:	f043 0204 	orr.w	r2, r3, #4
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e030      	b.n	80036ce <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	3301      	adds	r3, #1
 8003670:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	429a      	cmp	r2, r3
 8003678:	d8d9      	bhi.n	800362e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f06f 0212 	mvn.w	r2, #18
 8003682:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003688:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800369a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800369e:	d115      	bne.n	80036cc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d111      	bne.n	80036cc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d105      	bne.n	80036cc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c4:	f043 0201 	orr.w	r2, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	371c      	adds	r7, #28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd90      	pop	{r4, r7, pc}
 80036d6:	bf00      	nop
 80036d8:	2000000c 	.word	0x2000000c
 80036dc:	24924924 	.word	0x24924924
 80036e0:	00924924 	.word	0x00924924
 80036e4:	12492492 	.word	0x12492492
 80036e8:	00492492 	.word	0x00492492
 80036ec:	00249249 	.word	0x00249249

080036f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr

08003708 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x20>
 8003724:	2302      	movs	r3, #2
 8003726:	e0dc      	b.n	80038e2 <HAL_ADC_ConfigChannel+0x1da>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b06      	cmp	r3, #6
 8003736:	d81c      	bhi.n	8003772 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	3b05      	subs	r3, #5
 800374a:	221f      	movs	r2, #31
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	4019      	ands	r1, r3
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	6818      	ldr	r0, [r3, #0]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	3b05      	subs	r3, #5
 8003764:	fa00 f203 	lsl.w	r2, r0, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	635a      	str	r2, [r3, #52]	; 0x34
 8003770:	e03c      	b.n	80037ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b0c      	cmp	r3, #12
 8003778:	d81c      	bhi.n	80037b4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	3b23      	subs	r3, #35	; 0x23
 800378c:	221f      	movs	r2, #31
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	4019      	ands	r1, r3
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	6818      	ldr	r0, [r3, #0]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	3b23      	subs	r3, #35	; 0x23
 80037a6:	fa00 f203 	lsl.w	r2, r0, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	631a      	str	r2, [r3, #48]	; 0x30
 80037b2:	e01b      	b.n	80037ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	3b41      	subs	r3, #65	; 0x41
 80037c6:	221f      	movs	r2, #31
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	43db      	mvns	r3, r3
 80037ce:	4019      	ands	r1, r3
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	3b41      	subs	r3, #65	; 0x41
 80037e0:	fa00 f203 	lsl.w	r2, r0, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b09      	cmp	r3, #9
 80037f2:	d91c      	bls.n	800382e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68d9      	ldr	r1, [r3, #12]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	4613      	mov	r3, r2
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	4413      	add	r3, r2
 8003804:	3b1e      	subs	r3, #30
 8003806:	2207      	movs	r2, #7
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	43db      	mvns	r3, r3
 800380e:	4019      	ands	r1, r3
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	6898      	ldr	r0, [r3, #8]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	4613      	mov	r3, r2
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	4413      	add	r3, r2
 800381e:	3b1e      	subs	r3, #30
 8003820:	fa00 f203 	lsl.w	r2, r0, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	60da      	str	r2, [r3, #12]
 800382c:	e019      	b.n	8003862 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6919      	ldr	r1, [r3, #16]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	4613      	mov	r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4413      	add	r3, r2
 800383e:	2207      	movs	r2, #7
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	4019      	ands	r1, r3
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	6898      	ldr	r0, [r3, #8]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	4613      	mov	r3, r2
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	4413      	add	r3, r2
 8003856:	fa00 f203 	lsl.w	r2, r0, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b10      	cmp	r3, #16
 8003868:	d003      	beq.n	8003872 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800386e:	2b11      	cmp	r3, #17
 8003870:	d132      	bne.n	80038d8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a1d      	ldr	r2, [pc, #116]	; (80038ec <HAL_ADC_ConfigChannel+0x1e4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d125      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d126      	bne.n	80038d8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003898:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b10      	cmp	r3, #16
 80038a0:	d11a      	bne.n	80038d8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038a2:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <HAL_ADC_ConfigChannel+0x1e8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <HAL_ADC_ConfigChannel+0x1ec>)
 80038a8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ac:	0c9a      	lsrs	r2, r3, #18
 80038ae:	4613      	mov	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038b8:	e002      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	3b01      	subs	r3, #1
 80038be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f9      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x1b2>
 80038c6:	e007      	b.n	80038d8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	f043 0220 	orr.w	r2, r3, #32
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr
 80038ec:	40012400 	.word	0x40012400
 80038f0:	2000000c 	.word	0x2000000c
 80038f4:	431bde83 	.word	0x431bde83

080038f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b01      	cmp	r3, #1
 8003914:	d040      	beq.n	8003998 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f042 0201 	orr.w	r2, r2, #1
 8003924:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003926:	4b1f      	ldr	r3, [pc, #124]	; (80039a4 <ADC_Enable+0xac>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a1f      	ldr	r2, [pc, #124]	; (80039a8 <ADC_Enable+0xb0>)
 800392c:	fba2 2303 	umull	r2, r3, r2, r3
 8003930:	0c9b      	lsrs	r3, r3, #18
 8003932:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003934:	e002      	b.n	800393c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	3b01      	subs	r3, #1
 800393a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f9      	bne.n	8003936 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003942:	f7ff fbef 	bl	8003124 <HAL_GetTick>
 8003946:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003948:	e01f      	b.n	800398a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800394a:	f7ff fbeb 	bl	8003124 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d918      	bls.n	800398a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b01      	cmp	r3, #1
 8003964:	d011      	beq.n	800398a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	f043 0210 	orr.w	r2, r3, #16
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003976:	f043 0201 	orr.w	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e007      	b.n	800399a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b01      	cmp	r3, #1
 8003996:	d1d8      	bne.n	800394a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	2000000c 	.word	0x2000000c
 80039a8:	431bde83 	.word	0x431bde83

080039ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d12e      	bne.n	8003a24 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0201 	bic.w	r2, r2, #1
 80039d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039d6:	f7ff fba5 	bl	8003124 <HAL_GetTick>
 80039da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80039dc:	e01b      	b.n	8003a16 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039de:	f7ff fba1 	bl	8003124 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d914      	bls.n	8003a16 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d10d      	bne.n	8003a16 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	f043 0210 	orr.w	r2, r3, #16
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	f043 0201 	orr.w	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e007      	b.n	8003a26 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d0dc      	beq.n	80039de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003a30:	b590      	push	{r4, r7, lr}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <HAL_ADCEx_Calibration_Start+0x1e>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e097      	b.n	8003b7e <HAL_ADCEx_Calibration_Start+0x14e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff ffa8 	bl	80039ac <ADC_ConversionStop_Disable>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff ff49 	bl	80038f8 <ADC_Enable>
 8003a66:	4603      	mov	r3, r0
 8003a68:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003a6a:	7dfb      	ldrb	r3, [r7, #23]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f040 8081 	bne.w	8003b74 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a7a:	f023 0302 	bic.w	r3, r3, #2
 8003a7e:	f043 0202 	orr.w	r2, r3, #2
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003a86:	4b40      	ldr	r3, [pc, #256]	; (8003b88 <HAL_ADCEx_Calibration_Start+0x158>)
 8003a88:	681c      	ldr	r4, [r3, #0]
 8003a8a:	2002      	movs	r0, #2
 8003a8c:	f002 fb10 	bl	80060b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a90:	4603      	mov	r3, r0
 8003a92:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003a96:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003a98:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003a9a:	e002      	b.n	8003aa2 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f9      	bne.n	8003a9c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0208 	orr.w	r2, r2, #8
 8003ab6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003ab8:	f7ff fb34 	bl	8003124 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003abe:	e01b      	b.n	8003af8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003ac0:	f7ff fb30 	bl	8003124 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b0a      	cmp	r3, #10
 8003acc:	d914      	bls.n	8003af8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00d      	beq.n	8003af8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae0:	f023 0312 	bic.w	r3, r3, #18
 8003ae4:	f043 0210 	orr.w	r2, r3, #16
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e042      	b.n	8003b7e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1dc      	bne.n	8003ac0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 0204 	orr.w	r2, r2, #4
 8003b14:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003b16:	f7ff fb05 	bl	8003124 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003b1c:	e01b      	b.n	8003b56 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003b1e:	f7ff fb01 	bl	8003124 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b0a      	cmp	r3, #10
 8003b2a:	d914      	bls.n	8003b56 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00d      	beq.n	8003b56 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3e:	f023 0312 	bic.w	r3, r3, #18
 8003b42:	f043 0210 	orr.w	r2, r3, #16
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e013      	b.n	8003b7e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1dc      	bne.n	8003b1e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	f023 0303 	bic.w	r3, r3, #3
 8003b6c:	f043 0201 	orr.w	r2, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	371c      	adds	r7, #28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd90      	pop	{r4, r7, pc}
 8003b86:	bf00      	nop
 8003b88:	2000000c 	.word	0x2000000c

08003b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b9c:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ba8:	4013      	ands	r3, r2
 8003baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bbe:	4a04      	ldr	r2, [pc, #16]	; (8003bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	60d3      	str	r3, [r2, #12]
}
 8003bc4:	bf00      	nop
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	e000ed00 	.word	0xe000ed00

08003bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bd8:	4b04      	ldr	r3, [pc, #16]	; (8003bec <__NVIC_GetPriorityGrouping+0x18>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	0a1b      	lsrs	r3, r3, #8
 8003bde:	f003 0307 	and.w	r3, r3, #7
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	e000ed00 	.word	0xe000ed00

08003bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	db0b      	blt.n	8003c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c02:	79fb      	ldrb	r3, [r7, #7]
 8003c04:	f003 021f 	and.w	r2, r3, #31
 8003c08:	4906      	ldr	r1, [pc, #24]	; (8003c24 <__NVIC_EnableIRQ+0x34>)
 8003c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	2001      	movs	r0, #1
 8003c12:	fa00 f202 	lsl.w	r2, r0, r2
 8003c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr
 8003c24:	e000e100 	.word	0xe000e100

08003c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	6039      	str	r1, [r7, #0]
 8003c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	db0a      	blt.n	8003c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	490c      	ldr	r1, [pc, #48]	; (8003c74 <__NVIC_SetPriority+0x4c>)
 8003c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c46:	0112      	lsls	r2, r2, #4
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c50:	e00a      	b.n	8003c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	4908      	ldr	r1, [pc, #32]	; (8003c78 <__NVIC_SetPriority+0x50>)
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	3b04      	subs	r3, #4
 8003c60:	0112      	lsls	r2, r2, #4
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	440b      	add	r3, r1
 8003c66:	761a      	strb	r2, [r3, #24]
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	e000e100 	.word	0xe000e100
 8003c78:	e000ed00 	.word	0xe000ed00

08003c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b089      	sub	sp, #36	; 0x24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f1c3 0307 	rsb	r3, r3, #7
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	bf28      	it	cs
 8003c9a:	2304      	movcs	r3, #4
 8003c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	2b06      	cmp	r3, #6
 8003ca4:	d902      	bls.n	8003cac <NVIC_EncodePriority+0x30>
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	3b03      	subs	r3, #3
 8003caa:	e000      	b.n	8003cae <NVIC_EncodePriority+0x32>
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43da      	mvns	r2, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	401a      	ands	r2, r3
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	fa01 f303 	lsl.w	r3, r1, r3
 8003cce:	43d9      	mvns	r1, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd4:	4313      	orrs	r3, r2
         );
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3724      	adds	r7, #36	; 0x24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr

08003ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cf0:	d301      	bcc.n	8003cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e00f      	b.n	8003d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cf6:	4a0a      	ldr	r2, [pc, #40]	; (8003d20 <SysTick_Config+0x40>)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cfe:	210f      	movs	r1, #15
 8003d00:	f04f 30ff 	mov.w	r0, #4294967295
 8003d04:	f7ff ff90 	bl	8003c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <SysTick_Config+0x40>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d0e:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <SysTick_Config+0x40>)
 8003d10:	2207      	movs	r2, #7
 8003d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	e000e010 	.word	0xe000e010

08003d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff ff2d 	bl	8003b8c <__NVIC_SetPriorityGrouping>
}
 8003d32:	bf00      	nop
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b086      	sub	sp, #24
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	4603      	mov	r3, r0
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	607a      	str	r2, [r7, #4]
 8003d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d4c:	f7ff ff42 	bl	8003bd4 <__NVIC_GetPriorityGrouping>
 8003d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	68b9      	ldr	r1, [r7, #8]
 8003d56:	6978      	ldr	r0, [r7, #20]
 8003d58:	f7ff ff90 	bl	8003c7c <NVIC_EncodePriority>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d62:	4611      	mov	r1, r2
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff ff5f 	bl	8003c28 <__NVIC_SetPriority>
}
 8003d6a:	bf00      	nop
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	4603      	mov	r3, r0
 8003d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff ff35 	bl	8003bf0 <__NVIC_EnableIRQ>
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff ffa2 	bl	8003ce0 <SysTick_Config>
 8003d9c:	4603      	mov	r3, r0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b085      	sub	sp, #20
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d008      	beq.n	8003dd0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2204      	movs	r2, #4
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e020      	b.n	8003e12 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 020e 	bic.w	r2, r2, #14
 8003dde:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0201 	bic.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df8:	2101      	movs	r1, #1
 8003dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8003dfe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr

08003e1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d005      	beq.n	8003e40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2204      	movs	r2, #4
 8003e38:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	73fb      	strb	r3, [r7, #15]
 8003e3e:	e051      	b.n	8003ee4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 020e 	bic.w	r2, r2, #14
 8003e4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0201 	bic.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a22      	ldr	r2, [pc, #136]	; (8003ef0 <HAL_DMA_Abort_IT+0xd4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d029      	beq.n	8003ebe <HAL_DMA_Abort_IT+0xa2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a21      	ldr	r2, [pc, #132]	; (8003ef4 <HAL_DMA_Abort_IT+0xd8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d022      	beq.n	8003eba <HAL_DMA_Abort_IT+0x9e>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1f      	ldr	r2, [pc, #124]	; (8003ef8 <HAL_DMA_Abort_IT+0xdc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d01a      	beq.n	8003eb4 <HAL_DMA_Abort_IT+0x98>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1e      	ldr	r2, [pc, #120]	; (8003efc <HAL_DMA_Abort_IT+0xe0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d012      	beq.n	8003eae <HAL_DMA_Abort_IT+0x92>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1c      	ldr	r2, [pc, #112]	; (8003f00 <HAL_DMA_Abort_IT+0xe4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00a      	beq.n	8003ea8 <HAL_DMA_Abort_IT+0x8c>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a1b      	ldr	r2, [pc, #108]	; (8003f04 <HAL_DMA_Abort_IT+0xe8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d102      	bne.n	8003ea2 <HAL_DMA_Abort_IT+0x86>
 8003e9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ea0:	e00e      	b.n	8003ec0 <HAL_DMA_Abort_IT+0xa4>
 8003ea2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ea6:	e00b      	b.n	8003ec0 <HAL_DMA_Abort_IT+0xa4>
 8003ea8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003eac:	e008      	b.n	8003ec0 <HAL_DMA_Abort_IT+0xa4>
 8003eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eb2:	e005      	b.n	8003ec0 <HAL_DMA_Abort_IT+0xa4>
 8003eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003eb8:	e002      	b.n	8003ec0 <HAL_DMA_Abort_IT+0xa4>
 8003eba:	2310      	movs	r3, #16
 8003ebc:	e000      	b.n	8003ec0 <HAL_DMA_Abort_IT+0xa4>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	4a11      	ldr	r2, [pc, #68]	; (8003f08 <HAL_DMA_Abort_IT+0xec>)
 8003ec2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	4798      	blx	r3
    } 
  }
  return status;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40020008 	.word	0x40020008
 8003ef4:	4002001c 	.word	0x4002001c
 8003ef8:	40020030 	.word	0x40020030
 8003efc:	40020044 	.word	0x40020044
 8003f00:	40020058 	.word	0x40020058
 8003f04:	4002006c 	.word	0x4002006c
 8003f08:	40020000 	.word	0x40020000

08003f0c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003f22:	2300      	movs	r3, #0
 8003f24:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003f26:	4b2f      	ldr	r3, [pc, #188]	; (8003fe4 <HAL_FLASH_Program+0xd8>)
 8003f28:	7e1b      	ldrb	r3, [r3, #24]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_FLASH_Program+0x26>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e054      	b.n	8003fdc <HAL_FLASH_Program+0xd0>
 8003f32:	4b2c      	ldr	r3, [pc, #176]	; (8003fe4 <HAL_FLASH_Program+0xd8>)
 8003f34:	2201      	movs	r2, #1
 8003f36:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003f38:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f3c:	f000 f8a8 	bl	8004090 <FLASH_WaitForLastOperation>
 8003f40:	4603      	mov	r3, r0
 8003f42:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003f44:	7dfb      	ldrb	r3, [r7, #23]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d144      	bne.n	8003fd4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d102      	bne.n	8003f56 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003f50:	2301      	movs	r3, #1
 8003f52:	757b      	strb	r3, [r7, #21]
 8003f54:	e007      	b.n	8003f66 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d102      	bne.n	8003f62 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	757b      	strb	r3, [r7, #21]
 8003f60:	e001      	b.n	8003f66 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003f62:	2304      	movs	r3, #4
 8003f64:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003f66:	2300      	movs	r3, #0
 8003f68:	75bb      	strb	r3, [r7, #22]
 8003f6a:	e02d      	b.n	8003fc8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003f6c:	7dbb      	ldrb	r3, [r7, #22]
 8003f6e:	005a      	lsls	r2, r3, #1
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	eb02 0c03 	add.w	ip, r2, r3
 8003f76:	7dbb      	ldrb	r3, [r7, #22]
 8003f78:	0119      	lsls	r1, r3, #4
 8003f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f7e:	f1c1 0620 	rsb	r6, r1, #32
 8003f82:	f1a1 0020 	sub.w	r0, r1, #32
 8003f86:	fa22 f401 	lsr.w	r4, r2, r1
 8003f8a:	fa03 f606 	lsl.w	r6, r3, r6
 8003f8e:	4334      	orrs	r4, r6
 8003f90:	fa23 f000 	lsr.w	r0, r3, r0
 8003f94:	4304      	orrs	r4, r0
 8003f96:	fa23 f501 	lsr.w	r5, r3, r1
 8003f9a:	b2a3      	uxth	r3, r4
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4660      	mov	r0, ip
 8003fa0:	f000 f85a 	bl	8004058 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003fa4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fa8:	f000 f872 	bl	8004090 <FLASH_WaitForLastOperation>
 8003fac:	4603      	mov	r3, r0
 8003fae:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003fb0:	4b0d      	ldr	r3, [pc, #52]	; (8003fe8 <HAL_FLASH_Program+0xdc>)
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	4a0c      	ldr	r2, [pc, #48]	; (8003fe8 <HAL_FLASH_Program+0xdc>)
 8003fb6:	f023 0301 	bic.w	r3, r3, #1
 8003fba:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003fbc:	7dfb      	ldrb	r3, [r7, #23]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d107      	bne.n	8003fd2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003fc2:	7dbb      	ldrb	r3, [r7, #22]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	75bb      	strb	r3, [r7, #22]
 8003fc8:	7dba      	ldrb	r2, [r7, #22]
 8003fca:	7d7b      	ldrb	r3, [r7, #21]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d3cd      	bcc.n	8003f6c <HAL_FLASH_Program+0x60>
 8003fd0:	e000      	b.n	8003fd4 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003fd2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003fd4:	4b03      	ldr	r3, [pc, #12]	; (8003fe4 <HAL_FLASH_Program+0xd8>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	761a      	strb	r2, [r3, #24]

  return status;
 8003fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fe4:	200003f8 	.word	0x200003f8
 8003fe8:	40022000 	.word	0x40022000

08003fec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003ff6:	4b0d      	ldr	r3, [pc, #52]	; (800402c <HAL_FLASH_Unlock+0x40>)
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00d      	beq.n	800401e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004002:	4b0a      	ldr	r3, [pc, #40]	; (800402c <HAL_FLASH_Unlock+0x40>)
 8004004:	4a0a      	ldr	r2, [pc, #40]	; (8004030 <HAL_FLASH_Unlock+0x44>)
 8004006:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004008:	4b08      	ldr	r3, [pc, #32]	; (800402c <HAL_FLASH_Unlock+0x40>)
 800400a:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <HAL_FLASH_Unlock+0x48>)
 800400c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800400e:	4b07      	ldr	r3, [pc, #28]	; (800402c <HAL_FLASH_Unlock+0x40>)
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800401e:	79fb      	ldrb	r3, [r7, #7]
}
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	bc80      	pop	{r7}
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40022000 	.word	0x40022000
 8004030:	45670123 	.word	0x45670123
 8004034:	cdef89ab 	.word	0xcdef89ab

08004038 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800403c:	4b05      	ldr	r3, [pc, #20]	; (8004054 <HAL_FLASH_Lock+0x1c>)
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	4a04      	ldr	r2, [pc, #16]	; (8004054 <HAL_FLASH_Lock+0x1c>)
 8004042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004046:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	46bd      	mov	sp, r7
 800404e:	bc80      	pop	{r7}
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40022000 	.word	0x40022000

08004058 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004064:	4b08      	ldr	r3, [pc, #32]	; (8004088 <FLASH_Program_HalfWord+0x30>)
 8004066:	2200      	movs	r2, #0
 8004068:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800406a:	4b08      	ldr	r3, [pc, #32]	; (800408c <FLASH_Program_HalfWord+0x34>)
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	4a07      	ldr	r2, [pc, #28]	; (800408c <FLASH_Program_HalfWord+0x34>)
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	887a      	ldrh	r2, [r7, #2]
 800407a:	801a      	strh	r2, [r3, #0]
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	200003f8 	.word	0x200003f8
 800408c:	40022000 	.word	0x40022000

08004090 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004098:	f7ff f844 	bl	8003124 <HAL_GetTick>
 800409c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800409e:	e010      	b.n	80040c2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a6:	d00c      	beq.n	80040c2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d007      	beq.n	80040be <FLASH_WaitForLastOperation+0x2e>
 80040ae:	f7ff f839 	bl	8003124 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d201      	bcs.n	80040c2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e025      	b.n	800410e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80040c2:	4b15      	ldr	r3, [pc, #84]	; (8004118 <FLASH_WaitForLastOperation+0x88>)
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1e8      	bne.n	80040a0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80040ce:	4b12      	ldr	r3, [pc, #72]	; (8004118 <FLASH_WaitForLastOperation+0x88>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80040da:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <FLASH_WaitForLastOperation+0x88>)
 80040dc:	2220      	movs	r2, #32
 80040de:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80040e0:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <FLASH_WaitForLastOperation+0x88>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10b      	bne.n	8004104 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80040ec:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <FLASH_WaitForLastOperation+0x88>)
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d105      	bne.n	8004104 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80040f8:	4b07      	ldr	r3, [pc, #28]	; (8004118 <FLASH_WaitForLastOperation+0x88>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004104:	f000 f80a 	bl	800411c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40022000 	.word	0x40022000

0800411c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004126:	4b23      	ldr	r3, [pc, #140]	; (80041b4 <FLASH_SetErrorCode+0x98>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f003 0310 	and.w	r3, r3, #16
 800412e:	2b00      	cmp	r3, #0
 8004130:	d009      	beq.n	8004146 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004132:	4b21      	ldr	r3, [pc, #132]	; (80041b8 <FLASH_SetErrorCode+0x9c>)
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	f043 0302 	orr.w	r3, r3, #2
 800413a:	4a1f      	ldr	r2, [pc, #124]	; (80041b8 <FLASH_SetErrorCode+0x9c>)
 800413c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f043 0310 	orr.w	r3, r3, #16
 8004144:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004146:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <FLASH_SetErrorCode+0x98>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b00      	cmp	r3, #0
 8004150:	d009      	beq.n	8004166 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004152:	4b19      	ldr	r3, [pc, #100]	; (80041b8 <FLASH_SetErrorCode+0x9c>)
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	4a17      	ldr	r2, [pc, #92]	; (80041b8 <FLASH_SetErrorCode+0x9c>)
 800415c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f043 0304 	orr.w	r3, r3, #4
 8004164:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004166:	4b13      	ldr	r3, [pc, #76]	; (80041b4 <FLASH_SetErrorCode+0x98>)
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00b      	beq.n	800418a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004172:	4b11      	ldr	r3, [pc, #68]	; (80041b8 <FLASH_SetErrorCode+0x9c>)
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	f043 0304 	orr.w	r3, r3, #4
 800417a:	4a0f      	ldr	r2, [pc, #60]	; (80041b8 <FLASH_SetErrorCode+0x9c>)
 800417c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800417e:	4b0d      	ldr	r3, [pc, #52]	; (80041b4 <FLASH_SetErrorCode+0x98>)
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	4a0c      	ldr	r2, [pc, #48]	; (80041b4 <FLASH_SetErrorCode+0x98>)
 8004184:	f023 0301 	bic.w	r3, r3, #1
 8004188:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f240 1201 	movw	r2, #257	; 0x101
 8004190:	4293      	cmp	r3, r2
 8004192:	d106      	bne.n	80041a2 <FLASH_SetErrorCode+0x86>
 8004194:	4b07      	ldr	r3, [pc, #28]	; (80041b4 <FLASH_SetErrorCode+0x98>)
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	4a06      	ldr	r2, [pc, #24]	; (80041b4 <FLASH_SetErrorCode+0x98>)
 800419a:	f023 0301 	bic.w	r3, r3, #1
 800419e:	61d3      	str	r3, [r2, #28]
}  
 80041a0:	e002      	b.n	80041a8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80041a2:	4a04      	ldr	r2, [pc, #16]	; (80041b4 <FLASH_SetErrorCode+0x98>)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	60d3      	str	r3, [r2, #12]
}  
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40022000 	.word	0x40022000
 80041b8:	200003f8 	.word	0x200003f8

080041bc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80041ce:	4b2f      	ldr	r3, [pc, #188]	; (800428c <HAL_FLASHEx_Erase+0xd0>)
 80041d0:	7e1b      	ldrb	r3, [r3, #24]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d101      	bne.n	80041da <HAL_FLASHEx_Erase+0x1e>
 80041d6:	2302      	movs	r3, #2
 80041d8:	e053      	b.n	8004282 <HAL_FLASHEx_Erase+0xc6>
 80041da:	4b2c      	ldr	r3, [pc, #176]	; (800428c <HAL_FLASHEx_Erase+0xd0>)
 80041dc:	2201      	movs	r2, #1
 80041de:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d116      	bne.n	8004216 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80041e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041ec:	f7ff ff50 	bl	8004090 <FLASH_WaitForLastOperation>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d141      	bne.n	800427a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80041f6:	2001      	movs	r0, #1
 80041f8:	f000 f84c 	bl	8004294 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80041fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004200:	f7ff ff46 	bl	8004090 <FLASH_WaitForLastOperation>
 8004204:	4603      	mov	r3, r0
 8004206:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004208:	4b21      	ldr	r3, [pc, #132]	; (8004290 <HAL_FLASHEx_Erase+0xd4>)
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	4a20      	ldr	r2, [pc, #128]	; (8004290 <HAL_FLASHEx_Erase+0xd4>)
 800420e:	f023 0304 	bic.w	r3, r3, #4
 8004212:	6113      	str	r3, [r2, #16]
 8004214:	e031      	b.n	800427a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004216:	f24c 3050 	movw	r0, #50000	; 0xc350
 800421a:	f7ff ff39 	bl	8004090 <FLASH_WaitForLastOperation>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d12a      	bne.n	800427a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	f04f 32ff 	mov.w	r2, #4294967295
 800422a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	e019      	b.n	8004268 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004234:	68b8      	ldr	r0, [r7, #8]
 8004236:	f000 f849 	bl	80042cc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800423a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800423e:	f7ff ff27 	bl	8004090 <FLASH_WaitForLastOperation>
 8004242:	4603      	mov	r3, r0
 8004244:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004246:	4b12      	ldr	r3, [pc, #72]	; (8004290 <HAL_FLASHEx_Erase+0xd4>)
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	4a11      	ldr	r2, [pc, #68]	; (8004290 <HAL_FLASHEx_Erase+0xd4>)
 800424c:	f023 0302 	bic.w	r3, r3, #2
 8004250:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	601a      	str	r2, [r3, #0]
            break;
 800425e:	e00c      	b.n	800427a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004266:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	029a      	lsls	r2, r3, #10
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	4413      	add	r3, r2
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	429a      	cmp	r2, r3
 8004278:	d3dc      	bcc.n	8004234 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800427a:	4b04      	ldr	r3, [pc, #16]	; (800428c <HAL_FLASHEx_Erase+0xd0>)
 800427c:	2200      	movs	r2, #0
 800427e:	761a      	strb	r2, [r3, #24]

  return status;
 8004280:	7bfb      	ldrb	r3, [r7, #15]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	200003f8 	.word	0x200003f8
 8004290:	40022000 	.word	0x40022000

08004294 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800429c:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <FLASH_MassErase+0x30>)
 800429e:	2200      	movs	r2, #0
 80042a0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80042a2:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <FLASH_MassErase+0x34>)
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	4a08      	ldr	r2, [pc, #32]	; (80042c8 <FLASH_MassErase+0x34>)
 80042a8:	f043 0304 	orr.w	r3, r3, #4
 80042ac:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80042ae:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <FLASH_MassErase+0x34>)
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	4a05      	ldr	r2, [pc, #20]	; (80042c8 <FLASH_MassErase+0x34>)
 80042b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042b8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	bc80      	pop	{r7}
 80042c2:	4770      	bx	lr
 80042c4:	200003f8 	.word	0x200003f8
 80042c8:	40022000 	.word	0x40022000

080042cc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80042d4:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <FLASH_PageErase+0x38>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80042da:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <FLASH_PageErase+0x3c>)
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	4a0a      	ldr	r2, [pc, #40]	; (8004308 <FLASH_PageErase+0x3c>)
 80042e0:	f043 0302 	orr.w	r3, r3, #2
 80042e4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80042e6:	4a08      	ldr	r2, [pc, #32]	; (8004308 <FLASH_PageErase+0x3c>)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <FLASH_PageErase+0x3c>)
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	4a05      	ldr	r2, [pc, #20]	; (8004308 <FLASH_PageErase+0x3c>)
 80042f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042f6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	200003f8 	.word	0x200003f8
 8004308:	40022000 	.word	0x40022000

0800430c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800430c:	b480      	push	{r7}
 800430e:	b08b      	sub	sp, #44	; 0x2c
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004316:	2300      	movs	r3, #0
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800431a:	2300      	movs	r3, #0
 800431c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800431e:	e169      	b.n	80045f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004320:	2201      	movs	r2, #1
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	4013      	ands	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	429a      	cmp	r2, r3
 800433a:	f040 8158 	bne.w	80045ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	4a9a      	ldr	r2, [pc, #616]	; (80045ac <HAL_GPIO_Init+0x2a0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d05e      	beq.n	8004406 <HAL_GPIO_Init+0xfa>
 8004348:	4a98      	ldr	r2, [pc, #608]	; (80045ac <HAL_GPIO_Init+0x2a0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d875      	bhi.n	800443a <HAL_GPIO_Init+0x12e>
 800434e:	4a98      	ldr	r2, [pc, #608]	; (80045b0 <HAL_GPIO_Init+0x2a4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d058      	beq.n	8004406 <HAL_GPIO_Init+0xfa>
 8004354:	4a96      	ldr	r2, [pc, #600]	; (80045b0 <HAL_GPIO_Init+0x2a4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d86f      	bhi.n	800443a <HAL_GPIO_Init+0x12e>
 800435a:	4a96      	ldr	r2, [pc, #600]	; (80045b4 <HAL_GPIO_Init+0x2a8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d052      	beq.n	8004406 <HAL_GPIO_Init+0xfa>
 8004360:	4a94      	ldr	r2, [pc, #592]	; (80045b4 <HAL_GPIO_Init+0x2a8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d869      	bhi.n	800443a <HAL_GPIO_Init+0x12e>
 8004366:	4a94      	ldr	r2, [pc, #592]	; (80045b8 <HAL_GPIO_Init+0x2ac>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d04c      	beq.n	8004406 <HAL_GPIO_Init+0xfa>
 800436c:	4a92      	ldr	r2, [pc, #584]	; (80045b8 <HAL_GPIO_Init+0x2ac>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d863      	bhi.n	800443a <HAL_GPIO_Init+0x12e>
 8004372:	4a92      	ldr	r2, [pc, #584]	; (80045bc <HAL_GPIO_Init+0x2b0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d046      	beq.n	8004406 <HAL_GPIO_Init+0xfa>
 8004378:	4a90      	ldr	r2, [pc, #576]	; (80045bc <HAL_GPIO_Init+0x2b0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d85d      	bhi.n	800443a <HAL_GPIO_Init+0x12e>
 800437e:	2b12      	cmp	r3, #18
 8004380:	d82a      	bhi.n	80043d8 <HAL_GPIO_Init+0xcc>
 8004382:	2b12      	cmp	r3, #18
 8004384:	d859      	bhi.n	800443a <HAL_GPIO_Init+0x12e>
 8004386:	a201      	add	r2, pc, #4	; (adr r2, 800438c <HAL_GPIO_Init+0x80>)
 8004388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438c:	08004407 	.word	0x08004407
 8004390:	080043e1 	.word	0x080043e1
 8004394:	080043f3 	.word	0x080043f3
 8004398:	08004435 	.word	0x08004435
 800439c:	0800443b 	.word	0x0800443b
 80043a0:	0800443b 	.word	0x0800443b
 80043a4:	0800443b 	.word	0x0800443b
 80043a8:	0800443b 	.word	0x0800443b
 80043ac:	0800443b 	.word	0x0800443b
 80043b0:	0800443b 	.word	0x0800443b
 80043b4:	0800443b 	.word	0x0800443b
 80043b8:	0800443b 	.word	0x0800443b
 80043bc:	0800443b 	.word	0x0800443b
 80043c0:	0800443b 	.word	0x0800443b
 80043c4:	0800443b 	.word	0x0800443b
 80043c8:	0800443b 	.word	0x0800443b
 80043cc:	0800443b 	.word	0x0800443b
 80043d0:	080043e9 	.word	0x080043e9
 80043d4:	080043fd 	.word	0x080043fd
 80043d8:	4a79      	ldr	r2, [pc, #484]	; (80045c0 <HAL_GPIO_Init+0x2b4>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d013      	beq.n	8004406 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80043de:	e02c      	b.n	800443a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	623b      	str	r3, [r7, #32]
          break;
 80043e6:	e029      	b.n	800443c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	3304      	adds	r3, #4
 80043ee:	623b      	str	r3, [r7, #32]
          break;
 80043f0:	e024      	b.n	800443c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	3308      	adds	r3, #8
 80043f8:	623b      	str	r3, [r7, #32]
          break;
 80043fa:	e01f      	b.n	800443c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	330c      	adds	r3, #12
 8004402:	623b      	str	r3, [r7, #32]
          break;
 8004404:	e01a      	b.n	800443c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d102      	bne.n	8004414 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800440e:	2304      	movs	r3, #4
 8004410:	623b      	str	r3, [r7, #32]
          break;
 8004412:	e013      	b.n	800443c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d105      	bne.n	8004428 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800441c:	2308      	movs	r3, #8
 800441e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69fa      	ldr	r2, [r7, #28]
 8004424:	611a      	str	r2, [r3, #16]
          break;
 8004426:	e009      	b.n	800443c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004428:	2308      	movs	r3, #8
 800442a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69fa      	ldr	r2, [r7, #28]
 8004430:	615a      	str	r2, [r3, #20]
          break;
 8004432:	e003      	b.n	800443c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004434:	2300      	movs	r3, #0
 8004436:	623b      	str	r3, [r7, #32]
          break;
 8004438:	e000      	b.n	800443c <HAL_GPIO_Init+0x130>
          break;
 800443a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2bff      	cmp	r3, #255	; 0xff
 8004440:	d801      	bhi.n	8004446 <HAL_GPIO_Init+0x13a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	e001      	b.n	800444a <HAL_GPIO_Init+0x13e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3304      	adds	r3, #4
 800444a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2bff      	cmp	r3, #255	; 0xff
 8004450:	d802      	bhi.n	8004458 <HAL_GPIO_Init+0x14c>
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	e002      	b.n	800445e <HAL_GPIO_Init+0x152>
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	3b08      	subs	r3, #8
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	210f      	movs	r1, #15
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	fa01 f303 	lsl.w	r3, r1, r3
 800446c:	43db      	mvns	r3, r3
 800446e:	401a      	ands	r2, r3
 8004470:	6a39      	ldr	r1, [r7, #32]
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	fa01 f303 	lsl.w	r3, r1, r3
 8004478:	431a      	orrs	r2, r3
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 80b1 	beq.w	80045ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800448c:	4b4d      	ldr	r3, [pc, #308]	; (80045c4 <HAL_GPIO_Init+0x2b8>)
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	4a4c      	ldr	r2, [pc, #304]	; (80045c4 <HAL_GPIO_Init+0x2b8>)
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	6193      	str	r3, [r2, #24]
 8004498:	4b4a      	ldr	r3, [pc, #296]	; (80045c4 <HAL_GPIO_Init+0x2b8>)
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	60bb      	str	r3, [r7, #8]
 80044a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80044a4:	4a48      	ldr	r2, [pc, #288]	; (80045c8 <HAL_GPIO_Init+0x2bc>)
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	089b      	lsrs	r3, r3, #2
 80044aa:	3302      	adds	r3, #2
 80044ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	220f      	movs	r2, #15
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	43db      	mvns	r3, r3
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4013      	ands	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a40      	ldr	r2, [pc, #256]	; (80045cc <HAL_GPIO_Init+0x2c0>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d013      	beq.n	80044f8 <HAL_GPIO_Init+0x1ec>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a3f      	ldr	r2, [pc, #252]	; (80045d0 <HAL_GPIO_Init+0x2c4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00d      	beq.n	80044f4 <HAL_GPIO_Init+0x1e8>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a3e      	ldr	r2, [pc, #248]	; (80045d4 <HAL_GPIO_Init+0x2c8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d007      	beq.n	80044f0 <HAL_GPIO_Init+0x1e4>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a3d      	ldr	r2, [pc, #244]	; (80045d8 <HAL_GPIO_Init+0x2cc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d101      	bne.n	80044ec <HAL_GPIO_Init+0x1e0>
 80044e8:	2303      	movs	r3, #3
 80044ea:	e006      	b.n	80044fa <HAL_GPIO_Init+0x1ee>
 80044ec:	2304      	movs	r3, #4
 80044ee:	e004      	b.n	80044fa <HAL_GPIO_Init+0x1ee>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e002      	b.n	80044fa <HAL_GPIO_Init+0x1ee>
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <HAL_GPIO_Init+0x1ee>
 80044f8:	2300      	movs	r3, #0
 80044fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fc:	f002 0203 	and.w	r2, r2, #3
 8004500:	0092      	lsls	r2, r2, #2
 8004502:	4093      	lsls	r3, r2
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800450a:	492f      	ldr	r1, [pc, #188]	; (80045c8 <HAL_GPIO_Init+0x2bc>)
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	089b      	lsrs	r3, r3, #2
 8004510:	3302      	adds	r3, #2
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d006      	beq.n	8004532 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004524:	4b2d      	ldr	r3, [pc, #180]	; (80045dc <HAL_GPIO_Init+0x2d0>)
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	492c      	ldr	r1, [pc, #176]	; (80045dc <HAL_GPIO_Init+0x2d0>)
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	4313      	orrs	r3, r2
 800452e:	608b      	str	r3, [r1, #8]
 8004530:	e006      	b.n	8004540 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004532:	4b2a      	ldr	r3, [pc, #168]	; (80045dc <HAL_GPIO_Init+0x2d0>)
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	43db      	mvns	r3, r3
 800453a:	4928      	ldr	r1, [pc, #160]	; (80045dc <HAL_GPIO_Init+0x2d0>)
 800453c:	4013      	ands	r3, r2
 800453e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d006      	beq.n	800455a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800454c:	4b23      	ldr	r3, [pc, #140]	; (80045dc <HAL_GPIO_Init+0x2d0>)
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	4922      	ldr	r1, [pc, #136]	; (80045dc <HAL_GPIO_Init+0x2d0>)
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	4313      	orrs	r3, r2
 8004556:	60cb      	str	r3, [r1, #12]
 8004558:	e006      	b.n	8004568 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800455a:	4b20      	ldr	r3, [pc, #128]	; (80045dc <HAL_GPIO_Init+0x2d0>)
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	43db      	mvns	r3, r3
 8004562:	491e      	ldr	r1, [pc, #120]	; (80045dc <HAL_GPIO_Init+0x2d0>)
 8004564:	4013      	ands	r3, r2
 8004566:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d006      	beq.n	8004582 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004574:	4b19      	ldr	r3, [pc, #100]	; (80045dc <HAL_GPIO_Init+0x2d0>)
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	4918      	ldr	r1, [pc, #96]	; (80045dc <HAL_GPIO_Init+0x2d0>)
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	4313      	orrs	r3, r2
 800457e:	604b      	str	r3, [r1, #4]
 8004580:	e006      	b.n	8004590 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004582:	4b16      	ldr	r3, [pc, #88]	; (80045dc <HAL_GPIO_Init+0x2d0>)
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	43db      	mvns	r3, r3
 800458a:	4914      	ldr	r1, [pc, #80]	; (80045dc <HAL_GPIO_Init+0x2d0>)
 800458c:	4013      	ands	r3, r2
 800458e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d021      	beq.n	80045e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800459c:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <HAL_GPIO_Init+0x2d0>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	490e      	ldr	r1, [pc, #56]	; (80045dc <HAL_GPIO_Init+0x2d0>)
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	600b      	str	r3, [r1, #0]
 80045a8:	e021      	b.n	80045ee <HAL_GPIO_Init+0x2e2>
 80045aa:	bf00      	nop
 80045ac:	10320000 	.word	0x10320000
 80045b0:	10310000 	.word	0x10310000
 80045b4:	10220000 	.word	0x10220000
 80045b8:	10210000 	.word	0x10210000
 80045bc:	10120000 	.word	0x10120000
 80045c0:	10110000 	.word	0x10110000
 80045c4:	40021000 	.word	0x40021000
 80045c8:	40010000 	.word	0x40010000
 80045cc:	40010800 	.word	0x40010800
 80045d0:	40010c00 	.word	0x40010c00
 80045d4:	40011000 	.word	0x40011000
 80045d8:	40011400 	.word	0x40011400
 80045dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <HAL_GPIO_Init+0x304>)
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	43db      	mvns	r3, r3
 80045e8:	4909      	ldr	r1, [pc, #36]	; (8004610 <HAL_GPIO_Init+0x304>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	3301      	adds	r3, #1
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	fa22 f303 	lsr.w	r3, r2, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f47f ae8e 	bne.w	8004320 <HAL_GPIO_Init+0x14>
  }
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop
 8004608:	372c      	adds	r7, #44	; 0x2c
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr
 8004610:	40010400 	.word	0x40010400

08004614 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	887b      	ldrh	r3, [r7, #2]
 8004626:	4013      	ands	r3, r2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
 8004630:	e001      	b.n	8004636 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004632:	2300      	movs	r3, #0
 8004634:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004636:	7bfb      	ldrb	r3, [r7, #15]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	4770      	bx	lr

08004642 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	460b      	mov	r3, r1
 800464c:	807b      	strh	r3, [r7, #2]
 800464e:	4613      	mov	r3, r2
 8004650:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004652:	787b      	ldrb	r3, [r7, #1]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004658:	887a      	ldrh	r2, [r7, #2]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800465e:	e003      	b.n	8004668 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004660:	887b      	ldrh	r3, [r7, #2]
 8004662:	041a      	lsls	r2, r3, #16
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	611a      	str	r2, [r3, #16]
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr
	...

08004674 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	4603      	mov	r3, r0
 800467c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800467e:	4b08      	ldr	r3, [pc, #32]	; (80046a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004680:	695a      	ldr	r2, [r3, #20]
 8004682:	88fb      	ldrh	r3, [r7, #6]
 8004684:	4013      	ands	r3, r2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d006      	beq.n	8004698 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800468a:	4a05      	ldr	r2, [pc, #20]	; (80046a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800468c:	88fb      	ldrh	r3, [r7, #6]
 800468e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004690:	88fb      	ldrh	r3, [r7, #6]
 8004692:	4618      	mov	r0, r3
 8004694:	f7fe fa46 	bl	8002b24 <HAL_GPIO_EXTI_Callback>
  }
}
 8004698:	bf00      	nop
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40010400 	.word	0x40010400

080046a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e12b      	b.n	800490e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fe fab6 	bl	8002c3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2224      	movs	r2, #36	; 0x24
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0201 	bic.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004706:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004708:	f001 fbd6 	bl	8005eb8 <HAL_RCC_GetPCLK1Freq>
 800470c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	4a81      	ldr	r2, [pc, #516]	; (8004918 <HAL_I2C_Init+0x274>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d807      	bhi.n	8004728 <HAL_I2C_Init+0x84>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4a80      	ldr	r2, [pc, #512]	; (800491c <HAL_I2C_Init+0x278>)
 800471c:	4293      	cmp	r3, r2
 800471e:	bf94      	ite	ls
 8004720:	2301      	movls	r3, #1
 8004722:	2300      	movhi	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	e006      	b.n	8004736 <HAL_I2C_Init+0x92>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4a7d      	ldr	r2, [pc, #500]	; (8004920 <HAL_I2C_Init+0x27c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	bf94      	ite	ls
 8004730:	2301      	movls	r3, #1
 8004732:	2300      	movhi	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e0e7      	b.n	800490e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4a78      	ldr	r2, [pc, #480]	; (8004924 <HAL_I2C_Init+0x280>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	0c9b      	lsrs	r3, r3, #18
 8004748:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	4a6a      	ldr	r2, [pc, #424]	; (8004918 <HAL_I2C_Init+0x274>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d802      	bhi.n	8004778 <HAL_I2C_Init+0xd4>
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	3301      	adds	r3, #1
 8004776:	e009      	b.n	800478c <HAL_I2C_Init+0xe8>
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800477e:	fb02 f303 	mul.w	r3, r2, r3
 8004782:	4a69      	ldr	r2, [pc, #420]	; (8004928 <HAL_I2C_Init+0x284>)
 8004784:	fba2 2303 	umull	r2, r3, r2, r3
 8004788:	099b      	lsrs	r3, r3, #6
 800478a:	3301      	adds	r3, #1
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	430b      	orrs	r3, r1
 8004792:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800479e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	495c      	ldr	r1, [pc, #368]	; (8004918 <HAL_I2C_Init+0x274>)
 80047a8:	428b      	cmp	r3, r1
 80047aa:	d819      	bhi.n	80047e0 <HAL_I2C_Init+0x13c>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	1e59      	subs	r1, r3, #1
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80047ba:	1c59      	adds	r1, r3, #1
 80047bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047c0:	400b      	ands	r3, r1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <HAL_I2C_Init+0x138>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	1e59      	subs	r1, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80047d4:	3301      	adds	r3, #1
 80047d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047da:	e051      	b.n	8004880 <HAL_I2C_Init+0x1dc>
 80047dc:	2304      	movs	r3, #4
 80047de:	e04f      	b.n	8004880 <HAL_I2C_Init+0x1dc>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d111      	bne.n	800480c <HAL_I2C_Init+0x168>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	1e58      	subs	r0, r3, #1
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6859      	ldr	r1, [r3, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	440b      	add	r3, r1
 80047f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047fa:	3301      	adds	r3, #1
 80047fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004800:	2b00      	cmp	r3, #0
 8004802:	bf0c      	ite	eq
 8004804:	2301      	moveq	r3, #1
 8004806:	2300      	movne	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	e012      	b.n	8004832 <HAL_I2C_Init+0x18e>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	1e58      	subs	r0, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6859      	ldr	r1, [r3, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	0099      	lsls	r1, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004822:	3301      	adds	r3, #1
 8004824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004828:	2b00      	cmp	r3, #0
 800482a:	bf0c      	ite	eq
 800482c:	2301      	moveq	r3, #1
 800482e:	2300      	movne	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_I2C_Init+0x196>
 8004836:	2301      	movs	r3, #1
 8004838:	e022      	b.n	8004880 <HAL_I2C_Init+0x1dc>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10e      	bne.n	8004860 <HAL_I2C_Init+0x1bc>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1e58      	subs	r0, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6859      	ldr	r1, [r3, #4]
 800484a:	460b      	mov	r3, r1
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	440b      	add	r3, r1
 8004850:	fbb0 f3f3 	udiv	r3, r0, r3
 8004854:	3301      	adds	r3, #1
 8004856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800485a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800485e:	e00f      	b.n	8004880 <HAL_I2C_Init+0x1dc>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	1e58      	subs	r0, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6859      	ldr	r1, [r3, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	0099      	lsls	r1, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	fbb0 f3f3 	udiv	r3, r0, r3
 8004876:	3301      	adds	r3, #1
 8004878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800487c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	6809      	ldr	r1, [r1, #0]
 8004884:	4313      	orrs	r3, r2
 8004886:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69da      	ldr	r2, [r3, #28]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6911      	ldr	r1, [r2, #16]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	68d2      	ldr	r2, [r2, #12]
 80048ba:	4311      	orrs	r1, r2
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6812      	ldr	r2, [r2, #0]
 80048c0:	430b      	orrs	r3, r1
 80048c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695a      	ldr	r2, [r3, #20]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	000186a0 	.word	0x000186a0
 800491c:	001e847f 	.word	0x001e847f
 8004920:	003d08ff 	.word	0x003d08ff
 8004924:	431bde83 	.word	0x431bde83
 8004928:	10624dd3 	.word	0x10624dd3

0800492c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b088      	sub	sp, #32
 8004930:	af02      	add	r7, sp, #8
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	461a      	mov	r2, r3
 8004938:	460b      	mov	r3, r1
 800493a:	817b      	strh	r3, [r7, #10]
 800493c:	4613      	mov	r3, r2
 800493e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004940:	f7fe fbf0 	bl	8003124 <HAL_GetTick>
 8004944:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b20      	cmp	r3, #32
 8004950:	f040 80e0 	bne.w	8004b14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	2319      	movs	r3, #25
 800495a:	2201      	movs	r2, #1
 800495c:	4970      	ldr	r1, [pc, #448]	; (8004b20 <HAL_I2C_Master_Transmit+0x1f4>)
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 fc9e 	bl	80052a0 <I2C_WaitOnFlagUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800496a:	2302      	movs	r3, #2
 800496c:	e0d3      	b.n	8004b16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_I2C_Master_Transmit+0x50>
 8004978:	2302      	movs	r3, #2
 800497a:	e0cc      	b.n	8004b16 <HAL_I2C_Master_Transmit+0x1ea>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b01      	cmp	r3, #1
 8004990:	d007      	beq.n	80049a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0201 	orr.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2221      	movs	r2, #33	; 0x21
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2210      	movs	r2, #16
 80049be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	893a      	ldrh	r2, [r7, #8]
 80049d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	4a50      	ldr	r2, [pc, #320]	; (8004b24 <HAL_I2C_Master_Transmit+0x1f8>)
 80049e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80049e4:	8979      	ldrh	r1, [r7, #10]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	6a3a      	ldr	r2, [r7, #32]
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 fb08 	bl	8005000 <I2C_MasterRequestWrite>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e08d      	b.n	8004b16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049fa:	2300      	movs	r3, #0
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004a10:	e066      	b.n	8004ae0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	6a39      	ldr	r1, [r7, #32]
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 fd5c 	bl	80054d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00d      	beq.n	8004a3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d107      	bne.n	8004a3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e06b      	b.n	8004b16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	781a      	ldrb	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d11b      	bne.n	8004ab4 <HAL_I2C_Master_Transmit+0x188>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d017      	beq.n	8004ab4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	781a      	ldrb	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aac:	3b01      	subs	r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	6a39      	ldr	r1, [r7, #32]
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 fd53 	bl	8005564 <I2C_WaitOnBTFFlagUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00d      	beq.n	8004ae0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d107      	bne.n	8004adc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ada:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e01a      	b.n	8004b16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d194      	bne.n	8004a12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	e000      	b.n	8004b16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004b14:	2302      	movs	r3, #2
  }
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	00100002 	.word	0x00100002
 8004b24:	ffff0000 	.word	0xffff0000

08004b28 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b08c      	sub	sp, #48	; 0x30
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	607a      	str	r2, [r7, #4]
 8004b32:	461a      	mov	r2, r3
 8004b34:	460b      	mov	r3, r1
 8004b36:	817b      	strh	r3, [r7, #10]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b40:	f7fe faf0 	bl	8003124 <HAL_GetTick>
 8004b44:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b20      	cmp	r3, #32
 8004b50:	f040 824b 	bne.w	8004fea <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	2319      	movs	r3, #25
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	497f      	ldr	r1, [pc, #508]	; (8004d5c <HAL_I2C_Master_Receive+0x234>)
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 fb9e 	bl	80052a0 <I2C_WaitOnFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	e23e      	b.n	8004fec <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_I2C_Master_Receive+0x54>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e237      	b.n	8004fec <HAL_I2C_Master_Receive+0x4c4>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d007      	beq.n	8004ba2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0201 	orr.w	r2, r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2222      	movs	r2, #34	; 0x22
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2210      	movs	r2, #16
 8004bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	893a      	ldrh	r2, [r7, #8]
 8004bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4a5f      	ldr	r2, [pc, #380]	; (8004d60 <HAL_I2C_Master_Receive+0x238>)
 8004be2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004be4:	8979      	ldrh	r1, [r7, #10]
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 fa8a 	bl	8005104 <I2C_MasterRequestRead>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e1f8      	b.n	8004fec <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d113      	bne.n	8004c2a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c02:	2300      	movs	r3, #0
 8004c04:	61fb      	str	r3, [r7, #28]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	61fb      	str	r3, [r7, #28]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	61fb      	str	r3, [r7, #28]
 8004c16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	e1cc      	b.n	8004fc4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d11e      	bne.n	8004c70 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c40:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c42:	b672      	cpsid	i
}
 8004c44:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c46:	2300      	movs	r3, #0
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	61bb      	str	r3, [r7, #24]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004c6c:	b662      	cpsie	i
}
 8004c6e:	e035      	b.n	8004cdc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d11e      	bne.n	8004cb6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c88:	b672      	cpsid	i
}
 8004c8a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004cb2:	b662      	cpsie	i
}
 8004cb4:	e012      	b.n	8004cdc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004cdc:	e172      	b.n	8004fc4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce2:	2b03      	cmp	r3, #3
 8004ce4:	f200 811f 	bhi.w	8004f26 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d123      	bne.n	8004d38 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 fc7d 	bl	80055f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e173      	b.n	8004fec <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691a      	ldr	r2, [r3, #16]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d36:	e145      	b.n	8004fc4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d152      	bne.n	8004de6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	2200      	movs	r2, #0
 8004d48:	4906      	ldr	r1, [pc, #24]	; (8004d64 <HAL_I2C_Master_Receive+0x23c>)
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 faa8 	bl	80052a0 <I2C_WaitOnFlagUntilTimeout>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d008      	beq.n	8004d68 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e148      	b.n	8004fec <HAL_I2C_Master_Receive+0x4c4>
 8004d5a:	bf00      	nop
 8004d5c:	00100002 	.word	0x00100002
 8004d60:	ffff0000 	.word	0xffff0000
 8004d64:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004d68:	b672      	cpsid	i
}
 8004d6a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691a      	ldr	r2, [r3, #16]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004dae:	b662      	cpsie	i
}
 8004db0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004de4:	e0ee      	b.n	8004fc4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	2200      	movs	r2, #0
 8004dee:	4981      	ldr	r1, [pc, #516]	; (8004ff4 <HAL_I2C_Master_Receive+0x4cc>)
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 fa55 	bl	80052a0 <I2C_WaitOnFlagUntilTimeout>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e0f5      	b.n	8004fec <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e10:	b672      	cpsid	i
}
 8004e12:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e46:	4b6c      	ldr	r3, [pc, #432]	; (8004ff8 <HAL_I2C_Master_Receive+0x4d0>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	08db      	lsrs	r3, r3, #3
 8004e4c:	4a6b      	ldr	r2, [pc, #428]	; (8004ffc <HAL_I2C_Master_Receive+0x4d4>)
 8004e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e52:	0a1a      	lsrs	r2, r3, #8
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	00da      	lsls	r2, r3, #3
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d118      	bne.n	8004e9e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	f043 0220 	orr.w	r2, r3, #32
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004e8e:	b662      	cpsie	i
}
 8004e90:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e0a6      	b.n	8004fec <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d1d9      	bne.n	8004e60 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691a      	ldr	r2, [r3, #16]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004eee:	b662      	cpsie	i
}
 8004ef0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	b2d2      	uxtb	r2, r2
 8004efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f24:	e04e      	b.n	8004fc4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 fb62 	bl	80055f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e058      	b.n	8004fec <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d124      	bne.n	8004fc4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	d107      	bne.n	8004f92 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f90:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f47f ae88 	bne.w	8004cde <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	e000      	b.n	8004fec <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8004fea:	2302      	movs	r3, #2
  }
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3728      	adds	r7, #40	; 0x28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	00010004 	.word	0x00010004
 8004ff8:	2000000c 	.word	0x2000000c
 8004ffc:	14f8b589 	.word	0x14f8b589

08005000 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af02      	add	r7, sp, #8
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	607a      	str	r2, [r7, #4]
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	460b      	mov	r3, r1
 800500e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2b08      	cmp	r3, #8
 800501a:	d006      	beq.n	800502a <I2C_MasterRequestWrite+0x2a>
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d003      	beq.n	800502a <I2C_MasterRequestWrite+0x2a>
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005028:	d108      	bne.n	800503c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	e00b      	b.n	8005054 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005040:	2b12      	cmp	r3, #18
 8005042:	d107      	bne.n	8005054 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005052:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f91d 	bl	80052a0 <I2C_WaitOnFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00d      	beq.n	8005088 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800507a:	d103      	bne.n	8005084 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005082:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e035      	b.n	80050f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005090:	d108      	bne.n	80050a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005092:	897b      	ldrh	r3, [r7, #10]
 8005094:	b2db      	uxtb	r3, r3
 8005096:	461a      	mov	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050a0:	611a      	str	r2, [r3, #16]
 80050a2:	e01b      	b.n	80050dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050a4:	897b      	ldrh	r3, [r7, #10]
 80050a6:	11db      	asrs	r3, r3, #7
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	f003 0306 	and.w	r3, r3, #6
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	f063 030f 	orn	r3, r3, #15
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	490e      	ldr	r1, [pc, #56]	; (80050fc <I2C_MasterRequestWrite+0xfc>)
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 f966 	bl	8005394 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e010      	b.n	80050f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050d2:	897b      	ldrh	r3, [r7, #10]
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	4907      	ldr	r1, [pc, #28]	; (8005100 <I2C_MasterRequestWrite+0x100>)
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 f956 	bl	8005394 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e000      	b.n	80050f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	00010008 	.word	0x00010008
 8005100:	00010002 	.word	0x00010002

08005104 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af02      	add	r7, sp, #8
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	607a      	str	r2, [r7, #4]
 800510e:	603b      	str	r3, [r7, #0]
 8005110:	460b      	mov	r3, r1
 8005112:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005118:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005128:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b08      	cmp	r3, #8
 800512e:	d006      	beq.n	800513e <I2C_MasterRequestRead+0x3a>
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d003      	beq.n	800513e <I2C_MasterRequestRead+0x3a>
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800513c:	d108      	bne.n	8005150 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	e00b      	b.n	8005168 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005154:	2b11      	cmp	r3, #17
 8005156:	d107      	bne.n	8005168 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005166:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 f893 	bl	80052a0 <I2C_WaitOnFlagUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00d      	beq.n	800519c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800518e:	d103      	bne.n	8005198 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005196:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e079      	b.n	8005290 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051a4:	d108      	bne.n	80051b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80051a6:	897b      	ldrh	r3, [r7, #10]
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	f043 0301 	orr.w	r3, r3, #1
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	611a      	str	r2, [r3, #16]
 80051b6:	e05f      	b.n	8005278 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051b8:	897b      	ldrh	r3, [r7, #10]
 80051ba:	11db      	asrs	r3, r3, #7
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	f003 0306 	and.w	r3, r3, #6
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	f063 030f 	orn	r3, r3, #15
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	4930      	ldr	r1, [pc, #192]	; (8005298 <I2C_MasterRequestRead+0x194>)
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f000 f8dc 	bl	8005394 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e054      	b.n	8005290 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051e6:	897b      	ldrh	r3, [r7, #10]
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	4929      	ldr	r1, [pc, #164]	; (800529c <I2C_MasterRequestRead+0x198>)
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 f8cc 	bl	8005394 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e044      	b.n	8005290 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005206:	2300      	movs	r3, #0
 8005208:	613b      	str	r3, [r7, #16]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	613b      	str	r3, [r7, #16]
 800521a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800522a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 f831 	bl	80052a0 <I2C_WaitOnFlagUntilTimeout>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00d      	beq.n	8005260 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005252:	d103      	bne.n	800525c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800525a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e017      	b.n	8005290 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005260:	897b      	ldrh	r3, [r7, #10]
 8005262:	11db      	asrs	r3, r3, #7
 8005264:	b2db      	uxtb	r3, r3
 8005266:	f003 0306 	and.w	r3, r3, #6
 800526a:	b2db      	uxtb	r3, r3
 800526c:	f063 030e 	orn	r3, r3, #14
 8005270:	b2da      	uxtb	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	4907      	ldr	r1, [pc, #28]	; (800529c <I2C_MasterRequestRead+0x198>)
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 f888 	bl	8005394 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	00010008 	.word	0x00010008
 800529c:	00010002 	.word	0x00010002

080052a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	603b      	str	r3, [r7, #0]
 80052ac:	4613      	mov	r3, r2
 80052ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052b0:	e048      	b.n	8005344 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b8:	d044      	beq.n	8005344 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ba:	f7fd ff33 	bl	8003124 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d302      	bcc.n	80052d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d139      	bne.n	8005344 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	0c1b      	lsrs	r3, r3, #16
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d10d      	bne.n	80052f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	43da      	mvns	r2, r3
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	4013      	ands	r3, r2
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bf0c      	ite	eq
 80052ec:	2301      	moveq	r3, #1
 80052ee:	2300      	movne	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	461a      	mov	r2, r3
 80052f4:	e00c      	b.n	8005310 <I2C_WaitOnFlagUntilTimeout+0x70>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	43da      	mvns	r2, r3
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4013      	ands	r3, r2
 8005302:	b29b      	uxth	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	bf0c      	ite	eq
 8005308:	2301      	moveq	r3, #1
 800530a:	2300      	movne	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	461a      	mov	r2, r3
 8005310:	79fb      	ldrb	r3, [r7, #7]
 8005312:	429a      	cmp	r2, r3
 8005314:	d116      	bne.n	8005344 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2220      	movs	r2, #32
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005330:	f043 0220 	orr.w	r2, r3, #32
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e023      	b.n	800538c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	0c1b      	lsrs	r3, r3, #16
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b01      	cmp	r3, #1
 800534c:	d10d      	bne.n	800536a <I2C_WaitOnFlagUntilTimeout+0xca>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	43da      	mvns	r2, r3
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	4013      	ands	r3, r2
 800535a:	b29b      	uxth	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	bf0c      	ite	eq
 8005360:	2301      	moveq	r3, #1
 8005362:	2300      	movne	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	461a      	mov	r2, r3
 8005368:	e00c      	b.n	8005384 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	43da      	mvns	r2, r3
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	4013      	ands	r3, r2
 8005376:	b29b      	uxth	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	bf0c      	ite	eq
 800537c:	2301      	moveq	r3, #1
 800537e:	2300      	movne	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	461a      	mov	r2, r3
 8005384:	79fb      	ldrb	r3, [r7, #7]
 8005386:	429a      	cmp	r2, r3
 8005388:	d093      	beq.n	80052b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053a2:	e071      	b.n	8005488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053b2:	d123      	bne.n	80053fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	f043 0204 	orr.w	r2, r3, #4
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e067      	b.n	80054cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005402:	d041      	beq.n	8005488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005404:	f7fd fe8e 	bl	8003124 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	429a      	cmp	r2, r3
 8005412:	d302      	bcc.n	800541a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d136      	bne.n	8005488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	0c1b      	lsrs	r3, r3, #16
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b01      	cmp	r3, #1
 8005422:	d10c      	bne.n	800543e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	43da      	mvns	r2, r3
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	4013      	ands	r3, r2
 8005430:	b29b      	uxth	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	bf14      	ite	ne
 8005436:	2301      	movne	r3, #1
 8005438:	2300      	moveq	r3, #0
 800543a:	b2db      	uxtb	r3, r3
 800543c:	e00b      	b.n	8005456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	43da      	mvns	r2, r3
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	4013      	ands	r3, r2
 800544a:	b29b      	uxth	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	bf14      	ite	ne
 8005450:	2301      	movne	r3, #1
 8005452:	2300      	moveq	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d016      	beq.n	8005488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005474:	f043 0220 	orr.w	r2, r3, #32
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e021      	b.n	80054cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	0c1b      	lsrs	r3, r3, #16
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b01      	cmp	r3, #1
 8005490:	d10c      	bne.n	80054ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	43da      	mvns	r2, r3
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	4013      	ands	r3, r2
 800549e:	b29b      	uxth	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	bf14      	ite	ne
 80054a4:	2301      	movne	r3, #1
 80054a6:	2300      	moveq	r3, #0
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	e00b      	b.n	80054c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	43da      	mvns	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4013      	ands	r3, r2
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	bf14      	ite	ne
 80054be:	2301      	movne	r3, #1
 80054c0:	2300      	moveq	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f47f af6d 	bne.w	80053a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054e0:	e034      	b.n	800554c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f000 f8e3 	bl	80056ae <I2C_IsAcknowledgeFailed>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e034      	b.n	800555c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f8:	d028      	beq.n	800554c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054fa:	f7fd fe13 	bl	8003124 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	429a      	cmp	r2, r3
 8005508:	d302      	bcc.n	8005510 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d11d      	bne.n	800554c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551a:	2b80      	cmp	r3, #128	; 0x80
 800551c:	d016      	beq.n	800554c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005538:	f043 0220 	orr.w	r2, r3, #32
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e007      	b.n	800555c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005556:	2b80      	cmp	r3, #128	; 0x80
 8005558:	d1c3      	bne.n	80054e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005570:	e034      	b.n	80055dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 f89b 	bl	80056ae <I2C_IsAcknowledgeFailed>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e034      	b.n	80055ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005588:	d028      	beq.n	80055dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558a:	f7fd fdcb 	bl	8003124 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	429a      	cmp	r2, r3
 8005598:	d302      	bcc.n	80055a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d11d      	bne.n	80055dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d016      	beq.n	80055dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c8:	f043 0220 	orr.w	r2, r3, #32
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e007      	b.n	80055ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f003 0304 	and.w	r3, r3, #4
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d1c3      	bne.n	8005572 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005600:	e049      	b.n	8005696 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	f003 0310 	and.w	r3, r3, #16
 800560c:	2b10      	cmp	r3, #16
 800560e:	d119      	bne.n	8005644 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f06f 0210 	mvn.w	r2, #16
 8005618:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e030      	b.n	80056a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005644:	f7fd fd6e 	bl	8003124 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	429a      	cmp	r2, r3
 8005652:	d302      	bcc.n	800565a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d11d      	bne.n	8005696 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005664:	2b40      	cmp	r3, #64	; 0x40
 8005666:	d016      	beq.n	8005696 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2220      	movs	r2, #32
 8005672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	f043 0220 	orr.w	r2, r3, #32
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e007      	b.n	80056a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a0:	2b40      	cmp	r3, #64	; 0x40
 80056a2:	d1ae      	bne.n	8005602 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c4:	d11b      	bne.n	80056fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2220      	movs	r2, #32
 80056da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	f043 0204 	orr.w	r2, r3, #4
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e000      	b.n	8005700 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	bc80      	pop	{r7}
 8005708:	4770      	bx	lr
	...

0800570c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005710:	4b03      	ldr	r3, [pc, #12]	; (8005720 <HAL_PWR_EnableBkUpAccess+0x14>)
 8005712:	2201      	movs	r2, #1
 8005714:	601a      	str	r2, [r3, #0]
}
 8005716:	bf00      	nop
 8005718:	46bd      	mov	sp, r7
 800571a:	bc80      	pop	{r7}
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	420e0020 	.word	0x420e0020

08005724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e272      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 8087 	beq.w	8005852 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005744:	4b92      	ldr	r3, [pc, #584]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f003 030c 	and.w	r3, r3, #12
 800574c:	2b04      	cmp	r3, #4
 800574e:	d00c      	beq.n	800576a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005750:	4b8f      	ldr	r3, [pc, #572]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f003 030c 	and.w	r3, r3, #12
 8005758:	2b08      	cmp	r3, #8
 800575a:	d112      	bne.n	8005782 <HAL_RCC_OscConfig+0x5e>
 800575c:	4b8c      	ldr	r3, [pc, #560]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005768:	d10b      	bne.n	8005782 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800576a:	4b89      	ldr	r3, [pc, #548]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d06c      	beq.n	8005850 <HAL_RCC_OscConfig+0x12c>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d168      	bne.n	8005850 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e24c      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800578a:	d106      	bne.n	800579a <HAL_RCC_OscConfig+0x76>
 800578c:	4b80      	ldr	r3, [pc, #512]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a7f      	ldr	r2, [pc, #508]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 8005792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	e02e      	b.n	80057f8 <HAL_RCC_OscConfig+0xd4>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10c      	bne.n	80057bc <HAL_RCC_OscConfig+0x98>
 80057a2:	4b7b      	ldr	r3, [pc, #492]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a7a      	ldr	r2, [pc, #488]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	4b78      	ldr	r3, [pc, #480]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a77      	ldr	r2, [pc, #476]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057b8:	6013      	str	r3, [r2, #0]
 80057ba:	e01d      	b.n	80057f8 <HAL_RCC_OscConfig+0xd4>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057c4:	d10c      	bne.n	80057e0 <HAL_RCC_OscConfig+0xbc>
 80057c6:	4b72      	ldr	r3, [pc, #456]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a71      	ldr	r2, [pc, #452]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	4b6f      	ldr	r3, [pc, #444]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a6e      	ldr	r2, [pc, #440]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	e00b      	b.n	80057f8 <HAL_RCC_OscConfig+0xd4>
 80057e0:	4b6b      	ldr	r3, [pc, #428]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a6a      	ldr	r2, [pc, #424]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ea:	6013      	str	r3, [r2, #0]
 80057ec:	4b68      	ldr	r3, [pc, #416]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a67      	ldr	r2, [pc, #412]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80057f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d013      	beq.n	8005828 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005800:	f7fd fc90 	bl	8003124 <HAL_GetTick>
 8005804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005806:	e008      	b.n	800581a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005808:	f7fd fc8c 	bl	8003124 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b64      	cmp	r3, #100	; 0x64
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e200      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800581a:	4b5d      	ldr	r3, [pc, #372]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0f0      	beq.n	8005808 <HAL_RCC_OscConfig+0xe4>
 8005826:	e014      	b.n	8005852 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005828:	f7fd fc7c 	bl	8003124 <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800582e:	e008      	b.n	8005842 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005830:	f7fd fc78 	bl	8003124 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b64      	cmp	r3, #100	; 0x64
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e1ec      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005842:	4b53      	ldr	r3, [pc, #332]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1f0      	bne.n	8005830 <HAL_RCC_OscConfig+0x10c>
 800584e:	e000      	b.n	8005852 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d063      	beq.n	8005926 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800585e:	4b4c      	ldr	r3, [pc, #304]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f003 030c 	and.w	r3, r3, #12
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00b      	beq.n	8005882 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800586a:	4b49      	ldr	r3, [pc, #292]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f003 030c 	and.w	r3, r3, #12
 8005872:	2b08      	cmp	r3, #8
 8005874:	d11c      	bne.n	80058b0 <HAL_RCC_OscConfig+0x18c>
 8005876:	4b46      	ldr	r3, [pc, #280]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d116      	bne.n	80058b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005882:	4b43      	ldr	r3, [pc, #268]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d005      	beq.n	800589a <HAL_RCC_OscConfig+0x176>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d001      	beq.n	800589a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e1c0      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800589a:	4b3d      	ldr	r3, [pc, #244]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	4939      	ldr	r1, [pc, #228]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ae:	e03a      	b.n	8005926 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d020      	beq.n	80058fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058b8:	4b36      	ldr	r3, [pc, #216]	; (8005994 <HAL_RCC_OscConfig+0x270>)
 80058ba:	2201      	movs	r2, #1
 80058bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058be:	f7fd fc31 	bl	8003124 <HAL_GetTick>
 80058c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058c4:	e008      	b.n	80058d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058c6:	f7fd fc2d 	bl	8003124 <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d901      	bls.n	80058d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e1a1      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058d8:	4b2d      	ldr	r3, [pc, #180]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d0f0      	beq.n	80058c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058e4:	4b2a      	ldr	r3, [pc, #168]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	4927      	ldr	r1, [pc, #156]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	600b      	str	r3, [r1, #0]
 80058f8:	e015      	b.n	8005926 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058fa:	4b26      	ldr	r3, [pc, #152]	; (8005994 <HAL_RCC_OscConfig+0x270>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005900:	f7fd fc10 	bl	8003124 <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005906:	e008      	b.n	800591a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005908:	f7fd fc0c 	bl	8003124 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e180      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800591a:	4b1d      	ldr	r3, [pc, #116]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1f0      	bne.n	8005908 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0308 	and.w	r3, r3, #8
 800592e:	2b00      	cmp	r3, #0
 8005930:	d03a      	beq.n	80059a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d019      	beq.n	800596e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800593a:	4b17      	ldr	r3, [pc, #92]	; (8005998 <HAL_RCC_OscConfig+0x274>)
 800593c:	2201      	movs	r2, #1
 800593e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005940:	f7fd fbf0 	bl	8003124 <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005948:	f7fd fbec 	bl	8003124 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e160      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800595a:	4b0d      	ldr	r3, [pc, #52]	; (8005990 <HAL_RCC_OscConfig+0x26c>)
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0f0      	beq.n	8005948 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005966:	2001      	movs	r0, #1
 8005968:	f000 face 	bl	8005f08 <RCC_Delay>
 800596c:	e01c      	b.n	80059a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800596e:	4b0a      	ldr	r3, [pc, #40]	; (8005998 <HAL_RCC_OscConfig+0x274>)
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005974:	f7fd fbd6 	bl	8003124 <HAL_GetTick>
 8005978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800597a:	e00f      	b.n	800599c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800597c:	f7fd fbd2 	bl	8003124 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d908      	bls.n	800599c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e146      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
 800598e:	bf00      	nop
 8005990:	40021000 	.word	0x40021000
 8005994:	42420000 	.word	0x42420000
 8005998:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800599c:	4b92      	ldr	r3, [pc, #584]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1e9      	bne.n	800597c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 80a6 	beq.w	8005b02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059b6:	2300      	movs	r3, #0
 80059b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ba:	4b8b      	ldr	r3, [pc, #556]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10d      	bne.n	80059e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059c6:	4b88      	ldr	r3, [pc, #544]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	4a87      	ldr	r2, [pc, #540]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 80059cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d0:	61d3      	str	r3, [r2, #28]
 80059d2:	4b85      	ldr	r3, [pc, #532]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059da:	60bb      	str	r3, [r7, #8]
 80059dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059de:	2301      	movs	r3, #1
 80059e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059e2:	4b82      	ldr	r3, [pc, #520]	; (8005bec <HAL_RCC_OscConfig+0x4c8>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d118      	bne.n	8005a20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059ee:	4b7f      	ldr	r3, [pc, #508]	; (8005bec <HAL_RCC_OscConfig+0x4c8>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a7e      	ldr	r2, [pc, #504]	; (8005bec <HAL_RCC_OscConfig+0x4c8>)
 80059f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059fa:	f7fd fb93 	bl	8003124 <HAL_GetTick>
 80059fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a00:	e008      	b.n	8005a14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a02:	f7fd fb8f 	bl	8003124 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b64      	cmp	r3, #100	; 0x64
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e103      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a14:	4b75      	ldr	r3, [pc, #468]	; (8005bec <HAL_RCC_OscConfig+0x4c8>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0f0      	beq.n	8005a02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d106      	bne.n	8005a36 <HAL_RCC_OscConfig+0x312>
 8005a28:	4b6f      	ldr	r3, [pc, #444]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	4a6e      	ldr	r2, [pc, #440]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a2e:	f043 0301 	orr.w	r3, r3, #1
 8005a32:	6213      	str	r3, [r2, #32]
 8005a34:	e02d      	b.n	8005a92 <HAL_RCC_OscConfig+0x36e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10c      	bne.n	8005a58 <HAL_RCC_OscConfig+0x334>
 8005a3e:	4b6a      	ldr	r3, [pc, #424]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	4a69      	ldr	r2, [pc, #420]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a44:	f023 0301 	bic.w	r3, r3, #1
 8005a48:	6213      	str	r3, [r2, #32]
 8005a4a:	4b67      	ldr	r3, [pc, #412]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	4a66      	ldr	r2, [pc, #408]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a50:	f023 0304 	bic.w	r3, r3, #4
 8005a54:	6213      	str	r3, [r2, #32]
 8005a56:	e01c      	b.n	8005a92 <HAL_RCC_OscConfig+0x36e>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	2b05      	cmp	r3, #5
 8005a5e:	d10c      	bne.n	8005a7a <HAL_RCC_OscConfig+0x356>
 8005a60:	4b61      	ldr	r3, [pc, #388]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	4a60      	ldr	r2, [pc, #384]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a66:	f043 0304 	orr.w	r3, r3, #4
 8005a6a:	6213      	str	r3, [r2, #32]
 8005a6c:	4b5e      	ldr	r3, [pc, #376]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	4a5d      	ldr	r2, [pc, #372]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a72:	f043 0301 	orr.w	r3, r3, #1
 8005a76:	6213      	str	r3, [r2, #32]
 8005a78:	e00b      	b.n	8005a92 <HAL_RCC_OscConfig+0x36e>
 8005a7a:	4b5b      	ldr	r3, [pc, #364]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	4a5a      	ldr	r2, [pc, #360]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a80:	f023 0301 	bic.w	r3, r3, #1
 8005a84:	6213      	str	r3, [r2, #32]
 8005a86:	4b58      	ldr	r3, [pc, #352]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	4a57      	ldr	r2, [pc, #348]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005a8c:	f023 0304 	bic.w	r3, r3, #4
 8005a90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d015      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a9a:	f7fd fb43 	bl	8003124 <HAL_GetTick>
 8005a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aa0:	e00a      	b.n	8005ab8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aa2:	f7fd fb3f 	bl	8003124 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e0b1      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ab8:	4b4b      	ldr	r3, [pc, #300]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0ee      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x37e>
 8005ac4:	e014      	b.n	8005af0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ac6:	f7fd fb2d 	bl	8003124 <HAL_GetTick>
 8005aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005acc:	e00a      	b.n	8005ae4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ace:	f7fd fb29 	bl	8003124 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e09b      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ae4:	4b40      	ldr	r3, [pc, #256]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1ee      	bne.n	8005ace <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005af0:	7dfb      	ldrb	r3, [r7, #23]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d105      	bne.n	8005b02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005af6:	4b3c      	ldr	r3, [pc, #240]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	4a3b      	ldr	r2, [pc, #236]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 8087 	beq.w	8005c1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b0c:	4b36      	ldr	r3, [pc, #216]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f003 030c 	and.w	r3, r3, #12
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d061      	beq.n	8005bdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d146      	bne.n	8005bae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b20:	4b33      	ldr	r3, [pc, #204]	; (8005bf0 <HAL_RCC_OscConfig+0x4cc>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b26:	f7fd fafd 	bl	8003124 <HAL_GetTick>
 8005b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b2c:	e008      	b.n	8005b40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b2e:	f7fd faf9 	bl	8003124 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e06d      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b40:	4b29      	ldr	r3, [pc, #164]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1f0      	bne.n	8005b2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b54:	d108      	bne.n	8005b68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b56:	4b24      	ldr	r3, [pc, #144]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	4921      	ldr	r1, [pc, #132]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b68:	4b1f      	ldr	r3, [pc, #124]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a19      	ldr	r1, [r3, #32]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	491b      	ldr	r1, [pc, #108]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b80:	4b1b      	ldr	r3, [pc, #108]	; (8005bf0 <HAL_RCC_OscConfig+0x4cc>)
 8005b82:	2201      	movs	r2, #1
 8005b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b86:	f7fd facd 	bl	8003124 <HAL_GetTick>
 8005b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b8c:	e008      	b.n	8005ba0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b8e:	f7fd fac9 	bl	8003124 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e03d      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ba0:	4b11      	ldr	r3, [pc, #68]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0f0      	beq.n	8005b8e <HAL_RCC_OscConfig+0x46a>
 8005bac:	e035      	b.n	8005c1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bae:	4b10      	ldr	r3, [pc, #64]	; (8005bf0 <HAL_RCC_OscConfig+0x4cc>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb4:	f7fd fab6 	bl	8003124 <HAL_GetTick>
 8005bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bbc:	f7fd fab2 	bl	8003124 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e026      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bce:	4b06      	ldr	r3, [pc, #24]	; (8005be8 <HAL_RCC_OscConfig+0x4c4>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1f0      	bne.n	8005bbc <HAL_RCC_OscConfig+0x498>
 8005bda:	e01e      	b.n	8005c1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	69db      	ldr	r3, [r3, #28]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d107      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e019      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
 8005be8:	40021000 	.word	0x40021000
 8005bec:	40007000 	.word	0x40007000
 8005bf0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005bf4:	4b0b      	ldr	r3, [pc, #44]	; (8005c24 <HAL_RCC_OscConfig+0x500>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d106      	bne.n	8005c16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d001      	beq.n	8005c1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e000      	b.n	8005c1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	40021000 	.word	0x40021000

08005c28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0d0      	b.n	8005dde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c3c:	4b6a      	ldr	r3, [pc, #424]	; (8005de8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d910      	bls.n	8005c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c4a:	4b67      	ldr	r3, [pc, #412]	; (8005de8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f023 0207 	bic.w	r2, r3, #7
 8005c52:	4965      	ldr	r1, [pc, #404]	; (8005de8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c5a:	4b63      	ldr	r3, [pc, #396]	; (8005de8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d001      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e0b8      	b.n	8005dde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d020      	beq.n	8005cba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d005      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c84:	4b59      	ldr	r3, [pc, #356]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	4a58      	ldr	r2, [pc, #352]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005c8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d005      	beq.n	8005ca8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c9c:	4b53      	ldr	r3, [pc, #332]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	4a52      	ldr	r2, [pc, #328]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005ca2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005ca6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ca8:	4b50      	ldr	r3, [pc, #320]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	494d      	ldr	r1, [pc, #308]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d040      	beq.n	8005d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d107      	bne.n	8005cde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cce:	4b47      	ldr	r3, [pc, #284]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d115      	bne.n	8005d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e07f      	b.n	8005dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d107      	bne.n	8005cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ce6:	4b41      	ldr	r3, [pc, #260]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d109      	bne.n	8005d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e073      	b.n	8005dde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cf6:	4b3d      	ldr	r3, [pc, #244]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e06b      	b.n	8005dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d06:	4b39      	ldr	r3, [pc, #228]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f023 0203 	bic.w	r2, r3, #3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	4936      	ldr	r1, [pc, #216]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d18:	f7fd fa04 	bl	8003124 <HAL_GetTick>
 8005d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d1e:	e00a      	b.n	8005d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d20:	f7fd fa00 	bl	8003124 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e053      	b.n	8005dde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d36:	4b2d      	ldr	r3, [pc, #180]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f003 020c 	and.w	r2, r3, #12
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d1eb      	bne.n	8005d20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d48:	4b27      	ldr	r3, [pc, #156]	; (8005de8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d210      	bcs.n	8005d78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d56:	4b24      	ldr	r3, [pc, #144]	; (8005de8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f023 0207 	bic.w	r2, r3, #7
 8005d5e:	4922      	ldr	r1, [pc, #136]	; (8005de8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d66:	4b20      	ldr	r3, [pc, #128]	; (8005de8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0307 	and.w	r3, r3, #7
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d001      	beq.n	8005d78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e032      	b.n	8005dde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d008      	beq.n	8005d96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d84:	4b19      	ldr	r3, [pc, #100]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	4916      	ldr	r1, [pc, #88]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0308 	and.w	r3, r3, #8
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d009      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005da2:	4b12      	ldr	r3, [pc, #72]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	490e      	ldr	r1, [pc, #56]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005db6:	f000 f821 	bl	8005dfc <HAL_RCC_GetSysClockFreq>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	4b0b      	ldr	r3, [pc, #44]	; (8005dec <HAL_RCC_ClockConfig+0x1c4>)
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	091b      	lsrs	r3, r3, #4
 8005dc2:	f003 030f 	and.w	r3, r3, #15
 8005dc6:	490a      	ldr	r1, [pc, #40]	; (8005df0 <HAL_RCC_ClockConfig+0x1c8>)
 8005dc8:	5ccb      	ldrb	r3, [r1, r3]
 8005dca:	fa22 f303 	lsr.w	r3, r2, r3
 8005dce:	4a09      	ldr	r2, [pc, #36]	; (8005df4 <HAL_RCC_ClockConfig+0x1cc>)
 8005dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005dd2:	4b09      	ldr	r3, [pc, #36]	; (8005df8 <HAL_RCC_ClockConfig+0x1d0>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fd f962 	bl	80030a0 <HAL_InitTick>

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	40022000 	.word	0x40022000
 8005dec:	40021000 	.word	0x40021000
 8005df0:	0800da0c 	.word	0x0800da0c
 8005df4:	2000000c 	.word	0x2000000c
 8005df8:	20000010 	.word	0x20000010

08005dfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	2300      	movs	r3, #0
 8005e08:	60bb      	str	r3, [r7, #8]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005e16:	4b1e      	ldr	r3, [pc, #120]	; (8005e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f003 030c 	and.w	r3, r3, #12
 8005e22:	2b04      	cmp	r3, #4
 8005e24:	d002      	beq.n	8005e2c <HAL_RCC_GetSysClockFreq+0x30>
 8005e26:	2b08      	cmp	r3, #8
 8005e28:	d003      	beq.n	8005e32 <HAL_RCC_GetSysClockFreq+0x36>
 8005e2a:	e027      	b.n	8005e7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e2c:	4b19      	ldr	r3, [pc, #100]	; (8005e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e2e:	613b      	str	r3, [r7, #16]
      break;
 8005e30:	e027      	b.n	8005e82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	0c9b      	lsrs	r3, r3, #18
 8005e36:	f003 030f 	and.w	r3, r3, #15
 8005e3a:	4a17      	ldr	r2, [pc, #92]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005e3c:	5cd3      	ldrb	r3, [r2, r3]
 8005e3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d010      	beq.n	8005e6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e4a:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	0c5b      	lsrs	r3, r3, #17
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	4a11      	ldr	r2, [pc, #68]	; (8005e9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005e56:	5cd3      	ldrb	r3, [r2, r3]
 8005e58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a0d      	ldr	r2, [pc, #52]	; (8005e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e5e:	fb03 f202 	mul.w	r2, r3, r2
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e68:	617b      	str	r3, [r7, #20]
 8005e6a:	e004      	b.n	8005e76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a0c      	ldr	r2, [pc, #48]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005e70:	fb02 f303 	mul.w	r3, r2, r3
 8005e74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	613b      	str	r3, [r7, #16]
      break;
 8005e7a:	e002      	b.n	8005e82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e7c:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e7e:	613b      	str	r3, [r7, #16]
      break;
 8005e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e82:	693b      	ldr	r3, [r7, #16]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	371c      	adds	r7, #28
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bc80      	pop	{r7}
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	40021000 	.word	0x40021000
 8005e94:	007a1200 	.word	0x007a1200
 8005e98:	0800da24 	.word	0x0800da24
 8005e9c:	0800da34 	.word	0x0800da34
 8005ea0:	003d0900 	.word	0x003d0900

08005ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ea8:	4b02      	ldr	r3, [pc, #8]	; (8005eb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bc80      	pop	{r7}
 8005eb2:	4770      	bx	lr
 8005eb4:	2000000c 	.word	0x2000000c

08005eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ebc:	f7ff fff2 	bl	8005ea4 <HAL_RCC_GetHCLKFreq>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	4b05      	ldr	r3, [pc, #20]	; (8005ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	0a1b      	lsrs	r3, r3, #8
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	4903      	ldr	r1, [pc, #12]	; (8005edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ece:	5ccb      	ldrb	r3, [r1, r3]
 8005ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	40021000 	.word	0x40021000
 8005edc:	0800da1c 	.word	0x0800da1c

08005ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ee4:	f7ff ffde 	bl	8005ea4 <HAL_RCC_GetHCLKFreq>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	0adb      	lsrs	r3, r3, #11
 8005ef0:	f003 0307 	and.w	r3, r3, #7
 8005ef4:	4903      	ldr	r1, [pc, #12]	; (8005f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ef6:	5ccb      	ldrb	r3, [r1, r3]
 8005ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	40021000 	.word	0x40021000
 8005f04:	0800da1c 	.word	0x0800da1c

08005f08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f10:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <RCC_Delay+0x34>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a0a      	ldr	r2, [pc, #40]	; (8005f40 <RCC_Delay+0x38>)
 8005f16:	fba2 2303 	umull	r2, r3, r2, r3
 8005f1a:	0a5b      	lsrs	r3, r3, #9
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	fb02 f303 	mul.w	r3, r2, r3
 8005f22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f24:	bf00      	nop
  }
  while (Delay --);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	1e5a      	subs	r2, r3, #1
 8005f2a:	60fa      	str	r2, [r7, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1f9      	bne.n	8005f24 <RCC_Delay+0x1c>
}
 8005f30:	bf00      	nop
 8005f32:	bf00      	nop
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bc80      	pop	{r7}
 8005f3a:	4770      	bx	lr
 8005f3c:	2000000c 	.word	0x2000000c
 8005f40:	10624dd3 	.word	0x10624dd3

08005f44 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	613b      	str	r3, [r7, #16]
 8005f50:	2300      	movs	r3, #0
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d07d      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005f60:	2300      	movs	r3, #0
 8005f62:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f64:	4b4f      	ldr	r3, [pc, #316]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f66:	69db      	ldr	r3, [r3, #28]
 8005f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10d      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f70:	4b4c      	ldr	r3, [pc, #304]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	4a4b      	ldr	r2, [pc, #300]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f7a:	61d3      	str	r3, [r2, #28]
 8005f7c:	4b49      	ldr	r3, [pc, #292]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f7e:	69db      	ldr	r3, [r3, #28]
 8005f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f84:	60bb      	str	r3, [r7, #8]
 8005f86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f8c:	4b46      	ldr	r3, [pc, #280]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d118      	bne.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f98:	4b43      	ldr	r3, [pc, #268]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a42      	ldr	r2, [pc, #264]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fa2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fa4:	f7fd f8be 	bl	8003124 <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005faa:	e008      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fac:	f7fd f8ba 	bl	8003124 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b64      	cmp	r3, #100	; 0x64
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e06d      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fbe:	4b3a      	ldr	r3, [pc, #232]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0f0      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005fca:	4b36      	ldr	r3, [pc, #216]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fd2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d02e      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d027      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fe8:	4b2e      	ldr	r3, [pc, #184]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ff2:	4b2e      	ldr	r3, [pc, #184]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ff8:	4b2c      	ldr	r3, [pc, #176]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ffe:	4a29      	ldr	r2, [pc, #164]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b00      	cmp	r3, #0
 800600c:	d014      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800600e:	f7fd f889 	bl	8003124 <HAL_GetTick>
 8006012:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006014:	e00a      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006016:	f7fd f885 	bl	8003124 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	f241 3288 	movw	r2, #5000	; 0x1388
 8006024:	4293      	cmp	r3, r2
 8006026:	d901      	bls.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e036      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800602c:	4b1d      	ldr	r3, [pc, #116]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d0ee      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006038:	4b1a      	ldr	r3, [pc, #104]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	4917      	ldr	r1, [pc, #92]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006046:	4313      	orrs	r3, r2
 8006048:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800604a:	7dfb      	ldrb	r3, [r7, #23]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d105      	bne.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006050:	4b14      	ldr	r3, [pc, #80]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	4a13      	ldr	r2, [pc, #76]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006056:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800605a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d008      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006068:	4b0e      	ldr	r3, [pc, #56]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	490b      	ldr	r1, [pc, #44]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006076:	4313      	orrs	r3, r2
 8006078:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0310 	and.w	r3, r3, #16
 8006082:	2b00      	cmp	r3, #0
 8006084:	d008      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006086:	4b07      	ldr	r3, [pc, #28]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	4904      	ldr	r1, [pc, #16]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006094:	4313      	orrs	r3, r2
 8006096:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	40021000 	.word	0x40021000
 80060a8:	40007000 	.word	0x40007000
 80060ac:	42420440 	.word	0x42420440

080060b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b088      	sub	sp, #32
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	617b      	str	r3, [r7, #20]
 80060bc:	2300      	movs	r3, #0
 80060be:	61fb      	str	r3, [r7, #28]
 80060c0:	2300      	movs	r3, #0
 80060c2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	2300      	movs	r3, #0
 80060ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b10      	cmp	r3, #16
 80060d0:	d00a      	beq.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b10      	cmp	r3, #16
 80060d6:	f200 808a 	bhi.w	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d045      	beq.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d075      	beq.n	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80060e6:	e082      	b.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80060e8:	4b46      	ldr	r3, [pc, #280]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80060ee:	4b45      	ldr	r3, [pc, #276]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d07b      	beq.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	0c9b      	lsrs	r3, r3, #18
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	4a41      	ldr	r2, [pc, #260]	; (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8006104:	5cd3      	ldrb	r3, [r2, r3]
 8006106:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d015      	beq.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006112:	4b3c      	ldr	r3, [pc, #240]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	0c5b      	lsrs	r3, r3, #17
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	4a3b      	ldr	r2, [pc, #236]	; (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800611e:	5cd3      	ldrb	r3, [r2, r3]
 8006120:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00d      	beq.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800612c:	4a38      	ldr	r2, [pc, #224]	; (8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	fbb2 f2f3 	udiv	r2, r2, r3
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	fb02 f303 	mul.w	r3, r2, r3
 800613a:	61fb      	str	r3, [r7, #28]
 800613c:	e004      	b.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	4a34      	ldr	r2, [pc, #208]	; (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8006142:	fb02 f303 	mul.w	r3, r2, r3
 8006146:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006148:	4b2e      	ldr	r3, [pc, #184]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006150:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006154:	d102      	bne.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	61bb      	str	r3, [r7, #24]
      break;
 800615a:	e04a      	b.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	4a2d      	ldr	r2, [pc, #180]	; (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006162:	fba2 2303 	umull	r2, r3, r2, r3
 8006166:	085b      	lsrs	r3, r3, #1
 8006168:	61bb      	str	r3, [r7, #24]
      break;
 800616a:	e042      	b.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800616c:	4b25      	ldr	r3, [pc, #148]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800617c:	d108      	bne.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d003      	beq.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8006188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800618c:	61bb      	str	r3, [r7, #24]
 800618e:	e01f      	b.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800619a:	d109      	bne.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800619c:	4b19      	ldr	r3, [pc, #100]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d003      	beq.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80061a8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80061ac:	61bb      	str	r3, [r7, #24]
 80061ae:	e00f      	b.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061ba:	d11c      	bne.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80061bc:	4b11      	ldr	r3, [pc, #68]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d016      	beq.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80061c8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80061cc:	61bb      	str	r3, [r7, #24]
      break;
 80061ce:	e012      	b.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80061d0:	e011      	b.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80061d2:	f7ff fe85 	bl	8005ee0 <HAL_RCC_GetPCLK2Freq>
 80061d6:	4602      	mov	r2, r0
 80061d8:	4b0a      	ldr	r3, [pc, #40]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	0b9b      	lsrs	r3, r3, #14
 80061de:	f003 0303 	and.w	r3, r3, #3
 80061e2:	3301      	adds	r3, #1
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ea:	61bb      	str	r3, [r7, #24]
      break;
 80061ec:	e004      	b.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80061ee:	bf00      	nop
 80061f0:	e002      	b.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80061f2:	bf00      	nop
 80061f4:	e000      	b.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80061f6:	bf00      	nop
    }
  }
  return (frequency);
 80061f8:	69bb      	ldr	r3, [r7, #24]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3720      	adds	r7, #32
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	40021000 	.word	0x40021000
 8006208:	0800da38 	.word	0x0800da38
 800620c:	0800da48 	.word	0x0800da48
 8006210:	007a1200 	.word	0x007a1200
 8006214:	003d0900 	.word	0x003d0900
 8006218:	aaaaaaab 	.word	0xaaaaaaab

0800621c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e07a      	b.n	8006328 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	7c5b      	ldrb	r3, [r3, #17]
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	d105      	bne.n	8006248 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7fc fd66 	bl	8002d14 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 faea 	bl	8006828 <HAL_RTC_WaitForSynchro>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d004      	beq.n	8006264 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2204      	movs	r2, #4
 800625e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e061      	b.n	8006328 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fba3 	bl	80069b0 <RTC_EnterInitMode>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d004      	beq.n	800627a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2204      	movs	r2, #4
 8006274:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e056      	b.n	8006328 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 0207 	bic.w	r2, r2, #7
 8006288:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d005      	beq.n	800629e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8006292:	4b27      	ldr	r3, [pc, #156]	; (8006330 <HAL_RTC_Init+0x114>)
 8006294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006296:	4a26      	ldr	r2, [pc, #152]	; (8006330 <HAL_RTC_Init+0x114>)
 8006298:	f023 0301 	bic.w	r3, r3, #1
 800629c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800629e:	4b24      	ldr	r3, [pc, #144]	; (8006330 <HAL_RTC_Init+0x114>)
 80062a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a2:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	4921      	ldr	r1, [pc, #132]	; (8006330 <HAL_RTC_Init+0x114>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b8:	d003      	beq.n	80062c2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	e00e      	b.n	80062e0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80062c2:	2001      	movs	r0, #1
 80062c4:	f7ff fef4 	bl	80060b0 <HAL_RCCEx_GetPeriphCLKFreq>
 80062c8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d104      	bne.n	80062da <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2204      	movs	r2, #4
 80062d4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e026      	b.n	8006328 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3b01      	subs	r3, #1
 80062de:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	0c1a      	lsrs	r2, r3, #16
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f002 020f 	and.w	r2, r2, #15
 80062ec:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	b292      	uxth	r2, r2
 80062f6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fb81 	bl	8006a00 <RTC_ExitInitMode>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d004      	beq.n	800630e <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2204      	movs	r2, #4
 8006308:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e00c      	b.n	8006328 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8006326:	2300      	movs	r3, #0
  }
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	40006c00 	.word	0x40006c00

08006334 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006334:	b590      	push	{r4, r7, lr}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	617b      	str	r3, [r7, #20]
 8006344:	2300      	movs	r3, #0
 8006346:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <HAL_RTC_SetTime+0x20>
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e080      	b.n	800645a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	7c1b      	ldrb	r3, [r3, #16]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d101      	bne.n	8006364 <HAL_RTC_SetTime+0x30>
 8006360:	2302      	movs	r3, #2
 8006362:	e07a      	b.n	800645a <HAL_RTC_SetTime+0x126>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2201      	movs	r2, #1
 8006368:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2202      	movs	r2, #2
 800636e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d113      	bne.n	800639e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006380:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	785b      	ldrb	r3, [r3, #1]
 8006388:	4619      	mov	r1, r3
 800638a:	460b      	mov	r3, r1
 800638c:	011b      	lsls	r3, r3, #4
 800638e:	1a5b      	subs	r3, r3, r1
 8006390:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006392:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006398:	4413      	add	r3, r2
 800639a:	617b      	str	r3, [r7, #20]
 800639c:	e01e      	b.n	80063dc <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fb71 	bl	8006a8a <RTC_Bcd2ToByte>
 80063a8:	4603      	mov	r3, r0
 80063aa:	461a      	mov	r2, r3
 80063ac:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80063b0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	785b      	ldrb	r3, [r3, #1]
 80063b8:	4618      	mov	r0, r3
 80063ba:	f000 fb66 	bl	8006a8a <RTC_Bcd2ToByte>
 80063be:	4603      	mov	r3, r0
 80063c0:	461a      	mov	r2, r3
 80063c2:	4613      	mov	r3, r2
 80063c4:	011b      	lsls	r3, r3, #4
 80063c6:	1a9b      	subs	r3, r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80063ca:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	789b      	ldrb	r3, [r3, #2]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fb5a 	bl	8006a8a <RTC_Bcd2ToByte>
 80063d6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80063d8:	4423      	add	r3, r4
 80063da:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80063dc:	6979      	ldr	r1, [r7, #20]
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 fa7f 	bl	80068e2 <RTC_WriteTimeCounter>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d007      	beq.n	80063fa <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2204      	movs	r2, #4
 80063ee:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e02f      	b.n	800645a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 0205 	bic.w	r2, r2, #5
 8006408:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 fa90 	bl	8006930 <RTC_ReadAlarmCounter>
 8006410:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006418:	d018      	beq.n	800644c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	429a      	cmp	r2, r3
 8006420:	d214      	bcs.n	800644c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006428:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800642c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800642e:	6939      	ldr	r1, [r7, #16]
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 fa96 	bl	8006962 <RTC_WriteAlarmCounter>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d007      	beq.n	800644c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2204      	movs	r2, #4
 8006440:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e006      	b.n	800645a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2201      	movs	r2, #1
 8006450:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8006458:	2300      	movs	r3, #0
  }
}
 800645a:	4618      	mov	r0, r3
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	bd90      	pop	{r4, r7, pc}
	...

08006464 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b088      	sub	sp, #32
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	61bb      	str	r3, [r7, #24]
 8006474:	2300      	movs	r3, #0
 8006476:	61fb      	str	r3, [r7, #28]
 8006478:	2300      	movs	r3, #0
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	2300      	movs	r3, #0
 800647e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <HAL_RTC_GetTime+0x28>
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e0b5      	b.n	80065fc <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f003 0304 	and.w	r3, r3, #4
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e0ac      	b.n	80065fc <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 f9ed 	bl	8006882 <RTC_ReadTimeCounter>
 80064a8:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	4a55      	ldr	r2, [pc, #340]	; (8006604 <HAL_RTC_GetTime+0x1a0>)
 80064ae:	fba2 2303 	umull	r2, r3, r2, r3
 80064b2:	0adb      	lsrs	r3, r3, #11
 80064b4:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	4b52      	ldr	r3, [pc, #328]	; (8006604 <HAL_RTC_GetTime+0x1a0>)
 80064ba:	fba3 1302 	umull	r1, r3, r3, r2
 80064be:	0adb      	lsrs	r3, r3, #11
 80064c0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80064c4:	fb01 f303 	mul.w	r3, r1, r3
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	4a4f      	ldr	r2, [pc, #316]	; (8006608 <HAL_RTC_GetTime+0x1a4>)
 80064cc:	fba2 2303 	umull	r2, r3, r2, r3
 80064d0:	095b      	lsrs	r3, r3, #5
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	4a4a      	ldr	r2, [pc, #296]	; (8006604 <HAL_RTC_GetTime+0x1a0>)
 80064dc:	fba2 1203 	umull	r1, r2, r2, r3
 80064e0:	0ad2      	lsrs	r2, r2, #11
 80064e2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80064e6:	fb01 f202 	mul.w	r2, r1, r2
 80064ea:	1a9a      	subs	r2, r3, r2
 80064ec:	4b46      	ldr	r3, [pc, #280]	; (8006608 <HAL_RTC_GetTime+0x1a4>)
 80064ee:	fba3 1302 	umull	r1, r3, r3, r2
 80064f2:	0959      	lsrs	r1, r3, #5
 80064f4:	460b      	mov	r3, r1
 80064f6:	011b      	lsls	r3, r3, #4
 80064f8:	1a5b      	subs	r3, r3, r1
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	1ad1      	subs	r1, r2, r3
 80064fe:	b2ca      	uxtb	r2, r1
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	2b17      	cmp	r3, #23
 8006508:	d955      	bls.n	80065b6 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	4a3f      	ldr	r2, [pc, #252]	; (800660c <HAL_RTC_GetTime+0x1a8>)
 800650e:	fba2 2303 	umull	r2, r3, r2, r3
 8006512:	091b      	lsrs	r3, r3, #4
 8006514:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8006516:	6939      	ldr	r1, [r7, #16]
 8006518:	4b3c      	ldr	r3, [pc, #240]	; (800660c <HAL_RTC_GetTime+0x1a8>)
 800651a:	fba3 2301 	umull	r2, r3, r3, r1
 800651e:	091a      	lsrs	r2, r3, #4
 8006520:	4613      	mov	r3, r2
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	4413      	add	r3, r2
 8006526:	00db      	lsls	r3, r3, #3
 8006528:	1aca      	subs	r2, r1, r3
 800652a:	b2d2      	uxtb	r2, r2
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 f9fd 	bl	8006930 <RTC_ReadAlarmCounter>
 8006536:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653e:	d008      	beq.n	8006552 <HAL_RTC_GetTime+0xee>
 8006540:	69fa      	ldr	r2, [r7, #28]
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	429a      	cmp	r2, r3
 8006546:	d904      	bls.n	8006552 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8006548:	69fa      	ldr	r2, [r7, #28]
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	61fb      	str	r3, [r7, #28]
 8006550:	e002      	b.n	8006558 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8006552:	f04f 33ff 	mov.w	r3, #4294967295
 8006556:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	4a2d      	ldr	r2, [pc, #180]	; (8006610 <HAL_RTC_GetTime+0x1ac>)
 800655c:	fb02 f303 	mul.w	r3, r2, r3
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006566:	69b9      	ldr	r1, [r7, #24]
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 f9ba 	bl	80068e2 <RTC_WriteTimeCounter>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e041      	b.n	80065fc <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657e:	d00c      	beq.n	800659a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8006580:	69fa      	ldr	r2, [r7, #28]
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	4413      	add	r3, r2
 8006586:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006588:	69f9      	ldr	r1, [r7, #28]
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 f9e9 	bl	8006962 <RTC_WriteAlarmCounter>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e030      	b.n	80065fc <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800659a:	69f9      	ldr	r1, [r7, #28]
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 f9e0 	bl	8006962 <RTC_WriteAlarmCounter>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e027      	b.n	80065fc <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80065ac:	6979      	ldr	r1, [r7, #20]
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 fa88 	bl	8006ac4 <RTC_DateUpdate>
 80065b4:	e003      	b.n	80065be <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01a      	beq.n	80065fa <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 fa41 	bl	8006a50 <RTC_ByteToBcd2>
 80065ce:	4603      	mov	r3, r0
 80065d0:	461a      	mov	r2, r3
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fa38 	bl	8006a50 <RTC_ByteToBcd2>
 80065e0:	4603      	mov	r3, r0
 80065e2:	461a      	mov	r2, r3
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	789b      	ldrb	r3, [r3, #2]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 fa2f 	bl	8006a50 <RTC_ByteToBcd2>
 80065f2:	4603      	mov	r3, r0
 80065f4:	461a      	mov	r2, r3
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3720      	adds	r7, #32
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	91a2b3c5 	.word	0x91a2b3c5
 8006608:	88888889 	.word	0x88888889
 800660c:	aaaaaaab 	.word	0xaaaaaaab
 8006610:	00015180 	.word	0x00015180

08006614 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8006620:	2300      	movs	r3, #0
 8006622:	61fb      	str	r3, [r7, #28]
 8006624:	2300      	movs	r3, #0
 8006626:	61bb      	str	r3, [r7, #24]
 8006628:	2300      	movs	r3, #0
 800662a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d002      	beq.n	8006638 <HAL_RTC_SetDate+0x24>
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e097      	b.n	800676c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	7c1b      	ldrb	r3, [r3, #16]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d101      	bne.n	8006648 <HAL_RTC_SetDate+0x34>
 8006644:	2302      	movs	r3, #2
 8006646:	e091      	b.n	800676c <HAL_RTC_SetDate+0x158>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2201      	movs	r2, #1
 800664c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2202      	movs	r2, #2
 8006652:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10c      	bne.n	8006674 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	78da      	ldrb	r2, [r3, #3]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	785a      	ldrb	r2, [r3, #1]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	789a      	ldrb	r2, [r3, #2]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	739a      	strb	r2, [r3, #14]
 8006672:	e01a      	b.n	80066aa <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	78db      	ldrb	r3, [r3, #3]
 8006678:	4618      	mov	r0, r3
 800667a:	f000 fa06 	bl	8006a8a <RTC_Bcd2ToByte>
 800667e:	4603      	mov	r3, r0
 8006680:	461a      	mov	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	785b      	ldrb	r3, [r3, #1]
 800668a:	4618      	mov	r0, r3
 800668c:	f000 f9fd 	bl	8006a8a <RTC_Bcd2ToByte>
 8006690:	4603      	mov	r3, r0
 8006692:	461a      	mov	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	789b      	ldrb	r3, [r3, #2]
 800669c:	4618      	mov	r0, r3
 800669e:	f000 f9f4 	bl	8006a8a <RTC_Bcd2ToByte>
 80066a2:	4603      	mov	r3, r0
 80066a4:	461a      	mov	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	7bdb      	ldrb	r3, [r3, #15]
 80066ae:	4618      	mov	r0, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	7b59      	ldrb	r1, [r3, #13]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	7b9b      	ldrb	r3, [r3, #14]
 80066b8:	461a      	mov	r2, r3
 80066ba:	f000 fadf 	bl	8006c7c <RTC_WeekDayNum>
 80066be:	4603      	mov	r3, r0
 80066c0:	461a      	mov	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	7b1a      	ldrb	r2, [r3, #12]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 f8d7 	bl	8006882 <RTC_ReadTimeCounter>
 80066d4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	4a26      	ldr	r2, [pc, #152]	; (8006774 <HAL_RTC_SetDate+0x160>)
 80066da:	fba2 2303 	umull	r2, r3, r2, r3
 80066de:	0adb      	lsrs	r3, r3, #11
 80066e0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2b18      	cmp	r3, #24
 80066e6:	d93a      	bls.n	800675e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	4a23      	ldr	r2, [pc, #140]	; (8006778 <HAL_RTC_SetDate+0x164>)
 80066ec:	fba2 2303 	umull	r2, r3, r2, r3
 80066f0:	091b      	lsrs	r3, r3, #4
 80066f2:	4a22      	ldr	r2, [pc, #136]	; (800677c <HAL_RTC_SetDate+0x168>)
 80066f4:	fb02 f303 	mul.w	r3, r2, r3
 80066f8:	69fa      	ldr	r2, [r7, #28]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80066fe:	69f9      	ldr	r1, [r7, #28]
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 f8ee 	bl	80068e2 <RTC_WriteTimeCounter>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d007      	beq.n	800671c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2204      	movs	r2, #4
 8006710:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e027      	b.n	800676c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 f907 	bl	8006930 <RTC_ReadAlarmCounter>
 8006722:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672a:	d018      	beq.n	800675e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	429a      	cmp	r2, r3
 8006732:	d214      	bcs.n	800675e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800673a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800673e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006740:	69b9      	ldr	r1, [r7, #24]
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 f90d 	bl	8006962 <RTC_WriteAlarmCounter>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d007      	beq.n	800675e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2204      	movs	r2, #4
 8006752:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e006      	b.n	800676c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2201      	movs	r2, #1
 8006762:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3720      	adds	r7, #32
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	91a2b3c5 	.word	0x91a2b3c5
 8006778:	aaaaaaab 	.word	0xaaaaaaab
 800677c:	00015180 	.word	0x00015180

08006780 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 800678c:	f107 0314 	add.w	r3, r7, #20
 8006790:	2100      	movs	r1, #0
 8006792:	460a      	mov	r2, r1
 8006794:	801a      	strh	r2, [r3, #0]
 8006796:	460a      	mov	r2, r1
 8006798:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d002      	beq.n	80067a6 <HAL_RTC_GetDate+0x26>
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e03a      	b.n	8006820 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80067aa:	f107 0314 	add.w	r3, r7, #20
 80067ae:	2200      	movs	r2, #0
 80067b0:	4619      	mov	r1, r3
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f7ff fe56 	bl	8006464 <HAL_RTC_GetTime>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e02e      	b.n	8006820 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	7b1a      	ldrb	r2, [r3, #12]
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	7bda      	ldrb	r2, [r3, #15]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	7b5a      	ldrb	r2, [r3, #13]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	7b9a      	ldrb	r2, [r3, #14]
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d01a      	beq.n	800681e <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	78db      	ldrb	r3, [r3, #3]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 f92f 	bl	8006a50 <RTC_ByteToBcd2>
 80067f2:	4603      	mov	r3, r0
 80067f4:	461a      	mov	r2, r3
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	785b      	ldrb	r3, [r3, #1]
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 f926 	bl	8006a50 <RTC_ByteToBcd2>
 8006804:	4603      	mov	r3, r0
 8006806:	461a      	mov	r2, r3
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	789b      	ldrb	r3, [r3, #2]
 8006810:	4618      	mov	r0, r3
 8006812:	f000 f91d 	bl	8006a50 <RTC_ByteToBcd2>
 8006816:	4603      	mov	r3, r0
 8006818:	461a      	mov	r2, r3
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3718      	adds	r7, #24
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e01d      	b.n	800687a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 0208 	bic.w	r2, r2, #8
 800684c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800684e:	f7fc fc69 	bl	8003124 <HAL_GetTick>
 8006852:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006854:	e009      	b.n	800686a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006856:	f7fc fc65 	bl	8003124 <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006864:	d901      	bls.n	800686a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e007      	b.n	800687a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f003 0308 	and.w	r3, r3, #8
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0ee      	beq.n	8006856 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8006882:	b480      	push	{r7}
 8006884:	b087      	sub	sp, #28
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	827b      	strh	r3, [r7, #18]
 800688e:	2300      	movs	r3, #0
 8006890:	823b      	strh	r3, [r7, #16]
 8006892:	2300      	movs	r3, #0
 8006894:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8006896:	2300      	movs	r3, #0
 8006898:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80068b2:	8a7a      	ldrh	r2, [r7, #18]
 80068b4:	8a3b      	ldrh	r3, [r7, #16]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d008      	beq.n	80068cc <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80068ba:	8a3b      	ldrh	r3, [r7, #16]
 80068bc:	041a      	lsls	r2, r3, #16
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	4313      	orrs	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]
 80068ca:	e004      	b.n	80068d6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80068cc:	8a7b      	ldrh	r3, [r7, #18]
 80068ce:	041a      	lsls	r2, r3, #16
 80068d0:	89fb      	ldrh	r3, [r7, #14]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80068d6:	697b      	ldr	r3, [r7, #20]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	371c      	adds	r7, #28
 80068dc:	46bd      	mov	sp, r7
 80068de:	bc80      	pop	{r7}
 80068e0:	4770      	bx	lr

080068e2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b084      	sub	sp, #16
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f85d 	bl	80069b0 <RTC_EnterInitMode>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d002      	beq.n	8006902 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	73fb      	strb	r3, [r7, #15]
 8006900:	e011      	b.n	8006926 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	0c12      	lsrs	r2, r2, #16
 800690a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	683a      	ldr	r2, [r7, #0]
 8006912:	b292      	uxth	r2, r2
 8006914:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f872 	bl	8006a00 <RTC_ExitInitMode>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006926:	7bfb      	ldrb	r3, [r7, #15]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	81fb      	strh	r3, [r7, #14]
 800693c:	2300      	movs	r3, #0
 800693e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8006950:	89fb      	ldrh	r3, [r7, #14]
 8006952:	041a      	lsls	r2, r3, #16
 8006954:	89bb      	ldrh	r3, [r7, #12]
 8006956:	4313      	orrs	r3, r2
}
 8006958:	4618      	mov	r0, r3
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	bc80      	pop	{r7}
 8006960:	4770      	bx	lr

08006962 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b084      	sub	sp, #16
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800696c:	2300      	movs	r3, #0
 800696e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f81d 	bl	80069b0 <RTC_EnterInitMode>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	73fb      	strb	r3, [r7, #15]
 8006980:	e011      	b.n	80069a6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	0c12      	lsrs	r2, r2, #16
 800698a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	b292      	uxth	r2, r2
 8006994:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f832 	bl	8006a00 <RTC_ExitInitMode>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80069bc:	f7fc fbb2 	bl	8003124 <HAL_GetTick>
 80069c0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80069c2:	e009      	b.n	80069d8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80069c4:	f7fc fbae 	bl	8003124 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069d2:	d901      	bls.n	80069d8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e00f      	b.n	80069f8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f003 0320 	and.w	r3, r3, #32
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0ee      	beq.n	80069c4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f042 0210 	orr.w	r2, r2, #16
 80069f4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0210 	bic.w	r2, r2, #16
 8006a1a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006a1c:	f7fc fb82 	bl	8003124 <HAL_GetTick>
 8006a20:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006a22:	e009      	b.n	8006a38 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006a24:	f7fc fb7e 	bl	8003124 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a32:	d901      	bls.n	8006a38 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e007      	b.n	8006a48 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f003 0320 	and.w	r3, r3, #32
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0ee      	beq.n	8006a24 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	4603      	mov	r3, r0
 8006a58:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8006a5e:	e005      	b.n	8006a6c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	3301      	adds	r3, #1
 8006a64:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006a66:	79fb      	ldrb	r3, [r7, #7]
 8006a68:	3b0a      	subs	r3, #10
 8006a6a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8006a6c:	79fb      	ldrb	r3, [r7, #7]
 8006a6e:	2b09      	cmp	r3, #9
 8006a70:	d8f6      	bhi.n	8006a60 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	011b      	lsls	r3, r3, #4
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	79fb      	ldrb	r3, [r7, #7]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	b2db      	uxtb	r3, r3
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bc80      	pop	{r7}
 8006a88:	4770      	bx	lr

08006a8a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b085      	sub	sp, #20
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	4603      	mov	r3, r0
 8006a92:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8006a98:	79fb      	ldrb	r3, [r7, #7]
 8006a9a:	091b      	lsrs	r3, r3, #4
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	005b      	lsls	r3, r3, #1
 8006aa8:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006aaa:	79fb      	ldrb	r3, [r7, #7]
 8006aac:	f003 030f 	and.w	r3, r3, #15
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	4413      	add	r3, r2
 8006ab8:	b2db      	uxtb	r3, r3
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bc80      	pop	{r7}
 8006ac2:	4770      	bx	lr

08006ac4 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	613b      	str	r3, [r7, #16]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	7bdb      	ldrb	r3, [r3, #15]
 8006ae2:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	7b5b      	ldrb	r3, [r3, #13]
 8006ae8:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	7b9b      	ldrb	r3, [r3, #14]
 8006aee:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8006af0:	2300      	movs	r3, #0
 8006af2:	60bb      	str	r3, [r7, #8]
 8006af4:	e06f      	b.n	8006bd6 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d011      	beq.n	8006b20 <RTC_DateUpdate+0x5c>
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	d00e      	beq.n	8006b20 <RTC_DateUpdate+0x5c>
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	2b05      	cmp	r3, #5
 8006b06:	d00b      	beq.n	8006b20 <RTC_DateUpdate+0x5c>
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	2b07      	cmp	r3, #7
 8006b0c:	d008      	beq.n	8006b20 <RTC_DateUpdate+0x5c>
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	2b08      	cmp	r3, #8
 8006b12:	d005      	beq.n	8006b20 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	2b0a      	cmp	r3, #10
 8006b18:	d002      	beq.n	8006b20 <RTC_DateUpdate+0x5c>
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	2b0c      	cmp	r3, #12
 8006b1e:	d117      	bne.n	8006b50 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2b1e      	cmp	r3, #30
 8006b24:	d803      	bhi.n	8006b2e <RTC_DateUpdate+0x6a>
      {
        day++;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006b2c:	e050      	b.n	8006bd0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	2b0c      	cmp	r3, #12
 8006b32:	d005      	beq.n	8006b40 <RTC_DateUpdate+0x7c>
        {
          month++;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	3301      	adds	r3, #1
 8006b38:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8006b3e:	e047      	b.n	8006bd0 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8006b40:	2301      	movs	r3, #1
 8006b42:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006b44:	2301      	movs	r3, #1
 8006b46:	60fb      	str	r3, [r7, #12]
          year++;
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8006b4e:	e03f      	b.n	8006bd0 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	2b04      	cmp	r3, #4
 8006b54:	d008      	beq.n	8006b68 <RTC_DateUpdate+0xa4>
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	2b06      	cmp	r3, #6
 8006b5a:	d005      	beq.n	8006b68 <RTC_DateUpdate+0xa4>
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	2b09      	cmp	r3, #9
 8006b60:	d002      	beq.n	8006b68 <RTC_DateUpdate+0xa4>
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	2b0b      	cmp	r3, #11
 8006b66:	d10c      	bne.n	8006b82 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2b1d      	cmp	r3, #29
 8006b6c:	d803      	bhi.n	8006b76 <RTC_DateUpdate+0xb2>
      {
        day++;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	3301      	adds	r3, #1
 8006b72:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006b74:	e02c      	b.n	8006bd0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8006b80:	e026      	b.n	8006bd0 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d123      	bne.n	8006bd0 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2b1b      	cmp	r3, #27
 8006b8c:	d803      	bhi.n	8006b96 <RTC_DateUpdate+0xd2>
      {
        day++;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3301      	adds	r3, #1
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	e01c      	b.n	8006bd0 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2b1c      	cmp	r3, #28
 8006b9a:	d111      	bne.n	8006bc0 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f000 f839 	bl	8006c18 <RTC_IsLeapYear>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <RTC_DateUpdate+0xf0>
        {
          day++;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	60fb      	str	r3, [r7, #12]
 8006bb2:	e00d      	b.n	8006bd0 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	613b      	str	r3, [r7, #16]
          day = 1U;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	60fb      	str	r3, [r7, #12]
 8006bbe:	e007      	b.n	8006bd0 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2b1d      	cmp	r3, #29
 8006bc4:	d104      	bne.n	8006bd0 <RTC_DateUpdate+0x10c>
      {
        month++;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	613b      	str	r3, [r7, #16]
        day = 1U;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	60bb      	str	r3, [r7, #8]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d38b      	bcc.n	8006af6 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	b2da      	uxtb	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	b2d2      	uxtb	r2, r2
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6978      	ldr	r0, [r7, #20]
 8006c02:	f000 f83b 	bl	8006c7c <RTC_WeekDayNum>
 8006c06:	4603      	mov	r3, r0
 8006c08:	461a      	mov	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	731a      	strb	r2, [r3, #12]
}
 8006c0e:	bf00      	nop
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
	...

08006c18 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	4603      	mov	r3, r0
 8006c20:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8006c22:	88fb      	ldrh	r3, [r7, #6]
 8006c24:	f003 0303 	and.w	r3, r3, #3
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	e01d      	b.n	8006c6e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8006c32:	88fb      	ldrh	r3, [r7, #6]
 8006c34:	4a10      	ldr	r2, [pc, #64]	; (8006c78 <RTC_IsLeapYear+0x60>)
 8006c36:	fba2 1203 	umull	r1, r2, r2, r3
 8006c3a:	0952      	lsrs	r2, r2, #5
 8006c3c:	2164      	movs	r1, #100	; 0x64
 8006c3e:	fb01 f202 	mul.w	r2, r1, r2
 8006c42:	1a9b      	subs	r3, r3, r2
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e00f      	b.n	8006c6e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8006c4e:	88fb      	ldrh	r3, [r7, #6]
 8006c50:	4a09      	ldr	r2, [pc, #36]	; (8006c78 <RTC_IsLeapYear+0x60>)
 8006c52:	fba2 1203 	umull	r1, r2, r2, r3
 8006c56:	09d2      	lsrs	r2, r2, #7
 8006c58:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006c5c:	fb01 f202 	mul.w	r2, r1, r2
 8006c60:	1a9b      	subs	r3, r3, r2
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e000      	b.n	8006c6e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8006c6c:	2300      	movs	r3, #0
  }
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bc80      	pop	{r7}
 8006c76:	4770      	bx	lr
 8006c78:	51eb851f 	.word	0x51eb851f

08006c7c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	460b      	mov	r3, r1
 8006c86:	70fb      	strb	r3, [r7, #3]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	60bb      	str	r3, [r7, #8]
 8006c90:	2300      	movs	r3, #0
 8006c92:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006c9a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8006c9c:	78fb      	ldrb	r3, [r7, #3]
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d82d      	bhi.n	8006cfe <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006ca2:	78fa      	ldrb	r2, [r7, #3]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	005b      	lsls	r3, r3, #1
 8006ca8:	4413      	add	r3, r2
 8006caa:	00db      	lsls	r3, r3, #3
 8006cac:	1a9b      	subs	r3, r3, r2
 8006cae:	4a2c      	ldr	r2, [pc, #176]	; (8006d60 <RTC_WeekDayNum+0xe4>)
 8006cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb4:	085a      	lsrs	r2, r3, #1
 8006cb6:	78bb      	ldrb	r3, [r7, #2]
 8006cb8:	441a      	add	r2, r3
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	441a      	add	r2, r3
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	089b      	lsrs	r3, r3, #2
 8006cc4:	441a      	add	r2, r3
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	4926      	ldr	r1, [pc, #152]	; (8006d64 <RTC_WeekDayNum+0xe8>)
 8006ccc:	fba1 1303 	umull	r1, r3, r1, r3
 8006cd0:	095b      	lsrs	r3, r3, #5
 8006cd2:	1ad2      	subs	r2, r2, r3
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	4922      	ldr	r1, [pc, #136]	; (8006d64 <RTC_WeekDayNum+0xe8>)
 8006cda:	fba1 1303 	umull	r1, r3, r1, r3
 8006cde:	09db      	lsrs	r3, r3, #7
 8006ce0:	4413      	add	r3, r2
 8006ce2:	1d1a      	adds	r2, r3, #4
 8006ce4:	4b20      	ldr	r3, [pc, #128]	; (8006d68 <RTC_WeekDayNum+0xec>)
 8006ce6:	fba3 1302 	umull	r1, r3, r3, r2
 8006cea:	1ad1      	subs	r1, r2, r3
 8006cec:	0849      	lsrs	r1, r1, #1
 8006cee:	440b      	add	r3, r1
 8006cf0:	0899      	lsrs	r1, r3, #2
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	00db      	lsls	r3, r3, #3
 8006cf6:	1a5b      	subs	r3, r3, r1
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	60fb      	str	r3, [r7, #12]
 8006cfc:	e029      	b.n	8006d52 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006cfe:	78fa      	ldrb	r2, [r7, #3]
 8006d00:	4613      	mov	r3, r2
 8006d02:	005b      	lsls	r3, r3, #1
 8006d04:	4413      	add	r3, r2
 8006d06:	00db      	lsls	r3, r3, #3
 8006d08:	1a9b      	subs	r3, r3, r2
 8006d0a:	4a15      	ldr	r2, [pc, #84]	; (8006d60 <RTC_WeekDayNum+0xe4>)
 8006d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d10:	085a      	lsrs	r2, r3, #1
 8006d12:	78bb      	ldrb	r3, [r7, #2]
 8006d14:	441a      	add	r2, r3
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	441a      	add	r2, r3
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	089b      	lsrs	r3, r3, #2
 8006d1e:	441a      	add	r2, r3
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	4910      	ldr	r1, [pc, #64]	; (8006d64 <RTC_WeekDayNum+0xe8>)
 8006d24:	fba1 1303 	umull	r1, r3, r1, r3
 8006d28:	095b      	lsrs	r3, r3, #5
 8006d2a:	1ad2      	subs	r2, r2, r3
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	490d      	ldr	r1, [pc, #52]	; (8006d64 <RTC_WeekDayNum+0xe8>)
 8006d30:	fba1 1303 	umull	r1, r3, r1, r3
 8006d34:	09db      	lsrs	r3, r3, #7
 8006d36:	4413      	add	r3, r2
 8006d38:	1c9a      	adds	r2, r3, #2
 8006d3a:	4b0b      	ldr	r3, [pc, #44]	; (8006d68 <RTC_WeekDayNum+0xec>)
 8006d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d40:	1ad1      	subs	r1, r2, r3
 8006d42:	0849      	lsrs	r1, r1, #1
 8006d44:	440b      	add	r3, r1
 8006d46:	0899      	lsrs	r1, r3, #2
 8006d48:	460b      	mov	r3, r1
 8006d4a:	00db      	lsls	r3, r3, #3
 8006d4c:	1a5b      	subs	r3, r3, r1
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	b2db      	uxtb	r3, r3
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bc80      	pop	{r7}
 8006d5e:	4770      	bx	lr
 8006d60:	38e38e39 	.word	0x38e38e39
 8006d64:	51eb851f 	.word	0x51eb851f
 8006d68:	24924925 	.word	0x24924925

08006d6c <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d027      	beq.n	8006dd2 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d020      	beq.n	8006dd2 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f003 0304 	and.w	r3, r3, #4
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00b      	beq.n	8006db6 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f824 	bl	8006dec <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f06f 0204 	mvn.w	r2, #4
 8006dac:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2204      	movs	r2, #4
 8006db2:	745a      	strb	r2, [r3, #17]
 8006db4:	e005      	b.n	8006dc2 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f80f 	bl	8006dda <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	685a      	ldr	r2, [r3, #4]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0201 	bic.w	r2, r2, #1
 8006dd0:	605a      	str	r2, [r3, #4]
    }
  }
}
 8006dd2:	bf00      	nop
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8006de2:	bf00      	nop
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc80      	pop	{r7}
 8006dea:	4770      	bx	lr

08006dec <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bc80      	pop	{r7}
 8006dfc:	4770      	bx	lr
	...

08006e00 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8006e10:	4b07      	ldr	r3, [pc, #28]	; (8006e30 <HAL_RTCEx_BKUPWrite+0x30>)
 8006e12:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	b292      	uxth	r2, r2
 8006e24:	601a      	str	r2, [r3, #0]
}
 8006e26:	bf00      	nop
 8006e28:	371c      	adds	r7, #28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bc80      	pop	{r7}
 8006e2e:	4770      	bx	lr
 8006e30:	40006c00 	.word	0x40006c00

08006e34 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8006e46:	4b08      	ldr	r3, [pc, #32]	; (8006e68 <HAL_RTCEx_BKUPRead+0x34>)
 8006e48:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	4413      	add	r3, r2
 8006e52:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8006e5c:	68bb      	ldr	r3, [r7, #8]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bc80      	pop	{r7}
 8006e66:	4770      	bx	lr
 8006e68:	40006c00 	.word	0x40006c00

08006e6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e042      	b.n	8006f04 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d106      	bne.n	8006e98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7fb ff6a 	bl	8002d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2224      	movs	r2, #36	; 0x24
 8006e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68da      	ldr	r2, [r3, #12]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006eae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fdc5 	bl	8007a40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	691a      	ldr	r2, [r3, #16]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ec4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	695a      	ldr	r2, [r3, #20]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ed4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68da      	ldr	r2, [r3, #12]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ee4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b08a      	sub	sp, #40	; 0x28
 8006f10:	af02      	add	r7, sp, #8
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	603b      	str	r3, [r7, #0]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b20      	cmp	r3, #32
 8006f2a:	d16d      	bne.n	8007008 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d002      	beq.n	8006f38 <HAL_UART_Transmit+0x2c>
 8006f32:	88fb      	ldrh	r3, [r7, #6]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e066      	b.n	800700a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2221      	movs	r2, #33	; 0x21
 8006f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f4a:	f7fc f8eb 	bl	8003124 <HAL_GetTick>
 8006f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	88fa      	ldrh	r2, [r7, #6]
 8006f54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	88fa      	ldrh	r2, [r7, #6]
 8006f5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f64:	d108      	bne.n	8006f78 <HAL_UART_Transmit+0x6c>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d104      	bne.n	8006f78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	61bb      	str	r3, [r7, #24]
 8006f76:	e003      	b.n	8006f80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f80:	e02a      	b.n	8006fd8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	2180      	movs	r1, #128	; 0x80
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 fb14 	bl	80075ba <UART_WaitOnFlagUntilTimeout>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e036      	b.n	800700a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10b      	bne.n	8006fba <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	3302      	adds	r3, #2
 8006fb6:	61bb      	str	r3, [r7, #24]
 8006fb8:	e007      	b.n	8006fca <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	781a      	ldrb	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1cf      	bne.n	8006f82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2140      	movs	r1, #64	; 0x40
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 fae4 	bl	80075ba <UART_WaitOnFlagUntilTimeout>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d001      	beq.n	8006ffc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e006      	b.n	800700a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2220      	movs	r2, #32
 8007000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007004:	2300      	movs	r3, #0
 8007006:	e000      	b.n	800700a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007008:	2302      	movs	r3, #2
  }
}
 800700a:	4618      	mov	r0, r3
 800700c:	3720      	adds	r7, #32
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b084      	sub	sp, #16
 8007016:	af00      	add	r7, sp, #0
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	4613      	mov	r3, r2
 800701e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b20      	cmp	r3, #32
 800702a:	d112      	bne.n	8007052 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d002      	beq.n	8007038 <HAL_UART_Receive_IT+0x26>
 8007032:	88fb      	ldrh	r3, [r7, #6]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e00b      	b.n	8007054 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007042:	88fb      	ldrh	r3, [r7, #6]
 8007044:	461a      	mov	r2, r3
 8007046:	68b9      	ldr	r1, [r7, #8]
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f000 fb24 	bl	8007696 <UART_Start_Receive_IT>
 800704e:	4603      	mov	r3, r0
 8007050:	e000      	b.n	8007054 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007052:	2302      	movs	r3, #2
  }
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b0ba      	sub	sp, #232	; 0xe8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007082:	2300      	movs	r3, #0
 8007084:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007088:	2300      	movs	r3, #0
 800708a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800708e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007092:	f003 030f 	and.w	r3, r3, #15
 8007096:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800709a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10f      	bne.n	80070c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a6:	f003 0320 	and.w	r3, r3, #32
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d009      	beq.n	80070c2 <HAL_UART_IRQHandler+0x66>
 80070ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b2:	f003 0320 	and.w	r3, r3, #32
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d003      	beq.n	80070c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fc01 	bl	80078c2 <UART_Receive_IT>
      return;
 80070c0:	e25b      	b.n	800757a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 80de 	beq.w	8007288 <HAL_UART_IRQHandler+0x22c>
 80070cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d106      	bne.n	80070e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f000 80d1 	beq.w	8007288 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00b      	beq.n	800710a <HAL_UART_IRQHandler+0xae>
 80070f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d005      	beq.n	800710a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007102:	f043 0201 	orr.w	r2, r3, #1
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800710a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800710e:	f003 0304 	and.w	r3, r3, #4
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00b      	beq.n	800712e <HAL_UART_IRQHandler+0xd2>
 8007116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b00      	cmp	r3, #0
 8007120:	d005      	beq.n	800712e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007126:	f043 0202 	orr.w	r2, r3, #2
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800712e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007132:	f003 0302 	and.w	r3, r3, #2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00b      	beq.n	8007152 <HAL_UART_IRQHandler+0xf6>
 800713a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d005      	beq.n	8007152 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800714a:	f043 0204 	orr.w	r2, r3, #4
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007156:	f003 0308 	and.w	r3, r3, #8
 800715a:	2b00      	cmp	r3, #0
 800715c:	d011      	beq.n	8007182 <HAL_UART_IRQHandler+0x126>
 800715e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007162:	f003 0320 	and.w	r3, r3, #32
 8007166:	2b00      	cmp	r3, #0
 8007168:	d105      	bne.n	8007176 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800716a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	d005      	beq.n	8007182 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800717a:	f043 0208 	orr.w	r2, r3, #8
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007186:	2b00      	cmp	r3, #0
 8007188:	f000 81f2 	beq.w	8007570 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800718c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007190:	f003 0320 	and.w	r3, r3, #32
 8007194:	2b00      	cmp	r3, #0
 8007196:	d008      	beq.n	80071aa <HAL_UART_IRQHandler+0x14e>
 8007198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800719c:	f003 0320 	and.w	r3, r3, #32
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fb8c 	bl	80078c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	695b      	ldr	r3, [r3, #20]
 80071b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	bf14      	ite	ne
 80071b8:	2301      	movne	r3, #1
 80071ba:	2300      	moveq	r3, #0
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c6:	f003 0308 	and.w	r3, r3, #8
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d103      	bne.n	80071d6 <HAL_UART_IRQHandler+0x17a>
 80071ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d04f      	beq.n	8007276 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fa96 	bl	8007708 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d041      	beq.n	800726e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3314      	adds	r3, #20
 80071f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071f8:	e853 3f00 	ldrex	r3, [r3]
 80071fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007200:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007208:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	3314      	adds	r3, #20
 8007212:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007216:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800721a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007222:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007226:	e841 2300 	strex	r3, r2, [r1]
 800722a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800722e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1d9      	bne.n	80071ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723a:	2b00      	cmp	r3, #0
 800723c:	d013      	beq.n	8007266 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007242:	4a7e      	ldr	r2, [pc, #504]	; (800743c <HAL_UART_IRQHandler+0x3e0>)
 8007244:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724a:	4618      	mov	r0, r3
 800724c:	f7fc fde6 	bl	8003e1c <HAL_DMA_Abort_IT>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d016      	beq.n	8007284 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007260:	4610      	mov	r0, r2
 8007262:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007264:	e00e      	b.n	8007284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f993 	bl	8007592 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800726c:	e00a      	b.n	8007284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f98f 	bl	8007592 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007274:	e006      	b.n	8007284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f98b 	bl	8007592 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007282:	e175      	b.n	8007570 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007284:	bf00      	nop
    return;
 8007286:	e173      	b.n	8007570 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728c:	2b01      	cmp	r3, #1
 800728e:	f040 814f 	bne.w	8007530 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007296:	f003 0310 	and.w	r3, r3, #16
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 8148 	beq.w	8007530 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80072a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072a4:	f003 0310 	and.w	r3, r3, #16
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 8141 	beq.w	8007530 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072ae:	2300      	movs	r3, #0
 80072b0:	60bb      	str	r3, [r7, #8]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	60bb      	str	r3, [r7, #8]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	60bb      	str	r3, [r7, #8]
 80072c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 80b6 	beq.w	8007440 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 8145 	beq.w	8007574 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072f2:	429a      	cmp	r2, r3
 80072f4:	f080 813e 	bcs.w	8007574 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	2b20      	cmp	r3, #32
 8007308:	f000 8088 	beq.w	800741c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	330c      	adds	r3, #12
 8007312:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800731a:	e853 3f00 	ldrex	r3, [r3]
 800731e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007322:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007326:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800732a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	330c      	adds	r3, #12
 8007334:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007338:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800733c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007340:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007344:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007348:	e841 2300 	strex	r3, r2, [r1]
 800734c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007350:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1d9      	bne.n	800730c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3314      	adds	r3, #20
 800735e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007362:	e853 3f00 	ldrex	r3, [r3]
 8007366:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007368:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800736a:	f023 0301 	bic.w	r3, r3, #1
 800736e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3314      	adds	r3, #20
 8007378:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800737c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007380:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007382:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007384:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007388:	e841 2300 	strex	r3, r2, [r1]
 800738c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800738e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1e1      	bne.n	8007358 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	3314      	adds	r3, #20
 800739a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800739e:	e853 3f00 	ldrex	r3, [r3]
 80073a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3314      	adds	r3, #20
 80073b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073b8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073c0:	e841 2300 	strex	r3, r2, [r1]
 80073c4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1e3      	bne.n	8007394 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	330c      	adds	r3, #12
 80073e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ec:	f023 0310 	bic.w	r3, r3, #16
 80073f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	330c      	adds	r3, #12
 80073fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80073fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8007400:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007402:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007404:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800740c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e3      	bne.n	80073da <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007416:	4618      	mov	r0, r3
 8007418:	f7fc fcc5 	bl	8003da6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800742a:	b29b      	uxth	r3, r3
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	b29b      	uxth	r3, r3
 8007430:	4619      	mov	r1, r3
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f8b6 	bl	80075a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007438:	e09c      	b.n	8007574 <HAL_UART_IRQHandler+0x518>
 800743a:	bf00      	nop
 800743c:	080077cd 	.word	0x080077cd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007448:	b29b      	uxth	r3, r3
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007454:	b29b      	uxth	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 808e 	beq.w	8007578 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800745c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 8089 	beq.w	8007578 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	330c      	adds	r3, #12
 800746c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007478:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800747c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	330c      	adds	r3, #12
 8007486:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800748a:	647a      	str	r2, [r7, #68]	; 0x44
 800748c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007490:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007492:	e841 2300 	strex	r3, r2, [r1]
 8007496:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1e3      	bne.n	8007466 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3314      	adds	r3, #20
 80074a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	623b      	str	r3, [r7, #32]
   return(result);
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	f023 0301 	bic.w	r3, r3, #1
 80074b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3314      	adds	r3, #20
 80074be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074c2:	633a      	str	r2, [r7, #48]	; 0x30
 80074c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ca:	e841 2300 	strex	r3, r2, [r1]
 80074ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1e3      	bne.n	800749e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2220      	movs	r2, #32
 80074da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	330c      	adds	r3, #12
 80074ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	e853 3f00 	ldrex	r3, [r3]
 80074f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f023 0310 	bic.w	r3, r3, #16
 80074fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	330c      	adds	r3, #12
 8007504:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007508:	61fa      	str	r2, [r7, #28]
 800750a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750c:	69b9      	ldr	r1, [r7, #24]
 800750e:	69fa      	ldr	r2, [r7, #28]
 8007510:	e841 2300 	strex	r3, r2, [r1]
 8007514:	617b      	str	r3, [r7, #20]
   return(result);
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e3      	bne.n	80074e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007522:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007526:	4619      	mov	r1, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f83b 	bl	80075a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800752e:	e023      	b.n	8007578 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007538:	2b00      	cmp	r3, #0
 800753a:	d009      	beq.n	8007550 <HAL_UART_IRQHandler+0x4f4>
 800753c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007544:	2b00      	cmp	r3, #0
 8007546:	d003      	beq.n	8007550 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f953 	bl	80077f4 <UART_Transmit_IT>
    return;
 800754e:	e014      	b.n	800757a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00e      	beq.n	800757a <HAL_UART_IRQHandler+0x51e>
 800755c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007564:	2b00      	cmp	r3, #0
 8007566:	d008      	beq.n	800757a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f992 	bl	8007892 <UART_EndTransmit_IT>
    return;
 800756e:	e004      	b.n	800757a <HAL_UART_IRQHandler+0x51e>
    return;
 8007570:	bf00      	nop
 8007572:	e002      	b.n	800757a <HAL_UART_IRQHandler+0x51e>
      return;
 8007574:	bf00      	nop
 8007576:	e000      	b.n	800757a <HAL_UART_IRQHandler+0x51e>
      return;
 8007578:	bf00      	nop
  }
}
 800757a:	37e8      	adds	r7, #232	; 0xe8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	bc80      	pop	{r7}
 8007590:	4770      	bx	lr

08007592 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800759a:	bf00      	nop
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	bc80      	pop	{r7}
 80075a2:	4770      	bx	lr

080075a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bc80      	pop	{r7}
 80075b8:	4770      	bx	lr

080075ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b090      	sub	sp, #64	; 0x40
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	603b      	str	r3, [r7, #0]
 80075c6:	4613      	mov	r3, r2
 80075c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075ca:	e050      	b.n	800766e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d2:	d04c      	beq.n	800766e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80075d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d007      	beq.n	80075ea <UART_WaitOnFlagUntilTimeout+0x30>
 80075da:	f7fb fda3 	bl	8003124 <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d241      	bcs.n	800766e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	330c      	adds	r3, #12
 80075f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f4:	e853 3f00 	ldrex	r3, [r3]
 80075f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007600:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	330c      	adds	r3, #12
 8007608:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800760a:	637a      	str	r2, [r7, #52]	; 0x34
 800760c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007612:	e841 2300 	strex	r3, r2, [r1]
 8007616:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1e5      	bne.n	80075ea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3314      	adds	r3, #20
 8007624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	613b      	str	r3, [r7, #16]
   return(result);
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	f023 0301 	bic.w	r3, r3, #1
 8007634:	63bb      	str	r3, [r7, #56]	; 0x38
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	3314      	adds	r3, #20
 800763c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800763e:	623a      	str	r2, [r7, #32]
 8007640:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007642:	69f9      	ldr	r1, [r7, #28]
 8007644:	6a3a      	ldr	r2, [r7, #32]
 8007646:	e841 2300 	strex	r3, r2, [r1]
 800764a:	61bb      	str	r3, [r7, #24]
   return(result);
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1e5      	bne.n	800761e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2220      	movs	r2, #32
 8007656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2220      	movs	r2, #32
 800765e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e00f      	b.n	800768e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	4013      	ands	r3, r2
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	429a      	cmp	r2, r3
 800767c:	bf0c      	ite	eq
 800767e:	2301      	moveq	r3, #1
 8007680:	2300      	movne	r3, #0
 8007682:	b2db      	uxtb	r3, r3
 8007684:	461a      	mov	r2, r3
 8007686:	79fb      	ldrb	r3, [r7, #7]
 8007688:	429a      	cmp	r2, r3
 800768a:	d09f      	beq.n	80075cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3740      	adds	r7, #64	; 0x40
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007696:	b480      	push	{r7}
 8007698:	b085      	sub	sp, #20
 800769a:	af00      	add	r7, sp, #0
 800769c:	60f8      	str	r0, [r7, #12]
 800769e:	60b9      	str	r1, [r7, #8]
 80076a0:	4613      	mov	r3, r2
 80076a2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	88fa      	ldrh	r2, [r7, #6]
 80076ae:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	88fa      	ldrh	r2, [r7, #6]
 80076b4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2222      	movs	r2, #34	; 0x22
 80076c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d007      	beq.n	80076dc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68da      	ldr	r2, [r3, #12]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076da:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	695a      	ldr	r2, [r3, #20]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f042 0201 	orr.w	r2, r2, #1
 80076ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68da      	ldr	r2, [r3, #12]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f042 0220 	orr.w	r2, r2, #32
 80076fa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	bc80      	pop	{r7}
 8007706:	4770      	bx	lr

08007708 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007708:	b480      	push	{r7}
 800770a:	b095      	sub	sp, #84	; 0x54
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	330c      	adds	r3, #12
 8007716:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800771a:	e853 3f00 	ldrex	r3, [r3]
 800771e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007722:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	330c      	adds	r3, #12
 800772e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007730:	643a      	str	r2, [r7, #64]	; 0x40
 8007732:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007734:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007736:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007738:	e841 2300 	strex	r3, r2, [r1]
 800773c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800773e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1e5      	bne.n	8007710 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3314      	adds	r3, #20
 800774a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774c:	6a3b      	ldr	r3, [r7, #32]
 800774e:	e853 3f00 	ldrex	r3, [r3]
 8007752:	61fb      	str	r3, [r7, #28]
   return(result);
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	f023 0301 	bic.w	r3, r3, #1
 800775a:	64bb      	str	r3, [r7, #72]	; 0x48
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3314      	adds	r3, #20
 8007762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007764:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007766:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800776a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800776c:	e841 2300 	strex	r3, r2, [r1]
 8007770:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e5      	bne.n	8007744 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777c:	2b01      	cmp	r3, #1
 800777e:	d119      	bne.n	80077b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	330c      	adds	r3, #12
 8007786:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	e853 3f00 	ldrex	r3, [r3]
 800778e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f023 0310 	bic.w	r3, r3, #16
 8007796:	647b      	str	r3, [r7, #68]	; 0x44
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	330c      	adds	r3, #12
 800779e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077a0:	61ba      	str	r2, [r7, #24]
 80077a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a4:	6979      	ldr	r1, [r7, #20]
 80077a6:	69ba      	ldr	r2, [r7, #24]
 80077a8:	e841 2300 	strex	r3, r2, [r1]
 80077ac:	613b      	str	r3, [r7, #16]
   return(result);
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1e5      	bne.n	8007780 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2220      	movs	r2, #32
 80077b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80077c2:	bf00      	nop
 80077c4:	3754      	adds	r7, #84	; 0x54
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bc80      	pop	{r7}
 80077ca:	4770      	bx	lr

080077cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f7ff fed3 	bl	8007592 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077ec:	bf00      	nop
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b21      	cmp	r3, #33	; 0x21
 8007806:	d13e      	bne.n	8007886 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007810:	d114      	bne.n	800783c <UART_Transmit_IT+0x48>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d110      	bne.n	800783c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	461a      	mov	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800782e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a1b      	ldr	r3, [r3, #32]
 8007834:	1c9a      	adds	r2, r3, #2
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	621a      	str	r2, [r3, #32]
 800783a:	e008      	b.n	800784e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	1c59      	adds	r1, r3, #1
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	6211      	str	r1, [r2, #32]
 8007846:	781a      	ldrb	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007852:	b29b      	uxth	r3, r3
 8007854:	3b01      	subs	r3, #1
 8007856:	b29b      	uxth	r3, r3
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	4619      	mov	r1, r3
 800785c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10f      	bne.n	8007882 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68da      	ldr	r2, [r3, #12]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007870:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68da      	ldr	r2, [r3, #12]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007880:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	e000      	b.n	8007888 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007886:	2302      	movs	r3, #2
  }
}
 8007888:	4618      	mov	r0, r3
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	bc80      	pop	{r7}
 8007890:	4770      	bx	lr

08007892 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b082      	sub	sp, #8
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68da      	ldr	r2, [r3, #12]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2220      	movs	r2, #32
 80078ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7ff fe64 	bl	8007580 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b08c      	sub	sp, #48	; 0x30
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b22      	cmp	r3, #34	; 0x22
 80078d4:	f040 80ae 	bne.w	8007a34 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078e0:	d117      	bne.n	8007912 <UART_Receive_IT+0x50>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d113      	bne.n	8007912 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007900:	b29a      	uxth	r2, r3
 8007902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007904:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790a:	1c9a      	adds	r2, r3, #2
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	629a      	str	r2, [r3, #40]	; 0x28
 8007910:	e026      	b.n	8007960 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007916:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007918:	2300      	movs	r3, #0
 800791a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007924:	d007      	beq.n	8007936 <UART_Receive_IT+0x74>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10a      	bne.n	8007944 <UART_Receive_IT+0x82>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d106      	bne.n	8007944 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	b2da      	uxtb	r2, r3
 800793e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007940:	701a      	strb	r2, [r3, #0]
 8007942:	e008      	b.n	8007956 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	b2db      	uxtb	r3, r3
 800794c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007950:	b2da      	uxtb	r2, r3
 8007952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007954:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795a:	1c5a      	adds	r2, r3, #1
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007964:	b29b      	uxth	r3, r3
 8007966:	3b01      	subs	r3, #1
 8007968:	b29b      	uxth	r3, r3
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	4619      	mov	r1, r3
 800796e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007970:	2b00      	cmp	r3, #0
 8007972:	d15d      	bne.n	8007a30 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68da      	ldr	r2, [r3, #12]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f022 0220 	bic.w	r2, r2, #32
 8007982:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68da      	ldr	r2, [r3, #12]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007992:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	695a      	ldr	r2, [r3, #20]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f022 0201 	bic.w	r2, r2, #1
 80079a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2220      	movs	r2, #32
 80079a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d135      	bne.n	8007a26 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	330c      	adds	r3, #12
 80079c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	e853 3f00 	ldrex	r3, [r3]
 80079ce:	613b      	str	r3, [r7, #16]
   return(result);
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	f023 0310 	bic.w	r3, r3, #16
 80079d6:	627b      	str	r3, [r7, #36]	; 0x24
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	330c      	adds	r3, #12
 80079de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079e0:	623a      	str	r2, [r7, #32]
 80079e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e4:	69f9      	ldr	r1, [r7, #28]
 80079e6:	6a3a      	ldr	r2, [r7, #32]
 80079e8:	e841 2300 	strex	r3, r2, [r1]
 80079ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1e5      	bne.n	80079c0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0310 	and.w	r3, r3, #16
 80079fe:	2b10      	cmp	r3, #16
 8007a00:	d10a      	bne.n	8007a18 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a02:	2300      	movs	r3, #0
 8007a04:	60fb      	str	r3, [r7, #12]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	60fb      	str	r3, [r7, #12]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	60fb      	str	r3, [r7, #12]
 8007a16:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7ff fdc0 	bl	80075a4 <HAL_UARTEx_RxEventCallback>
 8007a24:	e002      	b.n	8007a2c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7fb f886 	bl	8002b38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	e002      	b.n	8007a36 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	e000      	b.n	8007a36 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007a34:	2302      	movs	r3, #2
  }
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3730      	adds	r7, #48	; 0x30
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
	...

08007a40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68da      	ldr	r2, [r3, #12]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	689a      	ldr	r2, [r3, #8]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	431a      	orrs	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	695b      	ldr	r3, [r3, #20]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007a7a:	f023 030c 	bic.w	r3, r3, #12
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	6812      	ldr	r2, [r2, #0]
 8007a82:	68b9      	ldr	r1, [r7, #8]
 8007a84:	430b      	orrs	r3, r1
 8007a86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	699a      	ldr	r2, [r3, #24]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a2c      	ldr	r2, [pc, #176]	; (8007b54 <UART_SetConfig+0x114>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d103      	bne.n	8007ab0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007aa8:	f7fe fa1a 	bl	8005ee0 <HAL_RCC_GetPCLK2Freq>
 8007aac:	60f8      	str	r0, [r7, #12]
 8007aae:	e002      	b.n	8007ab6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007ab0:	f7fe fa02 	bl	8005eb8 <HAL_RCC_GetPCLK1Freq>
 8007ab4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	009a      	lsls	r2, r3, #2
 8007ac0:	441a      	add	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007acc:	4a22      	ldr	r2, [pc, #136]	; (8007b58 <UART_SetConfig+0x118>)
 8007ace:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad2:	095b      	lsrs	r3, r3, #5
 8007ad4:	0119      	lsls	r1, r3, #4
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4413      	add	r3, r2
 8007ade:	009a      	lsls	r2, r3, #2
 8007ae0:	441a      	add	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007aec:	4b1a      	ldr	r3, [pc, #104]	; (8007b58 <UART_SetConfig+0x118>)
 8007aee:	fba3 0302 	umull	r0, r3, r3, r2
 8007af2:	095b      	lsrs	r3, r3, #5
 8007af4:	2064      	movs	r0, #100	; 0x64
 8007af6:	fb00 f303 	mul.w	r3, r0, r3
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	011b      	lsls	r3, r3, #4
 8007afe:	3332      	adds	r3, #50	; 0x32
 8007b00:	4a15      	ldr	r2, [pc, #84]	; (8007b58 <UART_SetConfig+0x118>)
 8007b02:	fba2 2303 	umull	r2, r3, r2, r3
 8007b06:	095b      	lsrs	r3, r3, #5
 8007b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b0c:	4419      	add	r1, r3
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	4613      	mov	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	009a      	lsls	r2, r3, #2
 8007b18:	441a      	add	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b24:	4b0c      	ldr	r3, [pc, #48]	; (8007b58 <UART_SetConfig+0x118>)
 8007b26:	fba3 0302 	umull	r0, r3, r3, r2
 8007b2a:	095b      	lsrs	r3, r3, #5
 8007b2c:	2064      	movs	r0, #100	; 0x64
 8007b2e:	fb00 f303 	mul.w	r3, r0, r3
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	011b      	lsls	r3, r3, #4
 8007b36:	3332      	adds	r3, #50	; 0x32
 8007b38:	4a07      	ldr	r2, [pc, #28]	; (8007b58 <UART_SetConfig+0x118>)
 8007b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b3e:	095b      	lsrs	r3, r3, #5
 8007b40:	f003 020f 	and.w	r2, r3, #15
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	440a      	add	r2, r1
 8007b4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007b4c:	bf00      	nop
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	40013800 	.word	0x40013800
 8007b58:	51eb851f 	.word	0x51eb851f

08007b5c <lcd_send_cmd>:
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include "LiquidCrystal_I2C.h"
static void lcd_send_cmd (LiquidCrystal_I2C *lcd, uint8_t cmd)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af02      	add	r7, sp, #8
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	460b      	mov	r3, r1
 8007b66:	70fb      	strb	r3, [r7, #3]
  uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (cmd&0xf0);
 8007b68:	78fb      	ldrb	r3, [r7, #3]
 8007b6a:	f023 030f 	bic.w	r3, r3, #15
 8007b6e:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8007b70:	78fb      	ldrb	r3, [r7, #3]
 8007b72:	011b      	lsls	r3, r3, #4
 8007b74:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	7a5a      	ldrb	r2, [r3, #9]
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	f043 0304 	orr.w	r3, r3, #4
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	7a5a      	ldrb	r2, [r3, #9]
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	7a5a      	ldrb	r2, [r3, #9]
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	f043 0304 	orr.w	r3, r3, #4
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	7a5a      	ldrb	r2, [r3, #9]
 8007baa:	7bbb      	ldrb	r3, [r7, #14]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(lcd->pI2c, lcd->Addr,(uint8_t *) data_t, 4, 100);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6858      	ldr	r0, [r3, #4]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	b299      	uxth	r1, r3
 8007bbc:	f107 0208 	add.w	r2, r7, #8
 8007bc0:	2364      	movs	r3, #100	; 0x64
 8007bc2:	9300      	str	r3, [sp, #0]
 8007bc4:	2304      	movs	r3, #4
 8007bc6:	f7fc feb1 	bl	800492c <HAL_I2C_Master_Transmit>
}
 8007bca:	bf00      	nop
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <lcd_send_data>:

static void lcd_send_data(LiquidCrystal_I2C *lcd,uint8_t data)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b086      	sub	sp, #24
 8007bd6:	af02      	add	r7, sp, #8
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	460b      	mov	r3, r1
 8007bdc:	70fb      	strb	r3, [r7, #3]
	uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (data&0xf0);
 8007bde:	78fb      	ldrb	r3, [r7, #3]
 8007be0:	f023 030f 	bic.w	r3, r3, #15
 8007be4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8007be6:	78fb      	ldrb	r3, [r7, #3]
 8007be8:	011b      	lsls	r3, r3, #4
 8007bea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	7a5a      	ldrb	r2, [r3, #9]
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	f043 0305 	orr.w	r3, r3, #5
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	7a5a      	ldrb	r2, [r3, #9]
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	f043 0301 	orr.w	r3, r3, #1
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	7a5a      	ldrb	r2, [r3, #9]
 8007c14:	7bbb      	ldrb	r3, [r7, #14]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	f043 0305 	orr.w	r3, r3, #5
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	7a5a      	ldrb	r2, [r3, #9]
 8007c26:	7bbb      	ldrb	r3, [r7, #14]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	f043 0301 	orr.w	r3, r3, #1
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (lcd->pI2c, lcd->Addr,(uint8_t *) data_t, 4, 100);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6858      	ldr	r0, [r3, #4]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	b299      	uxth	r1, r3
 8007c3e:	f107 0208 	add.w	r2, r7, #8
 8007c42:	2364      	movs	r3, #100	; 0x64
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	2304      	movs	r3, #4
 8007c48:	f7fc fe70 	bl	800492c <HAL_I2C_Master_Transmit>
}
 8007c4c:	bf00      	nop
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <lcd_clear_display>:
{
	lcd_send_data(lcd,data);
}

void lcd_clear_display (LiquidCrystal_I2C *lcd)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
	lcd_send_cmd (lcd,LCD_CLEARDISPLAY);
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7ff ff7c 	bl	8007b5c <lcd_send_cmd>
	HAL_Delay(10);
 8007c64:	200a      	movs	r0, #10
 8007c66:	f7fb fa67 	bl	8003138 <HAL_Delay>
}
 8007c6a:	bf00      	nop
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <lcd_set_cursor>:
	lcd->Backlightval = LCD_NOBACKLIGHT;
	HAL_I2C_Master_Transmit (lcd->pI2c, lcd->Addr,&lcd->Backlightval, 1, 100);
}

void lcd_set_cursor(LiquidCrystal_I2C *lcd,uint8_t row, uint8_t col)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	70fb      	strb	r3, [r7, #3]
 8007c80:	4613      	mov	r3, r2
 8007c82:	70bb      	strb	r3, [r7, #2]
	uint8_t row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8007c84:	4b0b      	ldr	r3, [pc, #44]	; (8007cb4 <lcd_set_cursor+0x40>)
 8007c86:	60fb      	str	r3, [r7, #12]
	lcd_send_cmd(lcd,LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8007c88:	78fb      	ldrb	r3, [r7, #3]
 8007c8a:	3310      	adds	r3, #16
 8007c8c:	443b      	add	r3, r7
 8007c8e:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8007c92:	78bb      	ldrb	r3, [r7, #2]
 8007c94:	4413      	add	r3, r2
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	b25b      	sxtb	r3, r3
 8007c9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c9e:	b25b      	sxtb	r3, r3
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7ff ff59 	bl	8007b5c <lcd_send_cmd>
}
 8007caa:	bf00      	nop
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	54144000 	.word	0x54144000

08007cb8 <lcd_set_cursor_blink_off>:
	
	lcd->DisplayControl |= LCD_BLINKON;
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
}
void lcd_set_cursor_blink_off(LiquidCrystal_I2C *lcd) 
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
	lcd->DisplayControl &= ~LCD_BLINKON;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	7a1b      	ldrb	r3, [r3, #8]
 8007cc4:	f023 0301 	bic.w	r3, r3, #1
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	721a      	strb	r2, [r3, #8]
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	7a1b      	ldrb	r3, [r3, #8]
 8007cd2:	f043 0308 	orr.w	r3, r3, #8
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f7ff ff3e 	bl	8007b5c <lcd_send_cmd>
}
 8007ce0:	bf00      	nop
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <lcd_printf>:
void lcd_write(LiquidCrystal_I2C *lcd,uint8_t location)
{
	lcd_send_data(lcd,location);
}
void lcd_printf(LiquidCrystal_I2C *lcd,const char* str, ...)
{
 8007ce8:	b40e      	push	{r1, r2, r3}
 8007cea:	b590      	push	{r4, r7, lr}
 8007cec:	b08a      	sub	sp, #40	; 0x28
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  char stringArray[20];
	
  va_list args;
  va_start(args, str);
 8007cf2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007cf6:	60fb      	str	r3, [r7, #12]
  vsprintf(stringArray, str, args);
 8007cf8:	f107 0310 	add.w	r3, r7, #16
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007d00:	4618      	mov	r0, r3
 8007d02:	f001 f8a3 	bl	8008e4c <vsiprintf>
  va_end(args);
	
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8007d06:	2300      	movs	r3, #0
 8007d08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d0c:	e00e      	b.n	8007d2c <lcd_printf+0x44>
  {
    lcd_send_data(lcd,(uint8_t)stringArray[i]);
 8007d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d12:	3328      	adds	r3, #40	; 0x28
 8007d14:	443b      	add	r3, r7
 8007d16:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7ff ff58 	bl	8007bd2 <lcd_send_data>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8007d22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d26:	3301      	adds	r3, #1
 8007d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d2c:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8007d30:	f107 0310 	add.w	r3, r7, #16
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7f8 fa15 	bl	8000164 <strlen>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	429c      	cmp	r4, r3
 8007d3e:	d203      	bcs.n	8007d48 <lcd_printf+0x60>
 8007d40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d44:	2b0f      	cmp	r3, #15
 8007d46:	d9e2      	bls.n	8007d0e <lcd_printf+0x26>
  }
}
 8007d48:	bf00      	nop
 8007d4a:	3728      	adds	r7, #40	; 0x28
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8007d52:	b003      	add	sp, #12
 8007d54:	4770      	bx	lr

08007d56 <lcd_init>:
void lcd_init (LiquidCrystal_I2C *lcd,I2C_HandleTypeDef *_hi2c,uint8_t addr)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b084      	sub	sp, #16
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	4613      	mov	r3, r2
 8007d62:	71fb      	strb	r3, [r7, #7]
	lcd->pI2c = _hi2c;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	605a      	str	r2, [r3, #4]
	lcd->Addr = addr<<1;
 8007d6a:	79fb      	ldrb	r3, [r7, #7]
 8007d6c:	005b      	lsls	r3, r3, #1
 8007d6e:	b2da      	uxtb	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	701a      	strb	r2, [r3, #0]
	lcd->DisplayControl |= LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	7a1b      	ldrb	r3, [r3, #8]
 8007d78:	f043 0304 	orr.w	r3, r3, #4
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	721a      	strb	r2, [r3, #8]
	lcd_send_cmd (lcd,0x33); 
 8007d82:	2133      	movs	r1, #51	; 0x33
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f7ff fee9 	bl	8007b5c <lcd_send_cmd>
	lcd_send_cmd (lcd,0x32);
 8007d8a:	2132      	movs	r1, #50	; 0x32
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f7ff fee5 	bl	8007b5c <lcd_send_cmd>
	HAL_Delay(5);
 8007d92:	2005      	movs	r0, #5
 8007d94:	f7fb f9d0 	bl	8003138 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_CLEARDISPLAY); 
 8007d98:	2101      	movs	r1, #1
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f7ff fede 	bl	8007b5c <lcd_send_cmd>
	HAL_Delay(5);
 8007da0:	2005      	movs	r0, #5
 8007da2:	f7fb f9c9 	bl	8003138 <HAL_Delay>
	lcd_send_cmd (lcd,0x0c); 	
 8007da6:	210c      	movs	r1, #12
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f7ff fed7 	bl	8007b5c <lcd_send_cmd>
	HAL_Delay(5);
 8007dae:	2005      	movs	r0, #5
 8007db0:	f7fb f9c2 	bl	8003138 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_RETURNHOME); 
 8007db4:	2102      	movs	r1, #2
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f7ff fed0 	bl	8007b5c <lcd_send_cmd>
	HAL_Delay(5);
 8007dbc:	2005      	movs	r0, #5
 8007dbe:	f7fb f9bb 	bl	8003138 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_SETDDRAMADDR);
 8007dc2:	2180      	movs	r1, #128	; 0x80
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f7ff fec9 	bl	8007b5c <lcd_send_cmd>
	lcd_set_cursor_blink_off(lcd);
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f7ff ff74 	bl	8007cb8 <lcd_set_cursor_blink_off>
	lcd->Backlightval = LCD_BACKLIGHT;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2208      	movs	r2, #8
 8007dd4:	725a      	strb	r2, [r3, #9]
}
 8007dd6:	bf00      	nop
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <atoi>:
 8007dde:	220a      	movs	r2, #10
 8007de0:	2100      	movs	r1, #0
 8007de2:	f000 b881 	b.w	8007ee8 <strtol>
	...

08007de8 <_strtol_l.constprop.0>:
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dee:	4686      	mov	lr, r0
 8007df0:	4690      	mov	r8, r2
 8007df2:	d001      	beq.n	8007df8 <_strtol_l.constprop.0+0x10>
 8007df4:	2b24      	cmp	r3, #36	; 0x24
 8007df6:	d906      	bls.n	8007e06 <_strtol_l.constprop.0+0x1e>
 8007df8:	f001 f8e0 	bl	8008fbc <__errno>
 8007dfc:	2316      	movs	r3, #22
 8007dfe:	6003      	str	r3, [r0, #0]
 8007e00:	2000      	movs	r0, #0
 8007e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e06:	460d      	mov	r5, r1
 8007e08:	4835      	ldr	r0, [pc, #212]	; (8007ee0 <_strtol_l.constprop.0+0xf8>)
 8007e0a:	462a      	mov	r2, r5
 8007e0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e10:	5d06      	ldrb	r6, [r0, r4]
 8007e12:	f016 0608 	ands.w	r6, r6, #8
 8007e16:	d1f8      	bne.n	8007e0a <_strtol_l.constprop.0+0x22>
 8007e18:	2c2d      	cmp	r4, #45	; 0x2d
 8007e1a:	d12e      	bne.n	8007e7a <_strtol_l.constprop.0+0x92>
 8007e1c:	2601      	movs	r6, #1
 8007e1e:	782c      	ldrb	r4, [r5, #0]
 8007e20:	1c95      	adds	r5, r2, #2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d057      	beq.n	8007ed6 <_strtol_l.constprop.0+0xee>
 8007e26:	2b10      	cmp	r3, #16
 8007e28:	d109      	bne.n	8007e3e <_strtol_l.constprop.0+0x56>
 8007e2a:	2c30      	cmp	r4, #48	; 0x30
 8007e2c:	d107      	bne.n	8007e3e <_strtol_l.constprop.0+0x56>
 8007e2e:	782a      	ldrb	r2, [r5, #0]
 8007e30:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007e34:	2a58      	cmp	r2, #88	; 0x58
 8007e36:	d149      	bne.n	8007ecc <_strtol_l.constprop.0+0xe4>
 8007e38:	2310      	movs	r3, #16
 8007e3a:	786c      	ldrb	r4, [r5, #1]
 8007e3c:	3502      	adds	r5, #2
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007e44:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007e48:	fbbc f9f3 	udiv	r9, ip, r3
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	fb03 ca19 	mls	sl, r3, r9, ip
 8007e52:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007e56:	2f09      	cmp	r7, #9
 8007e58:	d814      	bhi.n	8007e84 <_strtol_l.constprop.0+0x9c>
 8007e5a:	463c      	mov	r4, r7
 8007e5c:	42a3      	cmp	r3, r4
 8007e5e:	dd20      	ble.n	8007ea2 <_strtol_l.constprop.0+0xba>
 8007e60:	1c57      	adds	r7, r2, #1
 8007e62:	d007      	beq.n	8007e74 <_strtol_l.constprop.0+0x8c>
 8007e64:	4581      	cmp	r9, r0
 8007e66:	d319      	bcc.n	8007e9c <_strtol_l.constprop.0+0xb4>
 8007e68:	d101      	bne.n	8007e6e <_strtol_l.constprop.0+0x86>
 8007e6a:	45a2      	cmp	sl, r4
 8007e6c:	db16      	blt.n	8007e9c <_strtol_l.constprop.0+0xb4>
 8007e6e:	2201      	movs	r2, #1
 8007e70:	fb00 4003 	mla	r0, r0, r3, r4
 8007e74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e78:	e7eb      	b.n	8007e52 <_strtol_l.constprop.0+0x6a>
 8007e7a:	2c2b      	cmp	r4, #43	; 0x2b
 8007e7c:	bf04      	itt	eq
 8007e7e:	782c      	ldrbeq	r4, [r5, #0]
 8007e80:	1c95      	addeq	r5, r2, #2
 8007e82:	e7ce      	b.n	8007e22 <_strtol_l.constprop.0+0x3a>
 8007e84:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007e88:	2f19      	cmp	r7, #25
 8007e8a:	d801      	bhi.n	8007e90 <_strtol_l.constprop.0+0xa8>
 8007e8c:	3c37      	subs	r4, #55	; 0x37
 8007e8e:	e7e5      	b.n	8007e5c <_strtol_l.constprop.0+0x74>
 8007e90:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007e94:	2f19      	cmp	r7, #25
 8007e96:	d804      	bhi.n	8007ea2 <_strtol_l.constprop.0+0xba>
 8007e98:	3c57      	subs	r4, #87	; 0x57
 8007e9a:	e7df      	b.n	8007e5c <_strtol_l.constprop.0+0x74>
 8007e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea0:	e7e8      	b.n	8007e74 <_strtol_l.constprop.0+0x8c>
 8007ea2:	1c53      	adds	r3, r2, #1
 8007ea4:	d108      	bne.n	8007eb8 <_strtol_l.constprop.0+0xd0>
 8007ea6:	2322      	movs	r3, #34	; 0x22
 8007ea8:	4660      	mov	r0, ip
 8007eaa:	f8ce 3000 	str.w	r3, [lr]
 8007eae:	f1b8 0f00 	cmp.w	r8, #0
 8007eb2:	d0a6      	beq.n	8007e02 <_strtol_l.constprop.0+0x1a>
 8007eb4:	1e69      	subs	r1, r5, #1
 8007eb6:	e006      	b.n	8007ec6 <_strtol_l.constprop.0+0xde>
 8007eb8:	b106      	cbz	r6, 8007ebc <_strtol_l.constprop.0+0xd4>
 8007eba:	4240      	negs	r0, r0
 8007ebc:	f1b8 0f00 	cmp.w	r8, #0
 8007ec0:	d09f      	beq.n	8007e02 <_strtol_l.constprop.0+0x1a>
 8007ec2:	2a00      	cmp	r2, #0
 8007ec4:	d1f6      	bne.n	8007eb4 <_strtol_l.constprop.0+0xcc>
 8007ec6:	f8c8 1000 	str.w	r1, [r8]
 8007eca:	e79a      	b.n	8007e02 <_strtol_l.constprop.0+0x1a>
 8007ecc:	2430      	movs	r4, #48	; 0x30
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1b5      	bne.n	8007e3e <_strtol_l.constprop.0+0x56>
 8007ed2:	2308      	movs	r3, #8
 8007ed4:	e7b3      	b.n	8007e3e <_strtol_l.constprop.0+0x56>
 8007ed6:	2c30      	cmp	r4, #48	; 0x30
 8007ed8:	d0a9      	beq.n	8007e2e <_strtol_l.constprop.0+0x46>
 8007eda:	230a      	movs	r3, #10
 8007edc:	e7af      	b.n	8007e3e <_strtol_l.constprop.0+0x56>
 8007ede:	bf00      	nop
 8007ee0:	0800da4b 	.word	0x0800da4b

08007ee4 <_strtol_r>:
 8007ee4:	f7ff bf80 	b.w	8007de8 <_strtol_l.constprop.0>

08007ee8 <strtol>:
 8007ee8:	4613      	mov	r3, r2
 8007eea:	460a      	mov	r2, r1
 8007eec:	4601      	mov	r1, r0
 8007eee:	4802      	ldr	r0, [pc, #8]	; (8007ef8 <strtol+0x10>)
 8007ef0:	6800      	ldr	r0, [r0, #0]
 8007ef2:	f7ff bf79 	b.w	8007de8 <_strtol_l.constprop.0>
 8007ef6:	bf00      	nop
 8007ef8:	20000070 	.word	0x20000070

08007efc <__cvt>:
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f02:	461f      	mov	r7, r3
 8007f04:	bfbb      	ittet	lt
 8007f06:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007f0a:	461f      	movlt	r7, r3
 8007f0c:	2300      	movge	r3, #0
 8007f0e:	232d      	movlt	r3, #45	; 0x2d
 8007f10:	b088      	sub	sp, #32
 8007f12:	4614      	mov	r4, r2
 8007f14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f16:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007f18:	7013      	strb	r3, [r2, #0]
 8007f1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f1c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007f20:	f023 0820 	bic.w	r8, r3, #32
 8007f24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f28:	d005      	beq.n	8007f36 <__cvt+0x3a>
 8007f2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f2e:	d100      	bne.n	8007f32 <__cvt+0x36>
 8007f30:	3501      	adds	r5, #1
 8007f32:	2302      	movs	r3, #2
 8007f34:	e000      	b.n	8007f38 <__cvt+0x3c>
 8007f36:	2303      	movs	r3, #3
 8007f38:	aa07      	add	r2, sp, #28
 8007f3a:	9204      	str	r2, [sp, #16]
 8007f3c:	aa06      	add	r2, sp, #24
 8007f3e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007f42:	e9cd 3500 	strd	r3, r5, [sp]
 8007f46:	4622      	mov	r2, r4
 8007f48:	463b      	mov	r3, r7
 8007f4a:	f001 f921 	bl	8009190 <_dtoa_r>
 8007f4e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f52:	4606      	mov	r6, r0
 8007f54:	d102      	bne.n	8007f5c <__cvt+0x60>
 8007f56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f58:	07db      	lsls	r3, r3, #31
 8007f5a:	d522      	bpl.n	8007fa2 <__cvt+0xa6>
 8007f5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f60:	eb06 0905 	add.w	r9, r6, r5
 8007f64:	d110      	bne.n	8007f88 <__cvt+0x8c>
 8007f66:	7833      	ldrb	r3, [r6, #0]
 8007f68:	2b30      	cmp	r3, #48	; 0x30
 8007f6a:	d10a      	bne.n	8007f82 <__cvt+0x86>
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	2300      	movs	r3, #0
 8007f70:	4620      	mov	r0, r4
 8007f72:	4639      	mov	r1, r7
 8007f74:	f7f8 fd22 	bl	80009bc <__aeabi_dcmpeq>
 8007f78:	b918      	cbnz	r0, 8007f82 <__cvt+0x86>
 8007f7a:	f1c5 0501 	rsb	r5, r5, #1
 8007f7e:	f8ca 5000 	str.w	r5, [sl]
 8007f82:	f8da 3000 	ldr.w	r3, [sl]
 8007f86:	4499      	add	r9, r3
 8007f88:	2200      	movs	r2, #0
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	4639      	mov	r1, r7
 8007f90:	f7f8 fd14 	bl	80009bc <__aeabi_dcmpeq>
 8007f94:	b108      	cbz	r0, 8007f9a <__cvt+0x9e>
 8007f96:	f8cd 901c 	str.w	r9, [sp, #28]
 8007f9a:	2230      	movs	r2, #48	; 0x30
 8007f9c:	9b07      	ldr	r3, [sp, #28]
 8007f9e:	454b      	cmp	r3, r9
 8007fa0:	d307      	bcc.n	8007fb2 <__cvt+0xb6>
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	9b07      	ldr	r3, [sp, #28]
 8007fa6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007fa8:	1b9b      	subs	r3, r3, r6
 8007faa:	6013      	str	r3, [r2, #0]
 8007fac:	b008      	add	sp, #32
 8007fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fb2:	1c59      	adds	r1, r3, #1
 8007fb4:	9107      	str	r1, [sp, #28]
 8007fb6:	701a      	strb	r2, [r3, #0]
 8007fb8:	e7f0      	b.n	8007f9c <__cvt+0xa0>

08007fba <__exponent>:
 8007fba:	4603      	mov	r3, r0
 8007fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fbe:	2900      	cmp	r1, #0
 8007fc0:	f803 2b02 	strb.w	r2, [r3], #2
 8007fc4:	bfb6      	itet	lt
 8007fc6:	222d      	movlt	r2, #45	; 0x2d
 8007fc8:	222b      	movge	r2, #43	; 0x2b
 8007fca:	4249      	neglt	r1, r1
 8007fcc:	2909      	cmp	r1, #9
 8007fce:	7042      	strb	r2, [r0, #1]
 8007fd0:	dd2a      	ble.n	8008028 <__exponent+0x6e>
 8007fd2:	f10d 0207 	add.w	r2, sp, #7
 8007fd6:	4617      	mov	r7, r2
 8007fd8:	260a      	movs	r6, #10
 8007fda:	fb91 f5f6 	sdiv	r5, r1, r6
 8007fde:	4694      	mov	ip, r2
 8007fe0:	fb06 1415 	mls	r4, r6, r5, r1
 8007fe4:	3430      	adds	r4, #48	; 0x30
 8007fe6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007fea:	460c      	mov	r4, r1
 8007fec:	2c63      	cmp	r4, #99	; 0x63
 8007fee:	4629      	mov	r1, r5
 8007ff0:	f102 32ff 	add.w	r2, r2, #4294967295
 8007ff4:	dcf1      	bgt.n	8007fda <__exponent+0x20>
 8007ff6:	3130      	adds	r1, #48	; 0x30
 8007ff8:	f1ac 0402 	sub.w	r4, ip, #2
 8007ffc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008000:	4622      	mov	r2, r4
 8008002:	1c41      	adds	r1, r0, #1
 8008004:	42ba      	cmp	r2, r7
 8008006:	d30a      	bcc.n	800801e <__exponent+0x64>
 8008008:	f10d 0209 	add.w	r2, sp, #9
 800800c:	eba2 020c 	sub.w	r2, r2, ip
 8008010:	42bc      	cmp	r4, r7
 8008012:	bf88      	it	hi
 8008014:	2200      	movhi	r2, #0
 8008016:	4413      	add	r3, r2
 8008018:	1a18      	subs	r0, r3, r0
 800801a:	b003      	add	sp, #12
 800801c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800801e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008022:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008026:	e7ed      	b.n	8008004 <__exponent+0x4a>
 8008028:	2330      	movs	r3, #48	; 0x30
 800802a:	3130      	adds	r1, #48	; 0x30
 800802c:	7083      	strb	r3, [r0, #2]
 800802e:	70c1      	strb	r1, [r0, #3]
 8008030:	1d03      	adds	r3, r0, #4
 8008032:	e7f1      	b.n	8008018 <__exponent+0x5e>

08008034 <_printf_float>:
 8008034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008038:	b091      	sub	sp, #68	; 0x44
 800803a:	460c      	mov	r4, r1
 800803c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008040:	4616      	mov	r6, r2
 8008042:	461f      	mov	r7, r3
 8008044:	4605      	mov	r5, r0
 8008046:	f000 ff6f 	bl	8008f28 <_localeconv_r>
 800804a:	6803      	ldr	r3, [r0, #0]
 800804c:	4618      	mov	r0, r3
 800804e:	9309      	str	r3, [sp, #36]	; 0x24
 8008050:	f7f8 f888 	bl	8000164 <strlen>
 8008054:	2300      	movs	r3, #0
 8008056:	930e      	str	r3, [sp, #56]	; 0x38
 8008058:	f8d8 3000 	ldr.w	r3, [r8]
 800805c:	900a      	str	r0, [sp, #40]	; 0x28
 800805e:	3307      	adds	r3, #7
 8008060:	f023 0307 	bic.w	r3, r3, #7
 8008064:	f103 0208 	add.w	r2, r3, #8
 8008068:	f894 9018 	ldrb.w	r9, [r4, #24]
 800806c:	f8d4 b000 	ldr.w	fp, [r4]
 8008070:	f8c8 2000 	str.w	r2, [r8]
 8008074:	e9d3 a800 	ldrd	sl, r8, [r3]
 8008078:	4652      	mov	r2, sl
 800807a:	4643      	mov	r3, r8
 800807c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008080:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8008084:	930b      	str	r3, [sp, #44]	; 0x2c
 8008086:	f04f 32ff 	mov.w	r2, #4294967295
 800808a:	4650      	mov	r0, sl
 800808c:	4b9c      	ldr	r3, [pc, #624]	; (8008300 <_printf_float+0x2cc>)
 800808e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008090:	f7f8 fcc6 	bl	8000a20 <__aeabi_dcmpun>
 8008094:	bb70      	cbnz	r0, 80080f4 <_printf_float+0xc0>
 8008096:	f04f 32ff 	mov.w	r2, #4294967295
 800809a:	4650      	mov	r0, sl
 800809c:	4b98      	ldr	r3, [pc, #608]	; (8008300 <_printf_float+0x2cc>)
 800809e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080a0:	f7f8 fca0 	bl	80009e4 <__aeabi_dcmple>
 80080a4:	bb30      	cbnz	r0, 80080f4 <_printf_float+0xc0>
 80080a6:	2200      	movs	r2, #0
 80080a8:	2300      	movs	r3, #0
 80080aa:	4650      	mov	r0, sl
 80080ac:	4641      	mov	r1, r8
 80080ae:	f7f8 fc8f 	bl	80009d0 <__aeabi_dcmplt>
 80080b2:	b110      	cbz	r0, 80080ba <_printf_float+0x86>
 80080b4:	232d      	movs	r3, #45	; 0x2d
 80080b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080ba:	4a92      	ldr	r2, [pc, #584]	; (8008304 <_printf_float+0x2d0>)
 80080bc:	4b92      	ldr	r3, [pc, #584]	; (8008308 <_printf_float+0x2d4>)
 80080be:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80080c2:	bf94      	ite	ls
 80080c4:	4690      	movls	r8, r2
 80080c6:	4698      	movhi	r8, r3
 80080c8:	2303      	movs	r3, #3
 80080ca:	f04f 0a00 	mov.w	sl, #0
 80080ce:	6123      	str	r3, [r4, #16]
 80080d0:	f02b 0304 	bic.w	r3, fp, #4
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	4633      	mov	r3, r6
 80080d8:	4621      	mov	r1, r4
 80080da:	4628      	mov	r0, r5
 80080dc:	9700      	str	r7, [sp, #0]
 80080de:	aa0f      	add	r2, sp, #60	; 0x3c
 80080e0:	f000 f9d6 	bl	8008490 <_printf_common>
 80080e4:	3001      	adds	r0, #1
 80080e6:	f040 8090 	bne.w	800820a <_printf_float+0x1d6>
 80080ea:	f04f 30ff 	mov.w	r0, #4294967295
 80080ee:	b011      	add	sp, #68	; 0x44
 80080f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f4:	4652      	mov	r2, sl
 80080f6:	4643      	mov	r3, r8
 80080f8:	4650      	mov	r0, sl
 80080fa:	4641      	mov	r1, r8
 80080fc:	f7f8 fc90 	bl	8000a20 <__aeabi_dcmpun>
 8008100:	b148      	cbz	r0, 8008116 <_printf_float+0xe2>
 8008102:	f1b8 0f00 	cmp.w	r8, #0
 8008106:	bfb8      	it	lt
 8008108:	232d      	movlt	r3, #45	; 0x2d
 800810a:	4a80      	ldr	r2, [pc, #512]	; (800830c <_printf_float+0x2d8>)
 800810c:	bfb8      	it	lt
 800810e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008112:	4b7f      	ldr	r3, [pc, #508]	; (8008310 <_printf_float+0x2dc>)
 8008114:	e7d3      	b.n	80080be <_printf_float+0x8a>
 8008116:	6863      	ldr	r3, [r4, #4]
 8008118:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800811c:	1c5a      	adds	r2, r3, #1
 800811e:	d142      	bne.n	80081a6 <_printf_float+0x172>
 8008120:	2306      	movs	r3, #6
 8008122:	6063      	str	r3, [r4, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	9206      	str	r2, [sp, #24]
 8008128:	aa0e      	add	r2, sp, #56	; 0x38
 800812a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800812e:	aa0d      	add	r2, sp, #52	; 0x34
 8008130:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008134:	9203      	str	r2, [sp, #12]
 8008136:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800813a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800813e:	6023      	str	r3, [r4, #0]
 8008140:	6863      	ldr	r3, [r4, #4]
 8008142:	4652      	mov	r2, sl
 8008144:	9300      	str	r3, [sp, #0]
 8008146:	4628      	mov	r0, r5
 8008148:	4643      	mov	r3, r8
 800814a:	910b      	str	r1, [sp, #44]	; 0x2c
 800814c:	f7ff fed6 	bl	8007efc <__cvt>
 8008150:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008152:	4680      	mov	r8, r0
 8008154:	2947      	cmp	r1, #71	; 0x47
 8008156:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008158:	d108      	bne.n	800816c <_printf_float+0x138>
 800815a:	1cc8      	adds	r0, r1, #3
 800815c:	db02      	blt.n	8008164 <_printf_float+0x130>
 800815e:	6863      	ldr	r3, [r4, #4]
 8008160:	4299      	cmp	r1, r3
 8008162:	dd40      	ble.n	80081e6 <_printf_float+0x1b2>
 8008164:	f1a9 0902 	sub.w	r9, r9, #2
 8008168:	fa5f f989 	uxtb.w	r9, r9
 800816c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008170:	d81f      	bhi.n	80081b2 <_printf_float+0x17e>
 8008172:	464a      	mov	r2, r9
 8008174:	3901      	subs	r1, #1
 8008176:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800817a:	910d      	str	r1, [sp, #52]	; 0x34
 800817c:	f7ff ff1d 	bl	8007fba <__exponent>
 8008180:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008182:	4682      	mov	sl, r0
 8008184:	1813      	adds	r3, r2, r0
 8008186:	2a01      	cmp	r2, #1
 8008188:	6123      	str	r3, [r4, #16]
 800818a:	dc02      	bgt.n	8008192 <_printf_float+0x15e>
 800818c:	6822      	ldr	r2, [r4, #0]
 800818e:	07d2      	lsls	r2, r2, #31
 8008190:	d501      	bpl.n	8008196 <_printf_float+0x162>
 8008192:	3301      	adds	r3, #1
 8008194:	6123      	str	r3, [r4, #16]
 8008196:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800819a:	2b00      	cmp	r3, #0
 800819c:	d09b      	beq.n	80080d6 <_printf_float+0xa2>
 800819e:	232d      	movs	r3, #45	; 0x2d
 80081a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081a4:	e797      	b.n	80080d6 <_printf_float+0xa2>
 80081a6:	2947      	cmp	r1, #71	; 0x47
 80081a8:	d1bc      	bne.n	8008124 <_printf_float+0xf0>
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1ba      	bne.n	8008124 <_printf_float+0xf0>
 80081ae:	2301      	movs	r3, #1
 80081b0:	e7b7      	b.n	8008122 <_printf_float+0xee>
 80081b2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80081b6:	d118      	bne.n	80081ea <_printf_float+0x1b6>
 80081b8:	2900      	cmp	r1, #0
 80081ba:	6863      	ldr	r3, [r4, #4]
 80081bc:	dd0b      	ble.n	80081d6 <_printf_float+0x1a2>
 80081be:	6121      	str	r1, [r4, #16]
 80081c0:	b913      	cbnz	r3, 80081c8 <_printf_float+0x194>
 80081c2:	6822      	ldr	r2, [r4, #0]
 80081c4:	07d0      	lsls	r0, r2, #31
 80081c6:	d502      	bpl.n	80081ce <_printf_float+0x19a>
 80081c8:	3301      	adds	r3, #1
 80081ca:	440b      	add	r3, r1
 80081cc:	6123      	str	r3, [r4, #16]
 80081ce:	f04f 0a00 	mov.w	sl, #0
 80081d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80081d4:	e7df      	b.n	8008196 <_printf_float+0x162>
 80081d6:	b913      	cbnz	r3, 80081de <_printf_float+0x1aa>
 80081d8:	6822      	ldr	r2, [r4, #0]
 80081da:	07d2      	lsls	r2, r2, #31
 80081dc:	d501      	bpl.n	80081e2 <_printf_float+0x1ae>
 80081de:	3302      	adds	r3, #2
 80081e0:	e7f4      	b.n	80081cc <_printf_float+0x198>
 80081e2:	2301      	movs	r3, #1
 80081e4:	e7f2      	b.n	80081cc <_printf_float+0x198>
 80081e6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80081ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081ec:	4299      	cmp	r1, r3
 80081ee:	db05      	blt.n	80081fc <_printf_float+0x1c8>
 80081f0:	6823      	ldr	r3, [r4, #0]
 80081f2:	6121      	str	r1, [r4, #16]
 80081f4:	07d8      	lsls	r0, r3, #31
 80081f6:	d5ea      	bpl.n	80081ce <_printf_float+0x19a>
 80081f8:	1c4b      	adds	r3, r1, #1
 80081fa:	e7e7      	b.n	80081cc <_printf_float+0x198>
 80081fc:	2900      	cmp	r1, #0
 80081fe:	bfcc      	ite	gt
 8008200:	2201      	movgt	r2, #1
 8008202:	f1c1 0202 	rsble	r2, r1, #2
 8008206:	4413      	add	r3, r2
 8008208:	e7e0      	b.n	80081cc <_printf_float+0x198>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	055a      	lsls	r2, r3, #21
 800820e:	d407      	bmi.n	8008220 <_printf_float+0x1ec>
 8008210:	6923      	ldr	r3, [r4, #16]
 8008212:	4642      	mov	r2, r8
 8008214:	4631      	mov	r1, r6
 8008216:	4628      	mov	r0, r5
 8008218:	47b8      	blx	r7
 800821a:	3001      	adds	r0, #1
 800821c:	d12b      	bne.n	8008276 <_printf_float+0x242>
 800821e:	e764      	b.n	80080ea <_printf_float+0xb6>
 8008220:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008224:	f240 80dd 	bls.w	80083e2 <_printf_float+0x3ae>
 8008228:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800822c:	2200      	movs	r2, #0
 800822e:	2300      	movs	r3, #0
 8008230:	f7f8 fbc4 	bl	80009bc <__aeabi_dcmpeq>
 8008234:	2800      	cmp	r0, #0
 8008236:	d033      	beq.n	80082a0 <_printf_float+0x26c>
 8008238:	2301      	movs	r3, #1
 800823a:	4631      	mov	r1, r6
 800823c:	4628      	mov	r0, r5
 800823e:	4a35      	ldr	r2, [pc, #212]	; (8008314 <_printf_float+0x2e0>)
 8008240:	47b8      	blx	r7
 8008242:	3001      	adds	r0, #1
 8008244:	f43f af51 	beq.w	80080ea <_printf_float+0xb6>
 8008248:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800824c:	429a      	cmp	r2, r3
 800824e:	db02      	blt.n	8008256 <_printf_float+0x222>
 8008250:	6823      	ldr	r3, [r4, #0]
 8008252:	07d8      	lsls	r0, r3, #31
 8008254:	d50f      	bpl.n	8008276 <_printf_float+0x242>
 8008256:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800825a:	4631      	mov	r1, r6
 800825c:	4628      	mov	r0, r5
 800825e:	47b8      	blx	r7
 8008260:	3001      	adds	r0, #1
 8008262:	f43f af42 	beq.w	80080ea <_printf_float+0xb6>
 8008266:	f04f 0800 	mov.w	r8, #0
 800826a:	f104 091a 	add.w	r9, r4, #26
 800826e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008270:	3b01      	subs	r3, #1
 8008272:	4543      	cmp	r3, r8
 8008274:	dc09      	bgt.n	800828a <_printf_float+0x256>
 8008276:	6823      	ldr	r3, [r4, #0]
 8008278:	079b      	lsls	r3, r3, #30
 800827a:	f100 8104 	bmi.w	8008486 <_printf_float+0x452>
 800827e:	68e0      	ldr	r0, [r4, #12]
 8008280:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008282:	4298      	cmp	r0, r3
 8008284:	bfb8      	it	lt
 8008286:	4618      	movlt	r0, r3
 8008288:	e731      	b.n	80080ee <_printf_float+0xba>
 800828a:	2301      	movs	r3, #1
 800828c:	464a      	mov	r2, r9
 800828e:	4631      	mov	r1, r6
 8008290:	4628      	mov	r0, r5
 8008292:	47b8      	blx	r7
 8008294:	3001      	adds	r0, #1
 8008296:	f43f af28 	beq.w	80080ea <_printf_float+0xb6>
 800829a:	f108 0801 	add.w	r8, r8, #1
 800829e:	e7e6      	b.n	800826e <_printf_float+0x23a>
 80082a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	dc38      	bgt.n	8008318 <_printf_float+0x2e4>
 80082a6:	2301      	movs	r3, #1
 80082a8:	4631      	mov	r1, r6
 80082aa:	4628      	mov	r0, r5
 80082ac:	4a19      	ldr	r2, [pc, #100]	; (8008314 <_printf_float+0x2e0>)
 80082ae:	47b8      	blx	r7
 80082b0:	3001      	adds	r0, #1
 80082b2:	f43f af1a 	beq.w	80080ea <_printf_float+0xb6>
 80082b6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80082ba:	4313      	orrs	r3, r2
 80082bc:	d102      	bne.n	80082c4 <_printf_float+0x290>
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	07d9      	lsls	r1, r3, #31
 80082c2:	d5d8      	bpl.n	8008276 <_printf_float+0x242>
 80082c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082c8:	4631      	mov	r1, r6
 80082ca:	4628      	mov	r0, r5
 80082cc:	47b8      	blx	r7
 80082ce:	3001      	adds	r0, #1
 80082d0:	f43f af0b 	beq.w	80080ea <_printf_float+0xb6>
 80082d4:	f04f 0900 	mov.w	r9, #0
 80082d8:	f104 0a1a 	add.w	sl, r4, #26
 80082dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082de:	425b      	negs	r3, r3
 80082e0:	454b      	cmp	r3, r9
 80082e2:	dc01      	bgt.n	80082e8 <_printf_float+0x2b4>
 80082e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082e6:	e794      	b.n	8008212 <_printf_float+0x1de>
 80082e8:	2301      	movs	r3, #1
 80082ea:	4652      	mov	r2, sl
 80082ec:	4631      	mov	r1, r6
 80082ee:	4628      	mov	r0, r5
 80082f0:	47b8      	blx	r7
 80082f2:	3001      	adds	r0, #1
 80082f4:	f43f aef9 	beq.w	80080ea <_printf_float+0xb6>
 80082f8:	f109 0901 	add.w	r9, r9, #1
 80082fc:	e7ee      	b.n	80082dc <_printf_float+0x2a8>
 80082fe:	bf00      	nop
 8008300:	7fefffff 	.word	0x7fefffff
 8008304:	0800db4b 	.word	0x0800db4b
 8008308:	0800db4f 	.word	0x0800db4f
 800830c:	0800db53 	.word	0x0800db53
 8008310:	0800db57 	.word	0x0800db57
 8008314:	0800db5b 	.word	0x0800db5b
 8008318:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800831a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800831c:	429a      	cmp	r2, r3
 800831e:	bfa8      	it	ge
 8008320:	461a      	movge	r2, r3
 8008322:	2a00      	cmp	r2, #0
 8008324:	4691      	mov	r9, r2
 8008326:	dc37      	bgt.n	8008398 <_printf_float+0x364>
 8008328:	f04f 0b00 	mov.w	fp, #0
 800832c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008330:	f104 021a 	add.w	r2, r4, #26
 8008334:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008338:	ebaa 0309 	sub.w	r3, sl, r9
 800833c:	455b      	cmp	r3, fp
 800833e:	dc33      	bgt.n	80083a8 <_printf_float+0x374>
 8008340:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008344:	429a      	cmp	r2, r3
 8008346:	db3b      	blt.n	80083c0 <_printf_float+0x38c>
 8008348:	6823      	ldr	r3, [r4, #0]
 800834a:	07da      	lsls	r2, r3, #31
 800834c:	d438      	bmi.n	80083c0 <_printf_float+0x38c>
 800834e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008352:	eba2 0903 	sub.w	r9, r2, r3
 8008356:	eba2 020a 	sub.w	r2, r2, sl
 800835a:	4591      	cmp	r9, r2
 800835c:	bfa8      	it	ge
 800835e:	4691      	movge	r9, r2
 8008360:	f1b9 0f00 	cmp.w	r9, #0
 8008364:	dc34      	bgt.n	80083d0 <_printf_float+0x39c>
 8008366:	f04f 0800 	mov.w	r8, #0
 800836a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800836e:	f104 0a1a 	add.w	sl, r4, #26
 8008372:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008376:	1a9b      	subs	r3, r3, r2
 8008378:	eba3 0309 	sub.w	r3, r3, r9
 800837c:	4543      	cmp	r3, r8
 800837e:	f77f af7a 	ble.w	8008276 <_printf_float+0x242>
 8008382:	2301      	movs	r3, #1
 8008384:	4652      	mov	r2, sl
 8008386:	4631      	mov	r1, r6
 8008388:	4628      	mov	r0, r5
 800838a:	47b8      	blx	r7
 800838c:	3001      	adds	r0, #1
 800838e:	f43f aeac 	beq.w	80080ea <_printf_float+0xb6>
 8008392:	f108 0801 	add.w	r8, r8, #1
 8008396:	e7ec      	b.n	8008372 <_printf_float+0x33e>
 8008398:	4613      	mov	r3, r2
 800839a:	4631      	mov	r1, r6
 800839c:	4642      	mov	r2, r8
 800839e:	4628      	mov	r0, r5
 80083a0:	47b8      	blx	r7
 80083a2:	3001      	adds	r0, #1
 80083a4:	d1c0      	bne.n	8008328 <_printf_float+0x2f4>
 80083a6:	e6a0      	b.n	80080ea <_printf_float+0xb6>
 80083a8:	2301      	movs	r3, #1
 80083aa:	4631      	mov	r1, r6
 80083ac:	4628      	mov	r0, r5
 80083ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80083b0:	47b8      	blx	r7
 80083b2:	3001      	adds	r0, #1
 80083b4:	f43f ae99 	beq.w	80080ea <_printf_float+0xb6>
 80083b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083ba:	f10b 0b01 	add.w	fp, fp, #1
 80083be:	e7b9      	b.n	8008334 <_printf_float+0x300>
 80083c0:	4631      	mov	r1, r6
 80083c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083c6:	4628      	mov	r0, r5
 80083c8:	47b8      	blx	r7
 80083ca:	3001      	adds	r0, #1
 80083cc:	d1bf      	bne.n	800834e <_printf_float+0x31a>
 80083ce:	e68c      	b.n	80080ea <_printf_float+0xb6>
 80083d0:	464b      	mov	r3, r9
 80083d2:	4631      	mov	r1, r6
 80083d4:	4628      	mov	r0, r5
 80083d6:	eb08 020a 	add.w	r2, r8, sl
 80083da:	47b8      	blx	r7
 80083dc:	3001      	adds	r0, #1
 80083de:	d1c2      	bne.n	8008366 <_printf_float+0x332>
 80083e0:	e683      	b.n	80080ea <_printf_float+0xb6>
 80083e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083e4:	2a01      	cmp	r2, #1
 80083e6:	dc01      	bgt.n	80083ec <_printf_float+0x3b8>
 80083e8:	07db      	lsls	r3, r3, #31
 80083ea:	d539      	bpl.n	8008460 <_printf_float+0x42c>
 80083ec:	2301      	movs	r3, #1
 80083ee:	4642      	mov	r2, r8
 80083f0:	4631      	mov	r1, r6
 80083f2:	4628      	mov	r0, r5
 80083f4:	47b8      	blx	r7
 80083f6:	3001      	adds	r0, #1
 80083f8:	f43f ae77 	beq.w	80080ea <_printf_float+0xb6>
 80083fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008400:	4631      	mov	r1, r6
 8008402:	4628      	mov	r0, r5
 8008404:	47b8      	blx	r7
 8008406:	3001      	adds	r0, #1
 8008408:	f43f ae6f 	beq.w	80080ea <_printf_float+0xb6>
 800840c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008410:	2200      	movs	r2, #0
 8008412:	2300      	movs	r3, #0
 8008414:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008418:	f7f8 fad0 	bl	80009bc <__aeabi_dcmpeq>
 800841c:	b9d8      	cbnz	r0, 8008456 <_printf_float+0x422>
 800841e:	f109 33ff 	add.w	r3, r9, #4294967295
 8008422:	f108 0201 	add.w	r2, r8, #1
 8008426:	4631      	mov	r1, r6
 8008428:	4628      	mov	r0, r5
 800842a:	47b8      	blx	r7
 800842c:	3001      	adds	r0, #1
 800842e:	d10e      	bne.n	800844e <_printf_float+0x41a>
 8008430:	e65b      	b.n	80080ea <_printf_float+0xb6>
 8008432:	2301      	movs	r3, #1
 8008434:	464a      	mov	r2, r9
 8008436:	4631      	mov	r1, r6
 8008438:	4628      	mov	r0, r5
 800843a:	47b8      	blx	r7
 800843c:	3001      	adds	r0, #1
 800843e:	f43f ae54 	beq.w	80080ea <_printf_float+0xb6>
 8008442:	f108 0801 	add.w	r8, r8, #1
 8008446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008448:	3b01      	subs	r3, #1
 800844a:	4543      	cmp	r3, r8
 800844c:	dcf1      	bgt.n	8008432 <_printf_float+0x3fe>
 800844e:	4653      	mov	r3, sl
 8008450:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008454:	e6de      	b.n	8008214 <_printf_float+0x1e0>
 8008456:	f04f 0800 	mov.w	r8, #0
 800845a:	f104 091a 	add.w	r9, r4, #26
 800845e:	e7f2      	b.n	8008446 <_printf_float+0x412>
 8008460:	2301      	movs	r3, #1
 8008462:	4642      	mov	r2, r8
 8008464:	e7df      	b.n	8008426 <_printf_float+0x3f2>
 8008466:	2301      	movs	r3, #1
 8008468:	464a      	mov	r2, r9
 800846a:	4631      	mov	r1, r6
 800846c:	4628      	mov	r0, r5
 800846e:	47b8      	blx	r7
 8008470:	3001      	adds	r0, #1
 8008472:	f43f ae3a 	beq.w	80080ea <_printf_float+0xb6>
 8008476:	f108 0801 	add.w	r8, r8, #1
 800847a:	68e3      	ldr	r3, [r4, #12]
 800847c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800847e:	1a5b      	subs	r3, r3, r1
 8008480:	4543      	cmp	r3, r8
 8008482:	dcf0      	bgt.n	8008466 <_printf_float+0x432>
 8008484:	e6fb      	b.n	800827e <_printf_float+0x24a>
 8008486:	f04f 0800 	mov.w	r8, #0
 800848a:	f104 0919 	add.w	r9, r4, #25
 800848e:	e7f4      	b.n	800847a <_printf_float+0x446>

08008490 <_printf_common>:
 8008490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008494:	4616      	mov	r6, r2
 8008496:	4699      	mov	r9, r3
 8008498:	688a      	ldr	r2, [r1, #8]
 800849a:	690b      	ldr	r3, [r1, #16]
 800849c:	4607      	mov	r7, r0
 800849e:	4293      	cmp	r3, r2
 80084a0:	bfb8      	it	lt
 80084a2:	4613      	movlt	r3, r2
 80084a4:	6033      	str	r3, [r6, #0]
 80084a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084aa:	460c      	mov	r4, r1
 80084ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084b0:	b10a      	cbz	r2, 80084b6 <_printf_common+0x26>
 80084b2:	3301      	adds	r3, #1
 80084b4:	6033      	str	r3, [r6, #0]
 80084b6:	6823      	ldr	r3, [r4, #0]
 80084b8:	0699      	lsls	r1, r3, #26
 80084ba:	bf42      	ittt	mi
 80084bc:	6833      	ldrmi	r3, [r6, #0]
 80084be:	3302      	addmi	r3, #2
 80084c0:	6033      	strmi	r3, [r6, #0]
 80084c2:	6825      	ldr	r5, [r4, #0]
 80084c4:	f015 0506 	ands.w	r5, r5, #6
 80084c8:	d106      	bne.n	80084d8 <_printf_common+0x48>
 80084ca:	f104 0a19 	add.w	sl, r4, #25
 80084ce:	68e3      	ldr	r3, [r4, #12]
 80084d0:	6832      	ldr	r2, [r6, #0]
 80084d2:	1a9b      	subs	r3, r3, r2
 80084d4:	42ab      	cmp	r3, r5
 80084d6:	dc2b      	bgt.n	8008530 <_printf_common+0xa0>
 80084d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084dc:	1e13      	subs	r3, r2, #0
 80084de:	6822      	ldr	r2, [r4, #0]
 80084e0:	bf18      	it	ne
 80084e2:	2301      	movne	r3, #1
 80084e4:	0692      	lsls	r2, r2, #26
 80084e6:	d430      	bmi.n	800854a <_printf_common+0xba>
 80084e8:	4649      	mov	r1, r9
 80084ea:	4638      	mov	r0, r7
 80084ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084f0:	47c0      	blx	r8
 80084f2:	3001      	adds	r0, #1
 80084f4:	d023      	beq.n	800853e <_printf_common+0xae>
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	6922      	ldr	r2, [r4, #16]
 80084fa:	f003 0306 	and.w	r3, r3, #6
 80084fe:	2b04      	cmp	r3, #4
 8008500:	bf14      	ite	ne
 8008502:	2500      	movne	r5, #0
 8008504:	6833      	ldreq	r3, [r6, #0]
 8008506:	f04f 0600 	mov.w	r6, #0
 800850a:	bf08      	it	eq
 800850c:	68e5      	ldreq	r5, [r4, #12]
 800850e:	f104 041a 	add.w	r4, r4, #26
 8008512:	bf08      	it	eq
 8008514:	1aed      	subeq	r5, r5, r3
 8008516:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800851a:	bf08      	it	eq
 800851c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008520:	4293      	cmp	r3, r2
 8008522:	bfc4      	itt	gt
 8008524:	1a9b      	subgt	r3, r3, r2
 8008526:	18ed      	addgt	r5, r5, r3
 8008528:	42b5      	cmp	r5, r6
 800852a:	d11a      	bne.n	8008562 <_printf_common+0xd2>
 800852c:	2000      	movs	r0, #0
 800852e:	e008      	b.n	8008542 <_printf_common+0xb2>
 8008530:	2301      	movs	r3, #1
 8008532:	4652      	mov	r2, sl
 8008534:	4649      	mov	r1, r9
 8008536:	4638      	mov	r0, r7
 8008538:	47c0      	blx	r8
 800853a:	3001      	adds	r0, #1
 800853c:	d103      	bne.n	8008546 <_printf_common+0xb6>
 800853e:	f04f 30ff 	mov.w	r0, #4294967295
 8008542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008546:	3501      	adds	r5, #1
 8008548:	e7c1      	b.n	80084ce <_printf_common+0x3e>
 800854a:	2030      	movs	r0, #48	; 0x30
 800854c:	18e1      	adds	r1, r4, r3
 800854e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008552:	1c5a      	adds	r2, r3, #1
 8008554:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008558:	4422      	add	r2, r4
 800855a:	3302      	adds	r3, #2
 800855c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008560:	e7c2      	b.n	80084e8 <_printf_common+0x58>
 8008562:	2301      	movs	r3, #1
 8008564:	4622      	mov	r2, r4
 8008566:	4649      	mov	r1, r9
 8008568:	4638      	mov	r0, r7
 800856a:	47c0      	blx	r8
 800856c:	3001      	adds	r0, #1
 800856e:	d0e6      	beq.n	800853e <_printf_common+0xae>
 8008570:	3601      	adds	r6, #1
 8008572:	e7d9      	b.n	8008528 <_printf_common+0x98>

08008574 <_printf_i>:
 8008574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008578:	7e0f      	ldrb	r7, [r1, #24]
 800857a:	4691      	mov	r9, r2
 800857c:	2f78      	cmp	r7, #120	; 0x78
 800857e:	4680      	mov	r8, r0
 8008580:	460c      	mov	r4, r1
 8008582:	469a      	mov	sl, r3
 8008584:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008586:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800858a:	d807      	bhi.n	800859c <_printf_i+0x28>
 800858c:	2f62      	cmp	r7, #98	; 0x62
 800858e:	d80a      	bhi.n	80085a6 <_printf_i+0x32>
 8008590:	2f00      	cmp	r7, #0
 8008592:	f000 80d5 	beq.w	8008740 <_printf_i+0x1cc>
 8008596:	2f58      	cmp	r7, #88	; 0x58
 8008598:	f000 80c1 	beq.w	800871e <_printf_i+0x1aa>
 800859c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085a4:	e03a      	b.n	800861c <_printf_i+0xa8>
 80085a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085aa:	2b15      	cmp	r3, #21
 80085ac:	d8f6      	bhi.n	800859c <_printf_i+0x28>
 80085ae:	a101      	add	r1, pc, #4	; (adr r1, 80085b4 <_printf_i+0x40>)
 80085b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085b4:	0800860d 	.word	0x0800860d
 80085b8:	08008621 	.word	0x08008621
 80085bc:	0800859d 	.word	0x0800859d
 80085c0:	0800859d 	.word	0x0800859d
 80085c4:	0800859d 	.word	0x0800859d
 80085c8:	0800859d 	.word	0x0800859d
 80085cc:	08008621 	.word	0x08008621
 80085d0:	0800859d 	.word	0x0800859d
 80085d4:	0800859d 	.word	0x0800859d
 80085d8:	0800859d 	.word	0x0800859d
 80085dc:	0800859d 	.word	0x0800859d
 80085e0:	08008727 	.word	0x08008727
 80085e4:	0800864d 	.word	0x0800864d
 80085e8:	080086e1 	.word	0x080086e1
 80085ec:	0800859d 	.word	0x0800859d
 80085f0:	0800859d 	.word	0x0800859d
 80085f4:	08008749 	.word	0x08008749
 80085f8:	0800859d 	.word	0x0800859d
 80085fc:	0800864d 	.word	0x0800864d
 8008600:	0800859d 	.word	0x0800859d
 8008604:	0800859d 	.word	0x0800859d
 8008608:	080086e9 	.word	0x080086e9
 800860c:	682b      	ldr	r3, [r5, #0]
 800860e:	1d1a      	adds	r2, r3, #4
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	602a      	str	r2, [r5, #0]
 8008614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800861c:	2301      	movs	r3, #1
 800861e:	e0a0      	b.n	8008762 <_printf_i+0x1ee>
 8008620:	6820      	ldr	r0, [r4, #0]
 8008622:	682b      	ldr	r3, [r5, #0]
 8008624:	0607      	lsls	r7, r0, #24
 8008626:	f103 0104 	add.w	r1, r3, #4
 800862a:	6029      	str	r1, [r5, #0]
 800862c:	d501      	bpl.n	8008632 <_printf_i+0xbe>
 800862e:	681e      	ldr	r6, [r3, #0]
 8008630:	e003      	b.n	800863a <_printf_i+0xc6>
 8008632:	0646      	lsls	r6, r0, #25
 8008634:	d5fb      	bpl.n	800862e <_printf_i+0xba>
 8008636:	f9b3 6000 	ldrsh.w	r6, [r3]
 800863a:	2e00      	cmp	r6, #0
 800863c:	da03      	bge.n	8008646 <_printf_i+0xd2>
 800863e:	232d      	movs	r3, #45	; 0x2d
 8008640:	4276      	negs	r6, r6
 8008642:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008646:	230a      	movs	r3, #10
 8008648:	4859      	ldr	r0, [pc, #356]	; (80087b0 <_printf_i+0x23c>)
 800864a:	e012      	b.n	8008672 <_printf_i+0xfe>
 800864c:	682b      	ldr	r3, [r5, #0]
 800864e:	6820      	ldr	r0, [r4, #0]
 8008650:	1d19      	adds	r1, r3, #4
 8008652:	6029      	str	r1, [r5, #0]
 8008654:	0605      	lsls	r5, r0, #24
 8008656:	d501      	bpl.n	800865c <_printf_i+0xe8>
 8008658:	681e      	ldr	r6, [r3, #0]
 800865a:	e002      	b.n	8008662 <_printf_i+0xee>
 800865c:	0641      	lsls	r1, r0, #25
 800865e:	d5fb      	bpl.n	8008658 <_printf_i+0xe4>
 8008660:	881e      	ldrh	r6, [r3, #0]
 8008662:	2f6f      	cmp	r7, #111	; 0x6f
 8008664:	bf0c      	ite	eq
 8008666:	2308      	moveq	r3, #8
 8008668:	230a      	movne	r3, #10
 800866a:	4851      	ldr	r0, [pc, #324]	; (80087b0 <_printf_i+0x23c>)
 800866c:	2100      	movs	r1, #0
 800866e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008672:	6865      	ldr	r5, [r4, #4]
 8008674:	2d00      	cmp	r5, #0
 8008676:	bfa8      	it	ge
 8008678:	6821      	ldrge	r1, [r4, #0]
 800867a:	60a5      	str	r5, [r4, #8]
 800867c:	bfa4      	itt	ge
 800867e:	f021 0104 	bicge.w	r1, r1, #4
 8008682:	6021      	strge	r1, [r4, #0]
 8008684:	b90e      	cbnz	r6, 800868a <_printf_i+0x116>
 8008686:	2d00      	cmp	r5, #0
 8008688:	d04b      	beq.n	8008722 <_printf_i+0x1ae>
 800868a:	4615      	mov	r5, r2
 800868c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008690:	fb03 6711 	mls	r7, r3, r1, r6
 8008694:	5dc7      	ldrb	r7, [r0, r7]
 8008696:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800869a:	4637      	mov	r7, r6
 800869c:	42bb      	cmp	r3, r7
 800869e:	460e      	mov	r6, r1
 80086a0:	d9f4      	bls.n	800868c <_printf_i+0x118>
 80086a2:	2b08      	cmp	r3, #8
 80086a4:	d10b      	bne.n	80086be <_printf_i+0x14a>
 80086a6:	6823      	ldr	r3, [r4, #0]
 80086a8:	07de      	lsls	r6, r3, #31
 80086aa:	d508      	bpl.n	80086be <_printf_i+0x14a>
 80086ac:	6923      	ldr	r3, [r4, #16]
 80086ae:	6861      	ldr	r1, [r4, #4]
 80086b0:	4299      	cmp	r1, r3
 80086b2:	bfde      	ittt	le
 80086b4:	2330      	movle	r3, #48	; 0x30
 80086b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80086be:	1b52      	subs	r2, r2, r5
 80086c0:	6122      	str	r2, [r4, #16]
 80086c2:	464b      	mov	r3, r9
 80086c4:	4621      	mov	r1, r4
 80086c6:	4640      	mov	r0, r8
 80086c8:	f8cd a000 	str.w	sl, [sp]
 80086cc:	aa03      	add	r2, sp, #12
 80086ce:	f7ff fedf 	bl	8008490 <_printf_common>
 80086d2:	3001      	adds	r0, #1
 80086d4:	d14a      	bne.n	800876c <_printf_i+0x1f8>
 80086d6:	f04f 30ff 	mov.w	r0, #4294967295
 80086da:	b004      	add	sp, #16
 80086dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e0:	6823      	ldr	r3, [r4, #0]
 80086e2:	f043 0320 	orr.w	r3, r3, #32
 80086e6:	6023      	str	r3, [r4, #0]
 80086e8:	2778      	movs	r7, #120	; 0x78
 80086ea:	4832      	ldr	r0, [pc, #200]	; (80087b4 <_printf_i+0x240>)
 80086ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80086f0:	6823      	ldr	r3, [r4, #0]
 80086f2:	6829      	ldr	r1, [r5, #0]
 80086f4:	061f      	lsls	r7, r3, #24
 80086f6:	f851 6b04 	ldr.w	r6, [r1], #4
 80086fa:	d402      	bmi.n	8008702 <_printf_i+0x18e>
 80086fc:	065f      	lsls	r7, r3, #25
 80086fe:	bf48      	it	mi
 8008700:	b2b6      	uxthmi	r6, r6
 8008702:	07df      	lsls	r7, r3, #31
 8008704:	bf48      	it	mi
 8008706:	f043 0320 	orrmi.w	r3, r3, #32
 800870a:	6029      	str	r1, [r5, #0]
 800870c:	bf48      	it	mi
 800870e:	6023      	strmi	r3, [r4, #0]
 8008710:	b91e      	cbnz	r6, 800871a <_printf_i+0x1a6>
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	f023 0320 	bic.w	r3, r3, #32
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	2310      	movs	r3, #16
 800871c:	e7a6      	b.n	800866c <_printf_i+0xf8>
 800871e:	4824      	ldr	r0, [pc, #144]	; (80087b0 <_printf_i+0x23c>)
 8008720:	e7e4      	b.n	80086ec <_printf_i+0x178>
 8008722:	4615      	mov	r5, r2
 8008724:	e7bd      	b.n	80086a2 <_printf_i+0x12e>
 8008726:	682b      	ldr	r3, [r5, #0]
 8008728:	6826      	ldr	r6, [r4, #0]
 800872a:	1d18      	adds	r0, r3, #4
 800872c:	6961      	ldr	r1, [r4, #20]
 800872e:	6028      	str	r0, [r5, #0]
 8008730:	0635      	lsls	r5, r6, #24
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	d501      	bpl.n	800873a <_printf_i+0x1c6>
 8008736:	6019      	str	r1, [r3, #0]
 8008738:	e002      	b.n	8008740 <_printf_i+0x1cc>
 800873a:	0670      	lsls	r0, r6, #25
 800873c:	d5fb      	bpl.n	8008736 <_printf_i+0x1c2>
 800873e:	8019      	strh	r1, [r3, #0]
 8008740:	2300      	movs	r3, #0
 8008742:	4615      	mov	r5, r2
 8008744:	6123      	str	r3, [r4, #16]
 8008746:	e7bc      	b.n	80086c2 <_printf_i+0x14e>
 8008748:	682b      	ldr	r3, [r5, #0]
 800874a:	2100      	movs	r1, #0
 800874c:	1d1a      	adds	r2, r3, #4
 800874e:	602a      	str	r2, [r5, #0]
 8008750:	681d      	ldr	r5, [r3, #0]
 8008752:	6862      	ldr	r2, [r4, #4]
 8008754:	4628      	mov	r0, r5
 8008756:	f000 fc5e 	bl	8009016 <memchr>
 800875a:	b108      	cbz	r0, 8008760 <_printf_i+0x1ec>
 800875c:	1b40      	subs	r0, r0, r5
 800875e:	6060      	str	r0, [r4, #4]
 8008760:	6863      	ldr	r3, [r4, #4]
 8008762:	6123      	str	r3, [r4, #16]
 8008764:	2300      	movs	r3, #0
 8008766:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800876a:	e7aa      	b.n	80086c2 <_printf_i+0x14e>
 800876c:	462a      	mov	r2, r5
 800876e:	4649      	mov	r1, r9
 8008770:	4640      	mov	r0, r8
 8008772:	6923      	ldr	r3, [r4, #16]
 8008774:	47d0      	blx	sl
 8008776:	3001      	adds	r0, #1
 8008778:	d0ad      	beq.n	80086d6 <_printf_i+0x162>
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	079b      	lsls	r3, r3, #30
 800877e:	d413      	bmi.n	80087a8 <_printf_i+0x234>
 8008780:	68e0      	ldr	r0, [r4, #12]
 8008782:	9b03      	ldr	r3, [sp, #12]
 8008784:	4298      	cmp	r0, r3
 8008786:	bfb8      	it	lt
 8008788:	4618      	movlt	r0, r3
 800878a:	e7a6      	b.n	80086da <_printf_i+0x166>
 800878c:	2301      	movs	r3, #1
 800878e:	4632      	mov	r2, r6
 8008790:	4649      	mov	r1, r9
 8008792:	4640      	mov	r0, r8
 8008794:	47d0      	blx	sl
 8008796:	3001      	adds	r0, #1
 8008798:	d09d      	beq.n	80086d6 <_printf_i+0x162>
 800879a:	3501      	adds	r5, #1
 800879c:	68e3      	ldr	r3, [r4, #12]
 800879e:	9903      	ldr	r1, [sp, #12]
 80087a0:	1a5b      	subs	r3, r3, r1
 80087a2:	42ab      	cmp	r3, r5
 80087a4:	dcf2      	bgt.n	800878c <_printf_i+0x218>
 80087a6:	e7eb      	b.n	8008780 <_printf_i+0x20c>
 80087a8:	2500      	movs	r5, #0
 80087aa:	f104 0619 	add.w	r6, r4, #25
 80087ae:	e7f5      	b.n	800879c <_printf_i+0x228>
 80087b0:	0800db5d 	.word	0x0800db5d
 80087b4:	0800db6e 	.word	0x0800db6e

080087b8 <_scanf_float>:
 80087b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087bc:	b087      	sub	sp, #28
 80087be:	9303      	str	r3, [sp, #12]
 80087c0:	688b      	ldr	r3, [r1, #8]
 80087c2:	4617      	mov	r7, r2
 80087c4:	1e5a      	subs	r2, r3, #1
 80087c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80087ca:	bf85      	ittet	hi
 80087cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80087d0:	195b      	addhi	r3, r3, r5
 80087d2:	2300      	movls	r3, #0
 80087d4:	9302      	strhi	r3, [sp, #8]
 80087d6:	bf88      	it	hi
 80087d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80087dc:	468b      	mov	fp, r1
 80087de:	f04f 0500 	mov.w	r5, #0
 80087e2:	bf8c      	ite	hi
 80087e4:	608b      	strhi	r3, [r1, #8]
 80087e6:	9302      	strls	r3, [sp, #8]
 80087e8:	680b      	ldr	r3, [r1, #0]
 80087ea:	4680      	mov	r8, r0
 80087ec:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80087f0:	f84b 3b1c 	str.w	r3, [fp], #28
 80087f4:	460c      	mov	r4, r1
 80087f6:	465e      	mov	r6, fp
 80087f8:	46aa      	mov	sl, r5
 80087fa:	46a9      	mov	r9, r5
 80087fc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008800:	9501      	str	r5, [sp, #4]
 8008802:	68a2      	ldr	r2, [r4, #8]
 8008804:	b152      	cbz	r2, 800881c <_scanf_float+0x64>
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	2b4e      	cmp	r3, #78	; 0x4e
 800880c:	d864      	bhi.n	80088d8 <_scanf_float+0x120>
 800880e:	2b40      	cmp	r3, #64	; 0x40
 8008810:	d83c      	bhi.n	800888c <_scanf_float+0xd4>
 8008812:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008816:	b2c8      	uxtb	r0, r1
 8008818:	280e      	cmp	r0, #14
 800881a:	d93a      	bls.n	8008892 <_scanf_float+0xda>
 800881c:	f1b9 0f00 	cmp.w	r9, #0
 8008820:	d003      	beq.n	800882a <_scanf_float+0x72>
 8008822:	6823      	ldr	r3, [r4, #0]
 8008824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800882e:	f1ba 0f01 	cmp.w	sl, #1
 8008832:	f200 8113 	bhi.w	8008a5c <_scanf_float+0x2a4>
 8008836:	455e      	cmp	r6, fp
 8008838:	f200 8105 	bhi.w	8008a46 <_scanf_float+0x28e>
 800883c:	2501      	movs	r5, #1
 800883e:	4628      	mov	r0, r5
 8008840:	b007      	add	sp, #28
 8008842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008846:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800884a:	2a0d      	cmp	r2, #13
 800884c:	d8e6      	bhi.n	800881c <_scanf_float+0x64>
 800884e:	a101      	add	r1, pc, #4	; (adr r1, 8008854 <_scanf_float+0x9c>)
 8008850:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008854:	08008993 	.word	0x08008993
 8008858:	0800881d 	.word	0x0800881d
 800885c:	0800881d 	.word	0x0800881d
 8008860:	0800881d 	.word	0x0800881d
 8008864:	080089f3 	.word	0x080089f3
 8008868:	080089cb 	.word	0x080089cb
 800886c:	0800881d 	.word	0x0800881d
 8008870:	0800881d 	.word	0x0800881d
 8008874:	080089a1 	.word	0x080089a1
 8008878:	0800881d 	.word	0x0800881d
 800887c:	0800881d 	.word	0x0800881d
 8008880:	0800881d 	.word	0x0800881d
 8008884:	0800881d 	.word	0x0800881d
 8008888:	08008959 	.word	0x08008959
 800888c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008890:	e7db      	b.n	800884a <_scanf_float+0x92>
 8008892:	290e      	cmp	r1, #14
 8008894:	d8c2      	bhi.n	800881c <_scanf_float+0x64>
 8008896:	a001      	add	r0, pc, #4	; (adr r0, 800889c <_scanf_float+0xe4>)
 8008898:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800889c:	0800894b 	.word	0x0800894b
 80088a0:	0800881d 	.word	0x0800881d
 80088a4:	0800894b 	.word	0x0800894b
 80088a8:	080089df 	.word	0x080089df
 80088ac:	0800881d 	.word	0x0800881d
 80088b0:	080088f9 	.word	0x080088f9
 80088b4:	08008935 	.word	0x08008935
 80088b8:	08008935 	.word	0x08008935
 80088bc:	08008935 	.word	0x08008935
 80088c0:	08008935 	.word	0x08008935
 80088c4:	08008935 	.word	0x08008935
 80088c8:	08008935 	.word	0x08008935
 80088cc:	08008935 	.word	0x08008935
 80088d0:	08008935 	.word	0x08008935
 80088d4:	08008935 	.word	0x08008935
 80088d8:	2b6e      	cmp	r3, #110	; 0x6e
 80088da:	d809      	bhi.n	80088f0 <_scanf_float+0x138>
 80088dc:	2b60      	cmp	r3, #96	; 0x60
 80088de:	d8b2      	bhi.n	8008846 <_scanf_float+0x8e>
 80088e0:	2b54      	cmp	r3, #84	; 0x54
 80088e2:	d077      	beq.n	80089d4 <_scanf_float+0x21c>
 80088e4:	2b59      	cmp	r3, #89	; 0x59
 80088e6:	d199      	bne.n	800881c <_scanf_float+0x64>
 80088e8:	2d07      	cmp	r5, #7
 80088ea:	d197      	bne.n	800881c <_scanf_float+0x64>
 80088ec:	2508      	movs	r5, #8
 80088ee:	e029      	b.n	8008944 <_scanf_float+0x18c>
 80088f0:	2b74      	cmp	r3, #116	; 0x74
 80088f2:	d06f      	beq.n	80089d4 <_scanf_float+0x21c>
 80088f4:	2b79      	cmp	r3, #121	; 0x79
 80088f6:	e7f6      	b.n	80088e6 <_scanf_float+0x12e>
 80088f8:	6821      	ldr	r1, [r4, #0]
 80088fa:	05c8      	lsls	r0, r1, #23
 80088fc:	d51a      	bpl.n	8008934 <_scanf_float+0x17c>
 80088fe:	9b02      	ldr	r3, [sp, #8]
 8008900:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008904:	6021      	str	r1, [r4, #0]
 8008906:	f109 0901 	add.w	r9, r9, #1
 800890a:	b11b      	cbz	r3, 8008914 <_scanf_float+0x15c>
 800890c:	3b01      	subs	r3, #1
 800890e:	3201      	adds	r2, #1
 8008910:	9302      	str	r3, [sp, #8]
 8008912:	60a2      	str	r2, [r4, #8]
 8008914:	68a3      	ldr	r3, [r4, #8]
 8008916:	3b01      	subs	r3, #1
 8008918:	60a3      	str	r3, [r4, #8]
 800891a:	6923      	ldr	r3, [r4, #16]
 800891c:	3301      	adds	r3, #1
 800891e:	6123      	str	r3, [r4, #16]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	3b01      	subs	r3, #1
 8008924:	2b00      	cmp	r3, #0
 8008926:	607b      	str	r3, [r7, #4]
 8008928:	f340 8084 	ble.w	8008a34 <_scanf_float+0x27c>
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	3301      	adds	r3, #1
 8008930:	603b      	str	r3, [r7, #0]
 8008932:	e766      	b.n	8008802 <_scanf_float+0x4a>
 8008934:	eb1a 0f05 	cmn.w	sl, r5
 8008938:	f47f af70 	bne.w	800881c <_scanf_float+0x64>
 800893c:	6822      	ldr	r2, [r4, #0]
 800893e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008942:	6022      	str	r2, [r4, #0]
 8008944:	f806 3b01 	strb.w	r3, [r6], #1
 8008948:	e7e4      	b.n	8008914 <_scanf_float+0x15c>
 800894a:	6822      	ldr	r2, [r4, #0]
 800894c:	0610      	lsls	r0, r2, #24
 800894e:	f57f af65 	bpl.w	800881c <_scanf_float+0x64>
 8008952:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008956:	e7f4      	b.n	8008942 <_scanf_float+0x18a>
 8008958:	f1ba 0f00 	cmp.w	sl, #0
 800895c:	d10e      	bne.n	800897c <_scanf_float+0x1c4>
 800895e:	f1b9 0f00 	cmp.w	r9, #0
 8008962:	d10e      	bne.n	8008982 <_scanf_float+0x1ca>
 8008964:	6822      	ldr	r2, [r4, #0]
 8008966:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800896a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800896e:	d108      	bne.n	8008982 <_scanf_float+0x1ca>
 8008970:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008974:	f04f 0a01 	mov.w	sl, #1
 8008978:	6022      	str	r2, [r4, #0]
 800897a:	e7e3      	b.n	8008944 <_scanf_float+0x18c>
 800897c:	f1ba 0f02 	cmp.w	sl, #2
 8008980:	d055      	beq.n	8008a2e <_scanf_float+0x276>
 8008982:	2d01      	cmp	r5, #1
 8008984:	d002      	beq.n	800898c <_scanf_float+0x1d4>
 8008986:	2d04      	cmp	r5, #4
 8008988:	f47f af48 	bne.w	800881c <_scanf_float+0x64>
 800898c:	3501      	adds	r5, #1
 800898e:	b2ed      	uxtb	r5, r5
 8008990:	e7d8      	b.n	8008944 <_scanf_float+0x18c>
 8008992:	f1ba 0f01 	cmp.w	sl, #1
 8008996:	f47f af41 	bne.w	800881c <_scanf_float+0x64>
 800899a:	f04f 0a02 	mov.w	sl, #2
 800899e:	e7d1      	b.n	8008944 <_scanf_float+0x18c>
 80089a0:	b97d      	cbnz	r5, 80089c2 <_scanf_float+0x20a>
 80089a2:	f1b9 0f00 	cmp.w	r9, #0
 80089a6:	f47f af3c 	bne.w	8008822 <_scanf_float+0x6a>
 80089aa:	6822      	ldr	r2, [r4, #0]
 80089ac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80089b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80089b4:	f47f af39 	bne.w	800882a <_scanf_float+0x72>
 80089b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80089bc:	2501      	movs	r5, #1
 80089be:	6022      	str	r2, [r4, #0]
 80089c0:	e7c0      	b.n	8008944 <_scanf_float+0x18c>
 80089c2:	2d03      	cmp	r5, #3
 80089c4:	d0e2      	beq.n	800898c <_scanf_float+0x1d4>
 80089c6:	2d05      	cmp	r5, #5
 80089c8:	e7de      	b.n	8008988 <_scanf_float+0x1d0>
 80089ca:	2d02      	cmp	r5, #2
 80089cc:	f47f af26 	bne.w	800881c <_scanf_float+0x64>
 80089d0:	2503      	movs	r5, #3
 80089d2:	e7b7      	b.n	8008944 <_scanf_float+0x18c>
 80089d4:	2d06      	cmp	r5, #6
 80089d6:	f47f af21 	bne.w	800881c <_scanf_float+0x64>
 80089da:	2507      	movs	r5, #7
 80089dc:	e7b2      	b.n	8008944 <_scanf_float+0x18c>
 80089de:	6822      	ldr	r2, [r4, #0]
 80089e0:	0591      	lsls	r1, r2, #22
 80089e2:	f57f af1b 	bpl.w	800881c <_scanf_float+0x64>
 80089e6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80089ea:	6022      	str	r2, [r4, #0]
 80089ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80089f0:	e7a8      	b.n	8008944 <_scanf_float+0x18c>
 80089f2:	6822      	ldr	r2, [r4, #0]
 80089f4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80089f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80089fc:	d006      	beq.n	8008a0c <_scanf_float+0x254>
 80089fe:	0550      	lsls	r0, r2, #21
 8008a00:	f57f af0c 	bpl.w	800881c <_scanf_float+0x64>
 8008a04:	f1b9 0f00 	cmp.w	r9, #0
 8008a08:	f43f af0f 	beq.w	800882a <_scanf_float+0x72>
 8008a0c:	0591      	lsls	r1, r2, #22
 8008a0e:	bf58      	it	pl
 8008a10:	9901      	ldrpl	r1, [sp, #4]
 8008a12:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a16:	bf58      	it	pl
 8008a18:	eba9 0101 	subpl.w	r1, r9, r1
 8008a1c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008a20:	f04f 0900 	mov.w	r9, #0
 8008a24:	bf58      	it	pl
 8008a26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008a2a:	6022      	str	r2, [r4, #0]
 8008a2c:	e78a      	b.n	8008944 <_scanf_float+0x18c>
 8008a2e:	f04f 0a03 	mov.w	sl, #3
 8008a32:	e787      	b.n	8008944 <_scanf_float+0x18c>
 8008a34:	4639      	mov	r1, r7
 8008a36:	4640      	mov	r0, r8
 8008a38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a3c:	4798      	blx	r3
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	f43f aedf 	beq.w	8008802 <_scanf_float+0x4a>
 8008a44:	e6ea      	b.n	800881c <_scanf_float+0x64>
 8008a46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a4a:	463a      	mov	r2, r7
 8008a4c:	4640      	mov	r0, r8
 8008a4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a52:	4798      	blx	r3
 8008a54:	6923      	ldr	r3, [r4, #16]
 8008a56:	3b01      	subs	r3, #1
 8008a58:	6123      	str	r3, [r4, #16]
 8008a5a:	e6ec      	b.n	8008836 <_scanf_float+0x7e>
 8008a5c:	1e6b      	subs	r3, r5, #1
 8008a5e:	2b06      	cmp	r3, #6
 8008a60:	d825      	bhi.n	8008aae <_scanf_float+0x2f6>
 8008a62:	2d02      	cmp	r5, #2
 8008a64:	d836      	bhi.n	8008ad4 <_scanf_float+0x31c>
 8008a66:	455e      	cmp	r6, fp
 8008a68:	f67f aee8 	bls.w	800883c <_scanf_float+0x84>
 8008a6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a70:	463a      	mov	r2, r7
 8008a72:	4640      	mov	r0, r8
 8008a74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a78:	4798      	blx	r3
 8008a7a:	6923      	ldr	r3, [r4, #16]
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	6123      	str	r3, [r4, #16]
 8008a80:	e7f1      	b.n	8008a66 <_scanf_float+0x2ae>
 8008a82:	9802      	ldr	r0, [sp, #8]
 8008a84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a88:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008a8c:	463a      	mov	r2, r7
 8008a8e:	9002      	str	r0, [sp, #8]
 8008a90:	4640      	mov	r0, r8
 8008a92:	4798      	blx	r3
 8008a94:	6923      	ldr	r3, [r4, #16]
 8008a96:	3b01      	subs	r3, #1
 8008a98:	6123      	str	r3, [r4, #16]
 8008a9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a9e:	fa5f fa8a 	uxtb.w	sl, sl
 8008aa2:	f1ba 0f02 	cmp.w	sl, #2
 8008aa6:	d1ec      	bne.n	8008a82 <_scanf_float+0x2ca>
 8008aa8:	3d03      	subs	r5, #3
 8008aaa:	b2ed      	uxtb	r5, r5
 8008aac:	1b76      	subs	r6, r6, r5
 8008aae:	6823      	ldr	r3, [r4, #0]
 8008ab0:	05da      	lsls	r2, r3, #23
 8008ab2:	d52f      	bpl.n	8008b14 <_scanf_float+0x35c>
 8008ab4:	055b      	lsls	r3, r3, #21
 8008ab6:	d510      	bpl.n	8008ada <_scanf_float+0x322>
 8008ab8:	455e      	cmp	r6, fp
 8008aba:	f67f aebf 	bls.w	800883c <_scanf_float+0x84>
 8008abe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ac2:	463a      	mov	r2, r7
 8008ac4:	4640      	mov	r0, r8
 8008ac6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008aca:	4798      	blx	r3
 8008acc:	6923      	ldr	r3, [r4, #16]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	6123      	str	r3, [r4, #16]
 8008ad2:	e7f1      	b.n	8008ab8 <_scanf_float+0x300>
 8008ad4:	46aa      	mov	sl, r5
 8008ad6:	9602      	str	r6, [sp, #8]
 8008ad8:	e7df      	b.n	8008a9a <_scanf_float+0x2e2>
 8008ada:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008ade:	6923      	ldr	r3, [r4, #16]
 8008ae0:	2965      	cmp	r1, #101	; 0x65
 8008ae2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ae6:	f106 35ff 	add.w	r5, r6, #4294967295
 8008aea:	6123      	str	r3, [r4, #16]
 8008aec:	d00c      	beq.n	8008b08 <_scanf_float+0x350>
 8008aee:	2945      	cmp	r1, #69	; 0x45
 8008af0:	d00a      	beq.n	8008b08 <_scanf_float+0x350>
 8008af2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008af6:	463a      	mov	r2, r7
 8008af8:	4640      	mov	r0, r8
 8008afa:	4798      	blx	r3
 8008afc:	6923      	ldr	r3, [r4, #16]
 8008afe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008b02:	3b01      	subs	r3, #1
 8008b04:	1eb5      	subs	r5, r6, #2
 8008b06:	6123      	str	r3, [r4, #16]
 8008b08:	463a      	mov	r2, r7
 8008b0a:	4640      	mov	r0, r8
 8008b0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b10:	4798      	blx	r3
 8008b12:	462e      	mov	r6, r5
 8008b14:	6825      	ldr	r5, [r4, #0]
 8008b16:	f015 0510 	ands.w	r5, r5, #16
 8008b1a:	d155      	bne.n	8008bc8 <_scanf_float+0x410>
 8008b1c:	7035      	strb	r5, [r6, #0]
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b28:	d11d      	bne.n	8008b66 <_scanf_float+0x3ae>
 8008b2a:	9b01      	ldr	r3, [sp, #4]
 8008b2c:	454b      	cmp	r3, r9
 8008b2e:	eba3 0209 	sub.w	r2, r3, r9
 8008b32:	d125      	bne.n	8008b80 <_scanf_float+0x3c8>
 8008b34:	2200      	movs	r2, #0
 8008b36:	4659      	mov	r1, fp
 8008b38:	4640      	mov	r0, r8
 8008b3a:	f002 fcbd 	bl	800b4b8 <_strtod_r>
 8008b3e:	9b03      	ldr	r3, [sp, #12]
 8008b40:	f8d4 c000 	ldr.w	ip, [r4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f01c 0f02 	tst.w	ip, #2
 8008b4a:	4606      	mov	r6, r0
 8008b4c:	460f      	mov	r7, r1
 8008b4e:	f103 0204 	add.w	r2, r3, #4
 8008b52:	d020      	beq.n	8008b96 <_scanf_float+0x3de>
 8008b54:	9903      	ldr	r1, [sp, #12]
 8008b56:	600a      	str	r2, [r1, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	e9c3 6700 	strd	r6, r7, [r3]
 8008b5e:	68e3      	ldr	r3, [r4, #12]
 8008b60:	3301      	adds	r3, #1
 8008b62:	60e3      	str	r3, [r4, #12]
 8008b64:	e66b      	b.n	800883e <_scanf_float+0x86>
 8008b66:	9b04      	ldr	r3, [sp, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d0e3      	beq.n	8008b34 <_scanf_float+0x37c>
 8008b6c:	9905      	ldr	r1, [sp, #20]
 8008b6e:	230a      	movs	r3, #10
 8008b70:	462a      	mov	r2, r5
 8008b72:	4640      	mov	r0, r8
 8008b74:	3101      	adds	r1, #1
 8008b76:	f7ff f9b5 	bl	8007ee4 <_strtol_r>
 8008b7a:	9b04      	ldr	r3, [sp, #16]
 8008b7c:	9e05      	ldr	r6, [sp, #20]
 8008b7e:	1ac2      	subs	r2, r0, r3
 8008b80:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008b84:	429e      	cmp	r6, r3
 8008b86:	bf28      	it	cs
 8008b88:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008b8c:	4630      	mov	r0, r6
 8008b8e:	490f      	ldr	r1, [pc, #60]	; (8008bcc <_scanf_float+0x414>)
 8008b90:	f000 f8e2 	bl	8008d58 <siprintf>
 8008b94:	e7ce      	b.n	8008b34 <_scanf_float+0x37c>
 8008b96:	f01c 0f04 	tst.w	ip, #4
 8008b9a:	d1db      	bne.n	8008b54 <_scanf_float+0x39c>
 8008b9c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008ba0:	f8cc 2000 	str.w	r2, [ip]
 8008ba4:	f8d3 8000 	ldr.w	r8, [r3]
 8008ba8:	4602      	mov	r2, r0
 8008baa:	460b      	mov	r3, r1
 8008bac:	f7f7 ff38 	bl	8000a20 <__aeabi_dcmpun>
 8008bb0:	b128      	cbz	r0, 8008bbe <_scanf_float+0x406>
 8008bb2:	4807      	ldr	r0, [pc, #28]	; (8008bd0 <_scanf_float+0x418>)
 8008bb4:	f000 fa3e 	bl	8009034 <nanf>
 8008bb8:	f8c8 0000 	str.w	r0, [r8]
 8008bbc:	e7cf      	b.n	8008b5e <_scanf_float+0x3a6>
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	4639      	mov	r1, r7
 8008bc2:	f7f7 ff8b 	bl	8000adc <__aeabi_d2f>
 8008bc6:	e7f7      	b.n	8008bb8 <_scanf_float+0x400>
 8008bc8:	2500      	movs	r5, #0
 8008bca:	e638      	b.n	800883e <_scanf_float+0x86>
 8008bcc:	0800db7f 	.word	0x0800db7f
 8008bd0:	0800dc30 	.word	0x0800dc30

08008bd4 <std>:
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	b510      	push	{r4, lr}
 8008bd8:	4604      	mov	r4, r0
 8008bda:	e9c0 3300 	strd	r3, r3, [r0]
 8008bde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008be2:	6083      	str	r3, [r0, #8]
 8008be4:	8181      	strh	r1, [r0, #12]
 8008be6:	6643      	str	r3, [r0, #100]	; 0x64
 8008be8:	81c2      	strh	r2, [r0, #14]
 8008bea:	6183      	str	r3, [r0, #24]
 8008bec:	4619      	mov	r1, r3
 8008bee:	2208      	movs	r2, #8
 8008bf0:	305c      	adds	r0, #92	; 0x5c
 8008bf2:	f000 f935 	bl	8008e60 <memset>
 8008bf6:	4b0d      	ldr	r3, [pc, #52]	; (8008c2c <std+0x58>)
 8008bf8:	6224      	str	r4, [r4, #32]
 8008bfa:	6263      	str	r3, [r4, #36]	; 0x24
 8008bfc:	4b0c      	ldr	r3, [pc, #48]	; (8008c30 <std+0x5c>)
 8008bfe:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c00:	4b0c      	ldr	r3, [pc, #48]	; (8008c34 <std+0x60>)
 8008c02:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c04:	4b0c      	ldr	r3, [pc, #48]	; (8008c38 <std+0x64>)
 8008c06:	6323      	str	r3, [r4, #48]	; 0x30
 8008c08:	4b0c      	ldr	r3, [pc, #48]	; (8008c3c <std+0x68>)
 8008c0a:	429c      	cmp	r4, r3
 8008c0c:	d006      	beq.n	8008c1c <std+0x48>
 8008c0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008c12:	4294      	cmp	r4, r2
 8008c14:	d002      	beq.n	8008c1c <std+0x48>
 8008c16:	33d0      	adds	r3, #208	; 0xd0
 8008c18:	429c      	cmp	r4, r3
 8008c1a:	d105      	bne.n	8008c28 <std+0x54>
 8008c1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c24:	f000 b9f4 	b.w	8009010 <__retarget_lock_init_recursive>
 8008c28:	bd10      	pop	{r4, pc}
 8008c2a:	bf00      	nop
 8008c2c:	08008d99 	.word	0x08008d99
 8008c30:	08008dbb 	.word	0x08008dbb
 8008c34:	08008df3 	.word	0x08008df3
 8008c38:	08008e17 	.word	0x08008e17
 8008c3c:	20000418 	.word	0x20000418

08008c40 <stdio_exit_handler>:
 8008c40:	4a02      	ldr	r2, [pc, #8]	; (8008c4c <stdio_exit_handler+0xc>)
 8008c42:	4903      	ldr	r1, [pc, #12]	; (8008c50 <stdio_exit_handler+0x10>)
 8008c44:	4803      	ldr	r0, [pc, #12]	; (8008c54 <stdio_exit_handler+0x14>)
 8008c46:	f000 b869 	b.w	8008d1c <_fwalk_sglue>
 8008c4a:	bf00      	nop
 8008c4c:	20000018 	.word	0x20000018
 8008c50:	0800b879 	.word	0x0800b879
 8008c54:	20000024 	.word	0x20000024

08008c58 <cleanup_stdio>:
 8008c58:	6841      	ldr	r1, [r0, #4]
 8008c5a:	4b0c      	ldr	r3, [pc, #48]	; (8008c8c <cleanup_stdio+0x34>)
 8008c5c:	b510      	push	{r4, lr}
 8008c5e:	4299      	cmp	r1, r3
 8008c60:	4604      	mov	r4, r0
 8008c62:	d001      	beq.n	8008c68 <cleanup_stdio+0x10>
 8008c64:	f002 fe08 	bl	800b878 <_fflush_r>
 8008c68:	68a1      	ldr	r1, [r4, #8]
 8008c6a:	4b09      	ldr	r3, [pc, #36]	; (8008c90 <cleanup_stdio+0x38>)
 8008c6c:	4299      	cmp	r1, r3
 8008c6e:	d002      	beq.n	8008c76 <cleanup_stdio+0x1e>
 8008c70:	4620      	mov	r0, r4
 8008c72:	f002 fe01 	bl	800b878 <_fflush_r>
 8008c76:	68e1      	ldr	r1, [r4, #12]
 8008c78:	4b06      	ldr	r3, [pc, #24]	; (8008c94 <cleanup_stdio+0x3c>)
 8008c7a:	4299      	cmp	r1, r3
 8008c7c:	d004      	beq.n	8008c88 <cleanup_stdio+0x30>
 8008c7e:	4620      	mov	r0, r4
 8008c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c84:	f002 bdf8 	b.w	800b878 <_fflush_r>
 8008c88:	bd10      	pop	{r4, pc}
 8008c8a:	bf00      	nop
 8008c8c:	20000418 	.word	0x20000418
 8008c90:	20000480 	.word	0x20000480
 8008c94:	200004e8 	.word	0x200004e8

08008c98 <global_stdio_init.part.0>:
 8008c98:	b510      	push	{r4, lr}
 8008c9a:	4b0b      	ldr	r3, [pc, #44]	; (8008cc8 <global_stdio_init.part.0+0x30>)
 8008c9c:	4c0b      	ldr	r4, [pc, #44]	; (8008ccc <global_stdio_init.part.0+0x34>)
 8008c9e:	4a0c      	ldr	r2, [pc, #48]	; (8008cd0 <global_stdio_init.part.0+0x38>)
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	2104      	movs	r1, #4
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f7ff ff94 	bl	8008bd4 <std>
 8008cac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	2109      	movs	r1, #9
 8008cb4:	f7ff ff8e 	bl	8008bd4 <std>
 8008cb8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008cbc:	2202      	movs	r2, #2
 8008cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cc2:	2112      	movs	r1, #18
 8008cc4:	f7ff bf86 	b.w	8008bd4 <std>
 8008cc8:	20000550 	.word	0x20000550
 8008ccc:	20000418 	.word	0x20000418
 8008cd0:	08008c41 	.word	0x08008c41

08008cd4 <__sfp_lock_acquire>:
 8008cd4:	4801      	ldr	r0, [pc, #4]	; (8008cdc <__sfp_lock_acquire+0x8>)
 8008cd6:	f000 b99c 	b.w	8009012 <__retarget_lock_acquire_recursive>
 8008cda:	bf00      	nop
 8008cdc:	20000559 	.word	0x20000559

08008ce0 <__sfp_lock_release>:
 8008ce0:	4801      	ldr	r0, [pc, #4]	; (8008ce8 <__sfp_lock_release+0x8>)
 8008ce2:	f000 b997 	b.w	8009014 <__retarget_lock_release_recursive>
 8008ce6:	bf00      	nop
 8008ce8:	20000559 	.word	0x20000559

08008cec <__sinit>:
 8008cec:	b510      	push	{r4, lr}
 8008cee:	4604      	mov	r4, r0
 8008cf0:	f7ff fff0 	bl	8008cd4 <__sfp_lock_acquire>
 8008cf4:	6a23      	ldr	r3, [r4, #32]
 8008cf6:	b11b      	cbz	r3, 8008d00 <__sinit+0x14>
 8008cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cfc:	f7ff bff0 	b.w	8008ce0 <__sfp_lock_release>
 8008d00:	4b04      	ldr	r3, [pc, #16]	; (8008d14 <__sinit+0x28>)
 8008d02:	6223      	str	r3, [r4, #32]
 8008d04:	4b04      	ldr	r3, [pc, #16]	; (8008d18 <__sinit+0x2c>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1f5      	bne.n	8008cf8 <__sinit+0xc>
 8008d0c:	f7ff ffc4 	bl	8008c98 <global_stdio_init.part.0>
 8008d10:	e7f2      	b.n	8008cf8 <__sinit+0xc>
 8008d12:	bf00      	nop
 8008d14:	08008c59 	.word	0x08008c59
 8008d18:	20000550 	.word	0x20000550

08008d1c <_fwalk_sglue>:
 8008d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d20:	4607      	mov	r7, r0
 8008d22:	4688      	mov	r8, r1
 8008d24:	4614      	mov	r4, r2
 8008d26:	2600      	movs	r6, #0
 8008d28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d2c:	f1b9 0901 	subs.w	r9, r9, #1
 8008d30:	d505      	bpl.n	8008d3e <_fwalk_sglue+0x22>
 8008d32:	6824      	ldr	r4, [r4, #0]
 8008d34:	2c00      	cmp	r4, #0
 8008d36:	d1f7      	bne.n	8008d28 <_fwalk_sglue+0xc>
 8008d38:	4630      	mov	r0, r6
 8008d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d3e:	89ab      	ldrh	r3, [r5, #12]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d907      	bls.n	8008d54 <_fwalk_sglue+0x38>
 8008d44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	d003      	beq.n	8008d54 <_fwalk_sglue+0x38>
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	4638      	mov	r0, r7
 8008d50:	47c0      	blx	r8
 8008d52:	4306      	orrs	r6, r0
 8008d54:	3568      	adds	r5, #104	; 0x68
 8008d56:	e7e9      	b.n	8008d2c <_fwalk_sglue+0x10>

08008d58 <siprintf>:
 8008d58:	b40e      	push	{r1, r2, r3}
 8008d5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d5e:	b500      	push	{lr}
 8008d60:	b09c      	sub	sp, #112	; 0x70
 8008d62:	ab1d      	add	r3, sp, #116	; 0x74
 8008d64:	9002      	str	r0, [sp, #8]
 8008d66:	9006      	str	r0, [sp, #24]
 8008d68:	9107      	str	r1, [sp, #28]
 8008d6a:	9104      	str	r1, [sp, #16]
 8008d6c:	4808      	ldr	r0, [pc, #32]	; (8008d90 <siprintf+0x38>)
 8008d6e:	4909      	ldr	r1, [pc, #36]	; (8008d94 <siprintf+0x3c>)
 8008d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d74:	9105      	str	r1, [sp, #20]
 8008d76:	6800      	ldr	r0, [r0, #0]
 8008d78:	a902      	add	r1, sp, #8
 8008d7a:	9301      	str	r3, [sp, #4]
 8008d7c:	f002 fbfc 	bl	800b578 <_svfiprintf_r>
 8008d80:	2200      	movs	r2, #0
 8008d82:	9b02      	ldr	r3, [sp, #8]
 8008d84:	701a      	strb	r2, [r3, #0]
 8008d86:	b01c      	add	sp, #112	; 0x70
 8008d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d8c:	b003      	add	sp, #12
 8008d8e:	4770      	bx	lr
 8008d90:	20000070 	.word	0x20000070
 8008d94:	ffff0208 	.word	0xffff0208

08008d98 <__sread>:
 8008d98:	b510      	push	{r4, lr}
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008da0:	f000 f8e8 	bl	8008f74 <_read_r>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	bfab      	itete	ge
 8008da8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008daa:	89a3      	ldrhlt	r3, [r4, #12]
 8008dac:	181b      	addge	r3, r3, r0
 8008dae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008db2:	bfac      	ite	ge
 8008db4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008db6:	81a3      	strhlt	r3, [r4, #12]
 8008db8:	bd10      	pop	{r4, pc}

08008dba <__swrite>:
 8008dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dbe:	461f      	mov	r7, r3
 8008dc0:	898b      	ldrh	r3, [r1, #12]
 8008dc2:	4605      	mov	r5, r0
 8008dc4:	05db      	lsls	r3, r3, #23
 8008dc6:	460c      	mov	r4, r1
 8008dc8:	4616      	mov	r6, r2
 8008dca:	d505      	bpl.n	8008dd8 <__swrite+0x1e>
 8008dcc:	2302      	movs	r3, #2
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dd4:	f000 f8bc 	bl	8008f50 <_lseek_r>
 8008dd8:	89a3      	ldrh	r3, [r4, #12]
 8008dda:	4632      	mov	r2, r6
 8008ddc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008de0:	81a3      	strh	r3, [r4, #12]
 8008de2:	4628      	mov	r0, r5
 8008de4:	463b      	mov	r3, r7
 8008de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dee:	f000 b8d3 	b.w	8008f98 <_write_r>

08008df2 <__sseek>:
 8008df2:	b510      	push	{r4, lr}
 8008df4:	460c      	mov	r4, r1
 8008df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dfa:	f000 f8a9 	bl	8008f50 <_lseek_r>
 8008dfe:	1c43      	adds	r3, r0, #1
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	bf15      	itete	ne
 8008e04:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e0e:	81a3      	strheq	r3, [r4, #12]
 8008e10:	bf18      	it	ne
 8008e12:	81a3      	strhne	r3, [r4, #12]
 8008e14:	bd10      	pop	{r4, pc}

08008e16 <__sclose>:
 8008e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e1a:	f000 b889 	b.w	8008f30 <_close_r>
	...

08008e20 <_vsiprintf_r>:
 8008e20:	b500      	push	{lr}
 8008e22:	b09b      	sub	sp, #108	; 0x6c
 8008e24:	9100      	str	r1, [sp, #0]
 8008e26:	9104      	str	r1, [sp, #16]
 8008e28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e2c:	9105      	str	r1, [sp, #20]
 8008e2e:	9102      	str	r1, [sp, #8]
 8008e30:	4905      	ldr	r1, [pc, #20]	; (8008e48 <_vsiprintf_r+0x28>)
 8008e32:	9103      	str	r1, [sp, #12]
 8008e34:	4669      	mov	r1, sp
 8008e36:	f002 fb9f 	bl	800b578 <_svfiprintf_r>
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	9b00      	ldr	r3, [sp, #0]
 8008e3e:	701a      	strb	r2, [r3, #0]
 8008e40:	b01b      	add	sp, #108	; 0x6c
 8008e42:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e46:	bf00      	nop
 8008e48:	ffff0208 	.word	0xffff0208

08008e4c <vsiprintf>:
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	460a      	mov	r2, r1
 8008e50:	4601      	mov	r1, r0
 8008e52:	4802      	ldr	r0, [pc, #8]	; (8008e5c <vsiprintf+0x10>)
 8008e54:	6800      	ldr	r0, [r0, #0]
 8008e56:	f7ff bfe3 	b.w	8008e20 <_vsiprintf_r>
 8008e5a:	bf00      	nop
 8008e5c:	20000070 	.word	0x20000070

08008e60 <memset>:
 8008e60:	4603      	mov	r3, r0
 8008e62:	4402      	add	r2, r0
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d100      	bne.n	8008e6a <memset+0xa>
 8008e68:	4770      	bx	lr
 8008e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e6e:	e7f9      	b.n	8008e64 <memset+0x4>

08008e70 <strtok>:
 8008e70:	4b16      	ldr	r3, [pc, #88]	; (8008ecc <strtok+0x5c>)
 8008e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e76:	681f      	ldr	r7, [r3, #0]
 8008e78:	4605      	mov	r5, r0
 8008e7a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8008e7c:	460e      	mov	r6, r1
 8008e7e:	b9ec      	cbnz	r4, 8008ebc <strtok+0x4c>
 8008e80:	2050      	movs	r0, #80	; 0x50
 8008e82:	f000 ffb1 	bl	8009de8 <malloc>
 8008e86:	4602      	mov	r2, r0
 8008e88:	6478      	str	r0, [r7, #68]	; 0x44
 8008e8a:	b920      	cbnz	r0, 8008e96 <strtok+0x26>
 8008e8c:	215b      	movs	r1, #91	; 0x5b
 8008e8e:	4b10      	ldr	r3, [pc, #64]	; (8008ed0 <strtok+0x60>)
 8008e90:	4810      	ldr	r0, [pc, #64]	; (8008ed4 <strtok+0x64>)
 8008e92:	f000 f8d3 	bl	800903c <__assert_func>
 8008e96:	e9c0 4400 	strd	r4, r4, [r0]
 8008e9a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008e9e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008ea2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008ea6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008eaa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008eae:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008eb2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008eb6:	6184      	str	r4, [r0, #24]
 8008eb8:	7704      	strb	r4, [r0, #28]
 8008eba:	6244      	str	r4, [r0, #36]	; 0x24
 8008ebc:	4631      	mov	r1, r6
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec8:	f000 b806 	b.w	8008ed8 <__strtok_r>
 8008ecc:	20000070 	.word	0x20000070
 8008ed0:	0800db84 	.word	0x0800db84
 8008ed4:	0800db9b 	.word	0x0800db9b

08008ed8 <__strtok_r>:
 8008ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eda:	b908      	cbnz	r0, 8008ee0 <__strtok_r+0x8>
 8008edc:	6810      	ldr	r0, [r2, #0]
 8008ede:	b188      	cbz	r0, 8008f04 <__strtok_r+0x2c>
 8008ee0:	4604      	mov	r4, r0
 8008ee2:	460f      	mov	r7, r1
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008eea:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008eee:	b91e      	cbnz	r6, 8008ef8 <__strtok_r+0x20>
 8008ef0:	b965      	cbnz	r5, 8008f0c <__strtok_r+0x34>
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	6015      	str	r5, [r2, #0]
 8008ef6:	e005      	b.n	8008f04 <__strtok_r+0x2c>
 8008ef8:	42b5      	cmp	r5, r6
 8008efa:	d1f6      	bne.n	8008eea <__strtok_r+0x12>
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d1f0      	bne.n	8008ee2 <__strtok_r+0xa>
 8008f00:	6014      	str	r4, [r2, #0]
 8008f02:	7003      	strb	r3, [r0, #0]
 8008f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f06:	461c      	mov	r4, r3
 8008f08:	e00c      	b.n	8008f24 <__strtok_r+0x4c>
 8008f0a:	b915      	cbnz	r5, 8008f12 <__strtok_r+0x3a>
 8008f0c:	460e      	mov	r6, r1
 8008f0e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008f12:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008f16:	42ab      	cmp	r3, r5
 8008f18:	d1f7      	bne.n	8008f0a <__strtok_r+0x32>
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d0f3      	beq.n	8008f06 <__strtok_r+0x2e>
 8008f1e:	2300      	movs	r3, #0
 8008f20:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008f24:	6014      	str	r4, [r2, #0]
 8008f26:	e7ed      	b.n	8008f04 <__strtok_r+0x2c>

08008f28 <_localeconv_r>:
 8008f28:	4800      	ldr	r0, [pc, #0]	; (8008f2c <_localeconv_r+0x4>)
 8008f2a:	4770      	bx	lr
 8008f2c:	20000164 	.word	0x20000164

08008f30 <_close_r>:
 8008f30:	b538      	push	{r3, r4, r5, lr}
 8008f32:	2300      	movs	r3, #0
 8008f34:	4d05      	ldr	r5, [pc, #20]	; (8008f4c <_close_r+0x1c>)
 8008f36:	4604      	mov	r4, r0
 8008f38:	4608      	mov	r0, r1
 8008f3a:	602b      	str	r3, [r5, #0]
 8008f3c:	f7fa f808 	bl	8002f50 <_close>
 8008f40:	1c43      	adds	r3, r0, #1
 8008f42:	d102      	bne.n	8008f4a <_close_r+0x1a>
 8008f44:	682b      	ldr	r3, [r5, #0]
 8008f46:	b103      	cbz	r3, 8008f4a <_close_r+0x1a>
 8008f48:	6023      	str	r3, [r4, #0]
 8008f4a:	bd38      	pop	{r3, r4, r5, pc}
 8008f4c:	20000554 	.word	0x20000554

08008f50 <_lseek_r>:
 8008f50:	b538      	push	{r3, r4, r5, lr}
 8008f52:	4604      	mov	r4, r0
 8008f54:	4608      	mov	r0, r1
 8008f56:	4611      	mov	r1, r2
 8008f58:	2200      	movs	r2, #0
 8008f5a:	4d05      	ldr	r5, [pc, #20]	; (8008f70 <_lseek_r+0x20>)
 8008f5c:	602a      	str	r2, [r5, #0]
 8008f5e:	461a      	mov	r2, r3
 8008f60:	f7fa f81a 	bl	8002f98 <_lseek>
 8008f64:	1c43      	adds	r3, r0, #1
 8008f66:	d102      	bne.n	8008f6e <_lseek_r+0x1e>
 8008f68:	682b      	ldr	r3, [r5, #0]
 8008f6a:	b103      	cbz	r3, 8008f6e <_lseek_r+0x1e>
 8008f6c:	6023      	str	r3, [r4, #0]
 8008f6e:	bd38      	pop	{r3, r4, r5, pc}
 8008f70:	20000554 	.word	0x20000554

08008f74 <_read_r>:
 8008f74:	b538      	push	{r3, r4, r5, lr}
 8008f76:	4604      	mov	r4, r0
 8008f78:	4608      	mov	r0, r1
 8008f7a:	4611      	mov	r1, r2
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	4d05      	ldr	r5, [pc, #20]	; (8008f94 <_read_r+0x20>)
 8008f80:	602a      	str	r2, [r5, #0]
 8008f82:	461a      	mov	r2, r3
 8008f84:	f7f9 ffab 	bl	8002ede <_read>
 8008f88:	1c43      	adds	r3, r0, #1
 8008f8a:	d102      	bne.n	8008f92 <_read_r+0x1e>
 8008f8c:	682b      	ldr	r3, [r5, #0]
 8008f8e:	b103      	cbz	r3, 8008f92 <_read_r+0x1e>
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	bd38      	pop	{r3, r4, r5, pc}
 8008f94:	20000554 	.word	0x20000554

08008f98 <_write_r>:
 8008f98:	b538      	push	{r3, r4, r5, lr}
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	4608      	mov	r0, r1
 8008f9e:	4611      	mov	r1, r2
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	4d05      	ldr	r5, [pc, #20]	; (8008fb8 <_write_r+0x20>)
 8008fa4:	602a      	str	r2, [r5, #0]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	f7f9 ffb6 	bl	8002f18 <_write>
 8008fac:	1c43      	adds	r3, r0, #1
 8008fae:	d102      	bne.n	8008fb6 <_write_r+0x1e>
 8008fb0:	682b      	ldr	r3, [r5, #0]
 8008fb2:	b103      	cbz	r3, 8008fb6 <_write_r+0x1e>
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	bd38      	pop	{r3, r4, r5, pc}
 8008fb8:	20000554 	.word	0x20000554

08008fbc <__errno>:
 8008fbc:	4b01      	ldr	r3, [pc, #4]	; (8008fc4 <__errno+0x8>)
 8008fbe:	6818      	ldr	r0, [r3, #0]
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	20000070 	.word	0x20000070

08008fc8 <__libc_init_array>:
 8008fc8:	b570      	push	{r4, r5, r6, lr}
 8008fca:	2600      	movs	r6, #0
 8008fcc:	4d0c      	ldr	r5, [pc, #48]	; (8009000 <__libc_init_array+0x38>)
 8008fce:	4c0d      	ldr	r4, [pc, #52]	; (8009004 <__libc_init_array+0x3c>)
 8008fd0:	1b64      	subs	r4, r4, r5
 8008fd2:	10a4      	asrs	r4, r4, #2
 8008fd4:	42a6      	cmp	r6, r4
 8008fd6:	d109      	bne.n	8008fec <__libc_init_array+0x24>
 8008fd8:	f004 fc30 	bl	800d83c <_init>
 8008fdc:	2600      	movs	r6, #0
 8008fde:	4d0a      	ldr	r5, [pc, #40]	; (8009008 <__libc_init_array+0x40>)
 8008fe0:	4c0a      	ldr	r4, [pc, #40]	; (800900c <__libc_init_array+0x44>)
 8008fe2:	1b64      	subs	r4, r4, r5
 8008fe4:	10a4      	asrs	r4, r4, #2
 8008fe6:	42a6      	cmp	r6, r4
 8008fe8:	d105      	bne.n	8008ff6 <__libc_init_array+0x2e>
 8008fea:	bd70      	pop	{r4, r5, r6, pc}
 8008fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ff0:	4798      	blx	r3
 8008ff2:	3601      	adds	r6, #1
 8008ff4:	e7ee      	b.n	8008fd4 <__libc_init_array+0xc>
 8008ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ffa:	4798      	blx	r3
 8008ffc:	3601      	adds	r6, #1
 8008ffe:	e7f2      	b.n	8008fe6 <__libc_init_array+0x1e>
 8009000:	0800df00 	.word	0x0800df00
 8009004:	0800df00 	.word	0x0800df00
 8009008:	0800df00 	.word	0x0800df00
 800900c:	0800df04 	.word	0x0800df04

08009010 <__retarget_lock_init_recursive>:
 8009010:	4770      	bx	lr

08009012 <__retarget_lock_acquire_recursive>:
 8009012:	4770      	bx	lr

08009014 <__retarget_lock_release_recursive>:
 8009014:	4770      	bx	lr

08009016 <memchr>:
 8009016:	4603      	mov	r3, r0
 8009018:	b510      	push	{r4, lr}
 800901a:	b2c9      	uxtb	r1, r1
 800901c:	4402      	add	r2, r0
 800901e:	4293      	cmp	r3, r2
 8009020:	4618      	mov	r0, r3
 8009022:	d101      	bne.n	8009028 <memchr+0x12>
 8009024:	2000      	movs	r0, #0
 8009026:	e003      	b.n	8009030 <memchr+0x1a>
 8009028:	7804      	ldrb	r4, [r0, #0]
 800902a:	3301      	adds	r3, #1
 800902c:	428c      	cmp	r4, r1
 800902e:	d1f6      	bne.n	800901e <memchr+0x8>
 8009030:	bd10      	pop	{r4, pc}
	...

08009034 <nanf>:
 8009034:	4800      	ldr	r0, [pc, #0]	; (8009038 <nanf+0x4>)
 8009036:	4770      	bx	lr
 8009038:	7fc00000 	.word	0x7fc00000

0800903c <__assert_func>:
 800903c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800903e:	4614      	mov	r4, r2
 8009040:	461a      	mov	r2, r3
 8009042:	4b09      	ldr	r3, [pc, #36]	; (8009068 <__assert_func+0x2c>)
 8009044:	4605      	mov	r5, r0
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68d8      	ldr	r0, [r3, #12]
 800904a:	b14c      	cbz	r4, 8009060 <__assert_func+0x24>
 800904c:	4b07      	ldr	r3, [pc, #28]	; (800906c <__assert_func+0x30>)
 800904e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009052:	9100      	str	r1, [sp, #0]
 8009054:	462b      	mov	r3, r5
 8009056:	4906      	ldr	r1, [pc, #24]	; (8009070 <__assert_func+0x34>)
 8009058:	f002 fc36 	bl	800b8c8 <fiprintf>
 800905c:	f002 fc96 	bl	800b98c <abort>
 8009060:	4b04      	ldr	r3, [pc, #16]	; (8009074 <__assert_func+0x38>)
 8009062:	461c      	mov	r4, r3
 8009064:	e7f3      	b.n	800904e <__assert_func+0x12>
 8009066:	bf00      	nop
 8009068:	20000070 	.word	0x20000070
 800906c:	0800dbf5 	.word	0x0800dbf5
 8009070:	0800dc02 	.word	0x0800dc02
 8009074:	0800dc30 	.word	0x0800dc30

08009078 <quorem>:
 8009078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800907c:	6903      	ldr	r3, [r0, #16]
 800907e:	690c      	ldr	r4, [r1, #16]
 8009080:	4607      	mov	r7, r0
 8009082:	42a3      	cmp	r3, r4
 8009084:	db7f      	blt.n	8009186 <quorem+0x10e>
 8009086:	3c01      	subs	r4, #1
 8009088:	f100 0514 	add.w	r5, r0, #20
 800908c:	f101 0814 	add.w	r8, r1, #20
 8009090:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009094:	9301      	str	r3, [sp, #4]
 8009096:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800909a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800909e:	3301      	adds	r3, #1
 80090a0:	429a      	cmp	r2, r3
 80090a2:	fbb2 f6f3 	udiv	r6, r2, r3
 80090a6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80090aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80090ae:	d331      	bcc.n	8009114 <quorem+0x9c>
 80090b0:	f04f 0e00 	mov.w	lr, #0
 80090b4:	4640      	mov	r0, r8
 80090b6:	46ac      	mov	ip, r5
 80090b8:	46f2      	mov	sl, lr
 80090ba:	f850 2b04 	ldr.w	r2, [r0], #4
 80090be:	b293      	uxth	r3, r2
 80090c0:	fb06 e303 	mla	r3, r6, r3, lr
 80090c4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80090c8:	0c1a      	lsrs	r2, r3, #16
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	fb06 220e 	mla	r2, r6, lr, r2
 80090d0:	ebaa 0303 	sub.w	r3, sl, r3
 80090d4:	f8dc a000 	ldr.w	sl, [ip]
 80090d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80090dc:	fa1f fa8a 	uxth.w	sl, sl
 80090e0:	4453      	add	r3, sl
 80090e2:	f8dc a000 	ldr.w	sl, [ip]
 80090e6:	b292      	uxth	r2, r2
 80090e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80090ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090f6:	4581      	cmp	r9, r0
 80090f8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80090fc:	f84c 3b04 	str.w	r3, [ip], #4
 8009100:	d2db      	bcs.n	80090ba <quorem+0x42>
 8009102:	f855 300b 	ldr.w	r3, [r5, fp]
 8009106:	b92b      	cbnz	r3, 8009114 <quorem+0x9c>
 8009108:	9b01      	ldr	r3, [sp, #4]
 800910a:	3b04      	subs	r3, #4
 800910c:	429d      	cmp	r5, r3
 800910e:	461a      	mov	r2, r3
 8009110:	d32d      	bcc.n	800916e <quorem+0xf6>
 8009112:	613c      	str	r4, [r7, #16]
 8009114:	4638      	mov	r0, r7
 8009116:	f001 f9df 	bl	800a4d8 <__mcmp>
 800911a:	2800      	cmp	r0, #0
 800911c:	db23      	blt.n	8009166 <quorem+0xee>
 800911e:	4629      	mov	r1, r5
 8009120:	2000      	movs	r0, #0
 8009122:	3601      	adds	r6, #1
 8009124:	f858 2b04 	ldr.w	r2, [r8], #4
 8009128:	f8d1 c000 	ldr.w	ip, [r1]
 800912c:	b293      	uxth	r3, r2
 800912e:	1ac3      	subs	r3, r0, r3
 8009130:	0c12      	lsrs	r2, r2, #16
 8009132:	fa1f f08c 	uxth.w	r0, ip
 8009136:	4403      	add	r3, r0
 8009138:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800913c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009140:	b29b      	uxth	r3, r3
 8009142:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009146:	45c1      	cmp	r9, r8
 8009148:	ea4f 4022 	mov.w	r0, r2, asr #16
 800914c:	f841 3b04 	str.w	r3, [r1], #4
 8009150:	d2e8      	bcs.n	8009124 <quorem+0xac>
 8009152:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009156:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800915a:	b922      	cbnz	r2, 8009166 <quorem+0xee>
 800915c:	3b04      	subs	r3, #4
 800915e:	429d      	cmp	r5, r3
 8009160:	461a      	mov	r2, r3
 8009162:	d30a      	bcc.n	800917a <quorem+0x102>
 8009164:	613c      	str	r4, [r7, #16]
 8009166:	4630      	mov	r0, r6
 8009168:	b003      	add	sp, #12
 800916a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916e:	6812      	ldr	r2, [r2, #0]
 8009170:	3b04      	subs	r3, #4
 8009172:	2a00      	cmp	r2, #0
 8009174:	d1cd      	bne.n	8009112 <quorem+0x9a>
 8009176:	3c01      	subs	r4, #1
 8009178:	e7c8      	b.n	800910c <quorem+0x94>
 800917a:	6812      	ldr	r2, [r2, #0]
 800917c:	3b04      	subs	r3, #4
 800917e:	2a00      	cmp	r2, #0
 8009180:	d1f0      	bne.n	8009164 <quorem+0xec>
 8009182:	3c01      	subs	r4, #1
 8009184:	e7eb      	b.n	800915e <quorem+0xe6>
 8009186:	2000      	movs	r0, #0
 8009188:	e7ee      	b.n	8009168 <quorem+0xf0>
 800918a:	0000      	movs	r0, r0
 800918c:	0000      	movs	r0, r0
	...

08009190 <_dtoa_r>:
 8009190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009194:	4616      	mov	r6, r2
 8009196:	461f      	mov	r7, r3
 8009198:	69c4      	ldr	r4, [r0, #28]
 800919a:	b099      	sub	sp, #100	; 0x64
 800919c:	4605      	mov	r5, r0
 800919e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80091a2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80091a6:	b974      	cbnz	r4, 80091c6 <_dtoa_r+0x36>
 80091a8:	2010      	movs	r0, #16
 80091aa:	f000 fe1d 	bl	8009de8 <malloc>
 80091ae:	4602      	mov	r2, r0
 80091b0:	61e8      	str	r0, [r5, #28]
 80091b2:	b920      	cbnz	r0, 80091be <_dtoa_r+0x2e>
 80091b4:	21ef      	movs	r1, #239	; 0xef
 80091b6:	4bac      	ldr	r3, [pc, #688]	; (8009468 <_dtoa_r+0x2d8>)
 80091b8:	48ac      	ldr	r0, [pc, #688]	; (800946c <_dtoa_r+0x2dc>)
 80091ba:	f7ff ff3f 	bl	800903c <__assert_func>
 80091be:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091c2:	6004      	str	r4, [r0, #0]
 80091c4:	60c4      	str	r4, [r0, #12]
 80091c6:	69eb      	ldr	r3, [r5, #28]
 80091c8:	6819      	ldr	r1, [r3, #0]
 80091ca:	b151      	cbz	r1, 80091e2 <_dtoa_r+0x52>
 80091cc:	685a      	ldr	r2, [r3, #4]
 80091ce:	2301      	movs	r3, #1
 80091d0:	4093      	lsls	r3, r2
 80091d2:	604a      	str	r2, [r1, #4]
 80091d4:	608b      	str	r3, [r1, #8]
 80091d6:	4628      	mov	r0, r5
 80091d8:	f000 fefa 	bl	8009fd0 <_Bfree>
 80091dc:	2200      	movs	r2, #0
 80091de:	69eb      	ldr	r3, [r5, #28]
 80091e0:	601a      	str	r2, [r3, #0]
 80091e2:	1e3b      	subs	r3, r7, #0
 80091e4:	bfaf      	iteee	ge
 80091e6:	2300      	movge	r3, #0
 80091e8:	2201      	movlt	r2, #1
 80091ea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80091ee:	9305      	strlt	r3, [sp, #20]
 80091f0:	bfa8      	it	ge
 80091f2:	f8c8 3000 	strge.w	r3, [r8]
 80091f6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80091fa:	4b9d      	ldr	r3, [pc, #628]	; (8009470 <_dtoa_r+0x2e0>)
 80091fc:	bfb8      	it	lt
 80091fe:	f8c8 2000 	strlt.w	r2, [r8]
 8009202:	ea33 0309 	bics.w	r3, r3, r9
 8009206:	d119      	bne.n	800923c <_dtoa_r+0xac>
 8009208:	f242 730f 	movw	r3, #9999	; 0x270f
 800920c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800920e:	6013      	str	r3, [r2, #0]
 8009210:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009214:	4333      	orrs	r3, r6
 8009216:	f000 8589 	beq.w	8009d2c <_dtoa_r+0xb9c>
 800921a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800921c:	b953      	cbnz	r3, 8009234 <_dtoa_r+0xa4>
 800921e:	4b95      	ldr	r3, [pc, #596]	; (8009474 <_dtoa_r+0x2e4>)
 8009220:	e023      	b.n	800926a <_dtoa_r+0xda>
 8009222:	4b95      	ldr	r3, [pc, #596]	; (8009478 <_dtoa_r+0x2e8>)
 8009224:	9303      	str	r3, [sp, #12]
 8009226:	3308      	adds	r3, #8
 8009228:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800922a:	6013      	str	r3, [r2, #0]
 800922c:	9803      	ldr	r0, [sp, #12]
 800922e:	b019      	add	sp, #100	; 0x64
 8009230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009234:	4b8f      	ldr	r3, [pc, #572]	; (8009474 <_dtoa_r+0x2e4>)
 8009236:	9303      	str	r3, [sp, #12]
 8009238:	3303      	adds	r3, #3
 800923a:	e7f5      	b.n	8009228 <_dtoa_r+0x98>
 800923c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009240:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009244:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009248:	2200      	movs	r2, #0
 800924a:	2300      	movs	r3, #0
 800924c:	f7f7 fbb6 	bl	80009bc <__aeabi_dcmpeq>
 8009250:	4680      	mov	r8, r0
 8009252:	b160      	cbz	r0, 800926e <_dtoa_r+0xde>
 8009254:	2301      	movs	r3, #1
 8009256:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009258:	6013      	str	r3, [r2, #0]
 800925a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800925c:	2b00      	cmp	r3, #0
 800925e:	f000 8562 	beq.w	8009d26 <_dtoa_r+0xb96>
 8009262:	4b86      	ldr	r3, [pc, #536]	; (800947c <_dtoa_r+0x2ec>)
 8009264:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009266:	6013      	str	r3, [r2, #0]
 8009268:	3b01      	subs	r3, #1
 800926a:	9303      	str	r3, [sp, #12]
 800926c:	e7de      	b.n	800922c <_dtoa_r+0x9c>
 800926e:	ab16      	add	r3, sp, #88	; 0x58
 8009270:	9301      	str	r3, [sp, #4]
 8009272:	ab17      	add	r3, sp, #92	; 0x5c
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	4628      	mov	r0, r5
 8009278:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800927c:	f001 fa3c 	bl	800a6f8 <__d2b>
 8009280:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009284:	4682      	mov	sl, r0
 8009286:	2c00      	cmp	r4, #0
 8009288:	d07e      	beq.n	8009388 <_dtoa_r+0x1f8>
 800928a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800928e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009290:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009298:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800929c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80092a0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80092a4:	4619      	mov	r1, r3
 80092a6:	2200      	movs	r2, #0
 80092a8:	4b75      	ldr	r3, [pc, #468]	; (8009480 <_dtoa_r+0x2f0>)
 80092aa:	f7f6 ff67 	bl	800017c <__aeabi_dsub>
 80092ae:	a368      	add	r3, pc, #416	; (adr r3, 8009450 <_dtoa_r+0x2c0>)
 80092b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b4:	f7f7 f91a 	bl	80004ec <__aeabi_dmul>
 80092b8:	a367      	add	r3, pc, #412	; (adr r3, 8009458 <_dtoa_r+0x2c8>)
 80092ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092be:	f7f6 ff5f 	bl	8000180 <__adddf3>
 80092c2:	4606      	mov	r6, r0
 80092c4:	4620      	mov	r0, r4
 80092c6:	460f      	mov	r7, r1
 80092c8:	f7f7 f8a6 	bl	8000418 <__aeabi_i2d>
 80092cc:	a364      	add	r3, pc, #400	; (adr r3, 8009460 <_dtoa_r+0x2d0>)
 80092ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d2:	f7f7 f90b 	bl	80004ec <__aeabi_dmul>
 80092d6:	4602      	mov	r2, r0
 80092d8:	460b      	mov	r3, r1
 80092da:	4630      	mov	r0, r6
 80092dc:	4639      	mov	r1, r7
 80092de:	f7f6 ff4f 	bl	8000180 <__adddf3>
 80092e2:	4606      	mov	r6, r0
 80092e4:	460f      	mov	r7, r1
 80092e6:	f7f7 fbb1 	bl	8000a4c <__aeabi_d2iz>
 80092ea:	2200      	movs	r2, #0
 80092ec:	4683      	mov	fp, r0
 80092ee:	2300      	movs	r3, #0
 80092f0:	4630      	mov	r0, r6
 80092f2:	4639      	mov	r1, r7
 80092f4:	f7f7 fb6c 	bl	80009d0 <__aeabi_dcmplt>
 80092f8:	b148      	cbz	r0, 800930e <_dtoa_r+0x17e>
 80092fa:	4658      	mov	r0, fp
 80092fc:	f7f7 f88c 	bl	8000418 <__aeabi_i2d>
 8009300:	4632      	mov	r2, r6
 8009302:	463b      	mov	r3, r7
 8009304:	f7f7 fb5a 	bl	80009bc <__aeabi_dcmpeq>
 8009308:	b908      	cbnz	r0, 800930e <_dtoa_r+0x17e>
 800930a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800930e:	f1bb 0f16 	cmp.w	fp, #22
 8009312:	d857      	bhi.n	80093c4 <_dtoa_r+0x234>
 8009314:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009318:	4b5a      	ldr	r3, [pc, #360]	; (8009484 <_dtoa_r+0x2f4>)
 800931a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800931e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009322:	f7f7 fb55 	bl	80009d0 <__aeabi_dcmplt>
 8009326:	2800      	cmp	r0, #0
 8009328:	d04e      	beq.n	80093c8 <_dtoa_r+0x238>
 800932a:	2300      	movs	r3, #0
 800932c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009330:	930f      	str	r3, [sp, #60]	; 0x3c
 8009332:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009334:	1b1b      	subs	r3, r3, r4
 8009336:	1e5a      	subs	r2, r3, #1
 8009338:	bf46      	itte	mi
 800933a:	f1c3 0901 	rsbmi	r9, r3, #1
 800933e:	2300      	movmi	r3, #0
 8009340:	f04f 0900 	movpl.w	r9, #0
 8009344:	9209      	str	r2, [sp, #36]	; 0x24
 8009346:	bf48      	it	mi
 8009348:	9309      	strmi	r3, [sp, #36]	; 0x24
 800934a:	f1bb 0f00 	cmp.w	fp, #0
 800934e:	db3d      	blt.n	80093cc <_dtoa_r+0x23c>
 8009350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009352:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009356:	445b      	add	r3, fp
 8009358:	9309      	str	r3, [sp, #36]	; 0x24
 800935a:	2300      	movs	r3, #0
 800935c:	930a      	str	r3, [sp, #40]	; 0x28
 800935e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009360:	2b09      	cmp	r3, #9
 8009362:	d867      	bhi.n	8009434 <_dtoa_r+0x2a4>
 8009364:	2b05      	cmp	r3, #5
 8009366:	bfc4      	itt	gt
 8009368:	3b04      	subgt	r3, #4
 800936a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800936c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800936e:	bfc8      	it	gt
 8009370:	2400      	movgt	r4, #0
 8009372:	f1a3 0302 	sub.w	r3, r3, #2
 8009376:	bfd8      	it	le
 8009378:	2401      	movle	r4, #1
 800937a:	2b03      	cmp	r3, #3
 800937c:	f200 8086 	bhi.w	800948c <_dtoa_r+0x2fc>
 8009380:	e8df f003 	tbb	[pc, r3]
 8009384:	5637392c 	.word	0x5637392c
 8009388:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800938c:	441c      	add	r4, r3
 800938e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009392:	2b20      	cmp	r3, #32
 8009394:	bfc1      	itttt	gt
 8009396:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800939a:	fa09 f903 	lslgt.w	r9, r9, r3
 800939e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80093a2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80093a6:	bfd6      	itet	le
 80093a8:	f1c3 0320 	rsble	r3, r3, #32
 80093ac:	ea49 0003 	orrgt.w	r0, r9, r3
 80093b0:	fa06 f003 	lslle.w	r0, r6, r3
 80093b4:	f7f7 f820 	bl	80003f8 <__aeabi_ui2d>
 80093b8:	2201      	movs	r2, #1
 80093ba:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80093be:	3c01      	subs	r4, #1
 80093c0:	9213      	str	r2, [sp, #76]	; 0x4c
 80093c2:	e76f      	b.n	80092a4 <_dtoa_r+0x114>
 80093c4:	2301      	movs	r3, #1
 80093c6:	e7b3      	b.n	8009330 <_dtoa_r+0x1a0>
 80093c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80093ca:	e7b2      	b.n	8009332 <_dtoa_r+0x1a2>
 80093cc:	f1cb 0300 	rsb	r3, fp, #0
 80093d0:	930a      	str	r3, [sp, #40]	; 0x28
 80093d2:	2300      	movs	r3, #0
 80093d4:	eba9 090b 	sub.w	r9, r9, fp
 80093d8:	930e      	str	r3, [sp, #56]	; 0x38
 80093da:	e7c0      	b.n	800935e <_dtoa_r+0x1ce>
 80093dc:	2300      	movs	r3, #0
 80093de:	930b      	str	r3, [sp, #44]	; 0x2c
 80093e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	dc55      	bgt.n	8009492 <_dtoa_r+0x302>
 80093e6:	2301      	movs	r3, #1
 80093e8:	461a      	mov	r2, r3
 80093ea:	9306      	str	r3, [sp, #24]
 80093ec:	9308      	str	r3, [sp, #32]
 80093ee:	9223      	str	r2, [sp, #140]	; 0x8c
 80093f0:	e00b      	b.n	800940a <_dtoa_r+0x27a>
 80093f2:	2301      	movs	r3, #1
 80093f4:	e7f3      	b.n	80093de <_dtoa_r+0x24e>
 80093f6:	2300      	movs	r3, #0
 80093f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80093fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80093fc:	445b      	add	r3, fp
 80093fe:	9306      	str	r3, [sp, #24]
 8009400:	3301      	adds	r3, #1
 8009402:	2b01      	cmp	r3, #1
 8009404:	9308      	str	r3, [sp, #32]
 8009406:	bfb8      	it	lt
 8009408:	2301      	movlt	r3, #1
 800940a:	2100      	movs	r1, #0
 800940c:	2204      	movs	r2, #4
 800940e:	69e8      	ldr	r0, [r5, #28]
 8009410:	f102 0614 	add.w	r6, r2, #20
 8009414:	429e      	cmp	r6, r3
 8009416:	d940      	bls.n	800949a <_dtoa_r+0x30a>
 8009418:	6041      	str	r1, [r0, #4]
 800941a:	4628      	mov	r0, r5
 800941c:	f000 fd98 	bl	8009f50 <_Balloc>
 8009420:	9003      	str	r0, [sp, #12]
 8009422:	2800      	cmp	r0, #0
 8009424:	d13c      	bne.n	80094a0 <_dtoa_r+0x310>
 8009426:	4602      	mov	r2, r0
 8009428:	f240 11af 	movw	r1, #431	; 0x1af
 800942c:	4b16      	ldr	r3, [pc, #88]	; (8009488 <_dtoa_r+0x2f8>)
 800942e:	e6c3      	b.n	80091b8 <_dtoa_r+0x28>
 8009430:	2301      	movs	r3, #1
 8009432:	e7e1      	b.n	80093f8 <_dtoa_r+0x268>
 8009434:	2401      	movs	r4, #1
 8009436:	2300      	movs	r3, #0
 8009438:	940b      	str	r4, [sp, #44]	; 0x2c
 800943a:	9322      	str	r3, [sp, #136]	; 0x88
 800943c:	f04f 33ff 	mov.w	r3, #4294967295
 8009440:	2200      	movs	r2, #0
 8009442:	9306      	str	r3, [sp, #24]
 8009444:	9308      	str	r3, [sp, #32]
 8009446:	2312      	movs	r3, #18
 8009448:	e7d1      	b.n	80093ee <_dtoa_r+0x25e>
 800944a:	bf00      	nop
 800944c:	f3af 8000 	nop.w
 8009450:	636f4361 	.word	0x636f4361
 8009454:	3fd287a7 	.word	0x3fd287a7
 8009458:	8b60c8b3 	.word	0x8b60c8b3
 800945c:	3fc68a28 	.word	0x3fc68a28
 8009460:	509f79fb 	.word	0x509f79fb
 8009464:	3fd34413 	.word	0x3fd34413
 8009468:	0800db84 	.word	0x0800db84
 800946c:	0800dc3e 	.word	0x0800dc3e
 8009470:	7ff00000 	.word	0x7ff00000
 8009474:	0800dc3a 	.word	0x0800dc3a
 8009478:	0800dc31 	.word	0x0800dc31
 800947c:	0800db5c 	.word	0x0800db5c
 8009480:	3ff80000 	.word	0x3ff80000
 8009484:	0800dd28 	.word	0x0800dd28
 8009488:	0800dc96 	.word	0x0800dc96
 800948c:	2301      	movs	r3, #1
 800948e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009490:	e7d4      	b.n	800943c <_dtoa_r+0x2ac>
 8009492:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009494:	9306      	str	r3, [sp, #24]
 8009496:	9308      	str	r3, [sp, #32]
 8009498:	e7b7      	b.n	800940a <_dtoa_r+0x27a>
 800949a:	3101      	adds	r1, #1
 800949c:	0052      	lsls	r2, r2, #1
 800949e:	e7b7      	b.n	8009410 <_dtoa_r+0x280>
 80094a0:	69eb      	ldr	r3, [r5, #28]
 80094a2:	9a03      	ldr	r2, [sp, #12]
 80094a4:	601a      	str	r2, [r3, #0]
 80094a6:	9b08      	ldr	r3, [sp, #32]
 80094a8:	2b0e      	cmp	r3, #14
 80094aa:	f200 80a8 	bhi.w	80095fe <_dtoa_r+0x46e>
 80094ae:	2c00      	cmp	r4, #0
 80094b0:	f000 80a5 	beq.w	80095fe <_dtoa_r+0x46e>
 80094b4:	f1bb 0f00 	cmp.w	fp, #0
 80094b8:	dd34      	ble.n	8009524 <_dtoa_r+0x394>
 80094ba:	4b9a      	ldr	r3, [pc, #616]	; (8009724 <_dtoa_r+0x594>)
 80094bc:	f00b 020f 	and.w	r2, fp, #15
 80094c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80094c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80094cc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80094d0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80094d4:	d016      	beq.n	8009504 <_dtoa_r+0x374>
 80094d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094da:	4b93      	ldr	r3, [pc, #588]	; (8009728 <_dtoa_r+0x598>)
 80094dc:	2703      	movs	r7, #3
 80094de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80094e2:	f7f7 f92d 	bl	8000740 <__aeabi_ddiv>
 80094e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094ea:	f004 040f 	and.w	r4, r4, #15
 80094ee:	4e8e      	ldr	r6, [pc, #568]	; (8009728 <_dtoa_r+0x598>)
 80094f0:	b954      	cbnz	r4, 8009508 <_dtoa_r+0x378>
 80094f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80094f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094fa:	f7f7 f921 	bl	8000740 <__aeabi_ddiv>
 80094fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009502:	e029      	b.n	8009558 <_dtoa_r+0x3c8>
 8009504:	2702      	movs	r7, #2
 8009506:	e7f2      	b.n	80094ee <_dtoa_r+0x35e>
 8009508:	07e1      	lsls	r1, r4, #31
 800950a:	d508      	bpl.n	800951e <_dtoa_r+0x38e>
 800950c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009510:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009514:	f7f6 ffea 	bl	80004ec <__aeabi_dmul>
 8009518:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800951c:	3701      	adds	r7, #1
 800951e:	1064      	asrs	r4, r4, #1
 8009520:	3608      	adds	r6, #8
 8009522:	e7e5      	b.n	80094f0 <_dtoa_r+0x360>
 8009524:	f000 80a5 	beq.w	8009672 <_dtoa_r+0x4e2>
 8009528:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800952c:	f1cb 0400 	rsb	r4, fp, #0
 8009530:	4b7c      	ldr	r3, [pc, #496]	; (8009724 <_dtoa_r+0x594>)
 8009532:	f004 020f 	and.w	r2, r4, #15
 8009536:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	f7f6 ffd5 	bl	80004ec <__aeabi_dmul>
 8009542:	2702      	movs	r7, #2
 8009544:	2300      	movs	r3, #0
 8009546:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800954a:	4e77      	ldr	r6, [pc, #476]	; (8009728 <_dtoa_r+0x598>)
 800954c:	1124      	asrs	r4, r4, #4
 800954e:	2c00      	cmp	r4, #0
 8009550:	f040 8084 	bne.w	800965c <_dtoa_r+0x4cc>
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1d2      	bne.n	80094fe <_dtoa_r+0x36e>
 8009558:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800955c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009560:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009562:	2b00      	cmp	r3, #0
 8009564:	f000 8087 	beq.w	8009676 <_dtoa_r+0x4e6>
 8009568:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800956c:	2200      	movs	r2, #0
 800956e:	4b6f      	ldr	r3, [pc, #444]	; (800972c <_dtoa_r+0x59c>)
 8009570:	f7f7 fa2e 	bl	80009d0 <__aeabi_dcmplt>
 8009574:	2800      	cmp	r0, #0
 8009576:	d07e      	beq.n	8009676 <_dtoa_r+0x4e6>
 8009578:	9b08      	ldr	r3, [sp, #32]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d07b      	beq.n	8009676 <_dtoa_r+0x4e6>
 800957e:	9b06      	ldr	r3, [sp, #24]
 8009580:	2b00      	cmp	r3, #0
 8009582:	dd38      	ble.n	80095f6 <_dtoa_r+0x466>
 8009584:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009588:	2200      	movs	r2, #0
 800958a:	4b69      	ldr	r3, [pc, #420]	; (8009730 <_dtoa_r+0x5a0>)
 800958c:	f7f6 ffae 	bl	80004ec <__aeabi_dmul>
 8009590:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009594:	9c06      	ldr	r4, [sp, #24]
 8009596:	f10b 38ff 	add.w	r8, fp, #4294967295
 800959a:	3701      	adds	r7, #1
 800959c:	4638      	mov	r0, r7
 800959e:	f7f6 ff3b 	bl	8000418 <__aeabi_i2d>
 80095a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095a6:	f7f6 ffa1 	bl	80004ec <__aeabi_dmul>
 80095aa:	2200      	movs	r2, #0
 80095ac:	4b61      	ldr	r3, [pc, #388]	; (8009734 <_dtoa_r+0x5a4>)
 80095ae:	f7f6 fde7 	bl	8000180 <__adddf3>
 80095b2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80095b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80095ba:	9611      	str	r6, [sp, #68]	; 0x44
 80095bc:	2c00      	cmp	r4, #0
 80095be:	d15d      	bne.n	800967c <_dtoa_r+0x4ec>
 80095c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095c4:	2200      	movs	r2, #0
 80095c6:	4b5c      	ldr	r3, [pc, #368]	; (8009738 <_dtoa_r+0x5a8>)
 80095c8:	f7f6 fdd8 	bl	800017c <__aeabi_dsub>
 80095cc:	4602      	mov	r2, r0
 80095ce:	460b      	mov	r3, r1
 80095d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80095d4:	4633      	mov	r3, r6
 80095d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80095d8:	f7f7 fa18 	bl	8000a0c <__aeabi_dcmpgt>
 80095dc:	2800      	cmp	r0, #0
 80095de:	f040 8295 	bne.w	8009b0c <_dtoa_r+0x97c>
 80095e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80095e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80095ec:	f7f7 f9f0 	bl	80009d0 <__aeabi_dcmplt>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	f040 8289 	bne.w	8009b08 <_dtoa_r+0x978>
 80095f6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80095fa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80095fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009600:	2b00      	cmp	r3, #0
 8009602:	f2c0 8151 	blt.w	80098a8 <_dtoa_r+0x718>
 8009606:	f1bb 0f0e 	cmp.w	fp, #14
 800960a:	f300 814d 	bgt.w	80098a8 <_dtoa_r+0x718>
 800960e:	4b45      	ldr	r3, [pc, #276]	; (8009724 <_dtoa_r+0x594>)
 8009610:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009614:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009618:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800961c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800961e:	2b00      	cmp	r3, #0
 8009620:	f280 80da 	bge.w	80097d8 <_dtoa_r+0x648>
 8009624:	9b08      	ldr	r3, [sp, #32]
 8009626:	2b00      	cmp	r3, #0
 8009628:	f300 80d6 	bgt.w	80097d8 <_dtoa_r+0x648>
 800962c:	f040 826b 	bne.w	8009b06 <_dtoa_r+0x976>
 8009630:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009634:	2200      	movs	r2, #0
 8009636:	4b40      	ldr	r3, [pc, #256]	; (8009738 <_dtoa_r+0x5a8>)
 8009638:	f7f6 ff58 	bl	80004ec <__aeabi_dmul>
 800963c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009640:	f7f7 f9da 	bl	80009f8 <__aeabi_dcmpge>
 8009644:	9c08      	ldr	r4, [sp, #32]
 8009646:	4626      	mov	r6, r4
 8009648:	2800      	cmp	r0, #0
 800964a:	f040 8241 	bne.w	8009ad0 <_dtoa_r+0x940>
 800964e:	2331      	movs	r3, #49	; 0x31
 8009650:	9f03      	ldr	r7, [sp, #12]
 8009652:	f10b 0b01 	add.w	fp, fp, #1
 8009656:	f807 3b01 	strb.w	r3, [r7], #1
 800965a:	e23d      	b.n	8009ad8 <_dtoa_r+0x948>
 800965c:	07e2      	lsls	r2, r4, #31
 800965e:	d505      	bpl.n	800966c <_dtoa_r+0x4dc>
 8009660:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009664:	f7f6 ff42 	bl	80004ec <__aeabi_dmul>
 8009668:	2301      	movs	r3, #1
 800966a:	3701      	adds	r7, #1
 800966c:	1064      	asrs	r4, r4, #1
 800966e:	3608      	adds	r6, #8
 8009670:	e76d      	b.n	800954e <_dtoa_r+0x3be>
 8009672:	2702      	movs	r7, #2
 8009674:	e770      	b.n	8009558 <_dtoa_r+0x3c8>
 8009676:	46d8      	mov	r8, fp
 8009678:	9c08      	ldr	r4, [sp, #32]
 800967a:	e78f      	b.n	800959c <_dtoa_r+0x40c>
 800967c:	9903      	ldr	r1, [sp, #12]
 800967e:	4b29      	ldr	r3, [pc, #164]	; (8009724 <_dtoa_r+0x594>)
 8009680:	4421      	add	r1, r4
 8009682:	9112      	str	r1, [sp, #72]	; 0x48
 8009684:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009686:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800968a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800968e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009692:	2900      	cmp	r1, #0
 8009694:	d054      	beq.n	8009740 <_dtoa_r+0x5b0>
 8009696:	2000      	movs	r0, #0
 8009698:	4928      	ldr	r1, [pc, #160]	; (800973c <_dtoa_r+0x5ac>)
 800969a:	f7f7 f851 	bl	8000740 <__aeabi_ddiv>
 800969e:	463b      	mov	r3, r7
 80096a0:	4632      	mov	r2, r6
 80096a2:	f7f6 fd6b 	bl	800017c <__aeabi_dsub>
 80096a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80096aa:	9f03      	ldr	r7, [sp, #12]
 80096ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096b0:	f7f7 f9cc 	bl	8000a4c <__aeabi_d2iz>
 80096b4:	4604      	mov	r4, r0
 80096b6:	f7f6 feaf 	bl	8000418 <__aeabi_i2d>
 80096ba:	4602      	mov	r2, r0
 80096bc:	460b      	mov	r3, r1
 80096be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096c2:	f7f6 fd5b 	bl	800017c <__aeabi_dsub>
 80096c6:	4602      	mov	r2, r0
 80096c8:	460b      	mov	r3, r1
 80096ca:	3430      	adds	r4, #48	; 0x30
 80096cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80096d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80096d4:	f807 4b01 	strb.w	r4, [r7], #1
 80096d8:	f7f7 f97a 	bl	80009d0 <__aeabi_dcmplt>
 80096dc:	2800      	cmp	r0, #0
 80096de:	d173      	bne.n	80097c8 <_dtoa_r+0x638>
 80096e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096e4:	2000      	movs	r0, #0
 80096e6:	4911      	ldr	r1, [pc, #68]	; (800972c <_dtoa_r+0x59c>)
 80096e8:	f7f6 fd48 	bl	800017c <__aeabi_dsub>
 80096ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80096f0:	f7f7 f96e 	bl	80009d0 <__aeabi_dcmplt>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	f040 80b6 	bne.w	8009866 <_dtoa_r+0x6d6>
 80096fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096fc:	429f      	cmp	r7, r3
 80096fe:	f43f af7a 	beq.w	80095f6 <_dtoa_r+0x466>
 8009702:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009706:	2200      	movs	r2, #0
 8009708:	4b09      	ldr	r3, [pc, #36]	; (8009730 <_dtoa_r+0x5a0>)
 800970a:	f7f6 feef 	bl	80004ec <__aeabi_dmul>
 800970e:	2200      	movs	r2, #0
 8009710:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009714:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009718:	4b05      	ldr	r3, [pc, #20]	; (8009730 <_dtoa_r+0x5a0>)
 800971a:	f7f6 fee7 	bl	80004ec <__aeabi_dmul>
 800971e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009722:	e7c3      	b.n	80096ac <_dtoa_r+0x51c>
 8009724:	0800dd28 	.word	0x0800dd28
 8009728:	0800dd00 	.word	0x0800dd00
 800972c:	3ff00000 	.word	0x3ff00000
 8009730:	40240000 	.word	0x40240000
 8009734:	401c0000 	.word	0x401c0000
 8009738:	40140000 	.word	0x40140000
 800973c:	3fe00000 	.word	0x3fe00000
 8009740:	4630      	mov	r0, r6
 8009742:	4639      	mov	r1, r7
 8009744:	f7f6 fed2 	bl	80004ec <__aeabi_dmul>
 8009748:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800974a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800974e:	9c03      	ldr	r4, [sp, #12]
 8009750:	9314      	str	r3, [sp, #80]	; 0x50
 8009752:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009756:	f7f7 f979 	bl	8000a4c <__aeabi_d2iz>
 800975a:	9015      	str	r0, [sp, #84]	; 0x54
 800975c:	f7f6 fe5c 	bl	8000418 <__aeabi_i2d>
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009768:	f7f6 fd08 	bl	800017c <__aeabi_dsub>
 800976c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800976e:	4606      	mov	r6, r0
 8009770:	3330      	adds	r3, #48	; 0x30
 8009772:	f804 3b01 	strb.w	r3, [r4], #1
 8009776:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009778:	460f      	mov	r7, r1
 800977a:	429c      	cmp	r4, r3
 800977c:	f04f 0200 	mov.w	r2, #0
 8009780:	d124      	bne.n	80097cc <_dtoa_r+0x63c>
 8009782:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009786:	4baf      	ldr	r3, [pc, #700]	; (8009a44 <_dtoa_r+0x8b4>)
 8009788:	f7f6 fcfa 	bl	8000180 <__adddf3>
 800978c:	4602      	mov	r2, r0
 800978e:	460b      	mov	r3, r1
 8009790:	4630      	mov	r0, r6
 8009792:	4639      	mov	r1, r7
 8009794:	f7f7 f93a 	bl	8000a0c <__aeabi_dcmpgt>
 8009798:	2800      	cmp	r0, #0
 800979a:	d163      	bne.n	8009864 <_dtoa_r+0x6d4>
 800979c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80097a0:	2000      	movs	r0, #0
 80097a2:	49a8      	ldr	r1, [pc, #672]	; (8009a44 <_dtoa_r+0x8b4>)
 80097a4:	f7f6 fcea 	bl	800017c <__aeabi_dsub>
 80097a8:	4602      	mov	r2, r0
 80097aa:	460b      	mov	r3, r1
 80097ac:	4630      	mov	r0, r6
 80097ae:	4639      	mov	r1, r7
 80097b0:	f7f7 f90e 	bl	80009d0 <__aeabi_dcmplt>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	f43f af1e 	beq.w	80095f6 <_dtoa_r+0x466>
 80097ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80097bc:	1e7b      	subs	r3, r7, #1
 80097be:	9314      	str	r3, [sp, #80]	; 0x50
 80097c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80097c4:	2b30      	cmp	r3, #48	; 0x30
 80097c6:	d0f8      	beq.n	80097ba <_dtoa_r+0x62a>
 80097c8:	46c3      	mov	fp, r8
 80097ca:	e03b      	b.n	8009844 <_dtoa_r+0x6b4>
 80097cc:	4b9e      	ldr	r3, [pc, #632]	; (8009a48 <_dtoa_r+0x8b8>)
 80097ce:	f7f6 fe8d 	bl	80004ec <__aeabi_dmul>
 80097d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097d6:	e7bc      	b.n	8009752 <_dtoa_r+0x5c2>
 80097d8:	9f03      	ldr	r7, [sp, #12]
 80097da:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80097de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097e2:	4640      	mov	r0, r8
 80097e4:	4649      	mov	r1, r9
 80097e6:	f7f6 ffab 	bl	8000740 <__aeabi_ddiv>
 80097ea:	f7f7 f92f 	bl	8000a4c <__aeabi_d2iz>
 80097ee:	4604      	mov	r4, r0
 80097f0:	f7f6 fe12 	bl	8000418 <__aeabi_i2d>
 80097f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097f8:	f7f6 fe78 	bl	80004ec <__aeabi_dmul>
 80097fc:	4602      	mov	r2, r0
 80097fe:	460b      	mov	r3, r1
 8009800:	4640      	mov	r0, r8
 8009802:	4649      	mov	r1, r9
 8009804:	f7f6 fcba 	bl	800017c <__aeabi_dsub>
 8009808:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800980c:	f807 6b01 	strb.w	r6, [r7], #1
 8009810:	9e03      	ldr	r6, [sp, #12]
 8009812:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009816:	1bbe      	subs	r6, r7, r6
 8009818:	45b4      	cmp	ip, r6
 800981a:	4602      	mov	r2, r0
 800981c:	460b      	mov	r3, r1
 800981e:	d136      	bne.n	800988e <_dtoa_r+0x6fe>
 8009820:	f7f6 fcae 	bl	8000180 <__adddf3>
 8009824:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009828:	4680      	mov	r8, r0
 800982a:	4689      	mov	r9, r1
 800982c:	f7f7 f8ee 	bl	8000a0c <__aeabi_dcmpgt>
 8009830:	bb58      	cbnz	r0, 800988a <_dtoa_r+0x6fa>
 8009832:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009836:	4640      	mov	r0, r8
 8009838:	4649      	mov	r1, r9
 800983a:	f7f7 f8bf 	bl	80009bc <__aeabi_dcmpeq>
 800983e:	b108      	cbz	r0, 8009844 <_dtoa_r+0x6b4>
 8009840:	07e3      	lsls	r3, r4, #31
 8009842:	d422      	bmi.n	800988a <_dtoa_r+0x6fa>
 8009844:	4651      	mov	r1, sl
 8009846:	4628      	mov	r0, r5
 8009848:	f000 fbc2 	bl	8009fd0 <_Bfree>
 800984c:	2300      	movs	r3, #0
 800984e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009850:	703b      	strb	r3, [r7, #0]
 8009852:	f10b 0301 	add.w	r3, fp, #1
 8009856:	6013      	str	r3, [r2, #0]
 8009858:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800985a:	2b00      	cmp	r3, #0
 800985c:	f43f ace6 	beq.w	800922c <_dtoa_r+0x9c>
 8009860:	601f      	str	r7, [r3, #0]
 8009862:	e4e3      	b.n	800922c <_dtoa_r+0x9c>
 8009864:	4627      	mov	r7, r4
 8009866:	463b      	mov	r3, r7
 8009868:	461f      	mov	r7, r3
 800986a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800986e:	2a39      	cmp	r2, #57	; 0x39
 8009870:	d107      	bne.n	8009882 <_dtoa_r+0x6f2>
 8009872:	9a03      	ldr	r2, [sp, #12]
 8009874:	429a      	cmp	r2, r3
 8009876:	d1f7      	bne.n	8009868 <_dtoa_r+0x6d8>
 8009878:	2230      	movs	r2, #48	; 0x30
 800987a:	9903      	ldr	r1, [sp, #12]
 800987c:	f108 0801 	add.w	r8, r8, #1
 8009880:	700a      	strb	r2, [r1, #0]
 8009882:	781a      	ldrb	r2, [r3, #0]
 8009884:	3201      	adds	r2, #1
 8009886:	701a      	strb	r2, [r3, #0]
 8009888:	e79e      	b.n	80097c8 <_dtoa_r+0x638>
 800988a:	46d8      	mov	r8, fp
 800988c:	e7eb      	b.n	8009866 <_dtoa_r+0x6d6>
 800988e:	2200      	movs	r2, #0
 8009890:	4b6d      	ldr	r3, [pc, #436]	; (8009a48 <_dtoa_r+0x8b8>)
 8009892:	f7f6 fe2b 	bl	80004ec <__aeabi_dmul>
 8009896:	2200      	movs	r2, #0
 8009898:	2300      	movs	r3, #0
 800989a:	4680      	mov	r8, r0
 800989c:	4689      	mov	r9, r1
 800989e:	f7f7 f88d 	bl	80009bc <__aeabi_dcmpeq>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d09b      	beq.n	80097de <_dtoa_r+0x64e>
 80098a6:	e7cd      	b.n	8009844 <_dtoa_r+0x6b4>
 80098a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80098aa:	2a00      	cmp	r2, #0
 80098ac:	f000 80c4 	beq.w	8009a38 <_dtoa_r+0x8a8>
 80098b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80098b2:	2a01      	cmp	r2, #1
 80098b4:	f300 80a8 	bgt.w	8009a08 <_dtoa_r+0x878>
 80098b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80098ba:	2a00      	cmp	r2, #0
 80098bc:	f000 80a0 	beq.w	8009a00 <_dtoa_r+0x870>
 80098c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80098c4:	464f      	mov	r7, r9
 80098c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80098c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098ca:	2101      	movs	r1, #1
 80098cc:	441a      	add	r2, r3
 80098ce:	4628      	mov	r0, r5
 80098d0:	4499      	add	r9, r3
 80098d2:	9209      	str	r2, [sp, #36]	; 0x24
 80098d4:	f000 fc7c 	bl	800a1d0 <__i2b>
 80098d8:	4606      	mov	r6, r0
 80098da:	b15f      	cbz	r7, 80098f4 <_dtoa_r+0x764>
 80098dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098de:	2b00      	cmp	r3, #0
 80098e0:	dd08      	ble.n	80098f4 <_dtoa_r+0x764>
 80098e2:	42bb      	cmp	r3, r7
 80098e4:	bfa8      	it	ge
 80098e6:	463b      	movge	r3, r7
 80098e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098ea:	eba9 0903 	sub.w	r9, r9, r3
 80098ee:	1aff      	subs	r7, r7, r3
 80098f0:	1ad3      	subs	r3, r2, r3
 80098f2:	9309      	str	r3, [sp, #36]	; 0x24
 80098f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098f6:	b1f3      	cbz	r3, 8009936 <_dtoa_r+0x7a6>
 80098f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	f000 80a0 	beq.w	8009a40 <_dtoa_r+0x8b0>
 8009900:	2c00      	cmp	r4, #0
 8009902:	dd10      	ble.n	8009926 <_dtoa_r+0x796>
 8009904:	4631      	mov	r1, r6
 8009906:	4622      	mov	r2, r4
 8009908:	4628      	mov	r0, r5
 800990a:	f000 fd1f 	bl	800a34c <__pow5mult>
 800990e:	4652      	mov	r2, sl
 8009910:	4601      	mov	r1, r0
 8009912:	4606      	mov	r6, r0
 8009914:	4628      	mov	r0, r5
 8009916:	f000 fc71 	bl	800a1fc <__multiply>
 800991a:	4680      	mov	r8, r0
 800991c:	4651      	mov	r1, sl
 800991e:	4628      	mov	r0, r5
 8009920:	f000 fb56 	bl	8009fd0 <_Bfree>
 8009924:	46c2      	mov	sl, r8
 8009926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009928:	1b1a      	subs	r2, r3, r4
 800992a:	d004      	beq.n	8009936 <_dtoa_r+0x7a6>
 800992c:	4651      	mov	r1, sl
 800992e:	4628      	mov	r0, r5
 8009930:	f000 fd0c 	bl	800a34c <__pow5mult>
 8009934:	4682      	mov	sl, r0
 8009936:	2101      	movs	r1, #1
 8009938:	4628      	mov	r0, r5
 800993a:	f000 fc49 	bl	800a1d0 <__i2b>
 800993e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009940:	4604      	mov	r4, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	f340 8082 	ble.w	8009a4c <_dtoa_r+0x8bc>
 8009948:	461a      	mov	r2, r3
 800994a:	4601      	mov	r1, r0
 800994c:	4628      	mov	r0, r5
 800994e:	f000 fcfd 	bl	800a34c <__pow5mult>
 8009952:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009954:	4604      	mov	r4, r0
 8009956:	2b01      	cmp	r3, #1
 8009958:	dd7b      	ble.n	8009a52 <_dtoa_r+0x8c2>
 800995a:	f04f 0800 	mov.w	r8, #0
 800995e:	6923      	ldr	r3, [r4, #16]
 8009960:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009964:	6918      	ldr	r0, [r3, #16]
 8009966:	f000 fbe5 	bl	800a134 <__hi0bits>
 800996a:	f1c0 0020 	rsb	r0, r0, #32
 800996e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009970:	4418      	add	r0, r3
 8009972:	f010 001f 	ands.w	r0, r0, #31
 8009976:	f000 8092 	beq.w	8009a9e <_dtoa_r+0x90e>
 800997a:	f1c0 0320 	rsb	r3, r0, #32
 800997e:	2b04      	cmp	r3, #4
 8009980:	f340 8085 	ble.w	8009a8e <_dtoa_r+0x8fe>
 8009984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009986:	f1c0 001c 	rsb	r0, r0, #28
 800998a:	4403      	add	r3, r0
 800998c:	4481      	add	r9, r0
 800998e:	4407      	add	r7, r0
 8009990:	9309      	str	r3, [sp, #36]	; 0x24
 8009992:	f1b9 0f00 	cmp.w	r9, #0
 8009996:	dd05      	ble.n	80099a4 <_dtoa_r+0x814>
 8009998:	4651      	mov	r1, sl
 800999a:	464a      	mov	r2, r9
 800999c:	4628      	mov	r0, r5
 800999e:	f000 fd2f 	bl	800a400 <__lshift>
 80099a2:	4682      	mov	sl, r0
 80099a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	dd05      	ble.n	80099b6 <_dtoa_r+0x826>
 80099aa:	4621      	mov	r1, r4
 80099ac:	461a      	mov	r2, r3
 80099ae:	4628      	mov	r0, r5
 80099b0:	f000 fd26 	bl	800a400 <__lshift>
 80099b4:	4604      	mov	r4, r0
 80099b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d072      	beq.n	8009aa2 <_dtoa_r+0x912>
 80099bc:	4621      	mov	r1, r4
 80099be:	4650      	mov	r0, sl
 80099c0:	f000 fd8a 	bl	800a4d8 <__mcmp>
 80099c4:	2800      	cmp	r0, #0
 80099c6:	da6c      	bge.n	8009aa2 <_dtoa_r+0x912>
 80099c8:	2300      	movs	r3, #0
 80099ca:	4651      	mov	r1, sl
 80099cc:	220a      	movs	r2, #10
 80099ce:	4628      	mov	r0, r5
 80099d0:	f000 fb20 	bl	800a014 <__multadd>
 80099d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099d6:	4682      	mov	sl, r0
 80099d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f000 81ac 	beq.w	8009d3a <_dtoa_r+0xbaa>
 80099e2:	2300      	movs	r3, #0
 80099e4:	4631      	mov	r1, r6
 80099e6:	220a      	movs	r2, #10
 80099e8:	4628      	mov	r0, r5
 80099ea:	f000 fb13 	bl	800a014 <__multadd>
 80099ee:	9b06      	ldr	r3, [sp, #24]
 80099f0:	4606      	mov	r6, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f300 8093 	bgt.w	8009b1e <_dtoa_r+0x98e>
 80099f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	dc59      	bgt.n	8009ab2 <_dtoa_r+0x922>
 80099fe:	e08e      	b.n	8009b1e <_dtoa_r+0x98e>
 8009a00:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009a02:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009a06:	e75d      	b.n	80098c4 <_dtoa_r+0x734>
 8009a08:	9b08      	ldr	r3, [sp, #32]
 8009a0a:	1e5c      	subs	r4, r3, #1
 8009a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a0e:	42a3      	cmp	r3, r4
 8009a10:	bfbf      	itttt	lt
 8009a12:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009a14:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009a16:	1ae3      	sublt	r3, r4, r3
 8009a18:	18d2      	addlt	r2, r2, r3
 8009a1a:	bfa8      	it	ge
 8009a1c:	1b1c      	subge	r4, r3, r4
 8009a1e:	9b08      	ldr	r3, [sp, #32]
 8009a20:	bfbe      	ittt	lt
 8009a22:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009a24:	920e      	strlt	r2, [sp, #56]	; 0x38
 8009a26:	2400      	movlt	r4, #0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	bfb5      	itete	lt
 8009a2c:	eba9 0703 	sublt.w	r7, r9, r3
 8009a30:	464f      	movge	r7, r9
 8009a32:	2300      	movlt	r3, #0
 8009a34:	9b08      	ldrge	r3, [sp, #32]
 8009a36:	e747      	b.n	80098c8 <_dtoa_r+0x738>
 8009a38:	464f      	mov	r7, r9
 8009a3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009a3c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009a3e:	e74c      	b.n	80098da <_dtoa_r+0x74a>
 8009a40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a42:	e773      	b.n	800992c <_dtoa_r+0x79c>
 8009a44:	3fe00000 	.word	0x3fe00000
 8009a48:	40240000 	.word	0x40240000
 8009a4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	dc18      	bgt.n	8009a84 <_dtoa_r+0x8f4>
 8009a52:	9b04      	ldr	r3, [sp, #16]
 8009a54:	b9b3      	cbnz	r3, 8009a84 <_dtoa_r+0x8f4>
 8009a56:	9b05      	ldr	r3, [sp, #20]
 8009a58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a5c:	b993      	cbnz	r3, 8009a84 <_dtoa_r+0x8f4>
 8009a5e:	9b05      	ldr	r3, [sp, #20]
 8009a60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a64:	0d1b      	lsrs	r3, r3, #20
 8009a66:	051b      	lsls	r3, r3, #20
 8009a68:	b17b      	cbz	r3, 8009a8a <_dtoa_r+0x8fa>
 8009a6a:	f04f 0801 	mov.w	r8, #1
 8009a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a70:	f109 0901 	add.w	r9, r9, #1
 8009a74:	3301      	adds	r3, #1
 8009a76:	9309      	str	r3, [sp, #36]	; 0x24
 8009a78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f47f af6f 	bne.w	800995e <_dtoa_r+0x7ce>
 8009a80:	2001      	movs	r0, #1
 8009a82:	e774      	b.n	800996e <_dtoa_r+0x7de>
 8009a84:	f04f 0800 	mov.w	r8, #0
 8009a88:	e7f6      	b.n	8009a78 <_dtoa_r+0x8e8>
 8009a8a:	4698      	mov	r8, r3
 8009a8c:	e7f4      	b.n	8009a78 <_dtoa_r+0x8e8>
 8009a8e:	d080      	beq.n	8009992 <_dtoa_r+0x802>
 8009a90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a92:	331c      	adds	r3, #28
 8009a94:	441a      	add	r2, r3
 8009a96:	4499      	add	r9, r3
 8009a98:	441f      	add	r7, r3
 8009a9a:	9209      	str	r2, [sp, #36]	; 0x24
 8009a9c:	e779      	b.n	8009992 <_dtoa_r+0x802>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	e7f6      	b.n	8009a90 <_dtoa_r+0x900>
 8009aa2:	9b08      	ldr	r3, [sp, #32]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	dc34      	bgt.n	8009b12 <_dtoa_r+0x982>
 8009aa8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	dd31      	ble.n	8009b12 <_dtoa_r+0x982>
 8009aae:	9b08      	ldr	r3, [sp, #32]
 8009ab0:	9306      	str	r3, [sp, #24]
 8009ab2:	9b06      	ldr	r3, [sp, #24]
 8009ab4:	b963      	cbnz	r3, 8009ad0 <_dtoa_r+0x940>
 8009ab6:	4621      	mov	r1, r4
 8009ab8:	2205      	movs	r2, #5
 8009aba:	4628      	mov	r0, r5
 8009abc:	f000 faaa 	bl	800a014 <__multadd>
 8009ac0:	4601      	mov	r1, r0
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	4650      	mov	r0, sl
 8009ac6:	f000 fd07 	bl	800a4d8 <__mcmp>
 8009aca:	2800      	cmp	r0, #0
 8009acc:	f73f adbf 	bgt.w	800964e <_dtoa_r+0x4be>
 8009ad0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ad2:	9f03      	ldr	r7, [sp, #12]
 8009ad4:	ea6f 0b03 	mvn.w	fp, r3
 8009ad8:	f04f 0800 	mov.w	r8, #0
 8009adc:	4621      	mov	r1, r4
 8009ade:	4628      	mov	r0, r5
 8009ae0:	f000 fa76 	bl	8009fd0 <_Bfree>
 8009ae4:	2e00      	cmp	r6, #0
 8009ae6:	f43f aead 	beq.w	8009844 <_dtoa_r+0x6b4>
 8009aea:	f1b8 0f00 	cmp.w	r8, #0
 8009aee:	d005      	beq.n	8009afc <_dtoa_r+0x96c>
 8009af0:	45b0      	cmp	r8, r6
 8009af2:	d003      	beq.n	8009afc <_dtoa_r+0x96c>
 8009af4:	4641      	mov	r1, r8
 8009af6:	4628      	mov	r0, r5
 8009af8:	f000 fa6a 	bl	8009fd0 <_Bfree>
 8009afc:	4631      	mov	r1, r6
 8009afe:	4628      	mov	r0, r5
 8009b00:	f000 fa66 	bl	8009fd0 <_Bfree>
 8009b04:	e69e      	b.n	8009844 <_dtoa_r+0x6b4>
 8009b06:	2400      	movs	r4, #0
 8009b08:	4626      	mov	r6, r4
 8009b0a:	e7e1      	b.n	8009ad0 <_dtoa_r+0x940>
 8009b0c:	46c3      	mov	fp, r8
 8009b0e:	4626      	mov	r6, r4
 8009b10:	e59d      	b.n	800964e <_dtoa_r+0x4be>
 8009b12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f000 80c8 	beq.w	8009caa <_dtoa_r+0xb1a>
 8009b1a:	9b08      	ldr	r3, [sp, #32]
 8009b1c:	9306      	str	r3, [sp, #24]
 8009b1e:	2f00      	cmp	r7, #0
 8009b20:	dd05      	ble.n	8009b2e <_dtoa_r+0x99e>
 8009b22:	4631      	mov	r1, r6
 8009b24:	463a      	mov	r2, r7
 8009b26:	4628      	mov	r0, r5
 8009b28:	f000 fc6a 	bl	800a400 <__lshift>
 8009b2c:	4606      	mov	r6, r0
 8009b2e:	f1b8 0f00 	cmp.w	r8, #0
 8009b32:	d05b      	beq.n	8009bec <_dtoa_r+0xa5c>
 8009b34:	4628      	mov	r0, r5
 8009b36:	6871      	ldr	r1, [r6, #4]
 8009b38:	f000 fa0a 	bl	8009f50 <_Balloc>
 8009b3c:	4607      	mov	r7, r0
 8009b3e:	b928      	cbnz	r0, 8009b4c <_dtoa_r+0x9bc>
 8009b40:	4602      	mov	r2, r0
 8009b42:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009b46:	4b81      	ldr	r3, [pc, #516]	; (8009d4c <_dtoa_r+0xbbc>)
 8009b48:	f7ff bb36 	b.w	80091b8 <_dtoa_r+0x28>
 8009b4c:	6932      	ldr	r2, [r6, #16]
 8009b4e:	f106 010c 	add.w	r1, r6, #12
 8009b52:	3202      	adds	r2, #2
 8009b54:	0092      	lsls	r2, r2, #2
 8009b56:	300c      	adds	r0, #12
 8009b58:	f001 ff04 	bl	800b964 <memcpy>
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	4639      	mov	r1, r7
 8009b60:	4628      	mov	r0, r5
 8009b62:	f000 fc4d 	bl	800a400 <__lshift>
 8009b66:	46b0      	mov	r8, r6
 8009b68:	4606      	mov	r6, r0
 8009b6a:	9b03      	ldr	r3, [sp, #12]
 8009b6c:	9a03      	ldr	r2, [sp, #12]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	9308      	str	r3, [sp, #32]
 8009b72:	9b06      	ldr	r3, [sp, #24]
 8009b74:	4413      	add	r3, r2
 8009b76:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b78:	9b04      	ldr	r3, [sp, #16]
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8009b80:	9b08      	ldr	r3, [sp, #32]
 8009b82:	4621      	mov	r1, r4
 8009b84:	3b01      	subs	r3, #1
 8009b86:	4650      	mov	r0, sl
 8009b88:	9304      	str	r3, [sp, #16]
 8009b8a:	f7ff fa75 	bl	8009078 <quorem>
 8009b8e:	4641      	mov	r1, r8
 8009b90:	9006      	str	r0, [sp, #24]
 8009b92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009b96:	4650      	mov	r0, sl
 8009b98:	f000 fc9e 	bl	800a4d8 <__mcmp>
 8009b9c:	4632      	mov	r2, r6
 8009b9e:	9009      	str	r0, [sp, #36]	; 0x24
 8009ba0:	4621      	mov	r1, r4
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	f000 fcb4 	bl	800a510 <__mdiff>
 8009ba8:	68c2      	ldr	r2, [r0, #12]
 8009baa:	4607      	mov	r7, r0
 8009bac:	bb02      	cbnz	r2, 8009bf0 <_dtoa_r+0xa60>
 8009bae:	4601      	mov	r1, r0
 8009bb0:	4650      	mov	r0, sl
 8009bb2:	f000 fc91 	bl	800a4d8 <__mcmp>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	4639      	mov	r1, r7
 8009bba:	4628      	mov	r0, r5
 8009bbc:	920c      	str	r2, [sp, #48]	; 0x30
 8009bbe:	f000 fa07 	bl	8009fd0 <_Bfree>
 8009bc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009bc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bc6:	9f08      	ldr	r7, [sp, #32]
 8009bc8:	ea43 0102 	orr.w	r1, r3, r2
 8009bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bce:	4319      	orrs	r1, r3
 8009bd0:	d110      	bne.n	8009bf4 <_dtoa_r+0xa64>
 8009bd2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009bd6:	d029      	beq.n	8009c2c <_dtoa_r+0xa9c>
 8009bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	dd02      	ble.n	8009be4 <_dtoa_r+0xa54>
 8009bde:	9b06      	ldr	r3, [sp, #24]
 8009be0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009be4:	9b04      	ldr	r3, [sp, #16]
 8009be6:	f883 9000 	strb.w	r9, [r3]
 8009bea:	e777      	b.n	8009adc <_dtoa_r+0x94c>
 8009bec:	4630      	mov	r0, r6
 8009bee:	e7ba      	b.n	8009b66 <_dtoa_r+0x9d6>
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	e7e1      	b.n	8009bb8 <_dtoa_r+0xa28>
 8009bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	db04      	blt.n	8009c04 <_dtoa_r+0xa74>
 8009bfa:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009bfc:	430b      	orrs	r3, r1
 8009bfe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009c00:	430b      	orrs	r3, r1
 8009c02:	d120      	bne.n	8009c46 <_dtoa_r+0xab6>
 8009c04:	2a00      	cmp	r2, #0
 8009c06:	dded      	ble.n	8009be4 <_dtoa_r+0xa54>
 8009c08:	4651      	mov	r1, sl
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	f000 fbf7 	bl	800a400 <__lshift>
 8009c12:	4621      	mov	r1, r4
 8009c14:	4682      	mov	sl, r0
 8009c16:	f000 fc5f 	bl	800a4d8 <__mcmp>
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	dc03      	bgt.n	8009c26 <_dtoa_r+0xa96>
 8009c1e:	d1e1      	bne.n	8009be4 <_dtoa_r+0xa54>
 8009c20:	f019 0f01 	tst.w	r9, #1
 8009c24:	d0de      	beq.n	8009be4 <_dtoa_r+0xa54>
 8009c26:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009c2a:	d1d8      	bne.n	8009bde <_dtoa_r+0xa4e>
 8009c2c:	2339      	movs	r3, #57	; 0x39
 8009c2e:	9a04      	ldr	r2, [sp, #16]
 8009c30:	7013      	strb	r3, [r2, #0]
 8009c32:	463b      	mov	r3, r7
 8009c34:	461f      	mov	r7, r3
 8009c36:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009c3a:	3b01      	subs	r3, #1
 8009c3c:	2a39      	cmp	r2, #57	; 0x39
 8009c3e:	d06b      	beq.n	8009d18 <_dtoa_r+0xb88>
 8009c40:	3201      	adds	r2, #1
 8009c42:	701a      	strb	r2, [r3, #0]
 8009c44:	e74a      	b.n	8009adc <_dtoa_r+0x94c>
 8009c46:	2a00      	cmp	r2, #0
 8009c48:	dd07      	ble.n	8009c5a <_dtoa_r+0xaca>
 8009c4a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009c4e:	d0ed      	beq.n	8009c2c <_dtoa_r+0xa9c>
 8009c50:	9a04      	ldr	r2, [sp, #16]
 8009c52:	f109 0301 	add.w	r3, r9, #1
 8009c56:	7013      	strb	r3, [r2, #0]
 8009c58:	e740      	b.n	8009adc <_dtoa_r+0x94c>
 8009c5a:	9b08      	ldr	r3, [sp, #32]
 8009c5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c5e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d042      	beq.n	8009cec <_dtoa_r+0xb5c>
 8009c66:	4651      	mov	r1, sl
 8009c68:	2300      	movs	r3, #0
 8009c6a:	220a      	movs	r2, #10
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	f000 f9d1 	bl	800a014 <__multadd>
 8009c72:	45b0      	cmp	r8, r6
 8009c74:	4682      	mov	sl, r0
 8009c76:	f04f 0300 	mov.w	r3, #0
 8009c7a:	f04f 020a 	mov.w	r2, #10
 8009c7e:	4641      	mov	r1, r8
 8009c80:	4628      	mov	r0, r5
 8009c82:	d107      	bne.n	8009c94 <_dtoa_r+0xb04>
 8009c84:	f000 f9c6 	bl	800a014 <__multadd>
 8009c88:	4680      	mov	r8, r0
 8009c8a:	4606      	mov	r6, r0
 8009c8c:	9b08      	ldr	r3, [sp, #32]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	9308      	str	r3, [sp, #32]
 8009c92:	e775      	b.n	8009b80 <_dtoa_r+0x9f0>
 8009c94:	f000 f9be 	bl	800a014 <__multadd>
 8009c98:	4631      	mov	r1, r6
 8009c9a:	4680      	mov	r8, r0
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	220a      	movs	r2, #10
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	f000 f9b7 	bl	800a014 <__multadd>
 8009ca6:	4606      	mov	r6, r0
 8009ca8:	e7f0      	b.n	8009c8c <_dtoa_r+0xafc>
 8009caa:	9b08      	ldr	r3, [sp, #32]
 8009cac:	9306      	str	r3, [sp, #24]
 8009cae:	9f03      	ldr	r7, [sp, #12]
 8009cb0:	4621      	mov	r1, r4
 8009cb2:	4650      	mov	r0, sl
 8009cb4:	f7ff f9e0 	bl	8009078 <quorem>
 8009cb8:	9b03      	ldr	r3, [sp, #12]
 8009cba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009cbe:	f807 9b01 	strb.w	r9, [r7], #1
 8009cc2:	1afa      	subs	r2, r7, r3
 8009cc4:	9b06      	ldr	r3, [sp, #24]
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	dd07      	ble.n	8009cda <_dtoa_r+0xb4a>
 8009cca:	4651      	mov	r1, sl
 8009ccc:	2300      	movs	r3, #0
 8009cce:	220a      	movs	r2, #10
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	f000 f99f 	bl	800a014 <__multadd>
 8009cd6:	4682      	mov	sl, r0
 8009cd8:	e7ea      	b.n	8009cb0 <_dtoa_r+0xb20>
 8009cda:	9b06      	ldr	r3, [sp, #24]
 8009cdc:	f04f 0800 	mov.w	r8, #0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	bfcc      	ite	gt
 8009ce4:	461f      	movgt	r7, r3
 8009ce6:	2701      	movle	r7, #1
 8009ce8:	9b03      	ldr	r3, [sp, #12]
 8009cea:	441f      	add	r7, r3
 8009cec:	4651      	mov	r1, sl
 8009cee:	2201      	movs	r2, #1
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	f000 fb85 	bl	800a400 <__lshift>
 8009cf6:	4621      	mov	r1, r4
 8009cf8:	4682      	mov	sl, r0
 8009cfa:	f000 fbed 	bl	800a4d8 <__mcmp>
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	dc97      	bgt.n	8009c32 <_dtoa_r+0xaa2>
 8009d02:	d102      	bne.n	8009d0a <_dtoa_r+0xb7a>
 8009d04:	f019 0f01 	tst.w	r9, #1
 8009d08:	d193      	bne.n	8009c32 <_dtoa_r+0xaa2>
 8009d0a:	463b      	mov	r3, r7
 8009d0c:	461f      	mov	r7, r3
 8009d0e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d12:	2a30      	cmp	r2, #48	; 0x30
 8009d14:	d0fa      	beq.n	8009d0c <_dtoa_r+0xb7c>
 8009d16:	e6e1      	b.n	8009adc <_dtoa_r+0x94c>
 8009d18:	9a03      	ldr	r2, [sp, #12]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d18a      	bne.n	8009c34 <_dtoa_r+0xaa4>
 8009d1e:	2331      	movs	r3, #49	; 0x31
 8009d20:	f10b 0b01 	add.w	fp, fp, #1
 8009d24:	e797      	b.n	8009c56 <_dtoa_r+0xac6>
 8009d26:	4b0a      	ldr	r3, [pc, #40]	; (8009d50 <_dtoa_r+0xbc0>)
 8009d28:	f7ff ba9f 	b.w	800926a <_dtoa_r+0xda>
 8009d2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f47f aa77 	bne.w	8009222 <_dtoa_r+0x92>
 8009d34:	4b07      	ldr	r3, [pc, #28]	; (8009d54 <_dtoa_r+0xbc4>)
 8009d36:	f7ff ba98 	b.w	800926a <_dtoa_r+0xda>
 8009d3a:	9b06      	ldr	r3, [sp, #24]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	dcb6      	bgt.n	8009cae <_dtoa_r+0xb1e>
 8009d40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	f73f aeb5 	bgt.w	8009ab2 <_dtoa_r+0x922>
 8009d48:	e7b1      	b.n	8009cae <_dtoa_r+0xb1e>
 8009d4a:	bf00      	nop
 8009d4c:	0800dc96 	.word	0x0800dc96
 8009d50:	0800db5b 	.word	0x0800db5b
 8009d54:	0800dc31 	.word	0x0800dc31

08009d58 <_free_r>:
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	4605      	mov	r5, r0
 8009d5c:	2900      	cmp	r1, #0
 8009d5e:	d040      	beq.n	8009de2 <_free_r+0x8a>
 8009d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d64:	1f0c      	subs	r4, r1, #4
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	bfb8      	it	lt
 8009d6a:	18e4      	addlt	r4, r4, r3
 8009d6c:	f000 f8e4 	bl	8009f38 <__malloc_lock>
 8009d70:	4a1c      	ldr	r2, [pc, #112]	; (8009de4 <_free_r+0x8c>)
 8009d72:	6813      	ldr	r3, [r2, #0]
 8009d74:	b933      	cbnz	r3, 8009d84 <_free_r+0x2c>
 8009d76:	6063      	str	r3, [r4, #4]
 8009d78:	6014      	str	r4, [r2, #0]
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d80:	f000 b8e0 	b.w	8009f44 <__malloc_unlock>
 8009d84:	42a3      	cmp	r3, r4
 8009d86:	d908      	bls.n	8009d9a <_free_r+0x42>
 8009d88:	6820      	ldr	r0, [r4, #0]
 8009d8a:	1821      	adds	r1, r4, r0
 8009d8c:	428b      	cmp	r3, r1
 8009d8e:	bf01      	itttt	eq
 8009d90:	6819      	ldreq	r1, [r3, #0]
 8009d92:	685b      	ldreq	r3, [r3, #4]
 8009d94:	1809      	addeq	r1, r1, r0
 8009d96:	6021      	streq	r1, [r4, #0]
 8009d98:	e7ed      	b.n	8009d76 <_free_r+0x1e>
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	b10b      	cbz	r3, 8009da4 <_free_r+0x4c>
 8009da0:	42a3      	cmp	r3, r4
 8009da2:	d9fa      	bls.n	8009d9a <_free_r+0x42>
 8009da4:	6811      	ldr	r1, [r2, #0]
 8009da6:	1850      	adds	r0, r2, r1
 8009da8:	42a0      	cmp	r0, r4
 8009daa:	d10b      	bne.n	8009dc4 <_free_r+0x6c>
 8009dac:	6820      	ldr	r0, [r4, #0]
 8009dae:	4401      	add	r1, r0
 8009db0:	1850      	adds	r0, r2, r1
 8009db2:	4283      	cmp	r3, r0
 8009db4:	6011      	str	r1, [r2, #0]
 8009db6:	d1e0      	bne.n	8009d7a <_free_r+0x22>
 8009db8:	6818      	ldr	r0, [r3, #0]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	4408      	add	r0, r1
 8009dbe:	6010      	str	r0, [r2, #0]
 8009dc0:	6053      	str	r3, [r2, #4]
 8009dc2:	e7da      	b.n	8009d7a <_free_r+0x22>
 8009dc4:	d902      	bls.n	8009dcc <_free_r+0x74>
 8009dc6:	230c      	movs	r3, #12
 8009dc8:	602b      	str	r3, [r5, #0]
 8009dca:	e7d6      	b.n	8009d7a <_free_r+0x22>
 8009dcc:	6820      	ldr	r0, [r4, #0]
 8009dce:	1821      	adds	r1, r4, r0
 8009dd0:	428b      	cmp	r3, r1
 8009dd2:	bf01      	itttt	eq
 8009dd4:	6819      	ldreq	r1, [r3, #0]
 8009dd6:	685b      	ldreq	r3, [r3, #4]
 8009dd8:	1809      	addeq	r1, r1, r0
 8009dda:	6021      	streq	r1, [r4, #0]
 8009ddc:	6063      	str	r3, [r4, #4]
 8009dde:	6054      	str	r4, [r2, #4]
 8009de0:	e7cb      	b.n	8009d7a <_free_r+0x22>
 8009de2:	bd38      	pop	{r3, r4, r5, pc}
 8009de4:	2000055c 	.word	0x2000055c

08009de8 <malloc>:
 8009de8:	4b02      	ldr	r3, [pc, #8]	; (8009df4 <malloc+0xc>)
 8009dea:	4601      	mov	r1, r0
 8009dec:	6818      	ldr	r0, [r3, #0]
 8009dee:	f000 b823 	b.w	8009e38 <_malloc_r>
 8009df2:	bf00      	nop
 8009df4:	20000070 	.word	0x20000070

08009df8 <sbrk_aligned>:
 8009df8:	b570      	push	{r4, r5, r6, lr}
 8009dfa:	4e0e      	ldr	r6, [pc, #56]	; (8009e34 <sbrk_aligned+0x3c>)
 8009dfc:	460c      	mov	r4, r1
 8009dfe:	6831      	ldr	r1, [r6, #0]
 8009e00:	4605      	mov	r5, r0
 8009e02:	b911      	cbnz	r1, 8009e0a <sbrk_aligned+0x12>
 8009e04:	f001 fd9e 	bl	800b944 <_sbrk_r>
 8009e08:	6030      	str	r0, [r6, #0]
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	f001 fd99 	bl	800b944 <_sbrk_r>
 8009e12:	1c43      	adds	r3, r0, #1
 8009e14:	d00a      	beq.n	8009e2c <sbrk_aligned+0x34>
 8009e16:	1cc4      	adds	r4, r0, #3
 8009e18:	f024 0403 	bic.w	r4, r4, #3
 8009e1c:	42a0      	cmp	r0, r4
 8009e1e:	d007      	beq.n	8009e30 <sbrk_aligned+0x38>
 8009e20:	1a21      	subs	r1, r4, r0
 8009e22:	4628      	mov	r0, r5
 8009e24:	f001 fd8e 	bl	800b944 <_sbrk_r>
 8009e28:	3001      	adds	r0, #1
 8009e2a:	d101      	bne.n	8009e30 <sbrk_aligned+0x38>
 8009e2c:	f04f 34ff 	mov.w	r4, #4294967295
 8009e30:	4620      	mov	r0, r4
 8009e32:	bd70      	pop	{r4, r5, r6, pc}
 8009e34:	20000560 	.word	0x20000560

08009e38 <_malloc_r>:
 8009e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e3c:	1ccd      	adds	r5, r1, #3
 8009e3e:	f025 0503 	bic.w	r5, r5, #3
 8009e42:	3508      	adds	r5, #8
 8009e44:	2d0c      	cmp	r5, #12
 8009e46:	bf38      	it	cc
 8009e48:	250c      	movcc	r5, #12
 8009e4a:	2d00      	cmp	r5, #0
 8009e4c:	4607      	mov	r7, r0
 8009e4e:	db01      	blt.n	8009e54 <_malloc_r+0x1c>
 8009e50:	42a9      	cmp	r1, r5
 8009e52:	d905      	bls.n	8009e60 <_malloc_r+0x28>
 8009e54:	230c      	movs	r3, #12
 8009e56:	2600      	movs	r6, #0
 8009e58:	603b      	str	r3, [r7, #0]
 8009e5a:	4630      	mov	r0, r6
 8009e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009f34 <_malloc_r+0xfc>
 8009e64:	f000 f868 	bl	8009f38 <__malloc_lock>
 8009e68:	f8d8 3000 	ldr.w	r3, [r8]
 8009e6c:	461c      	mov	r4, r3
 8009e6e:	bb5c      	cbnz	r4, 8009ec8 <_malloc_r+0x90>
 8009e70:	4629      	mov	r1, r5
 8009e72:	4638      	mov	r0, r7
 8009e74:	f7ff ffc0 	bl	8009df8 <sbrk_aligned>
 8009e78:	1c43      	adds	r3, r0, #1
 8009e7a:	4604      	mov	r4, r0
 8009e7c:	d155      	bne.n	8009f2a <_malloc_r+0xf2>
 8009e7e:	f8d8 4000 	ldr.w	r4, [r8]
 8009e82:	4626      	mov	r6, r4
 8009e84:	2e00      	cmp	r6, #0
 8009e86:	d145      	bne.n	8009f14 <_malloc_r+0xdc>
 8009e88:	2c00      	cmp	r4, #0
 8009e8a:	d048      	beq.n	8009f1e <_malloc_r+0xe6>
 8009e8c:	6823      	ldr	r3, [r4, #0]
 8009e8e:	4631      	mov	r1, r6
 8009e90:	4638      	mov	r0, r7
 8009e92:	eb04 0903 	add.w	r9, r4, r3
 8009e96:	f001 fd55 	bl	800b944 <_sbrk_r>
 8009e9a:	4581      	cmp	r9, r0
 8009e9c:	d13f      	bne.n	8009f1e <_malloc_r+0xe6>
 8009e9e:	6821      	ldr	r1, [r4, #0]
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	1a6d      	subs	r5, r5, r1
 8009ea4:	4629      	mov	r1, r5
 8009ea6:	f7ff ffa7 	bl	8009df8 <sbrk_aligned>
 8009eaa:	3001      	adds	r0, #1
 8009eac:	d037      	beq.n	8009f1e <_malloc_r+0xe6>
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	442b      	add	r3, r5
 8009eb2:	6023      	str	r3, [r4, #0]
 8009eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d038      	beq.n	8009f2e <_malloc_r+0xf6>
 8009ebc:	685a      	ldr	r2, [r3, #4]
 8009ebe:	42a2      	cmp	r2, r4
 8009ec0:	d12b      	bne.n	8009f1a <_malloc_r+0xe2>
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	605a      	str	r2, [r3, #4]
 8009ec6:	e00f      	b.n	8009ee8 <_malloc_r+0xb0>
 8009ec8:	6822      	ldr	r2, [r4, #0]
 8009eca:	1b52      	subs	r2, r2, r5
 8009ecc:	d41f      	bmi.n	8009f0e <_malloc_r+0xd6>
 8009ece:	2a0b      	cmp	r2, #11
 8009ed0:	d917      	bls.n	8009f02 <_malloc_r+0xca>
 8009ed2:	1961      	adds	r1, r4, r5
 8009ed4:	42a3      	cmp	r3, r4
 8009ed6:	6025      	str	r5, [r4, #0]
 8009ed8:	bf18      	it	ne
 8009eda:	6059      	strne	r1, [r3, #4]
 8009edc:	6863      	ldr	r3, [r4, #4]
 8009ede:	bf08      	it	eq
 8009ee0:	f8c8 1000 	streq.w	r1, [r8]
 8009ee4:	5162      	str	r2, [r4, r5]
 8009ee6:	604b      	str	r3, [r1, #4]
 8009ee8:	4638      	mov	r0, r7
 8009eea:	f104 060b 	add.w	r6, r4, #11
 8009eee:	f000 f829 	bl	8009f44 <__malloc_unlock>
 8009ef2:	f026 0607 	bic.w	r6, r6, #7
 8009ef6:	1d23      	adds	r3, r4, #4
 8009ef8:	1af2      	subs	r2, r6, r3
 8009efa:	d0ae      	beq.n	8009e5a <_malloc_r+0x22>
 8009efc:	1b9b      	subs	r3, r3, r6
 8009efe:	50a3      	str	r3, [r4, r2]
 8009f00:	e7ab      	b.n	8009e5a <_malloc_r+0x22>
 8009f02:	42a3      	cmp	r3, r4
 8009f04:	6862      	ldr	r2, [r4, #4]
 8009f06:	d1dd      	bne.n	8009ec4 <_malloc_r+0x8c>
 8009f08:	f8c8 2000 	str.w	r2, [r8]
 8009f0c:	e7ec      	b.n	8009ee8 <_malloc_r+0xb0>
 8009f0e:	4623      	mov	r3, r4
 8009f10:	6864      	ldr	r4, [r4, #4]
 8009f12:	e7ac      	b.n	8009e6e <_malloc_r+0x36>
 8009f14:	4634      	mov	r4, r6
 8009f16:	6876      	ldr	r6, [r6, #4]
 8009f18:	e7b4      	b.n	8009e84 <_malloc_r+0x4c>
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	e7cc      	b.n	8009eb8 <_malloc_r+0x80>
 8009f1e:	230c      	movs	r3, #12
 8009f20:	4638      	mov	r0, r7
 8009f22:	603b      	str	r3, [r7, #0]
 8009f24:	f000 f80e 	bl	8009f44 <__malloc_unlock>
 8009f28:	e797      	b.n	8009e5a <_malloc_r+0x22>
 8009f2a:	6025      	str	r5, [r4, #0]
 8009f2c:	e7dc      	b.n	8009ee8 <_malloc_r+0xb0>
 8009f2e:	605b      	str	r3, [r3, #4]
 8009f30:	deff      	udf	#255	; 0xff
 8009f32:	bf00      	nop
 8009f34:	2000055c 	.word	0x2000055c

08009f38 <__malloc_lock>:
 8009f38:	4801      	ldr	r0, [pc, #4]	; (8009f40 <__malloc_lock+0x8>)
 8009f3a:	f7ff b86a 	b.w	8009012 <__retarget_lock_acquire_recursive>
 8009f3e:	bf00      	nop
 8009f40:	20000558 	.word	0x20000558

08009f44 <__malloc_unlock>:
 8009f44:	4801      	ldr	r0, [pc, #4]	; (8009f4c <__malloc_unlock+0x8>)
 8009f46:	f7ff b865 	b.w	8009014 <__retarget_lock_release_recursive>
 8009f4a:	bf00      	nop
 8009f4c:	20000558 	.word	0x20000558

08009f50 <_Balloc>:
 8009f50:	b570      	push	{r4, r5, r6, lr}
 8009f52:	69c6      	ldr	r6, [r0, #28]
 8009f54:	4604      	mov	r4, r0
 8009f56:	460d      	mov	r5, r1
 8009f58:	b976      	cbnz	r6, 8009f78 <_Balloc+0x28>
 8009f5a:	2010      	movs	r0, #16
 8009f5c:	f7ff ff44 	bl	8009de8 <malloc>
 8009f60:	4602      	mov	r2, r0
 8009f62:	61e0      	str	r0, [r4, #28]
 8009f64:	b920      	cbnz	r0, 8009f70 <_Balloc+0x20>
 8009f66:	216b      	movs	r1, #107	; 0x6b
 8009f68:	4b17      	ldr	r3, [pc, #92]	; (8009fc8 <_Balloc+0x78>)
 8009f6a:	4818      	ldr	r0, [pc, #96]	; (8009fcc <_Balloc+0x7c>)
 8009f6c:	f7ff f866 	bl	800903c <__assert_func>
 8009f70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f74:	6006      	str	r6, [r0, #0]
 8009f76:	60c6      	str	r6, [r0, #12]
 8009f78:	69e6      	ldr	r6, [r4, #28]
 8009f7a:	68f3      	ldr	r3, [r6, #12]
 8009f7c:	b183      	cbz	r3, 8009fa0 <_Balloc+0x50>
 8009f7e:	69e3      	ldr	r3, [r4, #28]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f86:	b9b8      	cbnz	r0, 8009fb8 <_Balloc+0x68>
 8009f88:	2101      	movs	r1, #1
 8009f8a:	fa01 f605 	lsl.w	r6, r1, r5
 8009f8e:	1d72      	adds	r2, r6, #5
 8009f90:	4620      	mov	r0, r4
 8009f92:	0092      	lsls	r2, r2, #2
 8009f94:	f001 fd01 	bl	800b99a <_calloc_r>
 8009f98:	b160      	cbz	r0, 8009fb4 <_Balloc+0x64>
 8009f9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f9e:	e00e      	b.n	8009fbe <_Balloc+0x6e>
 8009fa0:	2221      	movs	r2, #33	; 0x21
 8009fa2:	2104      	movs	r1, #4
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	f001 fcf8 	bl	800b99a <_calloc_r>
 8009faa:	69e3      	ldr	r3, [r4, #28]
 8009fac:	60f0      	str	r0, [r6, #12]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1e4      	bne.n	8009f7e <_Balloc+0x2e>
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	bd70      	pop	{r4, r5, r6, pc}
 8009fb8:	6802      	ldr	r2, [r0, #0]
 8009fba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009fc4:	e7f7      	b.n	8009fb6 <_Balloc+0x66>
 8009fc6:	bf00      	nop
 8009fc8:	0800db84 	.word	0x0800db84
 8009fcc:	0800dca7 	.word	0x0800dca7

08009fd0 <_Bfree>:
 8009fd0:	b570      	push	{r4, r5, r6, lr}
 8009fd2:	69c6      	ldr	r6, [r0, #28]
 8009fd4:	4605      	mov	r5, r0
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	b976      	cbnz	r6, 8009ff8 <_Bfree+0x28>
 8009fda:	2010      	movs	r0, #16
 8009fdc:	f7ff ff04 	bl	8009de8 <malloc>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	61e8      	str	r0, [r5, #28]
 8009fe4:	b920      	cbnz	r0, 8009ff0 <_Bfree+0x20>
 8009fe6:	218f      	movs	r1, #143	; 0x8f
 8009fe8:	4b08      	ldr	r3, [pc, #32]	; (800a00c <_Bfree+0x3c>)
 8009fea:	4809      	ldr	r0, [pc, #36]	; (800a010 <_Bfree+0x40>)
 8009fec:	f7ff f826 	bl	800903c <__assert_func>
 8009ff0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ff4:	6006      	str	r6, [r0, #0]
 8009ff6:	60c6      	str	r6, [r0, #12]
 8009ff8:	b13c      	cbz	r4, 800a00a <_Bfree+0x3a>
 8009ffa:	69eb      	ldr	r3, [r5, #28]
 8009ffc:	6862      	ldr	r2, [r4, #4]
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a004:	6021      	str	r1, [r4, #0]
 800a006:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a00a:	bd70      	pop	{r4, r5, r6, pc}
 800a00c:	0800db84 	.word	0x0800db84
 800a010:	0800dca7 	.word	0x0800dca7

0800a014 <__multadd>:
 800a014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a018:	4607      	mov	r7, r0
 800a01a:	460c      	mov	r4, r1
 800a01c:	461e      	mov	r6, r3
 800a01e:	2000      	movs	r0, #0
 800a020:	690d      	ldr	r5, [r1, #16]
 800a022:	f101 0c14 	add.w	ip, r1, #20
 800a026:	f8dc 3000 	ldr.w	r3, [ip]
 800a02a:	3001      	adds	r0, #1
 800a02c:	b299      	uxth	r1, r3
 800a02e:	fb02 6101 	mla	r1, r2, r1, r6
 800a032:	0c1e      	lsrs	r6, r3, #16
 800a034:	0c0b      	lsrs	r3, r1, #16
 800a036:	fb02 3306 	mla	r3, r2, r6, r3
 800a03a:	b289      	uxth	r1, r1
 800a03c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a040:	4285      	cmp	r5, r0
 800a042:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a046:	f84c 1b04 	str.w	r1, [ip], #4
 800a04a:	dcec      	bgt.n	800a026 <__multadd+0x12>
 800a04c:	b30e      	cbz	r6, 800a092 <__multadd+0x7e>
 800a04e:	68a3      	ldr	r3, [r4, #8]
 800a050:	42ab      	cmp	r3, r5
 800a052:	dc19      	bgt.n	800a088 <__multadd+0x74>
 800a054:	6861      	ldr	r1, [r4, #4]
 800a056:	4638      	mov	r0, r7
 800a058:	3101      	adds	r1, #1
 800a05a:	f7ff ff79 	bl	8009f50 <_Balloc>
 800a05e:	4680      	mov	r8, r0
 800a060:	b928      	cbnz	r0, 800a06e <__multadd+0x5a>
 800a062:	4602      	mov	r2, r0
 800a064:	21ba      	movs	r1, #186	; 0xba
 800a066:	4b0c      	ldr	r3, [pc, #48]	; (800a098 <__multadd+0x84>)
 800a068:	480c      	ldr	r0, [pc, #48]	; (800a09c <__multadd+0x88>)
 800a06a:	f7fe ffe7 	bl	800903c <__assert_func>
 800a06e:	6922      	ldr	r2, [r4, #16]
 800a070:	f104 010c 	add.w	r1, r4, #12
 800a074:	3202      	adds	r2, #2
 800a076:	0092      	lsls	r2, r2, #2
 800a078:	300c      	adds	r0, #12
 800a07a:	f001 fc73 	bl	800b964 <memcpy>
 800a07e:	4621      	mov	r1, r4
 800a080:	4638      	mov	r0, r7
 800a082:	f7ff ffa5 	bl	8009fd0 <_Bfree>
 800a086:	4644      	mov	r4, r8
 800a088:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a08c:	3501      	adds	r5, #1
 800a08e:	615e      	str	r6, [r3, #20]
 800a090:	6125      	str	r5, [r4, #16]
 800a092:	4620      	mov	r0, r4
 800a094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a098:	0800dc96 	.word	0x0800dc96
 800a09c:	0800dca7 	.word	0x0800dca7

0800a0a0 <__s2b>:
 800a0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0a4:	4615      	mov	r5, r2
 800a0a6:	2209      	movs	r2, #9
 800a0a8:	461f      	mov	r7, r3
 800a0aa:	3308      	adds	r3, #8
 800a0ac:	460c      	mov	r4, r1
 800a0ae:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0b2:	4606      	mov	r6, r0
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	db09      	blt.n	800a0d0 <__s2b+0x30>
 800a0bc:	4630      	mov	r0, r6
 800a0be:	f7ff ff47 	bl	8009f50 <_Balloc>
 800a0c2:	b940      	cbnz	r0, 800a0d6 <__s2b+0x36>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	21d3      	movs	r1, #211	; 0xd3
 800a0c8:	4b18      	ldr	r3, [pc, #96]	; (800a12c <__s2b+0x8c>)
 800a0ca:	4819      	ldr	r0, [pc, #100]	; (800a130 <__s2b+0x90>)
 800a0cc:	f7fe ffb6 	bl	800903c <__assert_func>
 800a0d0:	0052      	lsls	r2, r2, #1
 800a0d2:	3101      	adds	r1, #1
 800a0d4:	e7f0      	b.n	800a0b8 <__s2b+0x18>
 800a0d6:	9b08      	ldr	r3, [sp, #32]
 800a0d8:	2d09      	cmp	r5, #9
 800a0da:	6143      	str	r3, [r0, #20]
 800a0dc:	f04f 0301 	mov.w	r3, #1
 800a0e0:	6103      	str	r3, [r0, #16]
 800a0e2:	dd16      	ble.n	800a112 <__s2b+0x72>
 800a0e4:	f104 0909 	add.w	r9, r4, #9
 800a0e8:	46c8      	mov	r8, r9
 800a0ea:	442c      	add	r4, r5
 800a0ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a0f0:	4601      	mov	r1, r0
 800a0f2:	220a      	movs	r2, #10
 800a0f4:	4630      	mov	r0, r6
 800a0f6:	3b30      	subs	r3, #48	; 0x30
 800a0f8:	f7ff ff8c 	bl	800a014 <__multadd>
 800a0fc:	45a0      	cmp	r8, r4
 800a0fe:	d1f5      	bne.n	800a0ec <__s2b+0x4c>
 800a100:	f1a5 0408 	sub.w	r4, r5, #8
 800a104:	444c      	add	r4, r9
 800a106:	1b2d      	subs	r5, r5, r4
 800a108:	1963      	adds	r3, r4, r5
 800a10a:	42bb      	cmp	r3, r7
 800a10c:	db04      	blt.n	800a118 <__s2b+0x78>
 800a10e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a112:	2509      	movs	r5, #9
 800a114:	340a      	adds	r4, #10
 800a116:	e7f6      	b.n	800a106 <__s2b+0x66>
 800a118:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a11c:	4601      	mov	r1, r0
 800a11e:	220a      	movs	r2, #10
 800a120:	4630      	mov	r0, r6
 800a122:	3b30      	subs	r3, #48	; 0x30
 800a124:	f7ff ff76 	bl	800a014 <__multadd>
 800a128:	e7ee      	b.n	800a108 <__s2b+0x68>
 800a12a:	bf00      	nop
 800a12c:	0800dc96 	.word	0x0800dc96
 800a130:	0800dca7 	.word	0x0800dca7

0800a134 <__hi0bits>:
 800a134:	0c02      	lsrs	r2, r0, #16
 800a136:	0412      	lsls	r2, r2, #16
 800a138:	4603      	mov	r3, r0
 800a13a:	b9ca      	cbnz	r2, 800a170 <__hi0bits+0x3c>
 800a13c:	0403      	lsls	r3, r0, #16
 800a13e:	2010      	movs	r0, #16
 800a140:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a144:	bf04      	itt	eq
 800a146:	021b      	lsleq	r3, r3, #8
 800a148:	3008      	addeq	r0, #8
 800a14a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a14e:	bf04      	itt	eq
 800a150:	011b      	lsleq	r3, r3, #4
 800a152:	3004      	addeq	r0, #4
 800a154:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a158:	bf04      	itt	eq
 800a15a:	009b      	lsleq	r3, r3, #2
 800a15c:	3002      	addeq	r0, #2
 800a15e:	2b00      	cmp	r3, #0
 800a160:	db05      	blt.n	800a16e <__hi0bits+0x3a>
 800a162:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a166:	f100 0001 	add.w	r0, r0, #1
 800a16a:	bf08      	it	eq
 800a16c:	2020      	moveq	r0, #32
 800a16e:	4770      	bx	lr
 800a170:	2000      	movs	r0, #0
 800a172:	e7e5      	b.n	800a140 <__hi0bits+0xc>

0800a174 <__lo0bits>:
 800a174:	6803      	ldr	r3, [r0, #0]
 800a176:	4602      	mov	r2, r0
 800a178:	f013 0007 	ands.w	r0, r3, #7
 800a17c:	d00b      	beq.n	800a196 <__lo0bits+0x22>
 800a17e:	07d9      	lsls	r1, r3, #31
 800a180:	d421      	bmi.n	800a1c6 <__lo0bits+0x52>
 800a182:	0798      	lsls	r0, r3, #30
 800a184:	bf49      	itett	mi
 800a186:	085b      	lsrmi	r3, r3, #1
 800a188:	089b      	lsrpl	r3, r3, #2
 800a18a:	2001      	movmi	r0, #1
 800a18c:	6013      	strmi	r3, [r2, #0]
 800a18e:	bf5c      	itt	pl
 800a190:	2002      	movpl	r0, #2
 800a192:	6013      	strpl	r3, [r2, #0]
 800a194:	4770      	bx	lr
 800a196:	b299      	uxth	r1, r3
 800a198:	b909      	cbnz	r1, 800a19e <__lo0bits+0x2a>
 800a19a:	2010      	movs	r0, #16
 800a19c:	0c1b      	lsrs	r3, r3, #16
 800a19e:	b2d9      	uxtb	r1, r3
 800a1a0:	b909      	cbnz	r1, 800a1a6 <__lo0bits+0x32>
 800a1a2:	3008      	adds	r0, #8
 800a1a4:	0a1b      	lsrs	r3, r3, #8
 800a1a6:	0719      	lsls	r1, r3, #28
 800a1a8:	bf04      	itt	eq
 800a1aa:	091b      	lsreq	r3, r3, #4
 800a1ac:	3004      	addeq	r0, #4
 800a1ae:	0799      	lsls	r1, r3, #30
 800a1b0:	bf04      	itt	eq
 800a1b2:	089b      	lsreq	r3, r3, #2
 800a1b4:	3002      	addeq	r0, #2
 800a1b6:	07d9      	lsls	r1, r3, #31
 800a1b8:	d403      	bmi.n	800a1c2 <__lo0bits+0x4e>
 800a1ba:	085b      	lsrs	r3, r3, #1
 800a1bc:	f100 0001 	add.w	r0, r0, #1
 800a1c0:	d003      	beq.n	800a1ca <__lo0bits+0x56>
 800a1c2:	6013      	str	r3, [r2, #0]
 800a1c4:	4770      	bx	lr
 800a1c6:	2000      	movs	r0, #0
 800a1c8:	4770      	bx	lr
 800a1ca:	2020      	movs	r0, #32
 800a1cc:	4770      	bx	lr
	...

0800a1d0 <__i2b>:
 800a1d0:	b510      	push	{r4, lr}
 800a1d2:	460c      	mov	r4, r1
 800a1d4:	2101      	movs	r1, #1
 800a1d6:	f7ff febb 	bl	8009f50 <_Balloc>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	b928      	cbnz	r0, 800a1ea <__i2b+0x1a>
 800a1de:	f240 1145 	movw	r1, #325	; 0x145
 800a1e2:	4b04      	ldr	r3, [pc, #16]	; (800a1f4 <__i2b+0x24>)
 800a1e4:	4804      	ldr	r0, [pc, #16]	; (800a1f8 <__i2b+0x28>)
 800a1e6:	f7fe ff29 	bl	800903c <__assert_func>
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	6144      	str	r4, [r0, #20]
 800a1ee:	6103      	str	r3, [r0, #16]
 800a1f0:	bd10      	pop	{r4, pc}
 800a1f2:	bf00      	nop
 800a1f4:	0800dc96 	.word	0x0800dc96
 800a1f8:	0800dca7 	.word	0x0800dca7

0800a1fc <__multiply>:
 800a1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a200:	4691      	mov	r9, r2
 800a202:	690a      	ldr	r2, [r1, #16]
 800a204:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a208:	460c      	mov	r4, r1
 800a20a:	429a      	cmp	r2, r3
 800a20c:	bfbe      	ittt	lt
 800a20e:	460b      	movlt	r3, r1
 800a210:	464c      	movlt	r4, r9
 800a212:	4699      	movlt	r9, r3
 800a214:	6927      	ldr	r7, [r4, #16]
 800a216:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a21a:	68a3      	ldr	r3, [r4, #8]
 800a21c:	6861      	ldr	r1, [r4, #4]
 800a21e:	eb07 060a 	add.w	r6, r7, sl
 800a222:	42b3      	cmp	r3, r6
 800a224:	b085      	sub	sp, #20
 800a226:	bfb8      	it	lt
 800a228:	3101      	addlt	r1, #1
 800a22a:	f7ff fe91 	bl	8009f50 <_Balloc>
 800a22e:	b930      	cbnz	r0, 800a23e <__multiply+0x42>
 800a230:	4602      	mov	r2, r0
 800a232:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a236:	4b43      	ldr	r3, [pc, #268]	; (800a344 <__multiply+0x148>)
 800a238:	4843      	ldr	r0, [pc, #268]	; (800a348 <__multiply+0x14c>)
 800a23a:	f7fe feff 	bl	800903c <__assert_func>
 800a23e:	f100 0514 	add.w	r5, r0, #20
 800a242:	462b      	mov	r3, r5
 800a244:	2200      	movs	r2, #0
 800a246:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a24a:	4543      	cmp	r3, r8
 800a24c:	d321      	bcc.n	800a292 <__multiply+0x96>
 800a24e:	f104 0314 	add.w	r3, r4, #20
 800a252:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a256:	f109 0314 	add.w	r3, r9, #20
 800a25a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a25e:	9202      	str	r2, [sp, #8]
 800a260:	1b3a      	subs	r2, r7, r4
 800a262:	3a15      	subs	r2, #21
 800a264:	f022 0203 	bic.w	r2, r2, #3
 800a268:	3204      	adds	r2, #4
 800a26a:	f104 0115 	add.w	r1, r4, #21
 800a26e:	428f      	cmp	r7, r1
 800a270:	bf38      	it	cc
 800a272:	2204      	movcc	r2, #4
 800a274:	9201      	str	r2, [sp, #4]
 800a276:	9a02      	ldr	r2, [sp, #8]
 800a278:	9303      	str	r3, [sp, #12]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d80c      	bhi.n	800a298 <__multiply+0x9c>
 800a27e:	2e00      	cmp	r6, #0
 800a280:	dd03      	ble.n	800a28a <__multiply+0x8e>
 800a282:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a286:	2b00      	cmp	r3, #0
 800a288:	d05a      	beq.n	800a340 <__multiply+0x144>
 800a28a:	6106      	str	r6, [r0, #16]
 800a28c:	b005      	add	sp, #20
 800a28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a292:	f843 2b04 	str.w	r2, [r3], #4
 800a296:	e7d8      	b.n	800a24a <__multiply+0x4e>
 800a298:	f8b3 a000 	ldrh.w	sl, [r3]
 800a29c:	f1ba 0f00 	cmp.w	sl, #0
 800a2a0:	d023      	beq.n	800a2ea <__multiply+0xee>
 800a2a2:	46a9      	mov	r9, r5
 800a2a4:	f04f 0c00 	mov.w	ip, #0
 800a2a8:	f104 0e14 	add.w	lr, r4, #20
 800a2ac:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a2b0:	f8d9 1000 	ldr.w	r1, [r9]
 800a2b4:	fa1f fb82 	uxth.w	fp, r2
 800a2b8:	b289      	uxth	r1, r1
 800a2ba:	fb0a 110b 	mla	r1, sl, fp, r1
 800a2be:	4461      	add	r1, ip
 800a2c0:	f8d9 c000 	ldr.w	ip, [r9]
 800a2c4:	0c12      	lsrs	r2, r2, #16
 800a2c6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a2ca:	fb0a c202 	mla	r2, sl, r2, ip
 800a2ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a2d2:	b289      	uxth	r1, r1
 800a2d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a2d8:	4577      	cmp	r7, lr
 800a2da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a2de:	f849 1b04 	str.w	r1, [r9], #4
 800a2e2:	d8e3      	bhi.n	800a2ac <__multiply+0xb0>
 800a2e4:	9a01      	ldr	r2, [sp, #4]
 800a2e6:	f845 c002 	str.w	ip, [r5, r2]
 800a2ea:	9a03      	ldr	r2, [sp, #12]
 800a2ec:	3304      	adds	r3, #4
 800a2ee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a2f2:	f1b9 0f00 	cmp.w	r9, #0
 800a2f6:	d021      	beq.n	800a33c <__multiply+0x140>
 800a2f8:	46ae      	mov	lr, r5
 800a2fa:	f04f 0a00 	mov.w	sl, #0
 800a2fe:	6829      	ldr	r1, [r5, #0]
 800a300:	f104 0c14 	add.w	ip, r4, #20
 800a304:	f8bc b000 	ldrh.w	fp, [ip]
 800a308:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a30c:	b289      	uxth	r1, r1
 800a30e:	fb09 220b 	mla	r2, r9, fp, r2
 800a312:	4452      	add	r2, sl
 800a314:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a318:	f84e 1b04 	str.w	r1, [lr], #4
 800a31c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a320:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a324:	f8be 1000 	ldrh.w	r1, [lr]
 800a328:	4567      	cmp	r7, ip
 800a32a:	fb09 110a 	mla	r1, r9, sl, r1
 800a32e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a332:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a336:	d8e5      	bhi.n	800a304 <__multiply+0x108>
 800a338:	9a01      	ldr	r2, [sp, #4]
 800a33a:	50a9      	str	r1, [r5, r2]
 800a33c:	3504      	adds	r5, #4
 800a33e:	e79a      	b.n	800a276 <__multiply+0x7a>
 800a340:	3e01      	subs	r6, #1
 800a342:	e79c      	b.n	800a27e <__multiply+0x82>
 800a344:	0800dc96 	.word	0x0800dc96
 800a348:	0800dca7 	.word	0x0800dca7

0800a34c <__pow5mult>:
 800a34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a350:	4615      	mov	r5, r2
 800a352:	f012 0203 	ands.w	r2, r2, #3
 800a356:	4606      	mov	r6, r0
 800a358:	460f      	mov	r7, r1
 800a35a:	d007      	beq.n	800a36c <__pow5mult+0x20>
 800a35c:	4c25      	ldr	r4, [pc, #148]	; (800a3f4 <__pow5mult+0xa8>)
 800a35e:	3a01      	subs	r2, #1
 800a360:	2300      	movs	r3, #0
 800a362:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a366:	f7ff fe55 	bl	800a014 <__multadd>
 800a36a:	4607      	mov	r7, r0
 800a36c:	10ad      	asrs	r5, r5, #2
 800a36e:	d03d      	beq.n	800a3ec <__pow5mult+0xa0>
 800a370:	69f4      	ldr	r4, [r6, #28]
 800a372:	b97c      	cbnz	r4, 800a394 <__pow5mult+0x48>
 800a374:	2010      	movs	r0, #16
 800a376:	f7ff fd37 	bl	8009de8 <malloc>
 800a37a:	4602      	mov	r2, r0
 800a37c:	61f0      	str	r0, [r6, #28]
 800a37e:	b928      	cbnz	r0, 800a38c <__pow5mult+0x40>
 800a380:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a384:	4b1c      	ldr	r3, [pc, #112]	; (800a3f8 <__pow5mult+0xac>)
 800a386:	481d      	ldr	r0, [pc, #116]	; (800a3fc <__pow5mult+0xb0>)
 800a388:	f7fe fe58 	bl	800903c <__assert_func>
 800a38c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a390:	6004      	str	r4, [r0, #0]
 800a392:	60c4      	str	r4, [r0, #12]
 800a394:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a398:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a39c:	b94c      	cbnz	r4, 800a3b2 <__pow5mult+0x66>
 800a39e:	f240 2171 	movw	r1, #625	; 0x271
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	f7ff ff14 	bl	800a1d0 <__i2b>
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	4604      	mov	r4, r0
 800a3ac:	f8c8 0008 	str.w	r0, [r8, #8]
 800a3b0:	6003      	str	r3, [r0, #0]
 800a3b2:	f04f 0900 	mov.w	r9, #0
 800a3b6:	07eb      	lsls	r3, r5, #31
 800a3b8:	d50a      	bpl.n	800a3d0 <__pow5mult+0x84>
 800a3ba:	4639      	mov	r1, r7
 800a3bc:	4622      	mov	r2, r4
 800a3be:	4630      	mov	r0, r6
 800a3c0:	f7ff ff1c 	bl	800a1fc <__multiply>
 800a3c4:	4680      	mov	r8, r0
 800a3c6:	4639      	mov	r1, r7
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	f7ff fe01 	bl	8009fd0 <_Bfree>
 800a3ce:	4647      	mov	r7, r8
 800a3d0:	106d      	asrs	r5, r5, #1
 800a3d2:	d00b      	beq.n	800a3ec <__pow5mult+0xa0>
 800a3d4:	6820      	ldr	r0, [r4, #0]
 800a3d6:	b938      	cbnz	r0, 800a3e8 <__pow5mult+0x9c>
 800a3d8:	4622      	mov	r2, r4
 800a3da:	4621      	mov	r1, r4
 800a3dc:	4630      	mov	r0, r6
 800a3de:	f7ff ff0d 	bl	800a1fc <__multiply>
 800a3e2:	6020      	str	r0, [r4, #0]
 800a3e4:	f8c0 9000 	str.w	r9, [r0]
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	e7e4      	b.n	800a3b6 <__pow5mult+0x6a>
 800a3ec:	4638      	mov	r0, r7
 800a3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3f2:	bf00      	nop
 800a3f4:	0800ddf0 	.word	0x0800ddf0
 800a3f8:	0800db84 	.word	0x0800db84
 800a3fc:	0800dca7 	.word	0x0800dca7

0800a400 <__lshift>:
 800a400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a404:	460c      	mov	r4, r1
 800a406:	4607      	mov	r7, r0
 800a408:	4691      	mov	r9, r2
 800a40a:	6923      	ldr	r3, [r4, #16]
 800a40c:	6849      	ldr	r1, [r1, #4]
 800a40e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a412:	68a3      	ldr	r3, [r4, #8]
 800a414:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a418:	f108 0601 	add.w	r6, r8, #1
 800a41c:	42b3      	cmp	r3, r6
 800a41e:	db0b      	blt.n	800a438 <__lshift+0x38>
 800a420:	4638      	mov	r0, r7
 800a422:	f7ff fd95 	bl	8009f50 <_Balloc>
 800a426:	4605      	mov	r5, r0
 800a428:	b948      	cbnz	r0, 800a43e <__lshift+0x3e>
 800a42a:	4602      	mov	r2, r0
 800a42c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a430:	4b27      	ldr	r3, [pc, #156]	; (800a4d0 <__lshift+0xd0>)
 800a432:	4828      	ldr	r0, [pc, #160]	; (800a4d4 <__lshift+0xd4>)
 800a434:	f7fe fe02 	bl	800903c <__assert_func>
 800a438:	3101      	adds	r1, #1
 800a43a:	005b      	lsls	r3, r3, #1
 800a43c:	e7ee      	b.n	800a41c <__lshift+0x1c>
 800a43e:	2300      	movs	r3, #0
 800a440:	f100 0114 	add.w	r1, r0, #20
 800a444:	f100 0210 	add.w	r2, r0, #16
 800a448:	4618      	mov	r0, r3
 800a44a:	4553      	cmp	r3, sl
 800a44c:	db33      	blt.n	800a4b6 <__lshift+0xb6>
 800a44e:	6920      	ldr	r0, [r4, #16]
 800a450:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a454:	f104 0314 	add.w	r3, r4, #20
 800a458:	f019 091f 	ands.w	r9, r9, #31
 800a45c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a460:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a464:	d02b      	beq.n	800a4be <__lshift+0xbe>
 800a466:	468a      	mov	sl, r1
 800a468:	2200      	movs	r2, #0
 800a46a:	f1c9 0e20 	rsb	lr, r9, #32
 800a46e:	6818      	ldr	r0, [r3, #0]
 800a470:	fa00 f009 	lsl.w	r0, r0, r9
 800a474:	4310      	orrs	r0, r2
 800a476:	f84a 0b04 	str.w	r0, [sl], #4
 800a47a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a47e:	459c      	cmp	ip, r3
 800a480:	fa22 f20e 	lsr.w	r2, r2, lr
 800a484:	d8f3      	bhi.n	800a46e <__lshift+0x6e>
 800a486:	ebac 0304 	sub.w	r3, ip, r4
 800a48a:	3b15      	subs	r3, #21
 800a48c:	f023 0303 	bic.w	r3, r3, #3
 800a490:	3304      	adds	r3, #4
 800a492:	f104 0015 	add.w	r0, r4, #21
 800a496:	4584      	cmp	ip, r0
 800a498:	bf38      	it	cc
 800a49a:	2304      	movcc	r3, #4
 800a49c:	50ca      	str	r2, [r1, r3]
 800a49e:	b10a      	cbz	r2, 800a4a4 <__lshift+0xa4>
 800a4a0:	f108 0602 	add.w	r6, r8, #2
 800a4a4:	3e01      	subs	r6, #1
 800a4a6:	4638      	mov	r0, r7
 800a4a8:	4621      	mov	r1, r4
 800a4aa:	612e      	str	r6, [r5, #16]
 800a4ac:	f7ff fd90 	bl	8009fd0 <_Bfree>
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	e7c5      	b.n	800a44a <__lshift+0x4a>
 800a4be:	3904      	subs	r1, #4
 800a4c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4c4:	459c      	cmp	ip, r3
 800a4c6:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4ca:	d8f9      	bhi.n	800a4c0 <__lshift+0xc0>
 800a4cc:	e7ea      	b.n	800a4a4 <__lshift+0xa4>
 800a4ce:	bf00      	nop
 800a4d0:	0800dc96 	.word	0x0800dc96
 800a4d4:	0800dca7 	.word	0x0800dca7

0800a4d8 <__mcmp>:
 800a4d8:	4603      	mov	r3, r0
 800a4da:	690a      	ldr	r2, [r1, #16]
 800a4dc:	6900      	ldr	r0, [r0, #16]
 800a4de:	b530      	push	{r4, r5, lr}
 800a4e0:	1a80      	subs	r0, r0, r2
 800a4e2:	d10d      	bne.n	800a500 <__mcmp+0x28>
 800a4e4:	3314      	adds	r3, #20
 800a4e6:	3114      	adds	r1, #20
 800a4e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a4ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a4f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a4f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a4f8:	4295      	cmp	r5, r2
 800a4fa:	d002      	beq.n	800a502 <__mcmp+0x2a>
 800a4fc:	d304      	bcc.n	800a508 <__mcmp+0x30>
 800a4fe:	2001      	movs	r0, #1
 800a500:	bd30      	pop	{r4, r5, pc}
 800a502:	42a3      	cmp	r3, r4
 800a504:	d3f4      	bcc.n	800a4f0 <__mcmp+0x18>
 800a506:	e7fb      	b.n	800a500 <__mcmp+0x28>
 800a508:	f04f 30ff 	mov.w	r0, #4294967295
 800a50c:	e7f8      	b.n	800a500 <__mcmp+0x28>
	...

0800a510 <__mdiff>:
 800a510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a514:	460d      	mov	r5, r1
 800a516:	4607      	mov	r7, r0
 800a518:	4611      	mov	r1, r2
 800a51a:	4628      	mov	r0, r5
 800a51c:	4614      	mov	r4, r2
 800a51e:	f7ff ffdb 	bl	800a4d8 <__mcmp>
 800a522:	1e06      	subs	r6, r0, #0
 800a524:	d111      	bne.n	800a54a <__mdiff+0x3a>
 800a526:	4631      	mov	r1, r6
 800a528:	4638      	mov	r0, r7
 800a52a:	f7ff fd11 	bl	8009f50 <_Balloc>
 800a52e:	4602      	mov	r2, r0
 800a530:	b928      	cbnz	r0, 800a53e <__mdiff+0x2e>
 800a532:	f240 2137 	movw	r1, #567	; 0x237
 800a536:	4b3a      	ldr	r3, [pc, #232]	; (800a620 <__mdiff+0x110>)
 800a538:	483a      	ldr	r0, [pc, #232]	; (800a624 <__mdiff+0x114>)
 800a53a:	f7fe fd7f 	bl	800903c <__assert_func>
 800a53e:	2301      	movs	r3, #1
 800a540:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a544:	4610      	mov	r0, r2
 800a546:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a54a:	bfa4      	itt	ge
 800a54c:	4623      	movge	r3, r4
 800a54e:	462c      	movge	r4, r5
 800a550:	4638      	mov	r0, r7
 800a552:	6861      	ldr	r1, [r4, #4]
 800a554:	bfa6      	itte	ge
 800a556:	461d      	movge	r5, r3
 800a558:	2600      	movge	r6, #0
 800a55a:	2601      	movlt	r6, #1
 800a55c:	f7ff fcf8 	bl	8009f50 <_Balloc>
 800a560:	4602      	mov	r2, r0
 800a562:	b918      	cbnz	r0, 800a56c <__mdiff+0x5c>
 800a564:	f240 2145 	movw	r1, #581	; 0x245
 800a568:	4b2d      	ldr	r3, [pc, #180]	; (800a620 <__mdiff+0x110>)
 800a56a:	e7e5      	b.n	800a538 <__mdiff+0x28>
 800a56c:	f102 0814 	add.w	r8, r2, #20
 800a570:	46c2      	mov	sl, r8
 800a572:	f04f 0c00 	mov.w	ip, #0
 800a576:	6927      	ldr	r7, [r4, #16]
 800a578:	60c6      	str	r6, [r0, #12]
 800a57a:	692e      	ldr	r6, [r5, #16]
 800a57c:	f104 0014 	add.w	r0, r4, #20
 800a580:	f105 0914 	add.w	r9, r5, #20
 800a584:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a588:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a58c:	3410      	adds	r4, #16
 800a58e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a592:	f859 3b04 	ldr.w	r3, [r9], #4
 800a596:	fa1f f18b 	uxth.w	r1, fp
 800a59a:	4461      	add	r1, ip
 800a59c:	fa1f fc83 	uxth.w	ip, r3
 800a5a0:	0c1b      	lsrs	r3, r3, #16
 800a5a2:	eba1 010c 	sub.w	r1, r1, ip
 800a5a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a5aa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a5ae:	b289      	uxth	r1, r1
 800a5b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a5b4:	454e      	cmp	r6, r9
 800a5b6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a5ba:	f84a 1b04 	str.w	r1, [sl], #4
 800a5be:	d8e6      	bhi.n	800a58e <__mdiff+0x7e>
 800a5c0:	1b73      	subs	r3, r6, r5
 800a5c2:	3b15      	subs	r3, #21
 800a5c4:	f023 0303 	bic.w	r3, r3, #3
 800a5c8:	3515      	adds	r5, #21
 800a5ca:	3304      	adds	r3, #4
 800a5cc:	42ae      	cmp	r6, r5
 800a5ce:	bf38      	it	cc
 800a5d0:	2304      	movcc	r3, #4
 800a5d2:	4418      	add	r0, r3
 800a5d4:	4443      	add	r3, r8
 800a5d6:	461e      	mov	r6, r3
 800a5d8:	4605      	mov	r5, r0
 800a5da:	4575      	cmp	r5, lr
 800a5dc:	d30e      	bcc.n	800a5fc <__mdiff+0xec>
 800a5de:	f10e 0103 	add.w	r1, lr, #3
 800a5e2:	1a09      	subs	r1, r1, r0
 800a5e4:	f021 0103 	bic.w	r1, r1, #3
 800a5e8:	3803      	subs	r0, #3
 800a5ea:	4586      	cmp	lr, r0
 800a5ec:	bf38      	it	cc
 800a5ee:	2100      	movcc	r1, #0
 800a5f0:	440b      	add	r3, r1
 800a5f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a5f6:	b189      	cbz	r1, 800a61c <__mdiff+0x10c>
 800a5f8:	6117      	str	r7, [r2, #16]
 800a5fa:	e7a3      	b.n	800a544 <__mdiff+0x34>
 800a5fc:	f855 8b04 	ldr.w	r8, [r5], #4
 800a600:	fa1f f188 	uxth.w	r1, r8
 800a604:	4461      	add	r1, ip
 800a606:	140c      	asrs	r4, r1, #16
 800a608:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a60c:	b289      	uxth	r1, r1
 800a60e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a612:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a616:	f846 1b04 	str.w	r1, [r6], #4
 800a61a:	e7de      	b.n	800a5da <__mdiff+0xca>
 800a61c:	3f01      	subs	r7, #1
 800a61e:	e7e8      	b.n	800a5f2 <__mdiff+0xe2>
 800a620:	0800dc96 	.word	0x0800dc96
 800a624:	0800dca7 	.word	0x0800dca7

0800a628 <__ulp>:
 800a628:	4b0e      	ldr	r3, [pc, #56]	; (800a664 <__ulp+0x3c>)
 800a62a:	400b      	ands	r3, r1
 800a62c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a630:	2b00      	cmp	r3, #0
 800a632:	dc08      	bgt.n	800a646 <__ulp+0x1e>
 800a634:	425b      	negs	r3, r3
 800a636:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a63a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a63e:	da04      	bge.n	800a64a <__ulp+0x22>
 800a640:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a644:	4113      	asrs	r3, r2
 800a646:	2200      	movs	r2, #0
 800a648:	e008      	b.n	800a65c <__ulp+0x34>
 800a64a:	f1a2 0314 	sub.w	r3, r2, #20
 800a64e:	2b1e      	cmp	r3, #30
 800a650:	bfd6      	itet	le
 800a652:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a656:	2201      	movgt	r2, #1
 800a658:	40da      	lsrle	r2, r3
 800a65a:	2300      	movs	r3, #0
 800a65c:	4619      	mov	r1, r3
 800a65e:	4610      	mov	r0, r2
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	7ff00000 	.word	0x7ff00000

0800a668 <__b2d>:
 800a668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a66a:	6905      	ldr	r5, [r0, #16]
 800a66c:	f100 0714 	add.w	r7, r0, #20
 800a670:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a674:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a678:	1f2e      	subs	r6, r5, #4
 800a67a:	4620      	mov	r0, r4
 800a67c:	f7ff fd5a 	bl	800a134 <__hi0bits>
 800a680:	f1c0 0220 	rsb	r2, r0, #32
 800a684:	280a      	cmp	r0, #10
 800a686:	4603      	mov	r3, r0
 800a688:	f8df c068 	ldr.w	ip, [pc, #104]	; 800a6f4 <__b2d+0x8c>
 800a68c:	600a      	str	r2, [r1, #0]
 800a68e:	dc12      	bgt.n	800a6b6 <__b2d+0x4e>
 800a690:	f1c0 0e0b 	rsb	lr, r0, #11
 800a694:	fa24 f20e 	lsr.w	r2, r4, lr
 800a698:	42b7      	cmp	r7, r6
 800a69a:	ea42 010c 	orr.w	r1, r2, ip
 800a69e:	bf2c      	ite	cs
 800a6a0:	2200      	movcs	r2, #0
 800a6a2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800a6a6:	3315      	adds	r3, #21
 800a6a8:	fa04 f303 	lsl.w	r3, r4, r3
 800a6ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800a6b0:	431a      	orrs	r2, r3
 800a6b2:	4610      	mov	r0, r2
 800a6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6b6:	42b7      	cmp	r7, r6
 800a6b8:	bf2e      	itee	cs
 800a6ba:	2200      	movcs	r2, #0
 800a6bc:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800a6c0:	f1a5 0608 	subcc.w	r6, r5, #8
 800a6c4:	3b0b      	subs	r3, #11
 800a6c6:	d012      	beq.n	800a6ee <__b2d+0x86>
 800a6c8:	f1c3 0520 	rsb	r5, r3, #32
 800a6cc:	fa22 f105 	lsr.w	r1, r2, r5
 800a6d0:	409c      	lsls	r4, r3
 800a6d2:	430c      	orrs	r4, r1
 800a6d4:	42be      	cmp	r6, r7
 800a6d6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800a6da:	bf94      	ite	ls
 800a6dc:	2400      	movls	r4, #0
 800a6de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a6e2:	409a      	lsls	r2, r3
 800a6e4:	40ec      	lsrs	r4, r5
 800a6e6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a6ea:	4322      	orrs	r2, r4
 800a6ec:	e7e1      	b.n	800a6b2 <__b2d+0x4a>
 800a6ee:	ea44 010c 	orr.w	r1, r4, ip
 800a6f2:	e7de      	b.n	800a6b2 <__b2d+0x4a>
 800a6f4:	3ff00000 	.word	0x3ff00000

0800a6f8 <__d2b>:
 800a6f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6fa:	2101      	movs	r1, #1
 800a6fc:	4617      	mov	r7, r2
 800a6fe:	461c      	mov	r4, r3
 800a700:	9e08      	ldr	r6, [sp, #32]
 800a702:	f7ff fc25 	bl	8009f50 <_Balloc>
 800a706:	4605      	mov	r5, r0
 800a708:	b930      	cbnz	r0, 800a718 <__d2b+0x20>
 800a70a:	4602      	mov	r2, r0
 800a70c:	f240 310f 	movw	r1, #783	; 0x30f
 800a710:	4b22      	ldr	r3, [pc, #136]	; (800a79c <__d2b+0xa4>)
 800a712:	4823      	ldr	r0, [pc, #140]	; (800a7a0 <__d2b+0xa8>)
 800a714:	f7fe fc92 	bl	800903c <__assert_func>
 800a718:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a71c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a720:	bb24      	cbnz	r4, 800a76c <__d2b+0x74>
 800a722:	2f00      	cmp	r7, #0
 800a724:	9301      	str	r3, [sp, #4]
 800a726:	d026      	beq.n	800a776 <__d2b+0x7e>
 800a728:	4668      	mov	r0, sp
 800a72a:	9700      	str	r7, [sp, #0]
 800a72c:	f7ff fd22 	bl	800a174 <__lo0bits>
 800a730:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a734:	b1e8      	cbz	r0, 800a772 <__d2b+0x7a>
 800a736:	f1c0 0320 	rsb	r3, r0, #32
 800a73a:	fa02 f303 	lsl.w	r3, r2, r3
 800a73e:	430b      	orrs	r3, r1
 800a740:	40c2      	lsrs	r2, r0
 800a742:	616b      	str	r3, [r5, #20]
 800a744:	9201      	str	r2, [sp, #4]
 800a746:	9b01      	ldr	r3, [sp, #4]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	bf14      	ite	ne
 800a74c:	2102      	movne	r1, #2
 800a74e:	2101      	moveq	r1, #1
 800a750:	61ab      	str	r3, [r5, #24]
 800a752:	6129      	str	r1, [r5, #16]
 800a754:	b1bc      	cbz	r4, 800a786 <__d2b+0x8e>
 800a756:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a75a:	4404      	add	r4, r0
 800a75c:	6034      	str	r4, [r6, #0]
 800a75e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a764:	6018      	str	r0, [r3, #0]
 800a766:	4628      	mov	r0, r5
 800a768:	b003      	add	sp, #12
 800a76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a76c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a770:	e7d7      	b.n	800a722 <__d2b+0x2a>
 800a772:	6169      	str	r1, [r5, #20]
 800a774:	e7e7      	b.n	800a746 <__d2b+0x4e>
 800a776:	a801      	add	r0, sp, #4
 800a778:	f7ff fcfc 	bl	800a174 <__lo0bits>
 800a77c:	9b01      	ldr	r3, [sp, #4]
 800a77e:	2101      	movs	r1, #1
 800a780:	616b      	str	r3, [r5, #20]
 800a782:	3020      	adds	r0, #32
 800a784:	e7e5      	b.n	800a752 <__d2b+0x5a>
 800a786:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a78a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800a78e:	6030      	str	r0, [r6, #0]
 800a790:	6918      	ldr	r0, [r3, #16]
 800a792:	f7ff fccf 	bl	800a134 <__hi0bits>
 800a796:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a79a:	e7e2      	b.n	800a762 <__d2b+0x6a>
 800a79c:	0800dc96 	.word	0x0800dc96
 800a7a0:	0800dca7 	.word	0x0800dca7

0800a7a4 <__ratio>:
 800a7a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a8:	4688      	mov	r8, r1
 800a7aa:	4669      	mov	r1, sp
 800a7ac:	4681      	mov	r9, r0
 800a7ae:	f7ff ff5b 	bl	800a668 <__b2d>
 800a7b2:	460f      	mov	r7, r1
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	460d      	mov	r5, r1
 800a7b8:	4640      	mov	r0, r8
 800a7ba:	a901      	add	r1, sp, #4
 800a7bc:	f7ff ff54 	bl	800a668 <__b2d>
 800a7c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7c4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a7c8:	468b      	mov	fp, r1
 800a7ca:	eba3 0c02 	sub.w	ip, r3, r2
 800a7ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a7d2:	1a9b      	subs	r3, r3, r2
 800a7d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	bfd5      	itete	le
 800a7dc:	460a      	movle	r2, r1
 800a7de:	462a      	movgt	r2, r5
 800a7e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a7e4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a7e8:	bfd8      	it	le
 800a7ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a7ee:	465b      	mov	r3, fp
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	4639      	mov	r1, r7
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f7f5 ffa3 	bl	8000740 <__aeabi_ddiv>
 800a7fa:	b003      	add	sp, #12
 800a7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a800 <__copybits>:
 800a800:	3901      	subs	r1, #1
 800a802:	b570      	push	{r4, r5, r6, lr}
 800a804:	1149      	asrs	r1, r1, #5
 800a806:	6914      	ldr	r4, [r2, #16]
 800a808:	3101      	adds	r1, #1
 800a80a:	f102 0314 	add.w	r3, r2, #20
 800a80e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a812:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a816:	1f05      	subs	r5, r0, #4
 800a818:	42a3      	cmp	r3, r4
 800a81a:	d30c      	bcc.n	800a836 <__copybits+0x36>
 800a81c:	1aa3      	subs	r3, r4, r2
 800a81e:	3b11      	subs	r3, #17
 800a820:	f023 0303 	bic.w	r3, r3, #3
 800a824:	3211      	adds	r2, #17
 800a826:	42a2      	cmp	r2, r4
 800a828:	bf88      	it	hi
 800a82a:	2300      	movhi	r3, #0
 800a82c:	4418      	add	r0, r3
 800a82e:	2300      	movs	r3, #0
 800a830:	4288      	cmp	r0, r1
 800a832:	d305      	bcc.n	800a840 <__copybits+0x40>
 800a834:	bd70      	pop	{r4, r5, r6, pc}
 800a836:	f853 6b04 	ldr.w	r6, [r3], #4
 800a83a:	f845 6f04 	str.w	r6, [r5, #4]!
 800a83e:	e7eb      	b.n	800a818 <__copybits+0x18>
 800a840:	f840 3b04 	str.w	r3, [r0], #4
 800a844:	e7f4      	b.n	800a830 <__copybits+0x30>

0800a846 <__any_on>:
 800a846:	f100 0214 	add.w	r2, r0, #20
 800a84a:	6900      	ldr	r0, [r0, #16]
 800a84c:	114b      	asrs	r3, r1, #5
 800a84e:	4298      	cmp	r0, r3
 800a850:	b510      	push	{r4, lr}
 800a852:	db11      	blt.n	800a878 <__any_on+0x32>
 800a854:	dd0a      	ble.n	800a86c <__any_on+0x26>
 800a856:	f011 011f 	ands.w	r1, r1, #31
 800a85a:	d007      	beq.n	800a86c <__any_on+0x26>
 800a85c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a860:	fa24 f001 	lsr.w	r0, r4, r1
 800a864:	fa00 f101 	lsl.w	r1, r0, r1
 800a868:	428c      	cmp	r4, r1
 800a86a:	d10b      	bne.n	800a884 <__any_on+0x3e>
 800a86c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a870:	4293      	cmp	r3, r2
 800a872:	d803      	bhi.n	800a87c <__any_on+0x36>
 800a874:	2000      	movs	r0, #0
 800a876:	bd10      	pop	{r4, pc}
 800a878:	4603      	mov	r3, r0
 800a87a:	e7f7      	b.n	800a86c <__any_on+0x26>
 800a87c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a880:	2900      	cmp	r1, #0
 800a882:	d0f5      	beq.n	800a870 <__any_on+0x2a>
 800a884:	2001      	movs	r0, #1
 800a886:	e7f6      	b.n	800a876 <__any_on+0x30>

0800a888 <sulp>:
 800a888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a88c:	460f      	mov	r7, r1
 800a88e:	4690      	mov	r8, r2
 800a890:	f7ff feca 	bl	800a628 <__ulp>
 800a894:	4604      	mov	r4, r0
 800a896:	460d      	mov	r5, r1
 800a898:	f1b8 0f00 	cmp.w	r8, #0
 800a89c:	d011      	beq.n	800a8c2 <sulp+0x3a>
 800a89e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a8a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	dd0b      	ble.n	800a8c2 <sulp+0x3a>
 800a8aa:	2400      	movs	r4, #0
 800a8ac:	051b      	lsls	r3, r3, #20
 800a8ae:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a8b2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a8b6:	4622      	mov	r2, r4
 800a8b8:	462b      	mov	r3, r5
 800a8ba:	f7f5 fe17 	bl	80004ec <__aeabi_dmul>
 800a8be:	4604      	mov	r4, r0
 800a8c0:	460d      	mov	r5, r1
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	4629      	mov	r1, r5
 800a8c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8ca:	0000      	movs	r0, r0
 800a8cc:	0000      	movs	r0, r0
	...

0800a8d0 <_strtod_l>:
 800a8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d4:	b09f      	sub	sp, #124	; 0x7c
 800a8d6:	9217      	str	r2, [sp, #92]	; 0x5c
 800a8d8:	2200      	movs	r2, #0
 800a8da:	4604      	mov	r4, r0
 800a8dc:	921a      	str	r2, [sp, #104]	; 0x68
 800a8de:	460d      	mov	r5, r1
 800a8e0:	f04f 0800 	mov.w	r8, #0
 800a8e4:	f04f 0900 	mov.w	r9, #0
 800a8e8:	460a      	mov	r2, r1
 800a8ea:	9219      	str	r2, [sp, #100]	; 0x64
 800a8ec:	7811      	ldrb	r1, [r2, #0]
 800a8ee:	292b      	cmp	r1, #43	; 0x2b
 800a8f0:	d04a      	beq.n	800a988 <_strtod_l+0xb8>
 800a8f2:	d838      	bhi.n	800a966 <_strtod_l+0x96>
 800a8f4:	290d      	cmp	r1, #13
 800a8f6:	d832      	bhi.n	800a95e <_strtod_l+0x8e>
 800a8f8:	2908      	cmp	r1, #8
 800a8fa:	d832      	bhi.n	800a962 <_strtod_l+0x92>
 800a8fc:	2900      	cmp	r1, #0
 800a8fe:	d03b      	beq.n	800a978 <_strtod_l+0xa8>
 800a900:	2200      	movs	r2, #0
 800a902:	920e      	str	r2, [sp, #56]	; 0x38
 800a904:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800a906:	7832      	ldrb	r2, [r6, #0]
 800a908:	2a30      	cmp	r2, #48	; 0x30
 800a90a:	f040 80b2 	bne.w	800aa72 <_strtod_l+0x1a2>
 800a90e:	7872      	ldrb	r2, [r6, #1]
 800a910:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a914:	2a58      	cmp	r2, #88	; 0x58
 800a916:	d16e      	bne.n	800a9f6 <_strtod_l+0x126>
 800a918:	9302      	str	r3, [sp, #8]
 800a91a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a91c:	4620      	mov	r0, r4
 800a91e:	9301      	str	r3, [sp, #4]
 800a920:	ab1a      	add	r3, sp, #104	; 0x68
 800a922:	9300      	str	r3, [sp, #0]
 800a924:	4a8c      	ldr	r2, [pc, #560]	; (800ab58 <_strtod_l+0x288>)
 800a926:	ab1b      	add	r3, sp, #108	; 0x6c
 800a928:	a919      	add	r1, sp, #100	; 0x64
 800a92a:	f001 f8b3 	bl	800ba94 <__gethex>
 800a92e:	f010 070f 	ands.w	r7, r0, #15
 800a932:	4605      	mov	r5, r0
 800a934:	d005      	beq.n	800a942 <_strtod_l+0x72>
 800a936:	2f06      	cmp	r7, #6
 800a938:	d128      	bne.n	800a98c <_strtod_l+0xbc>
 800a93a:	2300      	movs	r3, #0
 800a93c:	3601      	adds	r6, #1
 800a93e:	9619      	str	r6, [sp, #100]	; 0x64
 800a940:	930e      	str	r3, [sp, #56]	; 0x38
 800a942:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a944:	2b00      	cmp	r3, #0
 800a946:	f040 85a0 	bne.w	800b48a <_strtod_l+0xbba>
 800a94a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a94c:	b1cb      	cbz	r3, 800a982 <_strtod_l+0xb2>
 800a94e:	4642      	mov	r2, r8
 800a950:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a954:	4610      	mov	r0, r2
 800a956:	4619      	mov	r1, r3
 800a958:	b01f      	add	sp, #124	; 0x7c
 800a95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a95e:	2920      	cmp	r1, #32
 800a960:	d1ce      	bne.n	800a900 <_strtod_l+0x30>
 800a962:	3201      	adds	r2, #1
 800a964:	e7c1      	b.n	800a8ea <_strtod_l+0x1a>
 800a966:	292d      	cmp	r1, #45	; 0x2d
 800a968:	d1ca      	bne.n	800a900 <_strtod_l+0x30>
 800a96a:	2101      	movs	r1, #1
 800a96c:	910e      	str	r1, [sp, #56]	; 0x38
 800a96e:	1c51      	adds	r1, r2, #1
 800a970:	9119      	str	r1, [sp, #100]	; 0x64
 800a972:	7852      	ldrb	r2, [r2, #1]
 800a974:	2a00      	cmp	r2, #0
 800a976:	d1c5      	bne.n	800a904 <_strtod_l+0x34>
 800a978:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a97a:	9519      	str	r5, [sp, #100]	; 0x64
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f040 8582 	bne.w	800b486 <_strtod_l+0xbb6>
 800a982:	4642      	mov	r2, r8
 800a984:	464b      	mov	r3, r9
 800a986:	e7e5      	b.n	800a954 <_strtod_l+0x84>
 800a988:	2100      	movs	r1, #0
 800a98a:	e7ef      	b.n	800a96c <_strtod_l+0x9c>
 800a98c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a98e:	b13a      	cbz	r2, 800a9a0 <_strtod_l+0xd0>
 800a990:	2135      	movs	r1, #53	; 0x35
 800a992:	a81c      	add	r0, sp, #112	; 0x70
 800a994:	f7ff ff34 	bl	800a800 <__copybits>
 800a998:	4620      	mov	r0, r4
 800a99a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a99c:	f7ff fb18 	bl	8009fd0 <_Bfree>
 800a9a0:	3f01      	subs	r7, #1
 800a9a2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a9a4:	2f04      	cmp	r7, #4
 800a9a6:	d806      	bhi.n	800a9b6 <_strtod_l+0xe6>
 800a9a8:	e8df f007 	tbb	[pc, r7]
 800a9ac:	201d0314 	.word	0x201d0314
 800a9b0:	14          	.byte	0x14
 800a9b1:	00          	.byte	0x00
 800a9b2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800a9b6:	05e9      	lsls	r1, r5, #23
 800a9b8:	bf48      	it	mi
 800a9ba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a9be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a9c2:	0d1b      	lsrs	r3, r3, #20
 800a9c4:	051b      	lsls	r3, r3, #20
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1bb      	bne.n	800a942 <_strtod_l+0x72>
 800a9ca:	f7fe faf7 	bl	8008fbc <__errno>
 800a9ce:	2322      	movs	r3, #34	; 0x22
 800a9d0:	6003      	str	r3, [r0, #0]
 800a9d2:	e7b6      	b.n	800a942 <_strtod_l+0x72>
 800a9d4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a9d8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800a9dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a9e0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a9e4:	e7e7      	b.n	800a9b6 <_strtod_l+0xe6>
 800a9e6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800ab5c <_strtod_l+0x28c>
 800a9ea:	e7e4      	b.n	800a9b6 <_strtod_l+0xe6>
 800a9ec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a9f0:	f04f 38ff 	mov.w	r8, #4294967295
 800a9f4:	e7df      	b.n	800a9b6 <_strtod_l+0xe6>
 800a9f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a9f8:	1c5a      	adds	r2, r3, #1
 800a9fa:	9219      	str	r2, [sp, #100]	; 0x64
 800a9fc:	785b      	ldrb	r3, [r3, #1]
 800a9fe:	2b30      	cmp	r3, #48	; 0x30
 800aa00:	d0f9      	beq.n	800a9f6 <_strtod_l+0x126>
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d09d      	beq.n	800a942 <_strtod_l+0x72>
 800aa06:	2301      	movs	r3, #1
 800aa08:	f04f 0a00 	mov.w	sl, #0
 800aa0c:	220a      	movs	r2, #10
 800aa0e:	46d3      	mov	fp, sl
 800aa10:	9305      	str	r3, [sp, #20]
 800aa12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa14:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800aa18:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa1a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800aa1c:	7806      	ldrb	r6, [r0, #0]
 800aa1e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800aa22:	b2d9      	uxtb	r1, r3
 800aa24:	2909      	cmp	r1, #9
 800aa26:	d926      	bls.n	800aa76 <_strtod_l+0x1a6>
 800aa28:	2201      	movs	r2, #1
 800aa2a:	494d      	ldr	r1, [pc, #308]	; (800ab60 <_strtod_l+0x290>)
 800aa2c:	f000 ff78 	bl	800b920 <strncmp>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d030      	beq.n	800aa96 <_strtod_l+0x1c6>
 800aa34:	2000      	movs	r0, #0
 800aa36:	4632      	mov	r2, r6
 800aa38:	4603      	mov	r3, r0
 800aa3a:	465e      	mov	r6, fp
 800aa3c:	9008      	str	r0, [sp, #32]
 800aa3e:	2a65      	cmp	r2, #101	; 0x65
 800aa40:	d001      	beq.n	800aa46 <_strtod_l+0x176>
 800aa42:	2a45      	cmp	r2, #69	; 0x45
 800aa44:	d113      	bne.n	800aa6e <_strtod_l+0x19e>
 800aa46:	b91e      	cbnz	r6, 800aa50 <_strtod_l+0x180>
 800aa48:	9a05      	ldr	r2, [sp, #20]
 800aa4a:	4302      	orrs	r2, r0
 800aa4c:	d094      	beq.n	800a978 <_strtod_l+0xa8>
 800aa4e:	2600      	movs	r6, #0
 800aa50:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800aa52:	1c6a      	adds	r2, r5, #1
 800aa54:	9219      	str	r2, [sp, #100]	; 0x64
 800aa56:	786a      	ldrb	r2, [r5, #1]
 800aa58:	2a2b      	cmp	r2, #43	; 0x2b
 800aa5a:	d074      	beq.n	800ab46 <_strtod_l+0x276>
 800aa5c:	2a2d      	cmp	r2, #45	; 0x2d
 800aa5e:	d078      	beq.n	800ab52 <_strtod_l+0x282>
 800aa60:	f04f 0c00 	mov.w	ip, #0
 800aa64:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800aa68:	2909      	cmp	r1, #9
 800aa6a:	d97f      	bls.n	800ab6c <_strtod_l+0x29c>
 800aa6c:	9519      	str	r5, [sp, #100]	; 0x64
 800aa6e:	2700      	movs	r7, #0
 800aa70:	e09e      	b.n	800abb0 <_strtod_l+0x2e0>
 800aa72:	2300      	movs	r3, #0
 800aa74:	e7c8      	b.n	800aa08 <_strtod_l+0x138>
 800aa76:	f1bb 0f08 	cmp.w	fp, #8
 800aa7a:	bfd8      	it	le
 800aa7c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800aa7e:	f100 0001 	add.w	r0, r0, #1
 800aa82:	bfd6      	itet	le
 800aa84:	fb02 3301 	mlale	r3, r2, r1, r3
 800aa88:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800aa8c:	930a      	strle	r3, [sp, #40]	; 0x28
 800aa8e:	f10b 0b01 	add.w	fp, fp, #1
 800aa92:	9019      	str	r0, [sp, #100]	; 0x64
 800aa94:	e7c1      	b.n	800aa1a <_strtod_l+0x14a>
 800aa96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa98:	1c5a      	adds	r2, r3, #1
 800aa9a:	9219      	str	r2, [sp, #100]	; 0x64
 800aa9c:	785a      	ldrb	r2, [r3, #1]
 800aa9e:	f1bb 0f00 	cmp.w	fp, #0
 800aaa2:	d037      	beq.n	800ab14 <_strtod_l+0x244>
 800aaa4:	465e      	mov	r6, fp
 800aaa6:	9008      	str	r0, [sp, #32]
 800aaa8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800aaac:	2b09      	cmp	r3, #9
 800aaae:	d912      	bls.n	800aad6 <_strtod_l+0x206>
 800aab0:	2301      	movs	r3, #1
 800aab2:	e7c4      	b.n	800aa3e <_strtod_l+0x16e>
 800aab4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aab6:	3001      	adds	r0, #1
 800aab8:	1c5a      	adds	r2, r3, #1
 800aaba:	9219      	str	r2, [sp, #100]	; 0x64
 800aabc:	785a      	ldrb	r2, [r3, #1]
 800aabe:	2a30      	cmp	r2, #48	; 0x30
 800aac0:	d0f8      	beq.n	800aab4 <_strtod_l+0x1e4>
 800aac2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800aac6:	2b08      	cmp	r3, #8
 800aac8:	f200 84e4 	bhi.w	800b494 <_strtod_l+0xbc4>
 800aacc:	9008      	str	r0, [sp, #32]
 800aace:	2000      	movs	r0, #0
 800aad0:	4606      	mov	r6, r0
 800aad2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aad4:	930b      	str	r3, [sp, #44]	; 0x2c
 800aad6:	3a30      	subs	r2, #48	; 0x30
 800aad8:	f100 0301 	add.w	r3, r0, #1
 800aadc:	d014      	beq.n	800ab08 <_strtod_l+0x238>
 800aade:	9908      	ldr	r1, [sp, #32]
 800aae0:	eb00 0c06 	add.w	ip, r0, r6
 800aae4:	4419      	add	r1, r3
 800aae6:	9108      	str	r1, [sp, #32]
 800aae8:	4633      	mov	r3, r6
 800aaea:	210a      	movs	r1, #10
 800aaec:	4563      	cmp	r3, ip
 800aaee:	d113      	bne.n	800ab18 <_strtod_l+0x248>
 800aaf0:	1833      	adds	r3, r6, r0
 800aaf2:	2b08      	cmp	r3, #8
 800aaf4:	f106 0601 	add.w	r6, r6, #1
 800aaf8:	4406      	add	r6, r0
 800aafa:	dc1a      	bgt.n	800ab32 <_strtod_l+0x262>
 800aafc:	230a      	movs	r3, #10
 800aafe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ab00:	fb03 2301 	mla	r3, r3, r1, r2
 800ab04:	930a      	str	r3, [sp, #40]	; 0x28
 800ab06:	2300      	movs	r3, #0
 800ab08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	1c51      	adds	r1, r2, #1
 800ab0e:	9119      	str	r1, [sp, #100]	; 0x64
 800ab10:	7852      	ldrb	r2, [r2, #1]
 800ab12:	e7c9      	b.n	800aaa8 <_strtod_l+0x1d8>
 800ab14:	4658      	mov	r0, fp
 800ab16:	e7d2      	b.n	800aabe <_strtod_l+0x1ee>
 800ab18:	2b08      	cmp	r3, #8
 800ab1a:	f103 0301 	add.w	r3, r3, #1
 800ab1e:	dc03      	bgt.n	800ab28 <_strtod_l+0x258>
 800ab20:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ab22:	434f      	muls	r7, r1
 800ab24:	970a      	str	r7, [sp, #40]	; 0x28
 800ab26:	e7e1      	b.n	800aaec <_strtod_l+0x21c>
 800ab28:	2b10      	cmp	r3, #16
 800ab2a:	bfd8      	it	le
 800ab2c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800ab30:	e7dc      	b.n	800aaec <_strtod_l+0x21c>
 800ab32:	2e10      	cmp	r6, #16
 800ab34:	bfdc      	itt	le
 800ab36:	230a      	movle	r3, #10
 800ab38:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800ab3c:	e7e3      	b.n	800ab06 <_strtod_l+0x236>
 800ab3e:	2300      	movs	r3, #0
 800ab40:	9308      	str	r3, [sp, #32]
 800ab42:	2301      	movs	r3, #1
 800ab44:	e780      	b.n	800aa48 <_strtod_l+0x178>
 800ab46:	f04f 0c00 	mov.w	ip, #0
 800ab4a:	1caa      	adds	r2, r5, #2
 800ab4c:	9219      	str	r2, [sp, #100]	; 0x64
 800ab4e:	78aa      	ldrb	r2, [r5, #2]
 800ab50:	e788      	b.n	800aa64 <_strtod_l+0x194>
 800ab52:	f04f 0c01 	mov.w	ip, #1
 800ab56:	e7f8      	b.n	800ab4a <_strtod_l+0x27a>
 800ab58:	0800de00 	.word	0x0800de00
 800ab5c:	7ff00000 	.word	0x7ff00000
 800ab60:	0800ddfc 	.word	0x0800ddfc
 800ab64:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ab66:	1c51      	adds	r1, r2, #1
 800ab68:	9119      	str	r1, [sp, #100]	; 0x64
 800ab6a:	7852      	ldrb	r2, [r2, #1]
 800ab6c:	2a30      	cmp	r2, #48	; 0x30
 800ab6e:	d0f9      	beq.n	800ab64 <_strtod_l+0x294>
 800ab70:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ab74:	2908      	cmp	r1, #8
 800ab76:	f63f af7a 	bhi.w	800aa6e <_strtod_l+0x19e>
 800ab7a:	3a30      	subs	r2, #48	; 0x30
 800ab7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ab7e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ab80:	920c      	str	r2, [sp, #48]	; 0x30
 800ab82:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ab84:	1c57      	adds	r7, r2, #1
 800ab86:	9719      	str	r7, [sp, #100]	; 0x64
 800ab88:	7852      	ldrb	r2, [r2, #1]
 800ab8a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ab8e:	f1be 0f09 	cmp.w	lr, #9
 800ab92:	d938      	bls.n	800ac06 <_strtod_l+0x336>
 800ab94:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ab96:	1a7f      	subs	r7, r7, r1
 800ab98:	2f08      	cmp	r7, #8
 800ab9a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ab9e:	dc03      	bgt.n	800aba8 <_strtod_l+0x2d8>
 800aba0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aba2:	428f      	cmp	r7, r1
 800aba4:	bfa8      	it	ge
 800aba6:	460f      	movge	r7, r1
 800aba8:	f1bc 0f00 	cmp.w	ip, #0
 800abac:	d000      	beq.n	800abb0 <_strtod_l+0x2e0>
 800abae:	427f      	negs	r7, r7
 800abb0:	2e00      	cmp	r6, #0
 800abb2:	d14f      	bne.n	800ac54 <_strtod_l+0x384>
 800abb4:	9905      	ldr	r1, [sp, #20]
 800abb6:	4301      	orrs	r1, r0
 800abb8:	f47f aec3 	bne.w	800a942 <_strtod_l+0x72>
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	f47f aedb 	bne.w	800a978 <_strtod_l+0xa8>
 800abc2:	2a69      	cmp	r2, #105	; 0x69
 800abc4:	d029      	beq.n	800ac1a <_strtod_l+0x34a>
 800abc6:	dc26      	bgt.n	800ac16 <_strtod_l+0x346>
 800abc8:	2a49      	cmp	r2, #73	; 0x49
 800abca:	d026      	beq.n	800ac1a <_strtod_l+0x34a>
 800abcc:	2a4e      	cmp	r2, #78	; 0x4e
 800abce:	f47f aed3 	bne.w	800a978 <_strtod_l+0xa8>
 800abd2:	499a      	ldr	r1, [pc, #616]	; (800ae3c <_strtod_l+0x56c>)
 800abd4:	a819      	add	r0, sp, #100	; 0x64
 800abd6:	f001 f99f 	bl	800bf18 <__match>
 800abda:	2800      	cmp	r0, #0
 800abdc:	f43f aecc 	beq.w	800a978 <_strtod_l+0xa8>
 800abe0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	2b28      	cmp	r3, #40	; 0x28
 800abe6:	d12f      	bne.n	800ac48 <_strtod_l+0x378>
 800abe8:	4995      	ldr	r1, [pc, #596]	; (800ae40 <_strtod_l+0x570>)
 800abea:	aa1c      	add	r2, sp, #112	; 0x70
 800abec:	a819      	add	r0, sp, #100	; 0x64
 800abee:	f001 f9a7 	bl	800bf40 <__hexnan>
 800abf2:	2805      	cmp	r0, #5
 800abf4:	d128      	bne.n	800ac48 <_strtod_l+0x378>
 800abf6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800abf8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800abfc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ac00:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ac04:	e69d      	b.n	800a942 <_strtod_l+0x72>
 800ac06:	210a      	movs	r1, #10
 800ac08:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ac0a:	fb01 2107 	mla	r1, r1, r7, r2
 800ac0e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ac12:	9209      	str	r2, [sp, #36]	; 0x24
 800ac14:	e7b5      	b.n	800ab82 <_strtod_l+0x2b2>
 800ac16:	2a6e      	cmp	r2, #110	; 0x6e
 800ac18:	e7d9      	b.n	800abce <_strtod_l+0x2fe>
 800ac1a:	498a      	ldr	r1, [pc, #552]	; (800ae44 <_strtod_l+0x574>)
 800ac1c:	a819      	add	r0, sp, #100	; 0x64
 800ac1e:	f001 f97b 	bl	800bf18 <__match>
 800ac22:	2800      	cmp	r0, #0
 800ac24:	f43f aea8 	beq.w	800a978 <_strtod_l+0xa8>
 800ac28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac2a:	4987      	ldr	r1, [pc, #540]	; (800ae48 <_strtod_l+0x578>)
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	a819      	add	r0, sp, #100	; 0x64
 800ac30:	9319      	str	r3, [sp, #100]	; 0x64
 800ac32:	f001 f971 	bl	800bf18 <__match>
 800ac36:	b910      	cbnz	r0, 800ac3e <_strtod_l+0x36e>
 800ac38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	9319      	str	r3, [sp, #100]	; 0x64
 800ac3e:	f04f 0800 	mov.w	r8, #0
 800ac42:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800ae4c <_strtod_l+0x57c>
 800ac46:	e67c      	b.n	800a942 <_strtod_l+0x72>
 800ac48:	4881      	ldr	r0, [pc, #516]	; (800ae50 <_strtod_l+0x580>)
 800ac4a:	f000 fe99 	bl	800b980 <nan>
 800ac4e:	4680      	mov	r8, r0
 800ac50:	4689      	mov	r9, r1
 800ac52:	e676      	b.n	800a942 <_strtod_l+0x72>
 800ac54:	9b08      	ldr	r3, [sp, #32]
 800ac56:	f1bb 0f00 	cmp.w	fp, #0
 800ac5a:	bf08      	it	eq
 800ac5c:	46b3      	moveq	fp, r6
 800ac5e:	1afb      	subs	r3, r7, r3
 800ac60:	2e10      	cmp	r6, #16
 800ac62:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac64:	4635      	mov	r5, r6
 800ac66:	9309      	str	r3, [sp, #36]	; 0x24
 800ac68:	bfa8      	it	ge
 800ac6a:	2510      	movge	r5, #16
 800ac6c:	f7f5 fbc4 	bl	80003f8 <__aeabi_ui2d>
 800ac70:	2e09      	cmp	r6, #9
 800ac72:	4680      	mov	r8, r0
 800ac74:	4689      	mov	r9, r1
 800ac76:	dd13      	ble.n	800aca0 <_strtod_l+0x3d0>
 800ac78:	4b76      	ldr	r3, [pc, #472]	; (800ae54 <_strtod_l+0x584>)
 800ac7a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ac7e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ac82:	f7f5 fc33 	bl	80004ec <__aeabi_dmul>
 800ac86:	4680      	mov	r8, r0
 800ac88:	4650      	mov	r0, sl
 800ac8a:	4689      	mov	r9, r1
 800ac8c:	f7f5 fbb4 	bl	80003f8 <__aeabi_ui2d>
 800ac90:	4602      	mov	r2, r0
 800ac92:	460b      	mov	r3, r1
 800ac94:	4640      	mov	r0, r8
 800ac96:	4649      	mov	r1, r9
 800ac98:	f7f5 fa72 	bl	8000180 <__adddf3>
 800ac9c:	4680      	mov	r8, r0
 800ac9e:	4689      	mov	r9, r1
 800aca0:	2e0f      	cmp	r6, #15
 800aca2:	dc36      	bgt.n	800ad12 <_strtod_l+0x442>
 800aca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	f43f ae4b 	beq.w	800a942 <_strtod_l+0x72>
 800acac:	dd22      	ble.n	800acf4 <_strtod_l+0x424>
 800acae:	2b16      	cmp	r3, #22
 800acb0:	dc09      	bgt.n	800acc6 <_strtod_l+0x3f6>
 800acb2:	4968      	ldr	r1, [pc, #416]	; (800ae54 <_strtod_l+0x584>)
 800acb4:	4642      	mov	r2, r8
 800acb6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800acba:	464b      	mov	r3, r9
 800acbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acc0:	f7f5 fc14 	bl	80004ec <__aeabi_dmul>
 800acc4:	e7c3      	b.n	800ac4e <_strtod_l+0x37e>
 800acc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acc8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800accc:	4293      	cmp	r3, r2
 800acce:	db20      	blt.n	800ad12 <_strtod_l+0x442>
 800acd0:	4c60      	ldr	r4, [pc, #384]	; (800ae54 <_strtod_l+0x584>)
 800acd2:	f1c6 060f 	rsb	r6, r6, #15
 800acd6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800acda:	4642      	mov	r2, r8
 800acdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ace0:	464b      	mov	r3, r9
 800ace2:	f7f5 fc03 	bl	80004ec <__aeabi_dmul>
 800ace6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ace8:	1b9e      	subs	r6, r3, r6
 800acea:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800acee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800acf2:	e7e5      	b.n	800acc0 <_strtod_l+0x3f0>
 800acf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acf6:	3316      	adds	r3, #22
 800acf8:	db0b      	blt.n	800ad12 <_strtod_l+0x442>
 800acfa:	9b08      	ldr	r3, [sp, #32]
 800acfc:	4640      	mov	r0, r8
 800acfe:	1bdf      	subs	r7, r3, r7
 800ad00:	4b54      	ldr	r3, [pc, #336]	; (800ae54 <_strtod_l+0x584>)
 800ad02:	4649      	mov	r1, r9
 800ad04:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ad08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad0c:	f7f5 fd18 	bl	8000740 <__aeabi_ddiv>
 800ad10:	e79d      	b.n	800ac4e <_strtod_l+0x37e>
 800ad12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad14:	1b75      	subs	r5, r6, r5
 800ad16:	441d      	add	r5, r3
 800ad18:	2d00      	cmp	r5, #0
 800ad1a:	dd70      	ble.n	800adfe <_strtod_l+0x52e>
 800ad1c:	f015 030f 	ands.w	r3, r5, #15
 800ad20:	d00a      	beq.n	800ad38 <_strtod_l+0x468>
 800ad22:	494c      	ldr	r1, [pc, #304]	; (800ae54 <_strtod_l+0x584>)
 800ad24:	4642      	mov	r2, r8
 800ad26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad2e:	464b      	mov	r3, r9
 800ad30:	f7f5 fbdc 	bl	80004ec <__aeabi_dmul>
 800ad34:	4680      	mov	r8, r0
 800ad36:	4689      	mov	r9, r1
 800ad38:	f035 050f 	bics.w	r5, r5, #15
 800ad3c:	d04d      	beq.n	800adda <_strtod_l+0x50a>
 800ad3e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800ad42:	dd22      	ble.n	800ad8a <_strtod_l+0x4ba>
 800ad44:	2600      	movs	r6, #0
 800ad46:	46b3      	mov	fp, r6
 800ad48:	960b      	str	r6, [sp, #44]	; 0x2c
 800ad4a:	9608      	str	r6, [sp, #32]
 800ad4c:	2322      	movs	r3, #34	; 0x22
 800ad4e:	f04f 0800 	mov.w	r8, #0
 800ad52:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800ae4c <_strtod_l+0x57c>
 800ad56:	6023      	str	r3, [r4, #0]
 800ad58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	f43f adf1 	beq.w	800a942 <_strtod_l+0x72>
 800ad60:	4620      	mov	r0, r4
 800ad62:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ad64:	f7ff f934 	bl	8009fd0 <_Bfree>
 800ad68:	4620      	mov	r0, r4
 800ad6a:	9908      	ldr	r1, [sp, #32]
 800ad6c:	f7ff f930 	bl	8009fd0 <_Bfree>
 800ad70:	4659      	mov	r1, fp
 800ad72:	4620      	mov	r0, r4
 800ad74:	f7ff f92c 	bl	8009fd0 <_Bfree>
 800ad78:	4620      	mov	r0, r4
 800ad7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad7c:	f7ff f928 	bl	8009fd0 <_Bfree>
 800ad80:	4631      	mov	r1, r6
 800ad82:	4620      	mov	r0, r4
 800ad84:	f7ff f924 	bl	8009fd0 <_Bfree>
 800ad88:	e5db      	b.n	800a942 <_strtod_l+0x72>
 800ad8a:	4b33      	ldr	r3, [pc, #204]	; (800ae58 <_strtod_l+0x588>)
 800ad8c:	4640      	mov	r0, r8
 800ad8e:	9305      	str	r3, [sp, #20]
 800ad90:	2300      	movs	r3, #0
 800ad92:	4649      	mov	r1, r9
 800ad94:	469a      	mov	sl, r3
 800ad96:	112d      	asrs	r5, r5, #4
 800ad98:	2d01      	cmp	r5, #1
 800ad9a:	dc21      	bgt.n	800ade0 <_strtod_l+0x510>
 800ad9c:	b10b      	cbz	r3, 800ada2 <_strtod_l+0x4d2>
 800ad9e:	4680      	mov	r8, r0
 800ada0:	4689      	mov	r9, r1
 800ada2:	492d      	ldr	r1, [pc, #180]	; (800ae58 <_strtod_l+0x588>)
 800ada4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ada8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800adac:	4642      	mov	r2, r8
 800adae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adb2:	464b      	mov	r3, r9
 800adb4:	f7f5 fb9a 	bl	80004ec <__aeabi_dmul>
 800adb8:	4b24      	ldr	r3, [pc, #144]	; (800ae4c <_strtod_l+0x57c>)
 800adba:	460a      	mov	r2, r1
 800adbc:	400b      	ands	r3, r1
 800adbe:	4927      	ldr	r1, [pc, #156]	; (800ae5c <_strtod_l+0x58c>)
 800adc0:	4680      	mov	r8, r0
 800adc2:	428b      	cmp	r3, r1
 800adc4:	d8be      	bhi.n	800ad44 <_strtod_l+0x474>
 800adc6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800adca:	428b      	cmp	r3, r1
 800adcc:	bf86      	itte	hi
 800adce:	f04f 38ff 	movhi.w	r8, #4294967295
 800add2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800ae60 <_strtod_l+0x590>
 800add6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800adda:	2300      	movs	r3, #0
 800addc:	9305      	str	r3, [sp, #20]
 800adde:	e07b      	b.n	800aed8 <_strtod_l+0x608>
 800ade0:	07ea      	lsls	r2, r5, #31
 800ade2:	d505      	bpl.n	800adf0 <_strtod_l+0x520>
 800ade4:	9b05      	ldr	r3, [sp, #20]
 800ade6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adea:	f7f5 fb7f 	bl	80004ec <__aeabi_dmul>
 800adee:	2301      	movs	r3, #1
 800adf0:	9a05      	ldr	r2, [sp, #20]
 800adf2:	f10a 0a01 	add.w	sl, sl, #1
 800adf6:	3208      	adds	r2, #8
 800adf8:	106d      	asrs	r5, r5, #1
 800adfa:	9205      	str	r2, [sp, #20]
 800adfc:	e7cc      	b.n	800ad98 <_strtod_l+0x4c8>
 800adfe:	d0ec      	beq.n	800adda <_strtod_l+0x50a>
 800ae00:	426d      	negs	r5, r5
 800ae02:	f015 020f 	ands.w	r2, r5, #15
 800ae06:	d00a      	beq.n	800ae1e <_strtod_l+0x54e>
 800ae08:	4b12      	ldr	r3, [pc, #72]	; (800ae54 <_strtod_l+0x584>)
 800ae0a:	4640      	mov	r0, r8
 800ae0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae10:	4649      	mov	r1, r9
 800ae12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae16:	f7f5 fc93 	bl	8000740 <__aeabi_ddiv>
 800ae1a:	4680      	mov	r8, r0
 800ae1c:	4689      	mov	r9, r1
 800ae1e:	112d      	asrs	r5, r5, #4
 800ae20:	d0db      	beq.n	800adda <_strtod_l+0x50a>
 800ae22:	2d1f      	cmp	r5, #31
 800ae24:	dd1e      	ble.n	800ae64 <_strtod_l+0x594>
 800ae26:	2600      	movs	r6, #0
 800ae28:	46b3      	mov	fp, r6
 800ae2a:	960b      	str	r6, [sp, #44]	; 0x2c
 800ae2c:	9608      	str	r6, [sp, #32]
 800ae2e:	2322      	movs	r3, #34	; 0x22
 800ae30:	f04f 0800 	mov.w	r8, #0
 800ae34:	f04f 0900 	mov.w	r9, #0
 800ae38:	6023      	str	r3, [r4, #0]
 800ae3a:	e78d      	b.n	800ad58 <_strtod_l+0x488>
 800ae3c:	0800db58 	.word	0x0800db58
 800ae40:	0800de14 	.word	0x0800de14
 800ae44:	0800db50 	.word	0x0800db50
 800ae48:	0800dc34 	.word	0x0800dc34
 800ae4c:	7ff00000 	.word	0x7ff00000
 800ae50:	0800dc30 	.word	0x0800dc30
 800ae54:	0800dd28 	.word	0x0800dd28
 800ae58:	0800dd00 	.word	0x0800dd00
 800ae5c:	7ca00000 	.word	0x7ca00000
 800ae60:	7fefffff 	.word	0x7fefffff
 800ae64:	f015 0310 	ands.w	r3, r5, #16
 800ae68:	bf18      	it	ne
 800ae6a:	236a      	movne	r3, #106	; 0x6a
 800ae6c:	4640      	mov	r0, r8
 800ae6e:	9305      	str	r3, [sp, #20]
 800ae70:	4649      	mov	r1, r9
 800ae72:	2300      	movs	r3, #0
 800ae74:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800b140 <_strtod_l+0x870>
 800ae78:	07ea      	lsls	r2, r5, #31
 800ae7a:	d504      	bpl.n	800ae86 <_strtod_l+0x5b6>
 800ae7c:	e9da 2300 	ldrd	r2, r3, [sl]
 800ae80:	f7f5 fb34 	bl	80004ec <__aeabi_dmul>
 800ae84:	2301      	movs	r3, #1
 800ae86:	106d      	asrs	r5, r5, #1
 800ae88:	f10a 0a08 	add.w	sl, sl, #8
 800ae8c:	d1f4      	bne.n	800ae78 <_strtod_l+0x5a8>
 800ae8e:	b10b      	cbz	r3, 800ae94 <_strtod_l+0x5c4>
 800ae90:	4680      	mov	r8, r0
 800ae92:	4689      	mov	r9, r1
 800ae94:	9b05      	ldr	r3, [sp, #20]
 800ae96:	b1bb      	cbz	r3, 800aec8 <_strtod_l+0x5f8>
 800ae98:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ae9c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	4649      	mov	r1, r9
 800aea4:	dd10      	ble.n	800aec8 <_strtod_l+0x5f8>
 800aea6:	2b1f      	cmp	r3, #31
 800aea8:	f340 8128 	ble.w	800b0fc <_strtod_l+0x82c>
 800aeac:	2b34      	cmp	r3, #52	; 0x34
 800aeae:	bfd8      	it	le
 800aeb0:	f04f 33ff 	movle.w	r3, #4294967295
 800aeb4:	f04f 0800 	mov.w	r8, #0
 800aeb8:	bfcf      	iteee	gt
 800aeba:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800aebe:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800aec2:	4093      	lslle	r3, r2
 800aec4:	ea03 0901 	andle.w	r9, r3, r1
 800aec8:	2200      	movs	r2, #0
 800aeca:	2300      	movs	r3, #0
 800aecc:	4640      	mov	r0, r8
 800aece:	4649      	mov	r1, r9
 800aed0:	f7f5 fd74 	bl	80009bc <__aeabi_dcmpeq>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	d1a6      	bne.n	800ae26 <_strtod_l+0x556>
 800aed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeda:	465a      	mov	r2, fp
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	4620      	mov	r0, r4
 800aee0:	4633      	mov	r3, r6
 800aee2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aee4:	f7ff f8dc 	bl	800a0a0 <__s2b>
 800aee8:	900b      	str	r0, [sp, #44]	; 0x2c
 800aeea:	2800      	cmp	r0, #0
 800aeec:	f43f af2a 	beq.w	800ad44 <_strtod_l+0x474>
 800aef0:	2600      	movs	r6, #0
 800aef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aef4:	9b08      	ldr	r3, [sp, #32]
 800aef6:	2a00      	cmp	r2, #0
 800aef8:	eba3 0307 	sub.w	r3, r3, r7
 800aefc:	bfa8      	it	ge
 800aefe:	2300      	movge	r3, #0
 800af00:	46b3      	mov	fp, r6
 800af02:	9312      	str	r3, [sp, #72]	; 0x48
 800af04:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800af08:	9316      	str	r3, [sp, #88]	; 0x58
 800af0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af0c:	4620      	mov	r0, r4
 800af0e:	6859      	ldr	r1, [r3, #4]
 800af10:	f7ff f81e 	bl	8009f50 <_Balloc>
 800af14:	9008      	str	r0, [sp, #32]
 800af16:	2800      	cmp	r0, #0
 800af18:	f43f af18 	beq.w	800ad4c <_strtod_l+0x47c>
 800af1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af1e:	300c      	adds	r0, #12
 800af20:	691a      	ldr	r2, [r3, #16]
 800af22:	f103 010c 	add.w	r1, r3, #12
 800af26:	3202      	adds	r2, #2
 800af28:	0092      	lsls	r2, r2, #2
 800af2a:	f000 fd1b 	bl	800b964 <memcpy>
 800af2e:	ab1c      	add	r3, sp, #112	; 0x70
 800af30:	9301      	str	r3, [sp, #4]
 800af32:	ab1b      	add	r3, sp, #108	; 0x6c
 800af34:	9300      	str	r3, [sp, #0]
 800af36:	4642      	mov	r2, r8
 800af38:	464b      	mov	r3, r9
 800af3a:	4620      	mov	r0, r4
 800af3c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800af40:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800af44:	f7ff fbd8 	bl	800a6f8 <__d2b>
 800af48:	901a      	str	r0, [sp, #104]	; 0x68
 800af4a:	2800      	cmp	r0, #0
 800af4c:	f43f aefe 	beq.w	800ad4c <_strtod_l+0x47c>
 800af50:	2101      	movs	r1, #1
 800af52:	4620      	mov	r0, r4
 800af54:	f7ff f93c 	bl	800a1d0 <__i2b>
 800af58:	4683      	mov	fp, r0
 800af5a:	2800      	cmp	r0, #0
 800af5c:	f43f aef6 	beq.w	800ad4c <_strtod_l+0x47c>
 800af60:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800af62:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800af64:	2f00      	cmp	r7, #0
 800af66:	bfab      	itete	ge
 800af68:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800af6a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800af6c:	eb07 0a03 	addge.w	sl, r7, r3
 800af70:	1bdd      	sublt	r5, r3, r7
 800af72:	9b05      	ldr	r3, [sp, #20]
 800af74:	bfa8      	it	ge
 800af76:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800af78:	eba7 0703 	sub.w	r7, r7, r3
 800af7c:	4417      	add	r7, r2
 800af7e:	4b71      	ldr	r3, [pc, #452]	; (800b144 <_strtod_l+0x874>)
 800af80:	f107 37ff 	add.w	r7, r7, #4294967295
 800af84:	bfb8      	it	lt
 800af86:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800af8a:	429f      	cmp	r7, r3
 800af8c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800af90:	f280 80c7 	bge.w	800b122 <_strtod_l+0x852>
 800af94:	1bdb      	subs	r3, r3, r7
 800af96:	2b1f      	cmp	r3, #31
 800af98:	f04f 0101 	mov.w	r1, #1
 800af9c:	eba2 0203 	sub.w	r2, r2, r3
 800afa0:	f300 80b3 	bgt.w	800b10a <_strtod_l+0x83a>
 800afa4:	fa01 f303 	lsl.w	r3, r1, r3
 800afa8:	9313      	str	r3, [sp, #76]	; 0x4c
 800afaa:	2300      	movs	r3, #0
 800afac:	9310      	str	r3, [sp, #64]	; 0x40
 800afae:	eb0a 0702 	add.w	r7, sl, r2
 800afb2:	9b05      	ldr	r3, [sp, #20]
 800afb4:	45ba      	cmp	sl, r7
 800afb6:	4415      	add	r5, r2
 800afb8:	441d      	add	r5, r3
 800afba:	4653      	mov	r3, sl
 800afbc:	bfa8      	it	ge
 800afbe:	463b      	movge	r3, r7
 800afc0:	42ab      	cmp	r3, r5
 800afc2:	bfa8      	it	ge
 800afc4:	462b      	movge	r3, r5
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	bfc2      	ittt	gt
 800afca:	1aff      	subgt	r7, r7, r3
 800afcc:	1aed      	subgt	r5, r5, r3
 800afce:	ebaa 0a03 	subgt.w	sl, sl, r3
 800afd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	dd17      	ble.n	800b008 <_strtod_l+0x738>
 800afd8:	4659      	mov	r1, fp
 800afda:	461a      	mov	r2, r3
 800afdc:	4620      	mov	r0, r4
 800afde:	f7ff f9b5 	bl	800a34c <__pow5mult>
 800afe2:	4683      	mov	fp, r0
 800afe4:	2800      	cmp	r0, #0
 800afe6:	f43f aeb1 	beq.w	800ad4c <_strtod_l+0x47c>
 800afea:	4601      	mov	r1, r0
 800afec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800afee:	4620      	mov	r0, r4
 800aff0:	f7ff f904 	bl	800a1fc <__multiply>
 800aff4:	900a      	str	r0, [sp, #40]	; 0x28
 800aff6:	2800      	cmp	r0, #0
 800aff8:	f43f aea8 	beq.w	800ad4c <_strtod_l+0x47c>
 800affc:	4620      	mov	r0, r4
 800affe:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b000:	f7fe ffe6 	bl	8009fd0 <_Bfree>
 800b004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b006:	931a      	str	r3, [sp, #104]	; 0x68
 800b008:	2f00      	cmp	r7, #0
 800b00a:	f300 808f 	bgt.w	800b12c <_strtod_l+0x85c>
 800b00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b010:	2b00      	cmp	r3, #0
 800b012:	dd08      	ble.n	800b026 <_strtod_l+0x756>
 800b014:	4620      	mov	r0, r4
 800b016:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b018:	9908      	ldr	r1, [sp, #32]
 800b01a:	f7ff f997 	bl	800a34c <__pow5mult>
 800b01e:	9008      	str	r0, [sp, #32]
 800b020:	2800      	cmp	r0, #0
 800b022:	f43f ae93 	beq.w	800ad4c <_strtod_l+0x47c>
 800b026:	2d00      	cmp	r5, #0
 800b028:	dd08      	ble.n	800b03c <_strtod_l+0x76c>
 800b02a:	462a      	mov	r2, r5
 800b02c:	4620      	mov	r0, r4
 800b02e:	9908      	ldr	r1, [sp, #32]
 800b030:	f7ff f9e6 	bl	800a400 <__lshift>
 800b034:	9008      	str	r0, [sp, #32]
 800b036:	2800      	cmp	r0, #0
 800b038:	f43f ae88 	beq.w	800ad4c <_strtod_l+0x47c>
 800b03c:	f1ba 0f00 	cmp.w	sl, #0
 800b040:	dd08      	ble.n	800b054 <_strtod_l+0x784>
 800b042:	4659      	mov	r1, fp
 800b044:	4652      	mov	r2, sl
 800b046:	4620      	mov	r0, r4
 800b048:	f7ff f9da 	bl	800a400 <__lshift>
 800b04c:	4683      	mov	fp, r0
 800b04e:	2800      	cmp	r0, #0
 800b050:	f43f ae7c 	beq.w	800ad4c <_strtod_l+0x47c>
 800b054:	4620      	mov	r0, r4
 800b056:	9a08      	ldr	r2, [sp, #32]
 800b058:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b05a:	f7ff fa59 	bl	800a510 <__mdiff>
 800b05e:	4606      	mov	r6, r0
 800b060:	2800      	cmp	r0, #0
 800b062:	f43f ae73 	beq.w	800ad4c <_strtod_l+0x47c>
 800b066:	2500      	movs	r5, #0
 800b068:	68c3      	ldr	r3, [r0, #12]
 800b06a:	4659      	mov	r1, fp
 800b06c:	60c5      	str	r5, [r0, #12]
 800b06e:	930a      	str	r3, [sp, #40]	; 0x28
 800b070:	f7ff fa32 	bl	800a4d8 <__mcmp>
 800b074:	42a8      	cmp	r0, r5
 800b076:	da6b      	bge.n	800b150 <_strtod_l+0x880>
 800b078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b07a:	ea53 0308 	orrs.w	r3, r3, r8
 800b07e:	f040 808f 	bne.w	800b1a0 <_strtod_l+0x8d0>
 800b082:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b086:	2b00      	cmp	r3, #0
 800b088:	f040 808a 	bne.w	800b1a0 <_strtod_l+0x8d0>
 800b08c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b090:	0d1b      	lsrs	r3, r3, #20
 800b092:	051b      	lsls	r3, r3, #20
 800b094:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b098:	f240 8082 	bls.w	800b1a0 <_strtod_l+0x8d0>
 800b09c:	6973      	ldr	r3, [r6, #20]
 800b09e:	b913      	cbnz	r3, 800b0a6 <_strtod_l+0x7d6>
 800b0a0:	6933      	ldr	r3, [r6, #16]
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	dd7c      	ble.n	800b1a0 <_strtod_l+0x8d0>
 800b0a6:	4631      	mov	r1, r6
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f7ff f9a8 	bl	800a400 <__lshift>
 800b0b0:	4659      	mov	r1, fp
 800b0b2:	4606      	mov	r6, r0
 800b0b4:	f7ff fa10 	bl	800a4d8 <__mcmp>
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	dd71      	ble.n	800b1a0 <_strtod_l+0x8d0>
 800b0bc:	9905      	ldr	r1, [sp, #20]
 800b0be:	464b      	mov	r3, r9
 800b0c0:	4a21      	ldr	r2, [pc, #132]	; (800b148 <_strtod_l+0x878>)
 800b0c2:	2900      	cmp	r1, #0
 800b0c4:	f000 808d 	beq.w	800b1e2 <_strtod_l+0x912>
 800b0c8:	ea02 0109 	and.w	r1, r2, r9
 800b0cc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b0d0:	f300 8087 	bgt.w	800b1e2 <_strtod_l+0x912>
 800b0d4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b0d8:	f77f aea9 	ble.w	800ae2e <_strtod_l+0x55e>
 800b0dc:	4640      	mov	r0, r8
 800b0de:	4649      	mov	r1, r9
 800b0e0:	4b1a      	ldr	r3, [pc, #104]	; (800b14c <_strtod_l+0x87c>)
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f7f5 fa02 	bl	80004ec <__aeabi_dmul>
 800b0e8:	4b17      	ldr	r3, [pc, #92]	; (800b148 <_strtod_l+0x878>)
 800b0ea:	4680      	mov	r8, r0
 800b0ec:	400b      	ands	r3, r1
 800b0ee:	4689      	mov	r9, r1
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f47f ae35 	bne.w	800ad60 <_strtod_l+0x490>
 800b0f6:	2322      	movs	r3, #34	; 0x22
 800b0f8:	6023      	str	r3, [r4, #0]
 800b0fa:	e631      	b.n	800ad60 <_strtod_l+0x490>
 800b0fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b100:	fa02 f303 	lsl.w	r3, r2, r3
 800b104:	ea03 0808 	and.w	r8, r3, r8
 800b108:	e6de      	b.n	800aec8 <_strtod_l+0x5f8>
 800b10a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800b10e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800b112:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800b116:	37e2      	adds	r7, #226	; 0xe2
 800b118:	fa01 f307 	lsl.w	r3, r1, r7
 800b11c:	9310      	str	r3, [sp, #64]	; 0x40
 800b11e:	9113      	str	r1, [sp, #76]	; 0x4c
 800b120:	e745      	b.n	800afae <_strtod_l+0x6de>
 800b122:	2300      	movs	r3, #0
 800b124:	9310      	str	r3, [sp, #64]	; 0x40
 800b126:	2301      	movs	r3, #1
 800b128:	9313      	str	r3, [sp, #76]	; 0x4c
 800b12a:	e740      	b.n	800afae <_strtod_l+0x6de>
 800b12c:	463a      	mov	r2, r7
 800b12e:	4620      	mov	r0, r4
 800b130:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b132:	f7ff f965 	bl	800a400 <__lshift>
 800b136:	901a      	str	r0, [sp, #104]	; 0x68
 800b138:	2800      	cmp	r0, #0
 800b13a:	f47f af68 	bne.w	800b00e <_strtod_l+0x73e>
 800b13e:	e605      	b.n	800ad4c <_strtod_l+0x47c>
 800b140:	0800de28 	.word	0x0800de28
 800b144:	fffffc02 	.word	0xfffffc02
 800b148:	7ff00000 	.word	0x7ff00000
 800b14c:	39500000 	.word	0x39500000
 800b150:	46ca      	mov	sl, r9
 800b152:	d165      	bne.n	800b220 <_strtod_l+0x950>
 800b154:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b156:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b15a:	b352      	cbz	r2, 800b1b2 <_strtod_l+0x8e2>
 800b15c:	4a9e      	ldr	r2, [pc, #632]	; (800b3d8 <_strtod_l+0xb08>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d12a      	bne.n	800b1b8 <_strtod_l+0x8e8>
 800b162:	9b05      	ldr	r3, [sp, #20]
 800b164:	4641      	mov	r1, r8
 800b166:	b1fb      	cbz	r3, 800b1a8 <_strtod_l+0x8d8>
 800b168:	4b9c      	ldr	r3, [pc, #624]	; (800b3dc <_strtod_l+0xb0c>)
 800b16a:	f04f 32ff 	mov.w	r2, #4294967295
 800b16e:	ea09 0303 	and.w	r3, r9, r3
 800b172:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b176:	d81a      	bhi.n	800b1ae <_strtod_l+0x8de>
 800b178:	0d1b      	lsrs	r3, r3, #20
 800b17a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b17e:	fa02 f303 	lsl.w	r3, r2, r3
 800b182:	4299      	cmp	r1, r3
 800b184:	d118      	bne.n	800b1b8 <_strtod_l+0x8e8>
 800b186:	4b96      	ldr	r3, [pc, #600]	; (800b3e0 <_strtod_l+0xb10>)
 800b188:	459a      	cmp	sl, r3
 800b18a:	d102      	bne.n	800b192 <_strtod_l+0x8c2>
 800b18c:	3101      	adds	r1, #1
 800b18e:	f43f addd 	beq.w	800ad4c <_strtod_l+0x47c>
 800b192:	f04f 0800 	mov.w	r8, #0
 800b196:	4b91      	ldr	r3, [pc, #580]	; (800b3dc <_strtod_l+0xb0c>)
 800b198:	ea0a 0303 	and.w	r3, sl, r3
 800b19c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b1a0:	9b05      	ldr	r3, [sp, #20]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d19a      	bne.n	800b0dc <_strtod_l+0x80c>
 800b1a6:	e5db      	b.n	800ad60 <_strtod_l+0x490>
 800b1a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ac:	e7e9      	b.n	800b182 <_strtod_l+0x8b2>
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	e7e7      	b.n	800b182 <_strtod_l+0x8b2>
 800b1b2:	ea53 0308 	orrs.w	r3, r3, r8
 800b1b6:	d081      	beq.n	800b0bc <_strtod_l+0x7ec>
 800b1b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1ba:	b1e3      	cbz	r3, 800b1f6 <_strtod_l+0x926>
 800b1bc:	ea13 0f0a 	tst.w	r3, sl
 800b1c0:	d0ee      	beq.n	800b1a0 <_strtod_l+0x8d0>
 800b1c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1c4:	4640      	mov	r0, r8
 800b1c6:	4649      	mov	r1, r9
 800b1c8:	9a05      	ldr	r2, [sp, #20]
 800b1ca:	b1c3      	cbz	r3, 800b1fe <_strtod_l+0x92e>
 800b1cc:	f7ff fb5c 	bl	800a888 <sulp>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b1d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b1d8:	f7f4 ffd2 	bl	8000180 <__adddf3>
 800b1dc:	4680      	mov	r8, r0
 800b1de:	4689      	mov	r9, r1
 800b1e0:	e7de      	b.n	800b1a0 <_strtod_l+0x8d0>
 800b1e2:	4013      	ands	r3, r2
 800b1e4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b1e8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b1ec:	f04f 38ff 	mov.w	r8, #4294967295
 800b1f0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b1f4:	e7d4      	b.n	800b1a0 <_strtod_l+0x8d0>
 800b1f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b1f8:	ea13 0f08 	tst.w	r3, r8
 800b1fc:	e7e0      	b.n	800b1c0 <_strtod_l+0x8f0>
 800b1fe:	f7ff fb43 	bl	800a888 <sulp>
 800b202:	4602      	mov	r2, r0
 800b204:	460b      	mov	r3, r1
 800b206:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b208:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b20a:	f7f4 ffb7 	bl	800017c <__aeabi_dsub>
 800b20e:	2200      	movs	r2, #0
 800b210:	2300      	movs	r3, #0
 800b212:	4680      	mov	r8, r0
 800b214:	4689      	mov	r9, r1
 800b216:	f7f5 fbd1 	bl	80009bc <__aeabi_dcmpeq>
 800b21a:	2800      	cmp	r0, #0
 800b21c:	d0c0      	beq.n	800b1a0 <_strtod_l+0x8d0>
 800b21e:	e606      	b.n	800ae2e <_strtod_l+0x55e>
 800b220:	4659      	mov	r1, fp
 800b222:	4630      	mov	r0, r6
 800b224:	f7ff fabe 	bl	800a7a4 <__ratio>
 800b228:	4602      	mov	r2, r0
 800b22a:	460b      	mov	r3, r1
 800b22c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b230:	2200      	movs	r2, #0
 800b232:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b236:	f7f5 fbd5 	bl	80009e4 <__aeabi_dcmple>
 800b23a:	2800      	cmp	r0, #0
 800b23c:	d06f      	beq.n	800b31e <_strtod_l+0xa4e>
 800b23e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b240:	2b00      	cmp	r3, #0
 800b242:	d17c      	bne.n	800b33e <_strtod_l+0xa6e>
 800b244:	f1b8 0f00 	cmp.w	r8, #0
 800b248:	d159      	bne.n	800b2fe <_strtod_l+0xa2e>
 800b24a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d17b      	bne.n	800b34a <_strtod_l+0xa7a>
 800b252:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b256:	2200      	movs	r2, #0
 800b258:	4b62      	ldr	r3, [pc, #392]	; (800b3e4 <_strtod_l+0xb14>)
 800b25a:	f7f5 fbb9 	bl	80009d0 <__aeabi_dcmplt>
 800b25e:	2800      	cmp	r0, #0
 800b260:	d15a      	bne.n	800b318 <_strtod_l+0xa48>
 800b262:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b266:	2200      	movs	r2, #0
 800b268:	4b5f      	ldr	r3, [pc, #380]	; (800b3e8 <_strtod_l+0xb18>)
 800b26a:	f7f5 f93f 	bl	80004ec <__aeabi_dmul>
 800b26e:	4605      	mov	r5, r0
 800b270:	460f      	mov	r7, r1
 800b272:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b276:	9506      	str	r5, [sp, #24]
 800b278:	9307      	str	r3, [sp, #28]
 800b27a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b27e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b282:	4b56      	ldr	r3, [pc, #344]	; (800b3dc <_strtod_l+0xb0c>)
 800b284:	4a55      	ldr	r2, [pc, #340]	; (800b3dc <_strtod_l+0xb0c>)
 800b286:	ea0a 0303 	and.w	r3, sl, r3
 800b28a:	9313      	str	r3, [sp, #76]	; 0x4c
 800b28c:	4b57      	ldr	r3, [pc, #348]	; (800b3ec <_strtod_l+0xb1c>)
 800b28e:	ea0a 0202 	and.w	r2, sl, r2
 800b292:	429a      	cmp	r2, r3
 800b294:	f040 80b0 	bne.w	800b3f8 <_strtod_l+0xb28>
 800b298:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b29c:	4640      	mov	r0, r8
 800b29e:	4649      	mov	r1, r9
 800b2a0:	f7ff f9c2 	bl	800a628 <__ulp>
 800b2a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b2a8:	f7f5 f920 	bl	80004ec <__aeabi_dmul>
 800b2ac:	4642      	mov	r2, r8
 800b2ae:	464b      	mov	r3, r9
 800b2b0:	f7f4 ff66 	bl	8000180 <__adddf3>
 800b2b4:	f8df a124 	ldr.w	sl, [pc, #292]	; 800b3dc <_strtod_l+0xb0c>
 800b2b8:	4a4d      	ldr	r2, [pc, #308]	; (800b3f0 <_strtod_l+0xb20>)
 800b2ba:	ea01 0a0a 	and.w	sl, r1, sl
 800b2be:	4592      	cmp	sl, r2
 800b2c0:	4680      	mov	r8, r0
 800b2c2:	d948      	bls.n	800b356 <_strtod_l+0xa86>
 800b2c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b2c6:	4b46      	ldr	r3, [pc, #280]	; (800b3e0 <_strtod_l+0xb10>)
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d103      	bne.n	800b2d4 <_strtod_l+0xa04>
 800b2cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	f43f ad3c 	beq.w	800ad4c <_strtod_l+0x47c>
 800b2d4:	f04f 38ff 	mov.w	r8, #4294967295
 800b2d8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800b3e0 <_strtod_l+0xb10>
 800b2dc:	4620      	mov	r0, r4
 800b2de:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b2e0:	f7fe fe76 	bl	8009fd0 <_Bfree>
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	9908      	ldr	r1, [sp, #32]
 800b2e8:	f7fe fe72 	bl	8009fd0 <_Bfree>
 800b2ec:	4659      	mov	r1, fp
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	f7fe fe6e 	bl	8009fd0 <_Bfree>
 800b2f4:	4631      	mov	r1, r6
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f7fe fe6a 	bl	8009fd0 <_Bfree>
 800b2fc:	e605      	b.n	800af0a <_strtod_l+0x63a>
 800b2fe:	f1b8 0f01 	cmp.w	r8, #1
 800b302:	d103      	bne.n	800b30c <_strtod_l+0xa3c>
 800b304:	f1b9 0f00 	cmp.w	r9, #0
 800b308:	f43f ad91 	beq.w	800ae2e <_strtod_l+0x55e>
 800b30c:	2200      	movs	r2, #0
 800b30e:	4b39      	ldr	r3, [pc, #228]	; (800b3f4 <_strtod_l+0xb24>)
 800b310:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b312:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b316:	e016      	b.n	800b346 <_strtod_l+0xa76>
 800b318:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b31a:	4f33      	ldr	r7, [pc, #204]	; (800b3e8 <_strtod_l+0xb18>)
 800b31c:	e7a9      	b.n	800b272 <_strtod_l+0x9a2>
 800b31e:	4b32      	ldr	r3, [pc, #200]	; (800b3e8 <_strtod_l+0xb18>)
 800b320:	2200      	movs	r2, #0
 800b322:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b326:	f7f5 f8e1 	bl	80004ec <__aeabi_dmul>
 800b32a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b32c:	4605      	mov	r5, r0
 800b32e:	460f      	mov	r7, r1
 800b330:	2b00      	cmp	r3, #0
 800b332:	d09e      	beq.n	800b272 <_strtod_l+0x9a2>
 800b334:	4602      	mov	r2, r0
 800b336:	460b      	mov	r3, r1
 800b338:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b33c:	e79d      	b.n	800b27a <_strtod_l+0x9aa>
 800b33e:	2200      	movs	r2, #0
 800b340:	4b28      	ldr	r3, [pc, #160]	; (800b3e4 <_strtod_l+0xb14>)
 800b342:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b346:	4f27      	ldr	r7, [pc, #156]	; (800b3e4 <_strtod_l+0xb14>)
 800b348:	e797      	b.n	800b27a <_strtod_l+0x9aa>
 800b34a:	2200      	movs	r2, #0
 800b34c:	4b29      	ldr	r3, [pc, #164]	; (800b3f4 <_strtod_l+0xb24>)
 800b34e:	4645      	mov	r5, r8
 800b350:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b354:	e7f7      	b.n	800b346 <_strtod_l+0xa76>
 800b356:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800b35a:	9b05      	ldr	r3, [sp, #20]
 800b35c:	46ca      	mov	sl, r9
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d1bc      	bne.n	800b2dc <_strtod_l+0xa0c>
 800b362:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b366:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b368:	0d1b      	lsrs	r3, r3, #20
 800b36a:	051b      	lsls	r3, r3, #20
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d1b5      	bne.n	800b2dc <_strtod_l+0xa0c>
 800b370:	4628      	mov	r0, r5
 800b372:	4639      	mov	r1, r7
 800b374:	f7f5 fe60 	bl	8001038 <__aeabi_d2lz>
 800b378:	f7f5 f88a 	bl	8000490 <__aeabi_l2d>
 800b37c:	4602      	mov	r2, r0
 800b37e:	460b      	mov	r3, r1
 800b380:	4628      	mov	r0, r5
 800b382:	4639      	mov	r1, r7
 800b384:	f7f4 fefa 	bl	800017c <__aeabi_dsub>
 800b388:	460b      	mov	r3, r1
 800b38a:	4602      	mov	r2, r0
 800b38c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800b390:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b396:	ea4a 0a08 	orr.w	sl, sl, r8
 800b39a:	ea5a 0a03 	orrs.w	sl, sl, r3
 800b39e:	d06c      	beq.n	800b47a <_strtod_l+0xbaa>
 800b3a0:	a309      	add	r3, pc, #36	; (adr r3, 800b3c8 <_strtod_l+0xaf8>)
 800b3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a6:	f7f5 fb13 	bl	80009d0 <__aeabi_dcmplt>
 800b3aa:	2800      	cmp	r0, #0
 800b3ac:	f47f acd8 	bne.w	800ad60 <_strtod_l+0x490>
 800b3b0:	a307      	add	r3, pc, #28	; (adr r3, 800b3d0 <_strtod_l+0xb00>)
 800b3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b3ba:	f7f5 fb27 	bl	8000a0c <__aeabi_dcmpgt>
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	d08c      	beq.n	800b2dc <_strtod_l+0xa0c>
 800b3c2:	e4cd      	b.n	800ad60 <_strtod_l+0x490>
 800b3c4:	f3af 8000 	nop.w
 800b3c8:	94a03595 	.word	0x94a03595
 800b3cc:	3fdfffff 	.word	0x3fdfffff
 800b3d0:	35afe535 	.word	0x35afe535
 800b3d4:	3fe00000 	.word	0x3fe00000
 800b3d8:	000fffff 	.word	0x000fffff
 800b3dc:	7ff00000 	.word	0x7ff00000
 800b3e0:	7fefffff 	.word	0x7fefffff
 800b3e4:	3ff00000 	.word	0x3ff00000
 800b3e8:	3fe00000 	.word	0x3fe00000
 800b3ec:	7fe00000 	.word	0x7fe00000
 800b3f0:	7c9fffff 	.word	0x7c9fffff
 800b3f4:	bff00000 	.word	0xbff00000
 800b3f8:	9b05      	ldr	r3, [sp, #20]
 800b3fa:	b333      	cbz	r3, 800b44a <_strtod_l+0xb7a>
 800b3fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b3fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b402:	d822      	bhi.n	800b44a <_strtod_l+0xb7a>
 800b404:	a328      	add	r3, pc, #160	; (adr r3, 800b4a8 <_strtod_l+0xbd8>)
 800b406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40a:	4628      	mov	r0, r5
 800b40c:	4639      	mov	r1, r7
 800b40e:	f7f5 fae9 	bl	80009e4 <__aeabi_dcmple>
 800b412:	b1a0      	cbz	r0, 800b43e <_strtod_l+0xb6e>
 800b414:	4639      	mov	r1, r7
 800b416:	4628      	mov	r0, r5
 800b418:	f7f5 fb40 	bl	8000a9c <__aeabi_d2uiz>
 800b41c:	2801      	cmp	r0, #1
 800b41e:	bf38      	it	cc
 800b420:	2001      	movcc	r0, #1
 800b422:	f7f4 ffe9 	bl	80003f8 <__aeabi_ui2d>
 800b426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b428:	4605      	mov	r5, r0
 800b42a:	460f      	mov	r7, r1
 800b42c:	bb03      	cbnz	r3, 800b470 <_strtod_l+0xba0>
 800b42e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b432:	9014      	str	r0, [sp, #80]	; 0x50
 800b434:	9315      	str	r3, [sp, #84]	; 0x54
 800b436:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b43a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b43e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b440:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b442:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b446:	1a9b      	subs	r3, r3, r2
 800b448:	9311      	str	r3, [sp, #68]	; 0x44
 800b44a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b44c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b44e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800b452:	f7ff f8e9 	bl	800a628 <__ulp>
 800b456:	4602      	mov	r2, r0
 800b458:	460b      	mov	r3, r1
 800b45a:	4640      	mov	r0, r8
 800b45c:	4649      	mov	r1, r9
 800b45e:	f7f5 f845 	bl	80004ec <__aeabi_dmul>
 800b462:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b466:	f7f4 fe8b 	bl	8000180 <__adddf3>
 800b46a:	4680      	mov	r8, r0
 800b46c:	4689      	mov	r9, r1
 800b46e:	e774      	b.n	800b35a <_strtod_l+0xa8a>
 800b470:	4602      	mov	r2, r0
 800b472:	460b      	mov	r3, r1
 800b474:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b478:	e7dd      	b.n	800b436 <_strtod_l+0xb66>
 800b47a:	a30d      	add	r3, pc, #52	; (adr r3, 800b4b0 <_strtod_l+0xbe0>)
 800b47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b480:	f7f5 faa6 	bl	80009d0 <__aeabi_dcmplt>
 800b484:	e79b      	b.n	800b3be <_strtod_l+0xaee>
 800b486:	2300      	movs	r3, #0
 800b488:	930e      	str	r3, [sp, #56]	; 0x38
 800b48a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b48c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b48e:	6013      	str	r3, [r2, #0]
 800b490:	f7ff ba5b 	b.w	800a94a <_strtod_l+0x7a>
 800b494:	2a65      	cmp	r2, #101	; 0x65
 800b496:	f43f ab52 	beq.w	800ab3e <_strtod_l+0x26e>
 800b49a:	2a45      	cmp	r2, #69	; 0x45
 800b49c:	f43f ab4f 	beq.w	800ab3e <_strtod_l+0x26e>
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	f7ff bb87 	b.w	800abb4 <_strtod_l+0x2e4>
 800b4a6:	bf00      	nop
 800b4a8:	ffc00000 	.word	0xffc00000
 800b4ac:	41dfffff 	.word	0x41dfffff
 800b4b0:	94a03595 	.word	0x94a03595
 800b4b4:	3fcfffff 	.word	0x3fcfffff

0800b4b8 <_strtod_r>:
 800b4b8:	4b01      	ldr	r3, [pc, #4]	; (800b4c0 <_strtod_r+0x8>)
 800b4ba:	f7ff ba09 	b.w	800a8d0 <_strtod_l>
 800b4be:	bf00      	nop
 800b4c0:	20000074 	.word	0x20000074

0800b4c4 <__ssputs_r>:
 800b4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4c8:	461f      	mov	r7, r3
 800b4ca:	688e      	ldr	r6, [r1, #8]
 800b4cc:	4682      	mov	sl, r0
 800b4ce:	42be      	cmp	r6, r7
 800b4d0:	460c      	mov	r4, r1
 800b4d2:	4690      	mov	r8, r2
 800b4d4:	680b      	ldr	r3, [r1, #0]
 800b4d6:	d82c      	bhi.n	800b532 <__ssputs_r+0x6e>
 800b4d8:	898a      	ldrh	r2, [r1, #12]
 800b4da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4de:	d026      	beq.n	800b52e <__ssputs_r+0x6a>
 800b4e0:	6965      	ldr	r5, [r4, #20]
 800b4e2:	6909      	ldr	r1, [r1, #16]
 800b4e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4e8:	eba3 0901 	sub.w	r9, r3, r1
 800b4ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4f0:	1c7b      	adds	r3, r7, #1
 800b4f2:	444b      	add	r3, r9
 800b4f4:	106d      	asrs	r5, r5, #1
 800b4f6:	429d      	cmp	r5, r3
 800b4f8:	bf38      	it	cc
 800b4fa:	461d      	movcc	r5, r3
 800b4fc:	0553      	lsls	r3, r2, #21
 800b4fe:	d527      	bpl.n	800b550 <__ssputs_r+0x8c>
 800b500:	4629      	mov	r1, r5
 800b502:	f7fe fc99 	bl	8009e38 <_malloc_r>
 800b506:	4606      	mov	r6, r0
 800b508:	b360      	cbz	r0, 800b564 <__ssputs_r+0xa0>
 800b50a:	464a      	mov	r2, r9
 800b50c:	6921      	ldr	r1, [r4, #16]
 800b50e:	f000 fa29 	bl	800b964 <memcpy>
 800b512:	89a3      	ldrh	r3, [r4, #12]
 800b514:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b51c:	81a3      	strh	r3, [r4, #12]
 800b51e:	6126      	str	r6, [r4, #16]
 800b520:	444e      	add	r6, r9
 800b522:	6026      	str	r6, [r4, #0]
 800b524:	463e      	mov	r6, r7
 800b526:	6165      	str	r5, [r4, #20]
 800b528:	eba5 0509 	sub.w	r5, r5, r9
 800b52c:	60a5      	str	r5, [r4, #8]
 800b52e:	42be      	cmp	r6, r7
 800b530:	d900      	bls.n	800b534 <__ssputs_r+0x70>
 800b532:	463e      	mov	r6, r7
 800b534:	4632      	mov	r2, r6
 800b536:	4641      	mov	r1, r8
 800b538:	6820      	ldr	r0, [r4, #0]
 800b53a:	f000 f9d7 	bl	800b8ec <memmove>
 800b53e:	2000      	movs	r0, #0
 800b540:	68a3      	ldr	r3, [r4, #8]
 800b542:	1b9b      	subs	r3, r3, r6
 800b544:	60a3      	str	r3, [r4, #8]
 800b546:	6823      	ldr	r3, [r4, #0]
 800b548:	4433      	add	r3, r6
 800b54a:	6023      	str	r3, [r4, #0]
 800b54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b550:	462a      	mov	r2, r5
 800b552:	f000 fda2 	bl	800c09a <_realloc_r>
 800b556:	4606      	mov	r6, r0
 800b558:	2800      	cmp	r0, #0
 800b55a:	d1e0      	bne.n	800b51e <__ssputs_r+0x5a>
 800b55c:	4650      	mov	r0, sl
 800b55e:	6921      	ldr	r1, [r4, #16]
 800b560:	f7fe fbfa 	bl	8009d58 <_free_r>
 800b564:	230c      	movs	r3, #12
 800b566:	f8ca 3000 	str.w	r3, [sl]
 800b56a:	89a3      	ldrh	r3, [r4, #12]
 800b56c:	f04f 30ff 	mov.w	r0, #4294967295
 800b570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b574:	81a3      	strh	r3, [r4, #12]
 800b576:	e7e9      	b.n	800b54c <__ssputs_r+0x88>

0800b578 <_svfiprintf_r>:
 800b578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b57c:	4698      	mov	r8, r3
 800b57e:	898b      	ldrh	r3, [r1, #12]
 800b580:	4607      	mov	r7, r0
 800b582:	061b      	lsls	r3, r3, #24
 800b584:	460d      	mov	r5, r1
 800b586:	4614      	mov	r4, r2
 800b588:	b09d      	sub	sp, #116	; 0x74
 800b58a:	d50e      	bpl.n	800b5aa <_svfiprintf_r+0x32>
 800b58c:	690b      	ldr	r3, [r1, #16]
 800b58e:	b963      	cbnz	r3, 800b5aa <_svfiprintf_r+0x32>
 800b590:	2140      	movs	r1, #64	; 0x40
 800b592:	f7fe fc51 	bl	8009e38 <_malloc_r>
 800b596:	6028      	str	r0, [r5, #0]
 800b598:	6128      	str	r0, [r5, #16]
 800b59a:	b920      	cbnz	r0, 800b5a6 <_svfiprintf_r+0x2e>
 800b59c:	230c      	movs	r3, #12
 800b59e:	603b      	str	r3, [r7, #0]
 800b5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a4:	e0d0      	b.n	800b748 <_svfiprintf_r+0x1d0>
 800b5a6:	2340      	movs	r3, #64	; 0x40
 800b5a8:	616b      	str	r3, [r5, #20]
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ae:	2320      	movs	r3, #32
 800b5b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5b4:	2330      	movs	r3, #48	; 0x30
 800b5b6:	f04f 0901 	mov.w	r9, #1
 800b5ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5be:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800b760 <_svfiprintf_r+0x1e8>
 800b5c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5c6:	4623      	mov	r3, r4
 800b5c8:	469a      	mov	sl, r3
 800b5ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5ce:	b10a      	cbz	r2, 800b5d4 <_svfiprintf_r+0x5c>
 800b5d0:	2a25      	cmp	r2, #37	; 0x25
 800b5d2:	d1f9      	bne.n	800b5c8 <_svfiprintf_r+0x50>
 800b5d4:	ebba 0b04 	subs.w	fp, sl, r4
 800b5d8:	d00b      	beq.n	800b5f2 <_svfiprintf_r+0x7a>
 800b5da:	465b      	mov	r3, fp
 800b5dc:	4622      	mov	r2, r4
 800b5de:	4629      	mov	r1, r5
 800b5e0:	4638      	mov	r0, r7
 800b5e2:	f7ff ff6f 	bl	800b4c4 <__ssputs_r>
 800b5e6:	3001      	adds	r0, #1
 800b5e8:	f000 80a9 	beq.w	800b73e <_svfiprintf_r+0x1c6>
 800b5ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5ee:	445a      	add	r2, fp
 800b5f0:	9209      	str	r2, [sp, #36]	; 0x24
 800b5f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f000 80a1 	beq.w	800b73e <_svfiprintf_r+0x1c6>
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b606:	f10a 0a01 	add.w	sl, sl, #1
 800b60a:	9304      	str	r3, [sp, #16]
 800b60c:	9307      	str	r3, [sp, #28]
 800b60e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b612:	931a      	str	r3, [sp, #104]	; 0x68
 800b614:	4654      	mov	r4, sl
 800b616:	2205      	movs	r2, #5
 800b618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b61c:	4850      	ldr	r0, [pc, #320]	; (800b760 <_svfiprintf_r+0x1e8>)
 800b61e:	f7fd fcfa 	bl	8009016 <memchr>
 800b622:	9a04      	ldr	r2, [sp, #16]
 800b624:	b9d8      	cbnz	r0, 800b65e <_svfiprintf_r+0xe6>
 800b626:	06d0      	lsls	r0, r2, #27
 800b628:	bf44      	itt	mi
 800b62a:	2320      	movmi	r3, #32
 800b62c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b630:	0711      	lsls	r1, r2, #28
 800b632:	bf44      	itt	mi
 800b634:	232b      	movmi	r3, #43	; 0x2b
 800b636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b63a:	f89a 3000 	ldrb.w	r3, [sl]
 800b63e:	2b2a      	cmp	r3, #42	; 0x2a
 800b640:	d015      	beq.n	800b66e <_svfiprintf_r+0xf6>
 800b642:	4654      	mov	r4, sl
 800b644:	2000      	movs	r0, #0
 800b646:	f04f 0c0a 	mov.w	ip, #10
 800b64a:	9a07      	ldr	r2, [sp, #28]
 800b64c:	4621      	mov	r1, r4
 800b64e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b652:	3b30      	subs	r3, #48	; 0x30
 800b654:	2b09      	cmp	r3, #9
 800b656:	d94d      	bls.n	800b6f4 <_svfiprintf_r+0x17c>
 800b658:	b1b0      	cbz	r0, 800b688 <_svfiprintf_r+0x110>
 800b65a:	9207      	str	r2, [sp, #28]
 800b65c:	e014      	b.n	800b688 <_svfiprintf_r+0x110>
 800b65e:	eba0 0308 	sub.w	r3, r0, r8
 800b662:	fa09 f303 	lsl.w	r3, r9, r3
 800b666:	4313      	orrs	r3, r2
 800b668:	46a2      	mov	sl, r4
 800b66a:	9304      	str	r3, [sp, #16]
 800b66c:	e7d2      	b.n	800b614 <_svfiprintf_r+0x9c>
 800b66e:	9b03      	ldr	r3, [sp, #12]
 800b670:	1d19      	adds	r1, r3, #4
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	9103      	str	r1, [sp, #12]
 800b676:	2b00      	cmp	r3, #0
 800b678:	bfbb      	ittet	lt
 800b67a:	425b      	neglt	r3, r3
 800b67c:	f042 0202 	orrlt.w	r2, r2, #2
 800b680:	9307      	strge	r3, [sp, #28]
 800b682:	9307      	strlt	r3, [sp, #28]
 800b684:	bfb8      	it	lt
 800b686:	9204      	strlt	r2, [sp, #16]
 800b688:	7823      	ldrb	r3, [r4, #0]
 800b68a:	2b2e      	cmp	r3, #46	; 0x2e
 800b68c:	d10c      	bne.n	800b6a8 <_svfiprintf_r+0x130>
 800b68e:	7863      	ldrb	r3, [r4, #1]
 800b690:	2b2a      	cmp	r3, #42	; 0x2a
 800b692:	d134      	bne.n	800b6fe <_svfiprintf_r+0x186>
 800b694:	9b03      	ldr	r3, [sp, #12]
 800b696:	3402      	adds	r4, #2
 800b698:	1d1a      	adds	r2, r3, #4
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	9203      	str	r2, [sp, #12]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	bfb8      	it	lt
 800b6a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6a6:	9305      	str	r3, [sp, #20]
 800b6a8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800b764 <_svfiprintf_r+0x1ec>
 800b6ac:	2203      	movs	r2, #3
 800b6ae:	4650      	mov	r0, sl
 800b6b0:	7821      	ldrb	r1, [r4, #0]
 800b6b2:	f7fd fcb0 	bl	8009016 <memchr>
 800b6b6:	b138      	cbz	r0, 800b6c8 <_svfiprintf_r+0x150>
 800b6b8:	2240      	movs	r2, #64	; 0x40
 800b6ba:	9b04      	ldr	r3, [sp, #16]
 800b6bc:	eba0 000a 	sub.w	r0, r0, sl
 800b6c0:	4082      	lsls	r2, r0
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	3401      	adds	r4, #1
 800b6c6:	9304      	str	r3, [sp, #16]
 800b6c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6cc:	2206      	movs	r2, #6
 800b6ce:	4826      	ldr	r0, [pc, #152]	; (800b768 <_svfiprintf_r+0x1f0>)
 800b6d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6d4:	f7fd fc9f 	bl	8009016 <memchr>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	d038      	beq.n	800b74e <_svfiprintf_r+0x1d6>
 800b6dc:	4b23      	ldr	r3, [pc, #140]	; (800b76c <_svfiprintf_r+0x1f4>)
 800b6de:	bb1b      	cbnz	r3, 800b728 <_svfiprintf_r+0x1b0>
 800b6e0:	9b03      	ldr	r3, [sp, #12]
 800b6e2:	3307      	adds	r3, #7
 800b6e4:	f023 0307 	bic.w	r3, r3, #7
 800b6e8:	3308      	adds	r3, #8
 800b6ea:	9303      	str	r3, [sp, #12]
 800b6ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ee:	4433      	add	r3, r6
 800b6f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b6f2:	e768      	b.n	800b5c6 <_svfiprintf_r+0x4e>
 800b6f4:	460c      	mov	r4, r1
 800b6f6:	2001      	movs	r0, #1
 800b6f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6fc:	e7a6      	b.n	800b64c <_svfiprintf_r+0xd4>
 800b6fe:	2300      	movs	r3, #0
 800b700:	f04f 0c0a 	mov.w	ip, #10
 800b704:	4619      	mov	r1, r3
 800b706:	3401      	adds	r4, #1
 800b708:	9305      	str	r3, [sp, #20]
 800b70a:	4620      	mov	r0, r4
 800b70c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b710:	3a30      	subs	r2, #48	; 0x30
 800b712:	2a09      	cmp	r2, #9
 800b714:	d903      	bls.n	800b71e <_svfiprintf_r+0x1a6>
 800b716:	2b00      	cmp	r3, #0
 800b718:	d0c6      	beq.n	800b6a8 <_svfiprintf_r+0x130>
 800b71a:	9105      	str	r1, [sp, #20]
 800b71c:	e7c4      	b.n	800b6a8 <_svfiprintf_r+0x130>
 800b71e:	4604      	mov	r4, r0
 800b720:	2301      	movs	r3, #1
 800b722:	fb0c 2101 	mla	r1, ip, r1, r2
 800b726:	e7f0      	b.n	800b70a <_svfiprintf_r+0x192>
 800b728:	ab03      	add	r3, sp, #12
 800b72a:	9300      	str	r3, [sp, #0]
 800b72c:	462a      	mov	r2, r5
 800b72e:	4638      	mov	r0, r7
 800b730:	4b0f      	ldr	r3, [pc, #60]	; (800b770 <_svfiprintf_r+0x1f8>)
 800b732:	a904      	add	r1, sp, #16
 800b734:	f7fc fc7e 	bl	8008034 <_printf_float>
 800b738:	1c42      	adds	r2, r0, #1
 800b73a:	4606      	mov	r6, r0
 800b73c:	d1d6      	bne.n	800b6ec <_svfiprintf_r+0x174>
 800b73e:	89ab      	ldrh	r3, [r5, #12]
 800b740:	065b      	lsls	r3, r3, #25
 800b742:	f53f af2d 	bmi.w	800b5a0 <_svfiprintf_r+0x28>
 800b746:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b748:	b01d      	add	sp, #116	; 0x74
 800b74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b74e:	ab03      	add	r3, sp, #12
 800b750:	9300      	str	r3, [sp, #0]
 800b752:	462a      	mov	r2, r5
 800b754:	4638      	mov	r0, r7
 800b756:	4b06      	ldr	r3, [pc, #24]	; (800b770 <_svfiprintf_r+0x1f8>)
 800b758:	a904      	add	r1, sp, #16
 800b75a:	f7fc ff0b 	bl	8008574 <_printf_i>
 800b75e:	e7eb      	b.n	800b738 <_svfiprintf_r+0x1c0>
 800b760:	0800de50 	.word	0x0800de50
 800b764:	0800de56 	.word	0x0800de56
 800b768:	0800de5a 	.word	0x0800de5a
 800b76c:	08008035 	.word	0x08008035
 800b770:	0800b4c5 	.word	0x0800b4c5

0800b774 <__sflush_r>:
 800b774:	898a      	ldrh	r2, [r1, #12]
 800b776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b778:	4605      	mov	r5, r0
 800b77a:	0710      	lsls	r0, r2, #28
 800b77c:	460c      	mov	r4, r1
 800b77e:	d457      	bmi.n	800b830 <__sflush_r+0xbc>
 800b780:	684b      	ldr	r3, [r1, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	dc04      	bgt.n	800b790 <__sflush_r+0x1c>
 800b786:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b788:	2b00      	cmp	r3, #0
 800b78a:	dc01      	bgt.n	800b790 <__sflush_r+0x1c>
 800b78c:	2000      	movs	r0, #0
 800b78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b790:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b792:	2e00      	cmp	r6, #0
 800b794:	d0fa      	beq.n	800b78c <__sflush_r+0x18>
 800b796:	2300      	movs	r3, #0
 800b798:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b79c:	682f      	ldr	r7, [r5, #0]
 800b79e:	6a21      	ldr	r1, [r4, #32]
 800b7a0:	602b      	str	r3, [r5, #0]
 800b7a2:	d032      	beq.n	800b80a <__sflush_r+0x96>
 800b7a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b7a6:	89a3      	ldrh	r3, [r4, #12]
 800b7a8:	075a      	lsls	r2, r3, #29
 800b7aa:	d505      	bpl.n	800b7b8 <__sflush_r+0x44>
 800b7ac:	6863      	ldr	r3, [r4, #4]
 800b7ae:	1ac0      	subs	r0, r0, r3
 800b7b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b7b2:	b10b      	cbz	r3, 800b7b8 <__sflush_r+0x44>
 800b7b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b7b6:	1ac0      	subs	r0, r0, r3
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7be:	4628      	mov	r0, r5
 800b7c0:	6a21      	ldr	r1, [r4, #32]
 800b7c2:	47b0      	blx	r6
 800b7c4:	1c43      	adds	r3, r0, #1
 800b7c6:	89a3      	ldrh	r3, [r4, #12]
 800b7c8:	d106      	bne.n	800b7d8 <__sflush_r+0x64>
 800b7ca:	6829      	ldr	r1, [r5, #0]
 800b7cc:	291d      	cmp	r1, #29
 800b7ce:	d82b      	bhi.n	800b828 <__sflush_r+0xb4>
 800b7d0:	4a28      	ldr	r2, [pc, #160]	; (800b874 <__sflush_r+0x100>)
 800b7d2:	410a      	asrs	r2, r1
 800b7d4:	07d6      	lsls	r6, r2, #31
 800b7d6:	d427      	bmi.n	800b828 <__sflush_r+0xb4>
 800b7d8:	2200      	movs	r2, #0
 800b7da:	6062      	str	r2, [r4, #4]
 800b7dc:	6922      	ldr	r2, [r4, #16]
 800b7de:	04d9      	lsls	r1, r3, #19
 800b7e0:	6022      	str	r2, [r4, #0]
 800b7e2:	d504      	bpl.n	800b7ee <__sflush_r+0x7a>
 800b7e4:	1c42      	adds	r2, r0, #1
 800b7e6:	d101      	bne.n	800b7ec <__sflush_r+0x78>
 800b7e8:	682b      	ldr	r3, [r5, #0]
 800b7ea:	b903      	cbnz	r3, 800b7ee <__sflush_r+0x7a>
 800b7ec:	6560      	str	r0, [r4, #84]	; 0x54
 800b7ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7f0:	602f      	str	r7, [r5, #0]
 800b7f2:	2900      	cmp	r1, #0
 800b7f4:	d0ca      	beq.n	800b78c <__sflush_r+0x18>
 800b7f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7fa:	4299      	cmp	r1, r3
 800b7fc:	d002      	beq.n	800b804 <__sflush_r+0x90>
 800b7fe:	4628      	mov	r0, r5
 800b800:	f7fe faaa 	bl	8009d58 <_free_r>
 800b804:	2000      	movs	r0, #0
 800b806:	6360      	str	r0, [r4, #52]	; 0x34
 800b808:	e7c1      	b.n	800b78e <__sflush_r+0x1a>
 800b80a:	2301      	movs	r3, #1
 800b80c:	4628      	mov	r0, r5
 800b80e:	47b0      	blx	r6
 800b810:	1c41      	adds	r1, r0, #1
 800b812:	d1c8      	bne.n	800b7a6 <__sflush_r+0x32>
 800b814:	682b      	ldr	r3, [r5, #0]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d0c5      	beq.n	800b7a6 <__sflush_r+0x32>
 800b81a:	2b1d      	cmp	r3, #29
 800b81c:	d001      	beq.n	800b822 <__sflush_r+0xae>
 800b81e:	2b16      	cmp	r3, #22
 800b820:	d101      	bne.n	800b826 <__sflush_r+0xb2>
 800b822:	602f      	str	r7, [r5, #0]
 800b824:	e7b2      	b.n	800b78c <__sflush_r+0x18>
 800b826:	89a3      	ldrh	r3, [r4, #12]
 800b828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b82c:	81a3      	strh	r3, [r4, #12]
 800b82e:	e7ae      	b.n	800b78e <__sflush_r+0x1a>
 800b830:	690f      	ldr	r7, [r1, #16]
 800b832:	2f00      	cmp	r7, #0
 800b834:	d0aa      	beq.n	800b78c <__sflush_r+0x18>
 800b836:	0793      	lsls	r3, r2, #30
 800b838:	bf18      	it	ne
 800b83a:	2300      	movne	r3, #0
 800b83c:	680e      	ldr	r6, [r1, #0]
 800b83e:	bf08      	it	eq
 800b840:	694b      	ldreq	r3, [r1, #20]
 800b842:	1bf6      	subs	r6, r6, r7
 800b844:	600f      	str	r7, [r1, #0]
 800b846:	608b      	str	r3, [r1, #8]
 800b848:	2e00      	cmp	r6, #0
 800b84a:	dd9f      	ble.n	800b78c <__sflush_r+0x18>
 800b84c:	4633      	mov	r3, r6
 800b84e:	463a      	mov	r2, r7
 800b850:	4628      	mov	r0, r5
 800b852:	6a21      	ldr	r1, [r4, #32]
 800b854:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b858:	47e0      	blx	ip
 800b85a:	2800      	cmp	r0, #0
 800b85c:	dc06      	bgt.n	800b86c <__sflush_r+0xf8>
 800b85e:	89a3      	ldrh	r3, [r4, #12]
 800b860:	f04f 30ff 	mov.w	r0, #4294967295
 800b864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b868:	81a3      	strh	r3, [r4, #12]
 800b86a:	e790      	b.n	800b78e <__sflush_r+0x1a>
 800b86c:	4407      	add	r7, r0
 800b86e:	1a36      	subs	r6, r6, r0
 800b870:	e7ea      	b.n	800b848 <__sflush_r+0xd4>
 800b872:	bf00      	nop
 800b874:	dfbffffe 	.word	0xdfbffffe

0800b878 <_fflush_r>:
 800b878:	b538      	push	{r3, r4, r5, lr}
 800b87a:	690b      	ldr	r3, [r1, #16]
 800b87c:	4605      	mov	r5, r0
 800b87e:	460c      	mov	r4, r1
 800b880:	b913      	cbnz	r3, 800b888 <_fflush_r+0x10>
 800b882:	2500      	movs	r5, #0
 800b884:	4628      	mov	r0, r5
 800b886:	bd38      	pop	{r3, r4, r5, pc}
 800b888:	b118      	cbz	r0, 800b892 <_fflush_r+0x1a>
 800b88a:	6a03      	ldr	r3, [r0, #32]
 800b88c:	b90b      	cbnz	r3, 800b892 <_fflush_r+0x1a>
 800b88e:	f7fd fa2d 	bl	8008cec <__sinit>
 800b892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d0f3      	beq.n	800b882 <_fflush_r+0xa>
 800b89a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b89c:	07d0      	lsls	r0, r2, #31
 800b89e:	d404      	bmi.n	800b8aa <_fflush_r+0x32>
 800b8a0:	0599      	lsls	r1, r3, #22
 800b8a2:	d402      	bmi.n	800b8aa <_fflush_r+0x32>
 800b8a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8a6:	f7fd fbb4 	bl	8009012 <__retarget_lock_acquire_recursive>
 800b8aa:	4628      	mov	r0, r5
 800b8ac:	4621      	mov	r1, r4
 800b8ae:	f7ff ff61 	bl	800b774 <__sflush_r>
 800b8b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8b4:	4605      	mov	r5, r0
 800b8b6:	07da      	lsls	r2, r3, #31
 800b8b8:	d4e4      	bmi.n	800b884 <_fflush_r+0xc>
 800b8ba:	89a3      	ldrh	r3, [r4, #12]
 800b8bc:	059b      	lsls	r3, r3, #22
 800b8be:	d4e1      	bmi.n	800b884 <_fflush_r+0xc>
 800b8c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8c2:	f7fd fba7 	bl	8009014 <__retarget_lock_release_recursive>
 800b8c6:	e7dd      	b.n	800b884 <_fflush_r+0xc>

0800b8c8 <fiprintf>:
 800b8c8:	b40e      	push	{r1, r2, r3}
 800b8ca:	b503      	push	{r0, r1, lr}
 800b8cc:	4601      	mov	r1, r0
 800b8ce:	ab03      	add	r3, sp, #12
 800b8d0:	4805      	ldr	r0, [pc, #20]	; (800b8e8 <fiprintf+0x20>)
 800b8d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8d6:	6800      	ldr	r0, [r0, #0]
 800b8d8:	9301      	str	r3, [sp, #4]
 800b8da:	f000 fc41 	bl	800c160 <_vfiprintf_r>
 800b8de:	b002      	add	sp, #8
 800b8e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8e4:	b003      	add	sp, #12
 800b8e6:	4770      	bx	lr
 800b8e8:	20000070 	.word	0x20000070

0800b8ec <memmove>:
 800b8ec:	4288      	cmp	r0, r1
 800b8ee:	b510      	push	{r4, lr}
 800b8f0:	eb01 0402 	add.w	r4, r1, r2
 800b8f4:	d902      	bls.n	800b8fc <memmove+0x10>
 800b8f6:	4284      	cmp	r4, r0
 800b8f8:	4623      	mov	r3, r4
 800b8fa:	d807      	bhi.n	800b90c <memmove+0x20>
 800b8fc:	1e43      	subs	r3, r0, #1
 800b8fe:	42a1      	cmp	r1, r4
 800b900:	d008      	beq.n	800b914 <memmove+0x28>
 800b902:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b906:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b90a:	e7f8      	b.n	800b8fe <memmove+0x12>
 800b90c:	4601      	mov	r1, r0
 800b90e:	4402      	add	r2, r0
 800b910:	428a      	cmp	r2, r1
 800b912:	d100      	bne.n	800b916 <memmove+0x2a>
 800b914:	bd10      	pop	{r4, pc}
 800b916:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b91a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b91e:	e7f7      	b.n	800b910 <memmove+0x24>

0800b920 <strncmp>:
 800b920:	b510      	push	{r4, lr}
 800b922:	b16a      	cbz	r2, 800b940 <strncmp+0x20>
 800b924:	3901      	subs	r1, #1
 800b926:	1884      	adds	r4, r0, r2
 800b928:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b92c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b930:	429a      	cmp	r2, r3
 800b932:	d103      	bne.n	800b93c <strncmp+0x1c>
 800b934:	42a0      	cmp	r0, r4
 800b936:	d001      	beq.n	800b93c <strncmp+0x1c>
 800b938:	2a00      	cmp	r2, #0
 800b93a:	d1f5      	bne.n	800b928 <strncmp+0x8>
 800b93c:	1ad0      	subs	r0, r2, r3
 800b93e:	bd10      	pop	{r4, pc}
 800b940:	4610      	mov	r0, r2
 800b942:	e7fc      	b.n	800b93e <strncmp+0x1e>

0800b944 <_sbrk_r>:
 800b944:	b538      	push	{r3, r4, r5, lr}
 800b946:	2300      	movs	r3, #0
 800b948:	4d05      	ldr	r5, [pc, #20]	; (800b960 <_sbrk_r+0x1c>)
 800b94a:	4604      	mov	r4, r0
 800b94c:	4608      	mov	r0, r1
 800b94e:	602b      	str	r3, [r5, #0]
 800b950:	f7f7 fb2e 	bl	8002fb0 <_sbrk>
 800b954:	1c43      	adds	r3, r0, #1
 800b956:	d102      	bne.n	800b95e <_sbrk_r+0x1a>
 800b958:	682b      	ldr	r3, [r5, #0]
 800b95a:	b103      	cbz	r3, 800b95e <_sbrk_r+0x1a>
 800b95c:	6023      	str	r3, [r4, #0]
 800b95e:	bd38      	pop	{r3, r4, r5, pc}
 800b960:	20000554 	.word	0x20000554

0800b964 <memcpy>:
 800b964:	440a      	add	r2, r1
 800b966:	4291      	cmp	r1, r2
 800b968:	f100 33ff 	add.w	r3, r0, #4294967295
 800b96c:	d100      	bne.n	800b970 <memcpy+0xc>
 800b96e:	4770      	bx	lr
 800b970:	b510      	push	{r4, lr}
 800b972:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b976:	4291      	cmp	r1, r2
 800b978:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b97c:	d1f9      	bne.n	800b972 <memcpy+0xe>
 800b97e:	bd10      	pop	{r4, pc}

0800b980 <nan>:
 800b980:	2000      	movs	r0, #0
 800b982:	4901      	ldr	r1, [pc, #4]	; (800b988 <nan+0x8>)
 800b984:	4770      	bx	lr
 800b986:	bf00      	nop
 800b988:	7ff80000 	.word	0x7ff80000

0800b98c <abort>:
 800b98c:	2006      	movs	r0, #6
 800b98e:	b508      	push	{r3, lr}
 800b990:	f000 fdbe 	bl	800c510 <raise>
 800b994:	2001      	movs	r0, #1
 800b996:	f7f7 fa98 	bl	8002eca <_exit>

0800b99a <_calloc_r>:
 800b99a:	b570      	push	{r4, r5, r6, lr}
 800b99c:	fba1 5402 	umull	r5, r4, r1, r2
 800b9a0:	b934      	cbnz	r4, 800b9b0 <_calloc_r+0x16>
 800b9a2:	4629      	mov	r1, r5
 800b9a4:	f7fe fa48 	bl	8009e38 <_malloc_r>
 800b9a8:	4606      	mov	r6, r0
 800b9aa:	b928      	cbnz	r0, 800b9b8 <_calloc_r+0x1e>
 800b9ac:	4630      	mov	r0, r6
 800b9ae:	bd70      	pop	{r4, r5, r6, pc}
 800b9b0:	220c      	movs	r2, #12
 800b9b2:	2600      	movs	r6, #0
 800b9b4:	6002      	str	r2, [r0, #0]
 800b9b6:	e7f9      	b.n	800b9ac <_calloc_r+0x12>
 800b9b8:	462a      	mov	r2, r5
 800b9ba:	4621      	mov	r1, r4
 800b9bc:	f7fd fa50 	bl	8008e60 <memset>
 800b9c0:	e7f4      	b.n	800b9ac <_calloc_r+0x12>

0800b9c2 <rshift>:
 800b9c2:	6903      	ldr	r3, [r0, #16]
 800b9c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9c8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b9cc:	f100 0414 	add.w	r4, r0, #20
 800b9d0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b9d4:	dd46      	ble.n	800ba64 <rshift+0xa2>
 800b9d6:	f011 011f 	ands.w	r1, r1, #31
 800b9da:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b9de:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b9e2:	d10c      	bne.n	800b9fe <rshift+0x3c>
 800b9e4:	4629      	mov	r1, r5
 800b9e6:	f100 0710 	add.w	r7, r0, #16
 800b9ea:	42b1      	cmp	r1, r6
 800b9ec:	d335      	bcc.n	800ba5a <rshift+0x98>
 800b9ee:	1a9b      	subs	r3, r3, r2
 800b9f0:	009b      	lsls	r3, r3, #2
 800b9f2:	1eea      	subs	r2, r5, #3
 800b9f4:	4296      	cmp	r6, r2
 800b9f6:	bf38      	it	cc
 800b9f8:	2300      	movcc	r3, #0
 800b9fa:	4423      	add	r3, r4
 800b9fc:	e015      	b.n	800ba2a <rshift+0x68>
 800b9fe:	46a1      	mov	r9, r4
 800ba00:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ba04:	f1c1 0820 	rsb	r8, r1, #32
 800ba08:	40cf      	lsrs	r7, r1
 800ba0a:	f105 0e04 	add.w	lr, r5, #4
 800ba0e:	4576      	cmp	r6, lr
 800ba10:	46f4      	mov	ip, lr
 800ba12:	d816      	bhi.n	800ba42 <rshift+0x80>
 800ba14:	1a9a      	subs	r2, r3, r2
 800ba16:	0092      	lsls	r2, r2, #2
 800ba18:	3a04      	subs	r2, #4
 800ba1a:	3501      	adds	r5, #1
 800ba1c:	42ae      	cmp	r6, r5
 800ba1e:	bf38      	it	cc
 800ba20:	2200      	movcc	r2, #0
 800ba22:	18a3      	adds	r3, r4, r2
 800ba24:	50a7      	str	r7, [r4, r2]
 800ba26:	b107      	cbz	r7, 800ba2a <rshift+0x68>
 800ba28:	3304      	adds	r3, #4
 800ba2a:	42a3      	cmp	r3, r4
 800ba2c:	eba3 0204 	sub.w	r2, r3, r4
 800ba30:	bf08      	it	eq
 800ba32:	2300      	moveq	r3, #0
 800ba34:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ba38:	6102      	str	r2, [r0, #16]
 800ba3a:	bf08      	it	eq
 800ba3c:	6143      	streq	r3, [r0, #20]
 800ba3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba42:	f8dc c000 	ldr.w	ip, [ip]
 800ba46:	fa0c fc08 	lsl.w	ip, ip, r8
 800ba4a:	ea4c 0707 	orr.w	r7, ip, r7
 800ba4e:	f849 7b04 	str.w	r7, [r9], #4
 800ba52:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba56:	40cf      	lsrs	r7, r1
 800ba58:	e7d9      	b.n	800ba0e <rshift+0x4c>
 800ba5a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ba5e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ba62:	e7c2      	b.n	800b9ea <rshift+0x28>
 800ba64:	4623      	mov	r3, r4
 800ba66:	e7e0      	b.n	800ba2a <rshift+0x68>

0800ba68 <__hexdig_fun>:
 800ba68:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ba6c:	2b09      	cmp	r3, #9
 800ba6e:	d802      	bhi.n	800ba76 <__hexdig_fun+0xe>
 800ba70:	3820      	subs	r0, #32
 800ba72:	b2c0      	uxtb	r0, r0
 800ba74:	4770      	bx	lr
 800ba76:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ba7a:	2b05      	cmp	r3, #5
 800ba7c:	d801      	bhi.n	800ba82 <__hexdig_fun+0x1a>
 800ba7e:	3847      	subs	r0, #71	; 0x47
 800ba80:	e7f7      	b.n	800ba72 <__hexdig_fun+0xa>
 800ba82:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ba86:	2b05      	cmp	r3, #5
 800ba88:	d801      	bhi.n	800ba8e <__hexdig_fun+0x26>
 800ba8a:	3827      	subs	r0, #39	; 0x27
 800ba8c:	e7f1      	b.n	800ba72 <__hexdig_fun+0xa>
 800ba8e:	2000      	movs	r0, #0
 800ba90:	4770      	bx	lr
	...

0800ba94 <__gethex>:
 800ba94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba98:	4681      	mov	r9, r0
 800ba9a:	468a      	mov	sl, r1
 800ba9c:	4617      	mov	r7, r2
 800ba9e:	680a      	ldr	r2, [r1, #0]
 800baa0:	b085      	sub	sp, #20
 800baa2:	f102 0b02 	add.w	fp, r2, #2
 800baa6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800baaa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800baae:	9302      	str	r3, [sp, #8]
 800bab0:	32fe      	adds	r2, #254	; 0xfe
 800bab2:	eb02 030b 	add.w	r3, r2, fp
 800bab6:	46d8      	mov	r8, fp
 800bab8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800babc:	9301      	str	r3, [sp, #4]
 800babe:	2830      	cmp	r0, #48	; 0x30
 800bac0:	d0f7      	beq.n	800bab2 <__gethex+0x1e>
 800bac2:	f7ff ffd1 	bl	800ba68 <__hexdig_fun>
 800bac6:	4604      	mov	r4, r0
 800bac8:	2800      	cmp	r0, #0
 800baca:	d138      	bne.n	800bb3e <__gethex+0xaa>
 800bacc:	2201      	movs	r2, #1
 800bace:	4640      	mov	r0, r8
 800bad0:	49a7      	ldr	r1, [pc, #668]	; (800bd70 <__gethex+0x2dc>)
 800bad2:	f7ff ff25 	bl	800b920 <strncmp>
 800bad6:	4606      	mov	r6, r0
 800bad8:	2800      	cmp	r0, #0
 800bada:	d169      	bne.n	800bbb0 <__gethex+0x11c>
 800badc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bae0:	465d      	mov	r5, fp
 800bae2:	f7ff ffc1 	bl	800ba68 <__hexdig_fun>
 800bae6:	2800      	cmp	r0, #0
 800bae8:	d064      	beq.n	800bbb4 <__gethex+0x120>
 800baea:	465a      	mov	r2, fp
 800baec:	7810      	ldrb	r0, [r2, #0]
 800baee:	4690      	mov	r8, r2
 800baf0:	2830      	cmp	r0, #48	; 0x30
 800baf2:	f102 0201 	add.w	r2, r2, #1
 800baf6:	d0f9      	beq.n	800baec <__gethex+0x58>
 800baf8:	f7ff ffb6 	bl	800ba68 <__hexdig_fun>
 800bafc:	2301      	movs	r3, #1
 800bafe:	fab0 f480 	clz	r4, r0
 800bb02:	465e      	mov	r6, fp
 800bb04:	0964      	lsrs	r4, r4, #5
 800bb06:	9301      	str	r3, [sp, #4]
 800bb08:	4642      	mov	r2, r8
 800bb0a:	4615      	mov	r5, r2
 800bb0c:	7828      	ldrb	r0, [r5, #0]
 800bb0e:	3201      	adds	r2, #1
 800bb10:	f7ff ffaa 	bl	800ba68 <__hexdig_fun>
 800bb14:	2800      	cmp	r0, #0
 800bb16:	d1f8      	bne.n	800bb0a <__gethex+0x76>
 800bb18:	2201      	movs	r2, #1
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	4994      	ldr	r1, [pc, #592]	; (800bd70 <__gethex+0x2dc>)
 800bb1e:	f7ff feff 	bl	800b920 <strncmp>
 800bb22:	b978      	cbnz	r0, 800bb44 <__gethex+0xb0>
 800bb24:	b946      	cbnz	r6, 800bb38 <__gethex+0xa4>
 800bb26:	1c6e      	adds	r6, r5, #1
 800bb28:	4632      	mov	r2, r6
 800bb2a:	4615      	mov	r5, r2
 800bb2c:	7828      	ldrb	r0, [r5, #0]
 800bb2e:	3201      	adds	r2, #1
 800bb30:	f7ff ff9a 	bl	800ba68 <__hexdig_fun>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	d1f8      	bne.n	800bb2a <__gethex+0x96>
 800bb38:	1b73      	subs	r3, r6, r5
 800bb3a:	009e      	lsls	r6, r3, #2
 800bb3c:	e004      	b.n	800bb48 <__gethex+0xb4>
 800bb3e:	2400      	movs	r4, #0
 800bb40:	4626      	mov	r6, r4
 800bb42:	e7e1      	b.n	800bb08 <__gethex+0x74>
 800bb44:	2e00      	cmp	r6, #0
 800bb46:	d1f7      	bne.n	800bb38 <__gethex+0xa4>
 800bb48:	782b      	ldrb	r3, [r5, #0]
 800bb4a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bb4e:	2b50      	cmp	r3, #80	; 0x50
 800bb50:	d13d      	bne.n	800bbce <__gethex+0x13a>
 800bb52:	786b      	ldrb	r3, [r5, #1]
 800bb54:	2b2b      	cmp	r3, #43	; 0x2b
 800bb56:	d02f      	beq.n	800bbb8 <__gethex+0x124>
 800bb58:	2b2d      	cmp	r3, #45	; 0x2d
 800bb5a:	d031      	beq.n	800bbc0 <__gethex+0x12c>
 800bb5c:	f04f 0b00 	mov.w	fp, #0
 800bb60:	1c69      	adds	r1, r5, #1
 800bb62:	7808      	ldrb	r0, [r1, #0]
 800bb64:	f7ff ff80 	bl	800ba68 <__hexdig_fun>
 800bb68:	1e42      	subs	r2, r0, #1
 800bb6a:	b2d2      	uxtb	r2, r2
 800bb6c:	2a18      	cmp	r2, #24
 800bb6e:	d82e      	bhi.n	800bbce <__gethex+0x13a>
 800bb70:	f1a0 0210 	sub.w	r2, r0, #16
 800bb74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bb78:	f7ff ff76 	bl	800ba68 <__hexdig_fun>
 800bb7c:	f100 3cff 	add.w	ip, r0, #4294967295
 800bb80:	fa5f fc8c 	uxtb.w	ip, ip
 800bb84:	f1bc 0f18 	cmp.w	ip, #24
 800bb88:	d91d      	bls.n	800bbc6 <__gethex+0x132>
 800bb8a:	f1bb 0f00 	cmp.w	fp, #0
 800bb8e:	d000      	beq.n	800bb92 <__gethex+0xfe>
 800bb90:	4252      	negs	r2, r2
 800bb92:	4416      	add	r6, r2
 800bb94:	f8ca 1000 	str.w	r1, [sl]
 800bb98:	b1dc      	cbz	r4, 800bbd2 <__gethex+0x13e>
 800bb9a:	9b01      	ldr	r3, [sp, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	bf14      	ite	ne
 800bba0:	f04f 0800 	movne.w	r8, #0
 800bba4:	f04f 0806 	moveq.w	r8, #6
 800bba8:	4640      	mov	r0, r8
 800bbaa:	b005      	add	sp, #20
 800bbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb0:	4645      	mov	r5, r8
 800bbb2:	4626      	mov	r6, r4
 800bbb4:	2401      	movs	r4, #1
 800bbb6:	e7c7      	b.n	800bb48 <__gethex+0xb4>
 800bbb8:	f04f 0b00 	mov.w	fp, #0
 800bbbc:	1ca9      	adds	r1, r5, #2
 800bbbe:	e7d0      	b.n	800bb62 <__gethex+0xce>
 800bbc0:	f04f 0b01 	mov.w	fp, #1
 800bbc4:	e7fa      	b.n	800bbbc <__gethex+0x128>
 800bbc6:	230a      	movs	r3, #10
 800bbc8:	fb03 0002 	mla	r0, r3, r2, r0
 800bbcc:	e7d0      	b.n	800bb70 <__gethex+0xdc>
 800bbce:	4629      	mov	r1, r5
 800bbd0:	e7e0      	b.n	800bb94 <__gethex+0x100>
 800bbd2:	4621      	mov	r1, r4
 800bbd4:	eba5 0308 	sub.w	r3, r5, r8
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	2b07      	cmp	r3, #7
 800bbdc:	dc0a      	bgt.n	800bbf4 <__gethex+0x160>
 800bbde:	4648      	mov	r0, r9
 800bbe0:	f7fe f9b6 	bl	8009f50 <_Balloc>
 800bbe4:	4604      	mov	r4, r0
 800bbe6:	b940      	cbnz	r0, 800bbfa <__gethex+0x166>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	21e4      	movs	r1, #228	; 0xe4
 800bbec:	4b61      	ldr	r3, [pc, #388]	; (800bd74 <__gethex+0x2e0>)
 800bbee:	4862      	ldr	r0, [pc, #392]	; (800bd78 <__gethex+0x2e4>)
 800bbf0:	f7fd fa24 	bl	800903c <__assert_func>
 800bbf4:	3101      	adds	r1, #1
 800bbf6:	105b      	asrs	r3, r3, #1
 800bbf8:	e7ef      	b.n	800bbda <__gethex+0x146>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	469b      	mov	fp, r3
 800bbfe:	f100 0a14 	add.w	sl, r0, #20
 800bc02:	f8cd a004 	str.w	sl, [sp, #4]
 800bc06:	45a8      	cmp	r8, r5
 800bc08:	d344      	bcc.n	800bc94 <__gethex+0x200>
 800bc0a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bc0e:	4658      	mov	r0, fp
 800bc10:	f848 bb04 	str.w	fp, [r8], #4
 800bc14:	eba8 080a 	sub.w	r8, r8, sl
 800bc18:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800bc1c:	6122      	str	r2, [r4, #16]
 800bc1e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800bc22:	f7fe fa87 	bl	800a134 <__hi0bits>
 800bc26:	683d      	ldr	r5, [r7, #0]
 800bc28:	eba8 0800 	sub.w	r8, r8, r0
 800bc2c:	45a8      	cmp	r8, r5
 800bc2e:	dd59      	ble.n	800bce4 <__gethex+0x250>
 800bc30:	eba8 0805 	sub.w	r8, r8, r5
 800bc34:	4641      	mov	r1, r8
 800bc36:	4620      	mov	r0, r4
 800bc38:	f7fe fe05 	bl	800a846 <__any_on>
 800bc3c:	4683      	mov	fp, r0
 800bc3e:	b1b8      	cbz	r0, 800bc70 <__gethex+0x1dc>
 800bc40:	f04f 0b01 	mov.w	fp, #1
 800bc44:	f108 33ff 	add.w	r3, r8, #4294967295
 800bc48:	1159      	asrs	r1, r3, #5
 800bc4a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bc4e:	f003 021f 	and.w	r2, r3, #31
 800bc52:	fa0b f202 	lsl.w	r2, fp, r2
 800bc56:	420a      	tst	r2, r1
 800bc58:	d00a      	beq.n	800bc70 <__gethex+0x1dc>
 800bc5a:	455b      	cmp	r3, fp
 800bc5c:	dd06      	ble.n	800bc6c <__gethex+0x1d8>
 800bc5e:	4620      	mov	r0, r4
 800bc60:	f1a8 0102 	sub.w	r1, r8, #2
 800bc64:	f7fe fdef 	bl	800a846 <__any_on>
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	d138      	bne.n	800bcde <__gethex+0x24a>
 800bc6c:	f04f 0b02 	mov.w	fp, #2
 800bc70:	4641      	mov	r1, r8
 800bc72:	4620      	mov	r0, r4
 800bc74:	f7ff fea5 	bl	800b9c2 <rshift>
 800bc78:	4446      	add	r6, r8
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	42b3      	cmp	r3, r6
 800bc7e:	da41      	bge.n	800bd04 <__gethex+0x270>
 800bc80:	4621      	mov	r1, r4
 800bc82:	4648      	mov	r0, r9
 800bc84:	f7fe f9a4 	bl	8009fd0 <_Bfree>
 800bc88:	2300      	movs	r3, #0
 800bc8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc8c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800bc90:	6013      	str	r3, [r2, #0]
 800bc92:	e789      	b.n	800bba8 <__gethex+0x114>
 800bc94:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800bc98:	2a2e      	cmp	r2, #46	; 0x2e
 800bc9a:	d014      	beq.n	800bcc6 <__gethex+0x232>
 800bc9c:	2b20      	cmp	r3, #32
 800bc9e:	d106      	bne.n	800bcae <__gethex+0x21a>
 800bca0:	9b01      	ldr	r3, [sp, #4]
 800bca2:	f843 bb04 	str.w	fp, [r3], #4
 800bca6:	f04f 0b00 	mov.w	fp, #0
 800bcaa:	9301      	str	r3, [sp, #4]
 800bcac:	465b      	mov	r3, fp
 800bcae:	7828      	ldrb	r0, [r5, #0]
 800bcb0:	9303      	str	r3, [sp, #12]
 800bcb2:	f7ff fed9 	bl	800ba68 <__hexdig_fun>
 800bcb6:	9b03      	ldr	r3, [sp, #12]
 800bcb8:	f000 000f 	and.w	r0, r0, #15
 800bcbc:	4098      	lsls	r0, r3
 800bcbe:	ea4b 0b00 	orr.w	fp, fp, r0
 800bcc2:	3304      	adds	r3, #4
 800bcc4:	e79f      	b.n	800bc06 <__gethex+0x172>
 800bcc6:	45a8      	cmp	r8, r5
 800bcc8:	d8e8      	bhi.n	800bc9c <__gethex+0x208>
 800bcca:	2201      	movs	r2, #1
 800bccc:	4628      	mov	r0, r5
 800bcce:	4928      	ldr	r1, [pc, #160]	; (800bd70 <__gethex+0x2dc>)
 800bcd0:	9303      	str	r3, [sp, #12]
 800bcd2:	f7ff fe25 	bl	800b920 <strncmp>
 800bcd6:	9b03      	ldr	r3, [sp, #12]
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	d1df      	bne.n	800bc9c <__gethex+0x208>
 800bcdc:	e793      	b.n	800bc06 <__gethex+0x172>
 800bcde:	f04f 0b03 	mov.w	fp, #3
 800bce2:	e7c5      	b.n	800bc70 <__gethex+0x1dc>
 800bce4:	da0b      	bge.n	800bcfe <__gethex+0x26a>
 800bce6:	eba5 0808 	sub.w	r8, r5, r8
 800bcea:	4621      	mov	r1, r4
 800bcec:	4642      	mov	r2, r8
 800bcee:	4648      	mov	r0, r9
 800bcf0:	f7fe fb86 	bl	800a400 <__lshift>
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	eba6 0608 	sub.w	r6, r6, r8
 800bcfa:	f100 0a14 	add.w	sl, r0, #20
 800bcfe:	f04f 0b00 	mov.w	fp, #0
 800bd02:	e7ba      	b.n	800bc7a <__gethex+0x1e6>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	42b3      	cmp	r3, r6
 800bd08:	dd74      	ble.n	800bdf4 <__gethex+0x360>
 800bd0a:	1b9e      	subs	r6, r3, r6
 800bd0c:	42b5      	cmp	r5, r6
 800bd0e:	dc35      	bgt.n	800bd7c <__gethex+0x2e8>
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2b02      	cmp	r3, #2
 800bd14:	d023      	beq.n	800bd5e <__gethex+0x2ca>
 800bd16:	2b03      	cmp	r3, #3
 800bd18:	d025      	beq.n	800bd66 <__gethex+0x2d2>
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d115      	bne.n	800bd4a <__gethex+0x2b6>
 800bd1e:	42b5      	cmp	r5, r6
 800bd20:	d113      	bne.n	800bd4a <__gethex+0x2b6>
 800bd22:	2d01      	cmp	r5, #1
 800bd24:	d10b      	bne.n	800bd3e <__gethex+0x2aa>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	9a02      	ldr	r2, [sp, #8]
 800bd2a:	f04f 0862 	mov.w	r8, #98	; 0x62
 800bd2e:	6013      	str	r3, [r2, #0]
 800bd30:	2301      	movs	r3, #1
 800bd32:	6123      	str	r3, [r4, #16]
 800bd34:	f8ca 3000 	str.w	r3, [sl]
 800bd38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd3a:	601c      	str	r4, [r3, #0]
 800bd3c:	e734      	b.n	800bba8 <__gethex+0x114>
 800bd3e:	4620      	mov	r0, r4
 800bd40:	1e69      	subs	r1, r5, #1
 800bd42:	f7fe fd80 	bl	800a846 <__any_on>
 800bd46:	2800      	cmp	r0, #0
 800bd48:	d1ed      	bne.n	800bd26 <__gethex+0x292>
 800bd4a:	4621      	mov	r1, r4
 800bd4c:	4648      	mov	r0, r9
 800bd4e:	f7fe f93f 	bl	8009fd0 <_Bfree>
 800bd52:	2300      	movs	r3, #0
 800bd54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd56:	f04f 0850 	mov.w	r8, #80	; 0x50
 800bd5a:	6013      	str	r3, [r2, #0]
 800bd5c:	e724      	b.n	800bba8 <__gethex+0x114>
 800bd5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1f2      	bne.n	800bd4a <__gethex+0x2b6>
 800bd64:	e7df      	b.n	800bd26 <__gethex+0x292>
 800bd66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d1dc      	bne.n	800bd26 <__gethex+0x292>
 800bd6c:	e7ed      	b.n	800bd4a <__gethex+0x2b6>
 800bd6e:	bf00      	nop
 800bd70:	0800ddfc 	.word	0x0800ddfc
 800bd74:	0800dc96 	.word	0x0800dc96
 800bd78:	0800de69 	.word	0x0800de69
 800bd7c:	f106 38ff 	add.w	r8, r6, #4294967295
 800bd80:	f1bb 0f00 	cmp.w	fp, #0
 800bd84:	d133      	bne.n	800bdee <__gethex+0x35a>
 800bd86:	f1b8 0f00 	cmp.w	r8, #0
 800bd8a:	d004      	beq.n	800bd96 <__gethex+0x302>
 800bd8c:	4641      	mov	r1, r8
 800bd8e:	4620      	mov	r0, r4
 800bd90:	f7fe fd59 	bl	800a846 <__any_on>
 800bd94:	4683      	mov	fp, r0
 800bd96:	2301      	movs	r3, #1
 800bd98:	ea4f 1268 	mov.w	r2, r8, asr #5
 800bd9c:	f008 081f 	and.w	r8, r8, #31
 800bda0:	fa03 f308 	lsl.w	r3, r3, r8
 800bda4:	f04f 0802 	mov.w	r8, #2
 800bda8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bdac:	4631      	mov	r1, r6
 800bdae:	4213      	tst	r3, r2
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	bf18      	it	ne
 800bdb4:	f04b 0b02 	orrne.w	fp, fp, #2
 800bdb8:	1bad      	subs	r5, r5, r6
 800bdba:	f7ff fe02 	bl	800b9c2 <rshift>
 800bdbe:	687e      	ldr	r6, [r7, #4]
 800bdc0:	f1bb 0f00 	cmp.w	fp, #0
 800bdc4:	d04a      	beq.n	800be5c <__gethex+0x3c8>
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2b02      	cmp	r3, #2
 800bdca:	d016      	beq.n	800bdfa <__gethex+0x366>
 800bdcc:	2b03      	cmp	r3, #3
 800bdce:	d018      	beq.n	800be02 <__gethex+0x36e>
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d109      	bne.n	800bde8 <__gethex+0x354>
 800bdd4:	f01b 0f02 	tst.w	fp, #2
 800bdd8:	d006      	beq.n	800bde8 <__gethex+0x354>
 800bdda:	f8da 3000 	ldr.w	r3, [sl]
 800bdde:	ea4b 0b03 	orr.w	fp, fp, r3
 800bde2:	f01b 0f01 	tst.w	fp, #1
 800bde6:	d10f      	bne.n	800be08 <__gethex+0x374>
 800bde8:	f048 0810 	orr.w	r8, r8, #16
 800bdec:	e036      	b.n	800be5c <__gethex+0x3c8>
 800bdee:	f04f 0b01 	mov.w	fp, #1
 800bdf2:	e7d0      	b.n	800bd96 <__gethex+0x302>
 800bdf4:	f04f 0801 	mov.w	r8, #1
 800bdf8:	e7e2      	b.n	800bdc0 <__gethex+0x32c>
 800bdfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bdfc:	f1c3 0301 	rsb	r3, r3, #1
 800be00:	930f      	str	r3, [sp, #60]	; 0x3c
 800be02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be04:	2b00      	cmp	r3, #0
 800be06:	d0ef      	beq.n	800bde8 <__gethex+0x354>
 800be08:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800be0c:	f104 0214 	add.w	r2, r4, #20
 800be10:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800be14:	9301      	str	r3, [sp, #4]
 800be16:	2300      	movs	r3, #0
 800be18:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800be1c:	4694      	mov	ip, r2
 800be1e:	f852 1b04 	ldr.w	r1, [r2], #4
 800be22:	f1b1 3fff 	cmp.w	r1, #4294967295
 800be26:	d01e      	beq.n	800be66 <__gethex+0x3d2>
 800be28:	3101      	adds	r1, #1
 800be2a:	f8cc 1000 	str.w	r1, [ip]
 800be2e:	f1b8 0f02 	cmp.w	r8, #2
 800be32:	f104 0214 	add.w	r2, r4, #20
 800be36:	d13d      	bne.n	800beb4 <__gethex+0x420>
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	3b01      	subs	r3, #1
 800be3c:	42ab      	cmp	r3, r5
 800be3e:	d10b      	bne.n	800be58 <__gethex+0x3c4>
 800be40:	2301      	movs	r3, #1
 800be42:	1169      	asrs	r1, r5, #5
 800be44:	f005 051f 	and.w	r5, r5, #31
 800be48:	fa03 f505 	lsl.w	r5, r3, r5
 800be4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be50:	421d      	tst	r5, r3
 800be52:	bf18      	it	ne
 800be54:	f04f 0801 	movne.w	r8, #1
 800be58:	f048 0820 	orr.w	r8, r8, #32
 800be5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be5e:	601c      	str	r4, [r3, #0]
 800be60:	9b02      	ldr	r3, [sp, #8]
 800be62:	601e      	str	r6, [r3, #0]
 800be64:	e6a0      	b.n	800bba8 <__gethex+0x114>
 800be66:	4290      	cmp	r0, r2
 800be68:	f842 3c04 	str.w	r3, [r2, #-4]
 800be6c:	d8d6      	bhi.n	800be1c <__gethex+0x388>
 800be6e:	68a2      	ldr	r2, [r4, #8]
 800be70:	4593      	cmp	fp, r2
 800be72:	db17      	blt.n	800bea4 <__gethex+0x410>
 800be74:	6861      	ldr	r1, [r4, #4]
 800be76:	4648      	mov	r0, r9
 800be78:	3101      	adds	r1, #1
 800be7a:	f7fe f869 	bl	8009f50 <_Balloc>
 800be7e:	4682      	mov	sl, r0
 800be80:	b918      	cbnz	r0, 800be8a <__gethex+0x3f6>
 800be82:	4602      	mov	r2, r0
 800be84:	2184      	movs	r1, #132	; 0x84
 800be86:	4b1a      	ldr	r3, [pc, #104]	; (800bef0 <__gethex+0x45c>)
 800be88:	e6b1      	b.n	800bbee <__gethex+0x15a>
 800be8a:	6922      	ldr	r2, [r4, #16]
 800be8c:	f104 010c 	add.w	r1, r4, #12
 800be90:	3202      	adds	r2, #2
 800be92:	0092      	lsls	r2, r2, #2
 800be94:	300c      	adds	r0, #12
 800be96:	f7ff fd65 	bl	800b964 <memcpy>
 800be9a:	4621      	mov	r1, r4
 800be9c:	4648      	mov	r0, r9
 800be9e:	f7fe f897 	bl	8009fd0 <_Bfree>
 800bea2:	4654      	mov	r4, sl
 800bea4:	6922      	ldr	r2, [r4, #16]
 800bea6:	1c51      	adds	r1, r2, #1
 800bea8:	6121      	str	r1, [r4, #16]
 800beaa:	2101      	movs	r1, #1
 800beac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800beb0:	6151      	str	r1, [r2, #20]
 800beb2:	e7bc      	b.n	800be2e <__gethex+0x39a>
 800beb4:	6921      	ldr	r1, [r4, #16]
 800beb6:	4559      	cmp	r1, fp
 800beb8:	dd0b      	ble.n	800bed2 <__gethex+0x43e>
 800beba:	2101      	movs	r1, #1
 800bebc:	4620      	mov	r0, r4
 800bebe:	f7ff fd80 	bl	800b9c2 <rshift>
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	3601      	adds	r6, #1
 800bec6:	42b3      	cmp	r3, r6
 800bec8:	f6ff aeda 	blt.w	800bc80 <__gethex+0x1ec>
 800becc:	f04f 0801 	mov.w	r8, #1
 800bed0:	e7c2      	b.n	800be58 <__gethex+0x3c4>
 800bed2:	f015 051f 	ands.w	r5, r5, #31
 800bed6:	d0f9      	beq.n	800becc <__gethex+0x438>
 800bed8:	9b01      	ldr	r3, [sp, #4]
 800beda:	f1c5 0520 	rsb	r5, r5, #32
 800bede:	441a      	add	r2, r3
 800bee0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bee4:	f7fe f926 	bl	800a134 <__hi0bits>
 800bee8:	42a8      	cmp	r0, r5
 800beea:	dbe6      	blt.n	800beba <__gethex+0x426>
 800beec:	e7ee      	b.n	800becc <__gethex+0x438>
 800beee:	bf00      	nop
 800bef0:	0800dc96 	.word	0x0800dc96

0800bef4 <L_shift>:
 800bef4:	f1c2 0208 	rsb	r2, r2, #8
 800bef8:	0092      	lsls	r2, r2, #2
 800befa:	b570      	push	{r4, r5, r6, lr}
 800befc:	f1c2 0620 	rsb	r6, r2, #32
 800bf00:	6843      	ldr	r3, [r0, #4]
 800bf02:	6804      	ldr	r4, [r0, #0]
 800bf04:	fa03 f506 	lsl.w	r5, r3, r6
 800bf08:	432c      	orrs	r4, r5
 800bf0a:	40d3      	lsrs	r3, r2
 800bf0c:	6004      	str	r4, [r0, #0]
 800bf0e:	f840 3f04 	str.w	r3, [r0, #4]!
 800bf12:	4288      	cmp	r0, r1
 800bf14:	d3f4      	bcc.n	800bf00 <L_shift+0xc>
 800bf16:	bd70      	pop	{r4, r5, r6, pc}

0800bf18 <__match>:
 800bf18:	b530      	push	{r4, r5, lr}
 800bf1a:	6803      	ldr	r3, [r0, #0]
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf22:	b914      	cbnz	r4, 800bf2a <__match+0x12>
 800bf24:	6003      	str	r3, [r0, #0]
 800bf26:	2001      	movs	r0, #1
 800bf28:	bd30      	pop	{r4, r5, pc}
 800bf2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf2e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bf32:	2d19      	cmp	r5, #25
 800bf34:	bf98      	it	ls
 800bf36:	3220      	addls	r2, #32
 800bf38:	42a2      	cmp	r2, r4
 800bf3a:	d0f0      	beq.n	800bf1e <__match+0x6>
 800bf3c:	2000      	movs	r0, #0
 800bf3e:	e7f3      	b.n	800bf28 <__match+0x10>

0800bf40 <__hexnan>:
 800bf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf44:	2500      	movs	r5, #0
 800bf46:	680b      	ldr	r3, [r1, #0]
 800bf48:	4682      	mov	sl, r0
 800bf4a:	115e      	asrs	r6, r3, #5
 800bf4c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bf50:	f013 031f 	ands.w	r3, r3, #31
 800bf54:	bf18      	it	ne
 800bf56:	3604      	addne	r6, #4
 800bf58:	1f37      	subs	r7, r6, #4
 800bf5a:	4690      	mov	r8, r2
 800bf5c:	46b9      	mov	r9, r7
 800bf5e:	463c      	mov	r4, r7
 800bf60:	46ab      	mov	fp, r5
 800bf62:	b087      	sub	sp, #28
 800bf64:	6801      	ldr	r1, [r0, #0]
 800bf66:	9301      	str	r3, [sp, #4]
 800bf68:	f846 5c04 	str.w	r5, [r6, #-4]
 800bf6c:	9502      	str	r5, [sp, #8]
 800bf6e:	784a      	ldrb	r2, [r1, #1]
 800bf70:	1c4b      	adds	r3, r1, #1
 800bf72:	9303      	str	r3, [sp, #12]
 800bf74:	b342      	cbz	r2, 800bfc8 <__hexnan+0x88>
 800bf76:	4610      	mov	r0, r2
 800bf78:	9105      	str	r1, [sp, #20]
 800bf7a:	9204      	str	r2, [sp, #16]
 800bf7c:	f7ff fd74 	bl	800ba68 <__hexdig_fun>
 800bf80:	2800      	cmp	r0, #0
 800bf82:	d14f      	bne.n	800c024 <__hexnan+0xe4>
 800bf84:	9a04      	ldr	r2, [sp, #16]
 800bf86:	9905      	ldr	r1, [sp, #20]
 800bf88:	2a20      	cmp	r2, #32
 800bf8a:	d818      	bhi.n	800bfbe <__hexnan+0x7e>
 800bf8c:	9b02      	ldr	r3, [sp, #8]
 800bf8e:	459b      	cmp	fp, r3
 800bf90:	dd13      	ble.n	800bfba <__hexnan+0x7a>
 800bf92:	454c      	cmp	r4, r9
 800bf94:	d206      	bcs.n	800bfa4 <__hexnan+0x64>
 800bf96:	2d07      	cmp	r5, #7
 800bf98:	dc04      	bgt.n	800bfa4 <__hexnan+0x64>
 800bf9a:	462a      	mov	r2, r5
 800bf9c:	4649      	mov	r1, r9
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f7ff ffa8 	bl	800bef4 <L_shift>
 800bfa4:	4544      	cmp	r4, r8
 800bfa6:	d950      	bls.n	800c04a <__hexnan+0x10a>
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	f1a4 0904 	sub.w	r9, r4, #4
 800bfae:	f844 3c04 	str.w	r3, [r4, #-4]
 800bfb2:	461d      	mov	r5, r3
 800bfb4:	464c      	mov	r4, r9
 800bfb6:	f8cd b008 	str.w	fp, [sp, #8]
 800bfba:	9903      	ldr	r1, [sp, #12]
 800bfbc:	e7d7      	b.n	800bf6e <__hexnan+0x2e>
 800bfbe:	2a29      	cmp	r2, #41	; 0x29
 800bfc0:	d155      	bne.n	800c06e <__hexnan+0x12e>
 800bfc2:	3102      	adds	r1, #2
 800bfc4:	f8ca 1000 	str.w	r1, [sl]
 800bfc8:	f1bb 0f00 	cmp.w	fp, #0
 800bfcc:	d04f      	beq.n	800c06e <__hexnan+0x12e>
 800bfce:	454c      	cmp	r4, r9
 800bfd0:	d206      	bcs.n	800bfe0 <__hexnan+0xa0>
 800bfd2:	2d07      	cmp	r5, #7
 800bfd4:	dc04      	bgt.n	800bfe0 <__hexnan+0xa0>
 800bfd6:	462a      	mov	r2, r5
 800bfd8:	4649      	mov	r1, r9
 800bfda:	4620      	mov	r0, r4
 800bfdc:	f7ff ff8a 	bl	800bef4 <L_shift>
 800bfe0:	4544      	cmp	r4, r8
 800bfe2:	d934      	bls.n	800c04e <__hexnan+0x10e>
 800bfe4:	4623      	mov	r3, r4
 800bfe6:	f1a8 0204 	sub.w	r2, r8, #4
 800bfea:	f853 1b04 	ldr.w	r1, [r3], #4
 800bfee:	429f      	cmp	r7, r3
 800bff0:	f842 1f04 	str.w	r1, [r2, #4]!
 800bff4:	d2f9      	bcs.n	800bfea <__hexnan+0xaa>
 800bff6:	1b3b      	subs	r3, r7, r4
 800bff8:	f023 0303 	bic.w	r3, r3, #3
 800bffc:	3304      	adds	r3, #4
 800bffe:	3e03      	subs	r6, #3
 800c000:	3401      	adds	r4, #1
 800c002:	42a6      	cmp	r6, r4
 800c004:	bf38      	it	cc
 800c006:	2304      	movcc	r3, #4
 800c008:	2200      	movs	r2, #0
 800c00a:	4443      	add	r3, r8
 800c00c:	f843 2b04 	str.w	r2, [r3], #4
 800c010:	429f      	cmp	r7, r3
 800c012:	d2fb      	bcs.n	800c00c <__hexnan+0xcc>
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	b91b      	cbnz	r3, 800c020 <__hexnan+0xe0>
 800c018:	4547      	cmp	r7, r8
 800c01a:	d126      	bne.n	800c06a <__hexnan+0x12a>
 800c01c:	2301      	movs	r3, #1
 800c01e:	603b      	str	r3, [r7, #0]
 800c020:	2005      	movs	r0, #5
 800c022:	e025      	b.n	800c070 <__hexnan+0x130>
 800c024:	3501      	adds	r5, #1
 800c026:	2d08      	cmp	r5, #8
 800c028:	f10b 0b01 	add.w	fp, fp, #1
 800c02c:	dd06      	ble.n	800c03c <__hexnan+0xfc>
 800c02e:	4544      	cmp	r4, r8
 800c030:	d9c3      	bls.n	800bfba <__hexnan+0x7a>
 800c032:	2300      	movs	r3, #0
 800c034:	2501      	movs	r5, #1
 800c036:	f844 3c04 	str.w	r3, [r4, #-4]
 800c03a:	3c04      	subs	r4, #4
 800c03c:	6822      	ldr	r2, [r4, #0]
 800c03e:	f000 000f 	and.w	r0, r0, #15
 800c042:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c046:	6020      	str	r0, [r4, #0]
 800c048:	e7b7      	b.n	800bfba <__hexnan+0x7a>
 800c04a:	2508      	movs	r5, #8
 800c04c:	e7b5      	b.n	800bfba <__hexnan+0x7a>
 800c04e:	9b01      	ldr	r3, [sp, #4]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d0df      	beq.n	800c014 <__hexnan+0xd4>
 800c054:	f04f 32ff 	mov.w	r2, #4294967295
 800c058:	f1c3 0320 	rsb	r3, r3, #32
 800c05c:	40da      	lsrs	r2, r3
 800c05e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c062:	4013      	ands	r3, r2
 800c064:	f846 3c04 	str.w	r3, [r6, #-4]
 800c068:	e7d4      	b.n	800c014 <__hexnan+0xd4>
 800c06a:	3f04      	subs	r7, #4
 800c06c:	e7d2      	b.n	800c014 <__hexnan+0xd4>
 800c06e:	2004      	movs	r0, #4
 800c070:	b007      	add	sp, #28
 800c072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c076 <__ascii_mbtowc>:
 800c076:	b082      	sub	sp, #8
 800c078:	b901      	cbnz	r1, 800c07c <__ascii_mbtowc+0x6>
 800c07a:	a901      	add	r1, sp, #4
 800c07c:	b142      	cbz	r2, 800c090 <__ascii_mbtowc+0x1a>
 800c07e:	b14b      	cbz	r3, 800c094 <__ascii_mbtowc+0x1e>
 800c080:	7813      	ldrb	r3, [r2, #0]
 800c082:	600b      	str	r3, [r1, #0]
 800c084:	7812      	ldrb	r2, [r2, #0]
 800c086:	1e10      	subs	r0, r2, #0
 800c088:	bf18      	it	ne
 800c08a:	2001      	movne	r0, #1
 800c08c:	b002      	add	sp, #8
 800c08e:	4770      	bx	lr
 800c090:	4610      	mov	r0, r2
 800c092:	e7fb      	b.n	800c08c <__ascii_mbtowc+0x16>
 800c094:	f06f 0001 	mvn.w	r0, #1
 800c098:	e7f8      	b.n	800c08c <__ascii_mbtowc+0x16>

0800c09a <_realloc_r>:
 800c09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c09e:	4680      	mov	r8, r0
 800c0a0:	4614      	mov	r4, r2
 800c0a2:	460e      	mov	r6, r1
 800c0a4:	b921      	cbnz	r1, 800c0b0 <_realloc_r+0x16>
 800c0a6:	4611      	mov	r1, r2
 800c0a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ac:	f7fd bec4 	b.w	8009e38 <_malloc_r>
 800c0b0:	b92a      	cbnz	r2, 800c0be <_realloc_r+0x24>
 800c0b2:	f7fd fe51 	bl	8009d58 <_free_r>
 800c0b6:	4625      	mov	r5, r4
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0be:	f000 fa43 	bl	800c548 <_malloc_usable_size_r>
 800c0c2:	4284      	cmp	r4, r0
 800c0c4:	4607      	mov	r7, r0
 800c0c6:	d802      	bhi.n	800c0ce <_realloc_r+0x34>
 800c0c8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c0cc:	d812      	bhi.n	800c0f4 <_realloc_r+0x5a>
 800c0ce:	4621      	mov	r1, r4
 800c0d0:	4640      	mov	r0, r8
 800c0d2:	f7fd feb1 	bl	8009e38 <_malloc_r>
 800c0d6:	4605      	mov	r5, r0
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	d0ed      	beq.n	800c0b8 <_realloc_r+0x1e>
 800c0dc:	42bc      	cmp	r4, r7
 800c0de:	4622      	mov	r2, r4
 800c0e0:	4631      	mov	r1, r6
 800c0e2:	bf28      	it	cs
 800c0e4:	463a      	movcs	r2, r7
 800c0e6:	f7ff fc3d 	bl	800b964 <memcpy>
 800c0ea:	4631      	mov	r1, r6
 800c0ec:	4640      	mov	r0, r8
 800c0ee:	f7fd fe33 	bl	8009d58 <_free_r>
 800c0f2:	e7e1      	b.n	800c0b8 <_realloc_r+0x1e>
 800c0f4:	4635      	mov	r5, r6
 800c0f6:	e7df      	b.n	800c0b8 <_realloc_r+0x1e>

0800c0f8 <__ascii_wctomb>:
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	4608      	mov	r0, r1
 800c0fc:	b141      	cbz	r1, 800c110 <__ascii_wctomb+0x18>
 800c0fe:	2aff      	cmp	r2, #255	; 0xff
 800c100:	d904      	bls.n	800c10c <__ascii_wctomb+0x14>
 800c102:	228a      	movs	r2, #138	; 0x8a
 800c104:	f04f 30ff 	mov.w	r0, #4294967295
 800c108:	601a      	str	r2, [r3, #0]
 800c10a:	4770      	bx	lr
 800c10c:	2001      	movs	r0, #1
 800c10e:	700a      	strb	r2, [r1, #0]
 800c110:	4770      	bx	lr

0800c112 <__sfputc_r>:
 800c112:	6893      	ldr	r3, [r2, #8]
 800c114:	b410      	push	{r4}
 800c116:	3b01      	subs	r3, #1
 800c118:	2b00      	cmp	r3, #0
 800c11a:	6093      	str	r3, [r2, #8]
 800c11c:	da07      	bge.n	800c12e <__sfputc_r+0x1c>
 800c11e:	6994      	ldr	r4, [r2, #24]
 800c120:	42a3      	cmp	r3, r4
 800c122:	db01      	blt.n	800c128 <__sfputc_r+0x16>
 800c124:	290a      	cmp	r1, #10
 800c126:	d102      	bne.n	800c12e <__sfputc_r+0x1c>
 800c128:	bc10      	pop	{r4}
 800c12a:	f000 b933 	b.w	800c394 <__swbuf_r>
 800c12e:	6813      	ldr	r3, [r2, #0]
 800c130:	1c58      	adds	r0, r3, #1
 800c132:	6010      	str	r0, [r2, #0]
 800c134:	7019      	strb	r1, [r3, #0]
 800c136:	4608      	mov	r0, r1
 800c138:	bc10      	pop	{r4}
 800c13a:	4770      	bx	lr

0800c13c <__sfputs_r>:
 800c13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c13e:	4606      	mov	r6, r0
 800c140:	460f      	mov	r7, r1
 800c142:	4614      	mov	r4, r2
 800c144:	18d5      	adds	r5, r2, r3
 800c146:	42ac      	cmp	r4, r5
 800c148:	d101      	bne.n	800c14e <__sfputs_r+0x12>
 800c14a:	2000      	movs	r0, #0
 800c14c:	e007      	b.n	800c15e <__sfputs_r+0x22>
 800c14e:	463a      	mov	r2, r7
 800c150:	4630      	mov	r0, r6
 800c152:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c156:	f7ff ffdc 	bl	800c112 <__sfputc_r>
 800c15a:	1c43      	adds	r3, r0, #1
 800c15c:	d1f3      	bne.n	800c146 <__sfputs_r+0xa>
 800c15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c160 <_vfiprintf_r>:
 800c160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c164:	460d      	mov	r5, r1
 800c166:	4614      	mov	r4, r2
 800c168:	4698      	mov	r8, r3
 800c16a:	4606      	mov	r6, r0
 800c16c:	b09d      	sub	sp, #116	; 0x74
 800c16e:	b118      	cbz	r0, 800c178 <_vfiprintf_r+0x18>
 800c170:	6a03      	ldr	r3, [r0, #32]
 800c172:	b90b      	cbnz	r3, 800c178 <_vfiprintf_r+0x18>
 800c174:	f7fc fdba 	bl	8008cec <__sinit>
 800c178:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c17a:	07d9      	lsls	r1, r3, #31
 800c17c:	d405      	bmi.n	800c18a <_vfiprintf_r+0x2a>
 800c17e:	89ab      	ldrh	r3, [r5, #12]
 800c180:	059a      	lsls	r2, r3, #22
 800c182:	d402      	bmi.n	800c18a <_vfiprintf_r+0x2a>
 800c184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c186:	f7fc ff44 	bl	8009012 <__retarget_lock_acquire_recursive>
 800c18a:	89ab      	ldrh	r3, [r5, #12]
 800c18c:	071b      	lsls	r3, r3, #28
 800c18e:	d501      	bpl.n	800c194 <_vfiprintf_r+0x34>
 800c190:	692b      	ldr	r3, [r5, #16]
 800c192:	b99b      	cbnz	r3, 800c1bc <_vfiprintf_r+0x5c>
 800c194:	4629      	mov	r1, r5
 800c196:	4630      	mov	r0, r6
 800c198:	f000 f93a 	bl	800c410 <__swsetup_r>
 800c19c:	b170      	cbz	r0, 800c1bc <_vfiprintf_r+0x5c>
 800c19e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1a0:	07dc      	lsls	r4, r3, #31
 800c1a2:	d504      	bpl.n	800c1ae <_vfiprintf_r+0x4e>
 800c1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a8:	b01d      	add	sp, #116	; 0x74
 800c1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ae:	89ab      	ldrh	r3, [r5, #12]
 800c1b0:	0598      	lsls	r0, r3, #22
 800c1b2:	d4f7      	bmi.n	800c1a4 <_vfiprintf_r+0x44>
 800c1b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1b6:	f7fc ff2d 	bl	8009014 <__retarget_lock_release_recursive>
 800c1ba:	e7f3      	b.n	800c1a4 <_vfiprintf_r+0x44>
 800c1bc:	2300      	movs	r3, #0
 800c1be:	9309      	str	r3, [sp, #36]	; 0x24
 800c1c0:	2320      	movs	r3, #32
 800c1c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1c6:	2330      	movs	r3, #48	; 0x30
 800c1c8:	f04f 0901 	mov.w	r9, #1
 800c1cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800c380 <_vfiprintf_r+0x220>
 800c1d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1d8:	4623      	mov	r3, r4
 800c1da:	469a      	mov	sl, r3
 800c1dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1e0:	b10a      	cbz	r2, 800c1e6 <_vfiprintf_r+0x86>
 800c1e2:	2a25      	cmp	r2, #37	; 0x25
 800c1e4:	d1f9      	bne.n	800c1da <_vfiprintf_r+0x7a>
 800c1e6:	ebba 0b04 	subs.w	fp, sl, r4
 800c1ea:	d00b      	beq.n	800c204 <_vfiprintf_r+0xa4>
 800c1ec:	465b      	mov	r3, fp
 800c1ee:	4622      	mov	r2, r4
 800c1f0:	4629      	mov	r1, r5
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	f7ff ffa2 	bl	800c13c <__sfputs_r>
 800c1f8:	3001      	adds	r0, #1
 800c1fa:	f000 80a9 	beq.w	800c350 <_vfiprintf_r+0x1f0>
 800c1fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c200:	445a      	add	r2, fp
 800c202:	9209      	str	r2, [sp, #36]	; 0x24
 800c204:	f89a 3000 	ldrb.w	r3, [sl]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f000 80a1 	beq.w	800c350 <_vfiprintf_r+0x1f0>
 800c20e:	2300      	movs	r3, #0
 800c210:	f04f 32ff 	mov.w	r2, #4294967295
 800c214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c218:	f10a 0a01 	add.w	sl, sl, #1
 800c21c:	9304      	str	r3, [sp, #16]
 800c21e:	9307      	str	r3, [sp, #28]
 800c220:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c224:	931a      	str	r3, [sp, #104]	; 0x68
 800c226:	4654      	mov	r4, sl
 800c228:	2205      	movs	r2, #5
 800c22a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c22e:	4854      	ldr	r0, [pc, #336]	; (800c380 <_vfiprintf_r+0x220>)
 800c230:	f7fc fef1 	bl	8009016 <memchr>
 800c234:	9a04      	ldr	r2, [sp, #16]
 800c236:	b9d8      	cbnz	r0, 800c270 <_vfiprintf_r+0x110>
 800c238:	06d1      	lsls	r1, r2, #27
 800c23a:	bf44      	itt	mi
 800c23c:	2320      	movmi	r3, #32
 800c23e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c242:	0713      	lsls	r3, r2, #28
 800c244:	bf44      	itt	mi
 800c246:	232b      	movmi	r3, #43	; 0x2b
 800c248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c24c:	f89a 3000 	ldrb.w	r3, [sl]
 800c250:	2b2a      	cmp	r3, #42	; 0x2a
 800c252:	d015      	beq.n	800c280 <_vfiprintf_r+0x120>
 800c254:	4654      	mov	r4, sl
 800c256:	2000      	movs	r0, #0
 800c258:	f04f 0c0a 	mov.w	ip, #10
 800c25c:	9a07      	ldr	r2, [sp, #28]
 800c25e:	4621      	mov	r1, r4
 800c260:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c264:	3b30      	subs	r3, #48	; 0x30
 800c266:	2b09      	cmp	r3, #9
 800c268:	d94d      	bls.n	800c306 <_vfiprintf_r+0x1a6>
 800c26a:	b1b0      	cbz	r0, 800c29a <_vfiprintf_r+0x13a>
 800c26c:	9207      	str	r2, [sp, #28]
 800c26e:	e014      	b.n	800c29a <_vfiprintf_r+0x13a>
 800c270:	eba0 0308 	sub.w	r3, r0, r8
 800c274:	fa09 f303 	lsl.w	r3, r9, r3
 800c278:	4313      	orrs	r3, r2
 800c27a:	46a2      	mov	sl, r4
 800c27c:	9304      	str	r3, [sp, #16]
 800c27e:	e7d2      	b.n	800c226 <_vfiprintf_r+0xc6>
 800c280:	9b03      	ldr	r3, [sp, #12]
 800c282:	1d19      	adds	r1, r3, #4
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	9103      	str	r1, [sp, #12]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	bfbb      	ittet	lt
 800c28c:	425b      	neglt	r3, r3
 800c28e:	f042 0202 	orrlt.w	r2, r2, #2
 800c292:	9307      	strge	r3, [sp, #28]
 800c294:	9307      	strlt	r3, [sp, #28]
 800c296:	bfb8      	it	lt
 800c298:	9204      	strlt	r2, [sp, #16]
 800c29a:	7823      	ldrb	r3, [r4, #0]
 800c29c:	2b2e      	cmp	r3, #46	; 0x2e
 800c29e:	d10c      	bne.n	800c2ba <_vfiprintf_r+0x15a>
 800c2a0:	7863      	ldrb	r3, [r4, #1]
 800c2a2:	2b2a      	cmp	r3, #42	; 0x2a
 800c2a4:	d134      	bne.n	800c310 <_vfiprintf_r+0x1b0>
 800c2a6:	9b03      	ldr	r3, [sp, #12]
 800c2a8:	3402      	adds	r4, #2
 800c2aa:	1d1a      	adds	r2, r3, #4
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	9203      	str	r2, [sp, #12]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	bfb8      	it	lt
 800c2b4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2b8:	9305      	str	r3, [sp, #20]
 800c2ba:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c384 <_vfiprintf_r+0x224>
 800c2be:	2203      	movs	r2, #3
 800c2c0:	4650      	mov	r0, sl
 800c2c2:	7821      	ldrb	r1, [r4, #0]
 800c2c4:	f7fc fea7 	bl	8009016 <memchr>
 800c2c8:	b138      	cbz	r0, 800c2da <_vfiprintf_r+0x17a>
 800c2ca:	2240      	movs	r2, #64	; 0x40
 800c2cc:	9b04      	ldr	r3, [sp, #16]
 800c2ce:	eba0 000a 	sub.w	r0, r0, sl
 800c2d2:	4082      	lsls	r2, r0
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	3401      	adds	r4, #1
 800c2d8:	9304      	str	r3, [sp, #16]
 800c2da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2de:	2206      	movs	r2, #6
 800c2e0:	4829      	ldr	r0, [pc, #164]	; (800c388 <_vfiprintf_r+0x228>)
 800c2e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2e6:	f7fc fe96 	bl	8009016 <memchr>
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	d03f      	beq.n	800c36e <_vfiprintf_r+0x20e>
 800c2ee:	4b27      	ldr	r3, [pc, #156]	; (800c38c <_vfiprintf_r+0x22c>)
 800c2f0:	bb1b      	cbnz	r3, 800c33a <_vfiprintf_r+0x1da>
 800c2f2:	9b03      	ldr	r3, [sp, #12]
 800c2f4:	3307      	adds	r3, #7
 800c2f6:	f023 0307 	bic.w	r3, r3, #7
 800c2fa:	3308      	adds	r3, #8
 800c2fc:	9303      	str	r3, [sp, #12]
 800c2fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c300:	443b      	add	r3, r7
 800c302:	9309      	str	r3, [sp, #36]	; 0x24
 800c304:	e768      	b.n	800c1d8 <_vfiprintf_r+0x78>
 800c306:	460c      	mov	r4, r1
 800c308:	2001      	movs	r0, #1
 800c30a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c30e:	e7a6      	b.n	800c25e <_vfiprintf_r+0xfe>
 800c310:	2300      	movs	r3, #0
 800c312:	f04f 0c0a 	mov.w	ip, #10
 800c316:	4619      	mov	r1, r3
 800c318:	3401      	adds	r4, #1
 800c31a:	9305      	str	r3, [sp, #20]
 800c31c:	4620      	mov	r0, r4
 800c31e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c322:	3a30      	subs	r2, #48	; 0x30
 800c324:	2a09      	cmp	r2, #9
 800c326:	d903      	bls.n	800c330 <_vfiprintf_r+0x1d0>
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d0c6      	beq.n	800c2ba <_vfiprintf_r+0x15a>
 800c32c:	9105      	str	r1, [sp, #20]
 800c32e:	e7c4      	b.n	800c2ba <_vfiprintf_r+0x15a>
 800c330:	4604      	mov	r4, r0
 800c332:	2301      	movs	r3, #1
 800c334:	fb0c 2101 	mla	r1, ip, r1, r2
 800c338:	e7f0      	b.n	800c31c <_vfiprintf_r+0x1bc>
 800c33a:	ab03      	add	r3, sp, #12
 800c33c:	9300      	str	r3, [sp, #0]
 800c33e:	462a      	mov	r2, r5
 800c340:	4630      	mov	r0, r6
 800c342:	4b13      	ldr	r3, [pc, #76]	; (800c390 <_vfiprintf_r+0x230>)
 800c344:	a904      	add	r1, sp, #16
 800c346:	f7fb fe75 	bl	8008034 <_printf_float>
 800c34a:	4607      	mov	r7, r0
 800c34c:	1c78      	adds	r0, r7, #1
 800c34e:	d1d6      	bne.n	800c2fe <_vfiprintf_r+0x19e>
 800c350:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c352:	07d9      	lsls	r1, r3, #31
 800c354:	d405      	bmi.n	800c362 <_vfiprintf_r+0x202>
 800c356:	89ab      	ldrh	r3, [r5, #12]
 800c358:	059a      	lsls	r2, r3, #22
 800c35a:	d402      	bmi.n	800c362 <_vfiprintf_r+0x202>
 800c35c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c35e:	f7fc fe59 	bl	8009014 <__retarget_lock_release_recursive>
 800c362:	89ab      	ldrh	r3, [r5, #12]
 800c364:	065b      	lsls	r3, r3, #25
 800c366:	f53f af1d 	bmi.w	800c1a4 <_vfiprintf_r+0x44>
 800c36a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c36c:	e71c      	b.n	800c1a8 <_vfiprintf_r+0x48>
 800c36e:	ab03      	add	r3, sp, #12
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	462a      	mov	r2, r5
 800c374:	4630      	mov	r0, r6
 800c376:	4b06      	ldr	r3, [pc, #24]	; (800c390 <_vfiprintf_r+0x230>)
 800c378:	a904      	add	r1, sp, #16
 800c37a:	f7fc f8fb 	bl	8008574 <_printf_i>
 800c37e:	e7e4      	b.n	800c34a <_vfiprintf_r+0x1ea>
 800c380:	0800de50 	.word	0x0800de50
 800c384:	0800de56 	.word	0x0800de56
 800c388:	0800de5a 	.word	0x0800de5a
 800c38c:	08008035 	.word	0x08008035
 800c390:	0800c13d 	.word	0x0800c13d

0800c394 <__swbuf_r>:
 800c394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c396:	460e      	mov	r6, r1
 800c398:	4614      	mov	r4, r2
 800c39a:	4605      	mov	r5, r0
 800c39c:	b118      	cbz	r0, 800c3a6 <__swbuf_r+0x12>
 800c39e:	6a03      	ldr	r3, [r0, #32]
 800c3a0:	b90b      	cbnz	r3, 800c3a6 <__swbuf_r+0x12>
 800c3a2:	f7fc fca3 	bl	8008cec <__sinit>
 800c3a6:	69a3      	ldr	r3, [r4, #24]
 800c3a8:	60a3      	str	r3, [r4, #8]
 800c3aa:	89a3      	ldrh	r3, [r4, #12]
 800c3ac:	071a      	lsls	r2, r3, #28
 800c3ae:	d525      	bpl.n	800c3fc <__swbuf_r+0x68>
 800c3b0:	6923      	ldr	r3, [r4, #16]
 800c3b2:	b31b      	cbz	r3, 800c3fc <__swbuf_r+0x68>
 800c3b4:	6823      	ldr	r3, [r4, #0]
 800c3b6:	6922      	ldr	r2, [r4, #16]
 800c3b8:	b2f6      	uxtb	r6, r6
 800c3ba:	1a98      	subs	r0, r3, r2
 800c3bc:	6963      	ldr	r3, [r4, #20]
 800c3be:	4637      	mov	r7, r6
 800c3c0:	4283      	cmp	r3, r0
 800c3c2:	dc04      	bgt.n	800c3ce <__swbuf_r+0x3a>
 800c3c4:	4621      	mov	r1, r4
 800c3c6:	4628      	mov	r0, r5
 800c3c8:	f7ff fa56 	bl	800b878 <_fflush_r>
 800c3cc:	b9e0      	cbnz	r0, 800c408 <__swbuf_r+0x74>
 800c3ce:	68a3      	ldr	r3, [r4, #8]
 800c3d0:	3b01      	subs	r3, #1
 800c3d2:	60a3      	str	r3, [r4, #8]
 800c3d4:	6823      	ldr	r3, [r4, #0]
 800c3d6:	1c5a      	adds	r2, r3, #1
 800c3d8:	6022      	str	r2, [r4, #0]
 800c3da:	701e      	strb	r6, [r3, #0]
 800c3dc:	6962      	ldr	r2, [r4, #20]
 800c3de:	1c43      	adds	r3, r0, #1
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d004      	beq.n	800c3ee <__swbuf_r+0x5a>
 800c3e4:	89a3      	ldrh	r3, [r4, #12]
 800c3e6:	07db      	lsls	r3, r3, #31
 800c3e8:	d506      	bpl.n	800c3f8 <__swbuf_r+0x64>
 800c3ea:	2e0a      	cmp	r6, #10
 800c3ec:	d104      	bne.n	800c3f8 <__swbuf_r+0x64>
 800c3ee:	4621      	mov	r1, r4
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	f7ff fa41 	bl	800b878 <_fflush_r>
 800c3f6:	b938      	cbnz	r0, 800c408 <__swbuf_r+0x74>
 800c3f8:	4638      	mov	r0, r7
 800c3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3fc:	4621      	mov	r1, r4
 800c3fe:	4628      	mov	r0, r5
 800c400:	f000 f806 	bl	800c410 <__swsetup_r>
 800c404:	2800      	cmp	r0, #0
 800c406:	d0d5      	beq.n	800c3b4 <__swbuf_r+0x20>
 800c408:	f04f 37ff 	mov.w	r7, #4294967295
 800c40c:	e7f4      	b.n	800c3f8 <__swbuf_r+0x64>
	...

0800c410 <__swsetup_r>:
 800c410:	b538      	push	{r3, r4, r5, lr}
 800c412:	4b2a      	ldr	r3, [pc, #168]	; (800c4bc <__swsetup_r+0xac>)
 800c414:	4605      	mov	r5, r0
 800c416:	6818      	ldr	r0, [r3, #0]
 800c418:	460c      	mov	r4, r1
 800c41a:	b118      	cbz	r0, 800c424 <__swsetup_r+0x14>
 800c41c:	6a03      	ldr	r3, [r0, #32]
 800c41e:	b90b      	cbnz	r3, 800c424 <__swsetup_r+0x14>
 800c420:	f7fc fc64 	bl	8008cec <__sinit>
 800c424:	89a3      	ldrh	r3, [r4, #12]
 800c426:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c42a:	0718      	lsls	r0, r3, #28
 800c42c:	d422      	bmi.n	800c474 <__swsetup_r+0x64>
 800c42e:	06d9      	lsls	r1, r3, #27
 800c430:	d407      	bmi.n	800c442 <__swsetup_r+0x32>
 800c432:	2309      	movs	r3, #9
 800c434:	602b      	str	r3, [r5, #0]
 800c436:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c43a:	f04f 30ff 	mov.w	r0, #4294967295
 800c43e:	81a3      	strh	r3, [r4, #12]
 800c440:	e034      	b.n	800c4ac <__swsetup_r+0x9c>
 800c442:	0758      	lsls	r0, r3, #29
 800c444:	d512      	bpl.n	800c46c <__swsetup_r+0x5c>
 800c446:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c448:	b141      	cbz	r1, 800c45c <__swsetup_r+0x4c>
 800c44a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c44e:	4299      	cmp	r1, r3
 800c450:	d002      	beq.n	800c458 <__swsetup_r+0x48>
 800c452:	4628      	mov	r0, r5
 800c454:	f7fd fc80 	bl	8009d58 <_free_r>
 800c458:	2300      	movs	r3, #0
 800c45a:	6363      	str	r3, [r4, #52]	; 0x34
 800c45c:	89a3      	ldrh	r3, [r4, #12]
 800c45e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c462:	81a3      	strh	r3, [r4, #12]
 800c464:	2300      	movs	r3, #0
 800c466:	6063      	str	r3, [r4, #4]
 800c468:	6923      	ldr	r3, [r4, #16]
 800c46a:	6023      	str	r3, [r4, #0]
 800c46c:	89a3      	ldrh	r3, [r4, #12]
 800c46e:	f043 0308 	orr.w	r3, r3, #8
 800c472:	81a3      	strh	r3, [r4, #12]
 800c474:	6923      	ldr	r3, [r4, #16]
 800c476:	b94b      	cbnz	r3, 800c48c <__swsetup_r+0x7c>
 800c478:	89a3      	ldrh	r3, [r4, #12]
 800c47a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c47e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c482:	d003      	beq.n	800c48c <__swsetup_r+0x7c>
 800c484:	4621      	mov	r1, r4
 800c486:	4628      	mov	r0, r5
 800c488:	f000 f88b 	bl	800c5a2 <__smakebuf_r>
 800c48c:	89a0      	ldrh	r0, [r4, #12]
 800c48e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c492:	f010 0301 	ands.w	r3, r0, #1
 800c496:	d00a      	beq.n	800c4ae <__swsetup_r+0x9e>
 800c498:	2300      	movs	r3, #0
 800c49a:	60a3      	str	r3, [r4, #8]
 800c49c:	6963      	ldr	r3, [r4, #20]
 800c49e:	425b      	negs	r3, r3
 800c4a0:	61a3      	str	r3, [r4, #24]
 800c4a2:	6923      	ldr	r3, [r4, #16]
 800c4a4:	b943      	cbnz	r3, 800c4b8 <__swsetup_r+0xa8>
 800c4a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c4aa:	d1c4      	bne.n	800c436 <__swsetup_r+0x26>
 800c4ac:	bd38      	pop	{r3, r4, r5, pc}
 800c4ae:	0781      	lsls	r1, r0, #30
 800c4b0:	bf58      	it	pl
 800c4b2:	6963      	ldrpl	r3, [r4, #20]
 800c4b4:	60a3      	str	r3, [r4, #8]
 800c4b6:	e7f4      	b.n	800c4a2 <__swsetup_r+0x92>
 800c4b8:	2000      	movs	r0, #0
 800c4ba:	e7f7      	b.n	800c4ac <__swsetup_r+0x9c>
 800c4bc:	20000070 	.word	0x20000070

0800c4c0 <_raise_r>:
 800c4c0:	291f      	cmp	r1, #31
 800c4c2:	b538      	push	{r3, r4, r5, lr}
 800c4c4:	4604      	mov	r4, r0
 800c4c6:	460d      	mov	r5, r1
 800c4c8:	d904      	bls.n	800c4d4 <_raise_r+0x14>
 800c4ca:	2316      	movs	r3, #22
 800c4cc:	6003      	str	r3, [r0, #0]
 800c4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d2:	bd38      	pop	{r3, r4, r5, pc}
 800c4d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c4d6:	b112      	cbz	r2, 800c4de <_raise_r+0x1e>
 800c4d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4dc:	b94b      	cbnz	r3, 800c4f2 <_raise_r+0x32>
 800c4de:	4620      	mov	r0, r4
 800c4e0:	f000 f830 	bl	800c544 <_getpid_r>
 800c4e4:	462a      	mov	r2, r5
 800c4e6:	4601      	mov	r1, r0
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4ee:	f000 b817 	b.w	800c520 <_kill_r>
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	d00a      	beq.n	800c50c <_raise_r+0x4c>
 800c4f6:	1c59      	adds	r1, r3, #1
 800c4f8:	d103      	bne.n	800c502 <_raise_r+0x42>
 800c4fa:	2316      	movs	r3, #22
 800c4fc:	6003      	str	r3, [r0, #0]
 800c4fe:	2001      	movs	r0, #1
 800c500:	e7e7      	b.n	800c4d2 <_raise_r+0x12>
 800c502:	2400      	movs	r4, #0
 800c504:	4628      	mov	r0, r5
 800c506:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c50a:	4798      	blx	r3
 800c50c:	2000      	movs	r0, #0
 800c50e:	e7e0      	b.n	800c4d2 <_raise_r+0x12>

0800c510 <raise>:
 800c510:	4b02      	ldr	r3, [pc, #8]	; (800c51c <raise+0xc>)
 800c512:	4601      	mov	r1, r0
 800c514:	6818      	ldr	r0, [r3, #0]
 800c516:	f7ff bfd3 	b.w	800c4c0 <_raise_r>
 800c51a:	bf00      	nop
 800c51c:	20000070 	.word	0x20000070

0800c520 <_kill_r>:
 800c520:	b538      	push	{r3, r4, r5, lr}
 800c522:	2300      	movs	r3, #0
 800c524:	4d06      	ldr	r5, [pc, #24]	; (800c540 <_kill_r+0x20>)
 800c526:	4604      	mov	r4, r0
 800c528:	4608      	mov	r0, r1
 800c52a:	4611      	mov	r1, r2
 800c52c:	602b      	str	r3, [r5, #0]
 800c52e:	f7f6 fcbc 	bl	8002eaa <_kill>
 800c532:	1c43      	adds	r3, r0, #1
 800c534:	d102      	bne.n	800c53c <_kill_r+0x1c>
 800c536:	682b      	ldr	r3, [r5, #0]
 800c538:	b103      	cbz	r3, 800c53c <_kill_r+0x1c>
 800c53a:	6023      	str	r3, [r4, #0]
 800c53c:	bd38      	pop	{r3, r4, r5, pc}
 800c53e:	bf00      	nop
 800c540:	20000554 	.word	0x20000554

0800c544 <_getpid_r>:
 800c544:	f7f6 bcaa 	b.w	8002e9c <_getpid>

0800c548 <_malloc_usable_size_r>:
 800c548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c54c:	1f18      	subs	r0, r3, #4
 800c54e:	2b00      	cmp	r3, #0
 800c550:	bfbc      	itt	lt
 800c552:	580b      	ldrlt	r3, [r1, r0]
 800c554:	18c0      	addlt	r0, r0, r3
 800c556:	4770      	bx	lr

0800c558 <__swhatbuf_r>:
 800c558:	b570      	push	{r4, r5, r6, lr}
 800c55a:	460c      	mov	r4, r1
 800c55c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c560:	4615      	mov	r5, r2
 800c562:	2900      	cmp	r1, #0
 800c564:	461e      	mov	r6, r3
 800c566:	b096      	sub	sp, #88	; 0x58
 800c568:	da0c      	bge.n	800c584 <__swhatbuf_r+0x2c>
 800c56a:	89a3      	ldrh	r3, [r4, #12]
 800c56c:	2100      	movs	r1, #0
 800c56e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c572:	bf0c      	ite	eq
 800c574:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c578:	2340      	movne	r3, #64	; 0x40
 800c57a:	2000      	movs	r0, #0
 800c57c:	6031      	str	r1, [r6, #0]
 800c57e:	602b      	str	r3, [r5, #0]
 800c580:	b016      	add	sp, #88	; 0x58
 800c582:	bd70      	pop	{r4, r5, r6, pc}
 800c584:	466a      	mov	r2, sp
 800c586:	f000 f849 	bl	800c61c <_fstat_r>
 800c58a:	2800      	cmp	r0, #0
 800c58c:	dbed      	blt.n	800c56a <__swhatbuf_r+0x12>
 800c58e:	9901      	ldr	r1, [sp, #4]
 800c590:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c594:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c598:	4259      	negs	r1, r3
 800c59a:	4159      	adcs	r1, r3
 800c59c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5a0:	e7eb      	b.n	800c57a <__swhatbuf_r+0x22>

0800c5a2 <__smakebuf_r>:
 800c5a2:	898b      	ldrh	r3, [r1, #12]
 800c5a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c5a6:	079d      	lsls	r5, r3, #30
 800c5a8:	4606      	mov	r6, r0
 800c5aa:	460c      	mov	r4, r1
 800c5ac:	d507      	bpl.n	800c5be <__smakebuf_r+0x1c>
 800c5ae:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c5b2:	6023      	str	r3, [r4, #0]
 800c5b4:	6123      	str	r3, [r4, #16]
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	6163      	str	r3, [r4, #20]
 800c5ba:	b002      	add	sp, #8
 800c5bc:	bd70      	pop	{r4, r5, r6, pc}
 800c5be:	466a      	mov	r2, sp
 800c5c0:	ab01      	add	r3, sp, #4
 800c5c2:	f7ff ffc9 	bl	800c558 <__swhatbuf_r>
 800c5c6:	9900      	ldr	r1, [sp, #0]
 800c5c8:	4605      	mov	r5, r0
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	f7fd fc34 	bl	8009e38 <_malloc_r>
 800c5d0:	b948      	cbnz	r0, 800c5e6 <__smakebuf_r+0x44>
 800c5d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5d6:	059a      	lsls	r2, r3, #22
 800c5d8:	d4ef      	bmi.n	800c5ba <__smakebuf_r+0x18>
 800c5da:	f023 0303 	bic.w	r3, r3, #3
 800c5de:	f043 0302 	orr.w	r3, r3, #2
 800c5e2:	81a3      	strh	r3, [r4, #12]
 800c5e4:	e7e3      	b.n	800c5ae <__smakebuf_r+0xc>
 800c5e6:	89a3      	ldrh	r3, [r4, #12]
 800c5e8:	6020      	str	r0, [r4, #0]
 800c5ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5ee:	81a3      	strh	r3, [r4, #12]
 800c5f0:	9b00      	ldr	r3, [sp, #0]
 800c5f2:	6120      	str	r0, [r4, #16]
 800c5f4:	6163      	str	r3, [r4, #20]
 800c5f6:	9b01      	ldr	r3, [sp, #4]
 800c5f8:	b15b      	cbz	r3, 800c612 <__smakebuf_r+0x70>
 800c5fa:	4630      	mov	r0, r6
 800c5fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c600:	f000 f81e 	bl	800c640 <_isatty_r>
 800c604:	b128      	cbz	r0, 800c612 <__smakebuf_r+0x70>
 800c606:	89a3      	ldrh	r3, [r4, #12]
 800c608:	f023 0303 	bic.w	r3, r3, #3
 800c60c:	f043 0301 	orr.w	r3, r3, #1
 800c610:	81a3      	strh	r3, [r4, #12]
 800c612:	89a3      	ldrh	r3, [r4, #12]
 800c614:	431d      	orrs	r5, r3
 800c616:	81a5      	strh	r5, [r4, #12]
 800c618:	e7cf      	b.n	800c5ba <__smakebuf_r+0x18>
	...

0800c61c <_fstat_r>:
 800c61c:	b538      	push	{r3, r4, r5, lr}
 800c61e:	2300      	movs	r3, #0
 800c620:	4d06      	ldr	r5, [pc, #24]	; (800c63c <_fstat_r+0x20>)
 800c622:	4604      	mov	r4, r0
 800c624:	4608      	mov	r0, r1
 800c626:	4611      	mov	r1, r2
 800c628:	602b      	str	r3, [r5, #0]
 800c62a:	f7f6 fc9c 	bl	8002f66 <_fstat>
 800c62e:	1c43      	adds	r3, r0, #1
 800c630:	d102      	bne.n	800c638 <_fstat_r+0x1c>
 800c632:	682b      	ldr	r3, [r5, #0]
 800c634:	b103      	cbz	r3, 800c638 <_fstat_r+0x1c>
 800c636:	6023      	str	r3, [r4, #0]
 800c638:	bd38      	pop	{r3, r4, r5, pc}
 800c63a:	bf00      	nop
 800c63c:	20000554 	.word	0x20000554

0800c640 <_isatty_r>:
 800c640:	b538      	push	{r3, r4, r5, lr}
 800c642:	2300      	movs	r3, #0
 800c644:	4d05      	ldr	r5, [pc, #20]	; (800c65c <_isatty_r+0x1c>)
 800c646:	4604      	mov	r4, r0
 800c648:	4608      	mov	r0, r1
 800c64a:	602b      	str	r3, [r5, #0]
 800c64c:	f7f6 fc9a 	bl	8002f84 <_isatty>
 800c650:	1c43      	adds	r3, r0, #1
 800c652:	d102      	bne.n	800c65a <_isatty_r+0x1a>
 800c654:	682b      	ldr	r3, [r5, #0]
 800c656:	b103      	cbz	r3, 800c65a <_isatty_r+0x1a>
 800c658:	6023      	str	r3, [r4, #0]
 800c65a:	bd38      	pop	{r3, r4, r5, pc}
 800c65c:	20000554 	.word	0x20000554

0800c660 <log>:
 800c660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c662:	4604      	mov	r4, r0
 800c664:	460d      	mov	r5, r1
 800c666:	f000 f89b 	bl	800c7a0 <__ieee754_log>
 800c66a:	4622      	mov	r2, r4
 800c66c:	4606      	mov	r6, r0
 800c66e:	460f      	mov	r7, r1
 800c670:	462b      	mov	r3, r5
 800c672:	4620      	mov	r0, r4
 800c674:	4629      	mov	r1, r5
 800c676:	f7f4 f9d3 	bl	8000a20 <__aeabi_dcmpun>
 800c67a:	b998      	cbnz	r0, 800c6a4 <log+0x44>
 800c67c:	2200      	movs	r2, #0
 800c67e:	2300      	movs	r3, #0
 800c680:	4620      	mov	r0, r4
 800c682:	4629      	mov	r1, r5
 800c684:	f7f4 f9c2 	bl	8000a0c <__aeabi_dcmpgt>
 800c688:	b960      	cbnz	r0, 800c6a4 <log+0x44>
 800c68a:	2200      	movs	r2, #0
 800c68c:	2300      	movs	r3, #0
 800c68e:	4620      	mov	r0, r4
 800c690:	4629      	mov	r1, r5
 800c692:	f7f4 f993 	bl	80009bc <__aeabi_dcmpeq>
 800c696:	b140      	cbz	r0, 800c6aa <log+0x4a>
 800c698:	f7fc fc90 	bl	8008fbc <__errno>
 800c69c:	2322      	movs	r3, #34	; 0x22
 800c69e:	2600      	movs	r6, #0
 800c6a0:	4f06      	ldr	r7, [pc, #24]	; (800c6bc <log+0x5c>)
 800c6a2:	6003      	str	r3, [r0, #0]
 800c6a4:	4630      	mov	r0, r6
 800c6a6:	4639      	mov	r1, r7
 800c6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6aa:	f7fc fc87 	bl	8008fbc <__errno>
 800c6ae:	2321      	movs	r3, #33	; 0x21
 800c6b0:	6003      	str	r3, [r0, #0]
 800c6b2:	4803      	ldr	r0, [pc, #12]	; (800c6c0 <log+0x60>)
 800c6b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c6b8:	f7ff b962 	b.w	800b980 <nan>
 800c6bc:	fff00000 	.word	0xfff00000
 800c6c0:	0800dc30 	.word	0x0800dc30

0800c6c4 <pow>:
 800c6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6c8:	4614      	mov	r4, r2
 800c6ca:	461d      	mov	r5, r3
 800c6cc:	4680      	mov	r8, r0
 800c6ce:	4689      	mov	r9, r1
 800c6d0:	f000 fa1a 	bl	800cb08 <__ieee754_pow>
 800c6d4:	4622      	mov	r2, r4
 800c6d6:	4606      	mov	r6, r0
 800c6d8:	460f      	mov	r7, r1
 800c6da:	462b      	mov	r3, r5
 800c6dc:	4620      	mov	r0, r4
 800c6de:	4629      	mov	r1, r5
 800c6e0:	f7f4 f99e 	bl	8000a20 <__aeabi_dcmpun>
 800c6e4:	bbc8      	cbnz	r0, 800c75a <pow+0x96>
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	4640      	mov	r0, r8
 800c6ec:	4649      	mov	r1, r9
 800c6ee:	f7f4 f965 	bl	80009bc <__aeabi_dcmpeq>
 800c6f2:	b1b8      	cbz	r0, 800c724 <pow+0x60>
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	4629      	mov	r1, r5
 800c6fc:	f7f4 f95e 	bl	80009bc <__aeabi_dcmpeq>
 800c700:	2800      	cmp	r0, #0
 800c702:	d141      	bne.n	800c788 <pow+0xc4>
 800c704:	4620      	mov	r0, r4
 800c706:	4629      	mov	r1, r5
 800c708:	f000 f844 	bl	800c794 <finite>
 800c70c:	b328      	cbz	r0, 800c75a <pow+0x96>
 800c70e:	2200      	movs	r2, #0
 800c710:	2300      	movs	r3, #0
 800c712:	4620      	mov	r0, r4
 800c714:	4629      	mov	r1, r5
 800c716:	f7f4 f95b 	bl	80009d0 <__aeabi_dcmplt>
 800c71a:	b1f0      	cbz	r0, 800c75a <pow+0x96>
 800c71c:	f7fc fc4e 	bl	8008fbc <__errno>
 800c720:	2322      	movs	r3, #34	; 0x22
 800c722:	e019      	b.n	800c758 <pow+0x94>
 800c724:	4630      	mov	r0, r6
 800c726:	4639      	mov	r1, r7
 800c728:	f000 f834 	bl	800c794 <finite>
 800c72c:	b9c8      	cbnz	r0, 800c762 <pow+0x9e>
 800c72e:	4640      	mov	r0, r8
 800c730:	4649      	mov	r1, r9
 800c732:	f000 f82f 	bl	800c794 <finite>
 800c736:	b1a0      	cbz	r0, 800c762 <pow+0x9e>
 800c738:	4620      	mov	r0, r4
 800c73a:	4629      	mov	r1, r5
 800c73c:	f000 f82a 	bl	800c794 <finite>
 800c740:	b178      	cbz	r0, 800c762 <pow+0x9e>
 800c742:	4632      	mov	r2, r6
 800c744:	463b      	mov	r3, r7
 800c746:	4630      	mov	r0, r6
 800c748:	4639      	mov	r1, r7
 800c74a:	f7f4 f969 	bl	8000a20 <__aeabi_dcmpun>
 800c74e:	2800      	cmp	r0, #0
 800c750:	d0e4      	beq.n	800c71c <pow+0x58>
 800c752:	f7fc fc33 	bl	8008fbc <__errno>
 800c756:	2321      	movs	r3, #33	; 0x21
 800c758:	6003      	str	r3, [r0, #0]
 800c75a:	4630      	mov	r0, r6
 800c75c:	4639      	mov	r1, r7
 800c75e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c762:	2200      	movs	r2, #0
 800c764:	2300      	movs	r3, #0
 800c766:	4630      	mov	r0, r6
 800c768:	4639      	mov	r1, r7
 800c76a:	f7f4 f927 	bl	80009bc <__aeabi_dcmpeq>
 800c76e:	2800      	cmp	r0, #0
 800c770:	d0f3      	beq.n	800c75a <pow+0x96>
 800c772:	4640      	mov	r0, r8
 800c774:	4649      	mov	r1, r9
 800c776:	f000 f80d 	bl	800c794 <finite>
 800c77a:	2800      	cmp	r0, #0
 800c77c:	d0ed      	beq.n	800c75a <pow+0x96>
 800c77e:	4620      	mov	r0, r4
 800c780:	4629      	mov	r1, r5
 800c782:	f000 f807 	bl	800c794 <finite>
 800c786:	e7c8      	b.n	800c71a <pow+0x56>
 800c788:	2600      	movs	r6, #0
 800c78a:	4f01      	ldr	r7, [pc, #4]	; (800c790 <pow+0xcc>)
 800c78c:	e7e5      	b.n	800c75a <pow+0x96>
 800c78e:	bf00      	nop
 800c790:	3ff00000 	.word	0x3ff00000

0800c794 <finite>:
 800c794:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800c798:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c79c:	0fc0      	lsrs	r0, r0, #31
 800c79e:	4770      	bx	lr

0800c7a0 <__ieee754_log>:
 800c7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	460b      	mov	r3, r1
 800c7ac:	460d      	mov	r5, r1
 800c7ae:	b087      	sub	sp, #28
 800c7b0:	da24      	bge.n	800c7fc <__ieee754_log+0x5c>
 800c7b2:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800c7b6:	4304      	orrs	r4, r0
 800c7b8:	d108      	bne.n	800c7cc <__ieee754_log+0x2c>
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	2300      	movs	r3, #0
 800c7be:	2000      	movs	r0, #0
 800c7c0:	49cb      	ldr	r1, [pc, #812]	; (800caf0 <__ieee754_log+0x350>)
 800c7c2:	f7f3 ffbd 	bl	8000740 <__aeabi_ddiv>
 800c7c6:	b007      	add	sp, #28
 800c7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7cc:	2900      	cmp	r1, #0
 800c7ce:	da04      	bge.n	800c7da <__ieee754_log+0x3a>
 800c7d0:	f7f3 fcd4 	bl	800017c <__aeabi_dsub>
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	e7f3      	b.n	800c7c2 <__ieee754_log+0x22>
 800c7da:	2200      	movs	r2, #0
 800c7dc:	4bc5      	ldr	r3, [pc, #788]	; (800caf4 <__ieee754_log+0x354>)
 800c7de:	f7f3 fe85 	bl	80004ec <__aeabi_dmul>
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	460d      	mov	r5, r1
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800c7ec:	48c2      	ldr	r0, [pc, #776]	; (800caf8 <__ieee754_log+0x358>)
 800c7ee:	4285      	cmp	r5, r0
 800c7f0:	dd06      	ble.n	800c800 <__ieee754_log+0x60>
 800c7f2:	4610      	mov	r0, r2
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	f7f3 fcc3 	bl	8000180 <__adddf3>
 800c7fa:	e7e4      	b.n	800c7c6 <__ieee754_log+0x26>
 800c7fc:	2100      	movs	r1, #0
 800c7fe:	e7f5      	b.n	800c7ec <__ieee754_log+0x4c>
 800c800:	152c      	asrs	r4, r5, #20
 800c802:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c806:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c80a:	440c      	add	r4, r1
 800c80c:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800c810:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800c814:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
 800c818:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
 800c81c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800c820:	ea41 0305 	orr.w	r3, r1, r5
 800c824:	4610      	mov	r0, r2
 800c826:	4619      	mov	r1, r3
 800c828:	2200      	movs	r2, #0
 800c82a:	4bb4      	ldr	r3, [pc, #720]	; (800cafc <__ieee754_log+0x35c>)
 800c82c:	f7f3 fca6 	bl	800017c <__aeabi_dsub>
 800c830:	1cab      	adds	r3, r5, #2
 800c832:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c836:	2b02      	cmp	r3, #2
 800c838:	4682      	mov	sl, r0
 800c83a:	468b      	mov	fp, r1
 800c83c:	f04f 0200 	mov.w	r2, #0
 800c840:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800c844:	dc53      	bgt.n	800c8ee <__ieee754_log+0x14e>
 800c846:	2300      	movs	r3, #0
 800c848:	f7f4 f8b8 	bl	80009bc <__aeabi_dcmpeq>
 800c84c:	b1d0      	cbz	r0, 800c884 <__ieee754_log+0xe4>
 800c84e:	2c00      	cmp	r4, #0
 800c850:	f000 8122 	beq.w	800ca98 <__ieee754_log+0x2f8>
 800c854:	4620      	mov	r0, r4
 800c856:	f7f3 fddf 	bl	8000418 <__aeabi_i2d>
 800c85a:	a391      	add	r3, pc, #580	; (adr r3, 800caa0 <__ieee754_log+0x300>)
 800c85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c860:	4606      	mov	r6, r0
 800c862:	460f      	mov	r7, r1
 800c864:	f7f3 fe42 	bl	80004ec <__aeabi_dmul>
 800c868:	a38f      	add	r3, pc, #572	; (adr r3, 800caa8 <__ieee754_log+0x308>)
 800c86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86e:	4604      	mov	r4, r0
 800c870:	460d      	mov	r5, r1
 800c872:	4630      	mov	r0, r6
 800c874:	4639      	mov	r1, r7
 800c876:	f7f3 fe39 	bl	80004ec <__aeabi_dmul>
 800c87a:	4602      	mov	r2, r0
 800c87c:	460b      	mov	r3, r1
 800c87e:	4620      	mov	r0, r4
 800c880:	4629      	mov	r1, r5
 800c882:	e7b8      	b.n	800c7f6 <__ieee754_log+0x56>
 800c884:	a38a      	add	r3, pc, #552	; (adr r3, 800cab0 <__ieee754_log+0x310>)
 800c886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88a:	4650      	mov	r0, sl
 800c88c:	4659      	mov	r1, fp
 800c88e:	f7f3 fe2d 	bl	80004ec <__aeabi_dmul>
 800c892:	4602      	mov	r2, r0
 800c894:	460b      	mov	r3, r1
 800c896:	2000      	movs	r0, #0
 800c898:	4999      	ldr	r1, [pc, #612]	; (800cb00 <__ieee754_log+0x360>)
 800c89a:	f7f3 fc6f 	bl	800017c <__aeabi_dsub>
 800c89e:	4652      	mov	r2, sl
 800c8a0:	4606      	mov	r6, r0
 800c8a2:	460f      	mov	r7, r1
 800c8a4:	465b      	mov	r3, fp
 800c8a6:	4650      	mov	r0, sl
 800c8a8:	4659      	mov	r1, fp
 800c8aa:	f7f3 fe1f 	bl	80004ec <__aeabi_dmul>
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	4630      	mov	r0, r6
 800c8b4:	4639      	mov	r1, r7
 800c8b6:	f7f3 fe19 	bl	80004ec <__aeabi_dmul>
 800c8ba:	4606      	mov	r6, r0
 800c8bc:	460f      	mov	r7, r1
 800c8be:	b914      	cbnz	r4, 800c8c6 <__ieee754_log+0x126>
 800c8c0:	4632      	mov	r2, r6
 800c8c2:	463b      	mov	r3, r7
 800c8c4:	e0a2      	b.n	800ca0c <__ieee754_log+0x26c>
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	f7f3 fda6 	bl	8000418 <__aeabi_i2d>
 800c8cc:	a374      	add	r3, pc, #464	; (adr r3, 800caa0 <__ieee754_log+0x300>)
 800c8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d2:	4680      	mov	r8, r0
 800c8d4:	4689      	mov	r9, r1
 800c8d6:	f7f3 fe09 	bl	80004ec <__aeabi_dmul>
 800c8da:	a373      	add	r3, pc, #460	; (adr r3, 800caa8 <__ieee754_log+0x308>)
 800c8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e0:	4604      	mov	r4, r0
 800c8e2:	460d      	mov	r5, r1
 800c8e4:	4640      	mov	r0, r8
 800c8e6:	4649      	mov	r1, r9
 800c8e8:	f7f3 fe00 	bl	80004ec <__aeabi_dmul>
 800c8ec:	e0a7      	b.n	800ca3e <__ieee754_log+0x29e>
 800c8ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c8f2:	f7f3 fc45 	bl	8000180 <__adddf3>
 800c8f6:	4602      	mov	r2, r0
 800c8f8:	460b      	mov	r3, r1
 800c8fa:	4650      	mov	r0, sl
 800c8fc:	4659      	mov	r1, fp
 800c8fe:	f7f3 ff1f 	bl	8000740 <__aeabi_ddiv>
 800c902:	e9cd 0100 	strd	r0, r1, [sp]
 800c906:	4620      	mov	r0, r4
 800c908:	f7f3 fd86 	bl	8000418 <__aeabi_i2d>
 800c90c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c914:	4610      	mov	r0, r2
 800c916:	4619      	mov	r1, r3
 800c918:	f7f3 fde8 	bl	80004ec <__aeabi_dmul>
 800c91c:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800c920:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800c924:	4602      	mov	r2, r0
 800c926:	9305      	str	r3, [sp, #20]
 800c928:	460b      	mov	r3, r1
 800c92a:	4606      	mov	r6, r0
 800c92c:	460f      	mov	r7, r1
 800c92e:	f7f3 fddd 	bl	80004ec <__aeabi_dmul>
 800c932:	a361      	add	r3, pc, #388	; (adr r3, 800cab8 <__ieee754_log+0x318>)
 800c934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c938:	4680      	mov	r8, r0
 800c93a:	4689      	mov	r9, r1
 800c93c:	f7f3 fdd6 	bl	80004ec <__aeabi_dmul>
 800c940:	a35f      	add	r3, pc, #380	; (adr r3, 800cac0 <__ieee754_log+0x320>)
 800c942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c946:	f7f3 fc1b 	bl	8000180 <__adddf3>
 800c94a:	4642      	mov	r2, r8
 800c94c:	464b      	mov	r3, r9
 800c94e:	f7f3 fdcd 	bl	80004ec <__aeabi_dmul>
 800c952:	a35d      	add	r3, pc, #372	; (adr r3, 800cac8 <__ieee754_log+0x328>)
 800c954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c958:	f7f3 fc12 	bl	8000180 <__adddf3>
 800c95c:	4642      	mov	r2, r8
 800c95e:	464b      	mov	r3, r9
 800c960:	f7f3 fdc4 	bl	80004ec <__aeabi_dmul>
 800c964:	a35a      	add	r3, pc, #360	; (adr r3, 800cad0 <__ieee754_log+0x330>)
 800c966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96a:	f7f3 fc09 	bl	8000180 <__adddf3>
 800c96e:	4632      	mov	r2, r6
 800c970:	463b      	mov	r3, r7
 800c972:	f7f3 fdbb 	bl	80004ec <__aeabi_dmul>
 800c976:	a358      	add	r3, pc, #352	; (adr r3, 800cad8 <__ieee754_log+0x338>)
 800c978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97c:	4606      	mov	r6, r0
 800c97e:	460f      	mov	r7, r1
 800c980:	4640      	mov	r0, r8
 800c982:	4649      	mov	r1, r9
 800c984:	f7f3 fdb2 	bl	80004ec <__aeabi_dmul>
 800c988:	a355      	add	r3, pc, #340	; (adr r3, 800cae0 <__ieee754_log+0x340>)
 800c98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98e:	f7f3 fbf7 	bl	8000180 <__adddf3>
 800c992:	4642      	mov	r2, r8
 800c994:	464b      	mov	r3, r9
 800c996:	f7f3 fda9 	bl	80004ec <__aeabi_dmul>
 800c99a:	a353      	add	r3, pc, #332	; (adr r3, 800cae8 <__ieee754_log+0x348>)
 800c99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a0:	f7f3 fbee 	bl	8000180 <__adddf3>
 800c9a4:	4642      	mov	r2, r8
 800c9a6:	464b      	mov	r3, r9
 800c9a8:	f7f3 fda0 	bl	80004ec <__aeabi_dmul>
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	4639      	mov	r1, r7
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	f7f3 fbe4 	bl	8000180 <__adddf3>
 800c9b8:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800c9bc:	9b05      	ldr	r3, [sp, #20]
 800c9be:	3551      	adds	r5, #81	; 0x51
 800c9c0:	431d      	orrs	r5, r3
 800c9c2:	2d00      	cmp	r5, #0
 800c9c4:	4680      	mov	r8, r0
 800c9c6:	4689      	mov	r9, r1
 800c9c8:	dd48      	ble.n	800ca5c <__ieee754_log+0x2bc>
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	4b4c      	ldr	r3, [pc, #304]	; (800cb00 <__ieee754_log+0x360>)
 800c9ce:	4650      	mov	r0, sl
 800c9d0:	4659      	mov	r1, fp
 800c9d2:	f7f3 fd8b 	bl	80004ec <__aeabi_dmul>
 800c9d6:	4652      	mov	r2, sl
 800c9d8:	465b      	mov	r3, fp
 800c9da:	f7f3 fd87 	bl	80004ec <__aeabi_dmul>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	460b      	mov	r3, r1
 800c9e2:	4606      	mov	r6, r0
 800c9e4:	460f      	mov	r7, r1
 800c9e6:	4640      	mov	r0, r8
 800c9e8:	4649      	mov	r1, r9
 800c9ea:	f7f3 fbc9 	bl	8000180 <__adddf3>
 800c9ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9f2:	f7f3 fd7b 	bl	80004ec <__aeabi_dmul>
 800c9f6:	4680      	mov	r8, r0
 800c9f8:	4689      	mov	r9, r1
 800c9fa:	b964      	cbnz	r4, 800ca16 <__ieee754_log+0x276>
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	460b      	mov	r3, r1
 800ca00:	4630      	mov	r0, r6
 800ca02:	4639      	mov	r1, r7
 800ca04:	f7f3 fbba 	bl	800017c <__aeabi_dsub>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	4650      	mov	r0, sl
 800ca0e:	4659      	mov	r1, fp
 800ca10:	f7f3 fbb4 	bl	800017c <__aeabi_dsub>
 800ca14:	e6d7      	b.n	800c7c6 <__ieee754_log+0x26>
 800ca16:	a322      	add	r3, pc, #136	; (adr r3, 800caa0 <__ieee754_log+0x300>)
 800ca18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca20:	f7f3 fd64 	bl	80004ec <__aeabi_dmul>
 800ca24:	a320      	add	r3, pc, #128	; (adr r3, 800caa8 <__ieee754_log+0x308>)
 800ca26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca2a:	4604      	mov	r4, r0
 800ca2c:	460d      	mov	r5, r1
 800ca2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca32:	f7f3 fd5b 	bl	80004ec <__aeabi_dmul>
 800ca36:	4642      	mov	r2, r8
 800ca38:	464b      	mov	r3, r9
 800ca3a:	f7f3 fba1 	bl	8000180 <__adddf3>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	460b      	mov	r3, r1
 800ca42:	4630      	mov	r0, r6
 800ca44:	4639      	mov	r1, r7
 800ca46:	f7f3 fb99 	bl	800017c <__aeabi_dsub>
 800ca4a:	4652      	mov	r2, sl
 800ca4c:	465b      	mov	r3, fp
 800ca4e:	f7f3 fb95 	bl	800017c <__aeabi_dsub>
 800ca52:	4602      	mov	r2, r0
 800ca54:	460b      	mov	r3, r1
 800ca56:	4620      	mov	r0, r4
 800ca58:	4629      	mov	r1, r5
 800ca5a:	e7d9      	b.n	800ca10 <__ieee754_log+0x270>
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	460b      	mov	r3, r1
 800ca60:	4650      	mov	r0, sl
 800ca62:	4659      	mov	r1, fp
 800ca64:	f7f3 fb8a 	bl	800017c <__aeabi_dsub>
 800ca68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca6c:	f7f3 fd3e 	bl	80004ec <__aeabi_dmul>
 800ca70:	4606      	mov	r6, r0
 800ca72:	460f      	mov	r7, r1
 800ca74:	2c00      	cmp	r4, #0
 800ca76:	f43f af23 	beq.w	800c8c0 <__ieee754_log+0x120>
 800ca7a:	a309      	add	r3, pc, #36	; (adr r3, 800caa0 <__ieee754_log+0x300>)
 800ca7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca84:	f7f3 fd32 	bl	80004ec <__aeabi_dmul>
 800ca88:	a307      	add	r3, pc, #28	; (adr r3, 800caa8 <__ieee754_log+0x308>)
 800ca8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8e:	4604      	mov	r4, r0
 800ca90:	460d      	mov	r5, r1
 800ca92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca96:	e727      	b.n	800c8e8 <__ieee754_log+0x148>
 800ca98:	2000      	movs	r0, #0
 800ca9a:	2100      	movs	r1, #0
 800ca9c:	e693      	b.n	800c7c6 <__ieee754_log+0x26>
 800ca9e:	bf00      	nop
 800caa0:	fee00000 	.word	0xfee00000
 800caa4:	3fe62e42 	.word	0x3fe62e42
 800caa8:	35793c76 	.word	0x35793c76
 800caac:	3dea39ef 	.word	0x3dea39ef
 800cab0:	55555555 	.word	0x55555555
 800cab4:	3fd55555 	.word	0x3fd55555
 800cab8:	df3e5244 	.word	0xdf3e5244
 800cabc:	3fc2f112 	.word	0x3fc2f112
 800cac0:	96cb03de 	.word	0x96cb03de
 800cac4:	3fc74664 	.word	0x3fc74664
 800cac8:	94229359 	.word	0x94229359
 800cacc:	3fd24924 	.word	0x3fd24924
 800cad0:	55555593 	.word	0x55555593
 800cad4:	3fe55555 	.word	0x3fe55555
 800cad8:	d078c69f 	.word	0xd078c69f
 800cadc:	3fc39a09 	.word	0x3fc39a09
 800cae0:	1d8e78af 	.word	0x1d8e78af
 800cae4:	3fcc71c5 	.word	0x3fcc71c5
 800cae8:	9997fa04 	.word	0x9997fa04
 800caec:	3fd99999 	.word	0x3fd99999
 800caf0:	c3500000 	.word	0xc3500000
 800caf4:	43500000 	.word	0x43500000
 800caf8:	7fefffff 	.word	0x7fefffff
 800cafc:	3ff00000 	.word	0x3ff00000
 800cb00:	3fe00000 	.word	0x3fe00000
 800cb04:	00000000 	.word	0x00000000

0800cb08 <__ieee754_pow>:
 800cb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb0c:	b093      	sub	sp, #76	; 0x4c
 800cb0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cb12:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800cb16:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800cb1a:	4689      	mov	r9, r1
 800cb1c:	ea56 0102 	orrs.w	r1, r6, r2
 800cb20:	4680      	mov	r8, r0
 800cb22:	d111      	bne.n	800cb48 <__ieee754_pow+0x40>
 800cb24:	1803      	adds	r3, r0, r0
 800cb26:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800cb2a:	4152      	adcs	r2, r2
 800cb2c:	4299      	cmp	r1, r3
 800cb2e:	4b82      	ldr	r3, [pc, #520]	; (800cd38 <__ieee754_pow+0x230>)
 800cb30:	4193      	sbcs	r3, r2
 800cb32:	f080 84ba 	bcs.w	800d4aa <__ieee754_pow+0x9a2>
 800cb36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb3a:	4640      	mov	r0, r8
 800cb3c:	4649      	mov	r1, r9
 800cb3e:	f7f3 fb1f 	bl	8000180 <__adddf3>
 800cb42:	4683      	mov	fp, r0
 800cb44:	468c      	mov	ip, r1
 800cb46:	e06f      	b.n	800cc28 <__ieee754_pow+0x120>
 800cb48:	4b7c      	ldr	r3, [pc, #496]	; (800cd3c <__ieee754_pow+0x234>)
 800cb4a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800cb4e:	429c      	cmp	r4, r3
 800cb50:	464d      	mov	r5, r9
 800cb52:	4682      	mov	sl, r0
 800cb54:	dc06      	bgt.n	800cb64 <__ieee754_pow+0x5c>
 800cb56:	d101      	bne.n	800cb5c <__ieee754_pow+0x54>
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	d1ec      	bne.n	800cb36 <__ieee754_pow+0x2e>
 800cb5c:	429e      	cmp	r6, r3
 800cb5e:	dc01      	bgt.n	800cb64 <__ieee754_pow+0x5c>
 800cb60:	d10f      	bne.n	800cb82 <__ieee754_pow+0x7a>
 800cb62:	b172      	cbz	r2, 800cb82 <__ieee754_pow+0x7a>
 800cb64:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800cb68:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800cb6c:	ea55 050a 	orrs.w	r5, r5, sl
 800cb70:	d1e1      	bne.n	800cb36 <__ieee754_pow+0x2e>
 800cb72:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cb76:	18db      	adds	r3, r3, r3
 800cb78:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800cb7c:	4152      	adcs	r2, r2
 800cb7e:	429d      	cmp	r5, r3
 800cb80:	e7d5      	b.n	800cb2e <__ieee754_pow+0x26>
 800cb82:	2d00      	cmp	r5, #0
 800cb84:	da39      	bge.n	800cbfa <__ieee754_pow+0xf2>
 800cb86:	4b6e      	ldr	r3, [pc, #440]	; (800cd40 <__ieee754_pow+0x238>)
 800cb88:	429e      	cmp	r6, r3
 800cb8a:	dc52      	bgt.n	800cc32 <__ieee754_pow+0x12a>
 800cb8c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cb90:	429e      	cmp	r6, r3
 800cb92:	f340 849d 	ble.w	800d4d0 <__ieee754_pow+0x9c8>
 800cb96:	1533      	asrs	r3, r6, #20
 800cb98:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cb9c:	2b14      	cmp	r3, #20
 800cb9e:	dd0f      	ble.n	800cbc0 <__ieee754_pow+0xb8>
 800cba0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cba4:	fa22 f103 	lsr.w	r1, r2, r3
 800cba8:	fa01 f303 	lsl.w	r3, r1, r3
 800cbac:	4293      	cmp	r3, r2
 800cbae:	f040 848f 	bne.w	800d4d0 <__ieee754_pow+0x9c8>
 800cbb2:	f001 0101 	and.w	r1, r1, #1
 800cbb6:	f1c1 0302 	rsb	r3, r1, #2
 800cbba:	9300      	str	r3, [sp, #0]
 800cbbc:	b182      	cbz	r2, 800cbe0 <__ieee754_pow+0xd8>
 800cbbe:	e05d      	b.n	800cc7c <__ieee754_pow+0x174>
 800cbc0:	2a00      	cmp	r2, #0
 800cbc2:	d159      	bne.n	800cc78 <__ieee754_pow+0x170>
 800cbc4:	f1c3 0314 	rsb	r3, r3, #20
 800cbc8:	fa46 f103 	asr.w	r1, r6, r3
 800cbcc:	fa01 f303 	lsl.w	r3, r1, r3
 800cbd0:	42b3      	cmp	r3, r6
 800cbd2:	f040 847a 	bne.w	800d4ca <__ieee754_pow+0x9c2>
 800cbd6:	f001 0101 	and.w	r1, r1, #1
 800cbda:	f1c1 0302 	rsb	r3, r1, #2
 800cbde:	9300      	str	r3, [sp, #0]
 800cbe0:	4b58      	ldr	r3, [pc, #352]	; (800cd44 <__ieee754_pow+0x23c>)
 800cbe2:	429e      	cmp	r6, r3
 800cbe4:	d132      	bne.n	800cc4c <__ieee754_pow+0x144>
 800cbe6:	2f00      	cmp	r7, #0
 800cbe8:	f280 846b 	bge.w	800d4c2 <__ieee754_pow+0x9ba>
 800cbec:	4642      	mov	r2, r8
 800cbee:	464b      	mov	r3, r9
 800cbf0:	2000      	movs	r0, #0
 800cbf2:	4954      	ldr	r1, [pc, #336]	; (800cd44 <__ieee754_pow+0x23c>)
 800cbf4:	f7f3 fda4 	bl	8000740 <__aeabi_ddiv>
 800cbf8:	e7a3      	b.n	800cb42 <__ieee754_pow+0x3a>
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	9300      	str	r3, [sp, #0]
 800cbfe:	2a00      	cmp	r2, #0
 800cc00:	d13c      	bne.n	800cc7c <__ieee754_pow+0x174>
 800cc02:	4b4e      	ldr	r3, [pc, #312]	; (800cd3c <__ieee754_pow+0x234>)
 800cc04:	429e      	cmp	r6, r3
 800cc06:	d1eb      	bne.n	800cbe0 <__ieee754_pow+0xd8>
 800cc08:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cc0c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cc10:	ea53 030a 	orrs.w	r3, r3, sl
 800cc14:	f000 8449 	beq.w	800d4aa <__ieee754_pow+0x9a2>
 800cc18:	4b4b      	ldr	r3, [pc, #300]	; (800cd48 <__ieee754_pow+0x240>)
 800cc1a:	429c      	cmp	r4, r3
 800cc1c:	dd0b      	ble.n	800cc36 <__ieee754_pow+0x12e>
 800cc1e:	2f00      	cmp	r7, #0
 800cc20:	f2c0 8449 	blt.w	800d4b6 <__ieee754_pow+0x9ae>
 800cc24:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800cc28:	4658      	mov	r0, fp
 800cc2a:	4661      	mov	r1, ip
 800cc2c:	b013      	add	sp, #76	; 0x4c
 800cc2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc32:	2302      	movs	r3, #2
 800cc34:	e7e2      	b.n	800cbfc <__ieee754_pow+0xf4>
 800cc36:	2f00      	cmp	r7, #0
 800cc38:	f04f 0b00 	mov.w	fp, #0
 800cc3c:	f04f 0c00 	mov.w	ip, #0
 800cc40:	daf2      	bge.n	800cc28 <__ieee754_pow+0x120>
 800cc42:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800cc46:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800cc4a:	e7ed      	b.n	800cc28 <__ieee754_pow+0x120>
 800cc4c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800cc50:	d106      	bne.n	800cc60 <__ieee754_pow+0x158>
 800cc52:	4642      	mov	r2, r8
 800cc54:	464b      	mov	r3, r9
 800cc56:	4640      	mov	r0, r8
 800cc58:	4649      	mov	r1, r9
 800cc5a:	f7f3 fc47 	bl	80004ec <__aeabi_dmul>
 800cc5e:	e770      	b.n	800cb42 <__ieee754_pow+0x3a>
 800cc60:	4b3a      	ldr	r3, [pc, #232]	; (800cd4c <__ieee754_pow+0x244>)
 800cc62:	429f      	cmp	r7, r3
 800cc64:	d10a      	bne.n	800cc7c <__ieee754_pow+0x174>
 800cc66:	2d00      	cmp	r5, #0
 800cc68:	db08      	blt.n	800cc7c <__ieee754_pow+0x174>
 800cc6a:	4640      	mov	r0, r8
 800cc6c:	4649      	mov	r1, r9
 800cc6e:	b013      	add	sp, #76	; 0x4c
 800cc70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc74:	f000 bd0a 	b.w	800d68c <__ieee754_sqrt>
 800cc78:	2300      	movs	r3, #0
 800cc7a:	9300      	str	r3, [sp, #0]
 800cc7c:	4640      	mov	r0, r8
 800cc7e:	4649      	mov	r1, r9
 800cc80:	f000 fc58 	bl	800d534 <fabs>
 800cc84:	4683      	mov	fp, r0
 800cc86:	468c      	mov	ip, r1
 800cc88:	f1ba 0f00 	cmp.w	sl, #0
 800cc8c:	d128      	bne.n	800cce0 <__ieee754_pow+0x1d8>
 800cc8e:	b124      	cbz	r4, 800cc9a <__ieee754_pow+0x192>
 800cc90:	4b2c      	ldr	r3, [pc, #176]	; (800cd44 <__ieee754_pow+0x23c>)
 800cc92:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d122      	bne.n	800cce0 <__ieee754_pow+0x1d8>
 800cc9a:	2f00      	cmp	r7, #0
 800cc9c:	da07      	bge.n	800ccae <__ieee754_pow+0x1a6>
 800cc9e:	465a      	mov	r2, fp
 800cca0:	4663      	mov	r3, ip
 800cca2:	2000      	movs	r0, #0
 800cca4:	4927      	ldr	r1, [pc, #156]	; (800cd44 <__ieee754_pow+0x23c>)
 800cca6:	f7f3 fd4b 	bl	8000740 <__aeabi_ddiv>
 800ccaa:	4683      	mov	fp, r0
 800ccac:	468c      	mov	ip, r1
 800ccae:	2d00      	cmp	r5, #0
 800ccb0:	daba      	bge.n	800cc28 <__ieee754_pow+0x120>
 800ccb2:	9b00      	ldr	r3, [sp, #0]
 800ccb4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ccb8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ccbc:	431c      	orrs	r4, r3
 800ccbe:	d108      	bne.n	800ccd2 <__ieee754_pow+0x1ca>
 800ccc0:	465a      	mov	r2, fp
 800ccc2:	4663      	mov	r3, ip
 800ccc4:	4658      	mov	r0, fp
 800ccc6:	4661      	mov	r1, ip
 800ccc8:	f7f3 fa58 	bl	800017c <__aeabi_dsub>
 800cccc:	4602      	mov	r2, r0
 800ccce:	460b      	mov	r3, r1
 800ccd0:	e790      	b.n	800cbf4 <__ieee754_pow+0xec>
 800ccd2:	9b00      	ldr	r3, [sp, #0]
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d1a7      	bne.n	800cc28 <__ieee754_pow+0x120>
 800ccd8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800ccdc:	469c      	mov	ip, r3
 800ccde:	e7a3      	b.n	800cc28 <__ieee754_pow+0x120>
 800cce0:	0feb      	lsrs	r3, r5, #31
 800cce2:	3b01      	subs	r3, #1
 800cce4:	930c      	str	r3, [sp, #48]	; 0x30
 800cce6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cce8:	9b00      	ldr	r3, [sp, #0]
 800ccea:	4313      	orrs	r3, r2
 800ccec:	d104      	bne.n	800ccf8 <__ieee754_pow+0x1f0>
 800ccee:	4642      	mov	r2, r8
 800ccf0:	464b      	mov	r3, r9
 800ccf2:	4640      	mov	r0, r8
 800ccf4:	4649      	mov	r1, r9
 800ccf6:	e7e7      	b.n	800ccc8 <__ieee754_pow+0x1c0>
 800ccf8:	4b15      	ldr	r3, [pc, #84]	; (800cd50 <__ieee754_pow+0x248>)
 800ccfa:	429e      	cmp	r6, r3
 800ccfc:	f340 80f6 	ble.w	800ceec <__ieee754_pow+0x3e4>
 800cd00:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800cd04:	429e      	cmp	r6, r3
 800cd06:	4b10      	ldr	r3, [pc, #64]	; (800cd48 <__ieee754_pow+0x240>)
 800cd08:	dd09      	ble.n	800cd1e <__ieee754_pow+0x216>
 800cd0a:	429c      	cmp	r4, r3
 800cd0c:	dc0c      	bgt.n	800cd28 <__ieee754_pow+0x220>
 800cd0e:	2f00      	cmp	r7, #0
 800cd10:	da0c      	bge.n	800cd2c <__ieee754_pow+0x224>
 800cd12:	2000      	movs	r0, #0
 800cd14:	b013      	add	sp, #76	; 0x4c
 800cd16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1a:	f000 bcb2 	b.w	800d682 <__math_oflow>
 800cd1e:	429c      	cmp	r4, r3
 800cd20:	dbf5      	blt.n	800cd0e <__ieee754_pow+0x206>
 800cd22:	4b08      	ldr	r3, [pc, #32]	; (800cd44 <__ieee754_pow+0x23c>)
 800cd24:	429c      	cmp	r4, r3
 800cd26:	dd15      	ble.n	800cd54 <__ieee754_pow+0x24c>
 800cd28:	2f00      	cmp	r7, #0
 800cd2a:	dcf2      	bgt.n	800cd12 <__ieee754_pow+0x20a>
 800cd2c:	2000      	movs	r0, #0
 800cd2e:	b013      	add	sp, #76	; 0x4c
 800cd30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd34:	f000 bca0 	b.w	800d678 <__math_uflow>
 800cd38:	fff00000 	.word	0xfff00000
 800cd3c:	7ff00000 	.word	0x7ff00000
 800cd40:	433fffff 	.word	0x433fffff
 800cd44:	3ff00000 	.word	0x3ff00000
 800cd48:	3fefffff 	.word	0x3fefffff
 800cd4c:	3fe00000 	.word	0x3fe00000
 800cd50:	41e00000 	.word	0x41e00000
 800cd54:	4661      	mov	r1, ip
 800cd56:	2200      	movs	r2, #0
 800cd58:	4658      	mov	r0, fp
 800cd5a:	4b5f      	ldr	r3, [pc, #380]	; (800ced8 <__ieee754_pow+0x3d0>)
 800cd5c:	f7f3 fa0e 	bl	800017c <__aeabi_dsub>
 800cd60:	a355      	add	r3, pc, #340	; (adr r3, 800ceb8 <__ieee754_pow+0x3b0>)
 800cd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd66:	4604      	mov	r4, r0
 800cd68:	460d      	mov	r5, r1
 800cd6a:	f7f3 fbbf 	bl	80004ec <__aeabi_dmul>
 800cd6e:	a354      	add	r3, pc, #336	; (adr r3, 800cec0 <__ieee754_pow+0x3b8>)
 800cd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd74:	4606      	mov	r6, r0
 800cd76:	460f      	mov	r7, r1
 800cd78:	4620      	mov	r0, r4
 800cd7a:	4629      	mov	r1, r5
 800cd7c:	f7f3 fbb6 	bl	80004ec <__aeabi_dmul>
 800cd80:	2200      	movs	r2, #0
 800cd82:	4682      	mov	sl, r0
 800cd84:	468b      	mov	fp, r1
 800cd86:	4620      	mov	r0, r4
 800cd88:	4629      	mov	r1, r5
 800cd8a:	4b54      	ldr	r3, [pc, #336]	; (800cedc <__ieee754_pow+0x3d4>)
 800cd8c:	f7f3 fbae 	bl	80004ec <__aeabi_dmul>
 800cd90:	4602      	mov	r2, r0
 800cd92:	460b      	mov	r3, r1
 800cd94:	a14c      	add	r1, pc, #304	; (adr r1, 800cec8 <__ieee754_pow+0x3c0>)
 800cd96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd9a:	f7f3 f9ef 	bl	800017c <__aeabi_dsub>
 800cd9e:	4622      	mov	r2, r4
 800cda0:	462b      	mov	r3, r5
 800cda2:	f7f3 fba3 	bl	80004ec <__aeabi_dmul>
 800cda6:	4602      	mov	r2, r0
 800cda8:	460b      	mov	r3, r1
 800cdaa:	2000      	movs	r0, #0
 800cdac:	494c      	ldr	r1, [pc, #304]	; (800cee0 <__ieee754_pow+0x3d8>)
 800cdae:	f7f3 f9e5 	bl	800017c <__aeabi_dsub>
 800cdb2:	4622      	mov	r2, r4
 800cdb4:	462b      	mov	r3, r5
 800cdb6:	4680      	mov	r8, r0
 800cdb8:	4689      	mov	r9, r1
 800cdba:	4620      	mov	r0, r4
 800cdbc:	4629      	mov	r1, r5
 800cdbe:	f7f3 fb95 	bl	80004ec <__aeabi_dmul>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	4640      	mov	r0, r8
 800cdc8:	4649      	mov	r1, r9
 800cdca:	f7f3 fb8f 	bl	80004ec <__aeabi_dmul>
 800cdce:	a340      	add	r3, pc, #256	; (adr r3, 800ced0 <__ieee754_pow+0x3c8>)
 800cdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd4:	f7f3 fb8a 	bl	80004ec <__aeabi_dmul>
 800cdd8:	4602      	mov	r2, r0
 800cdda:	460b      	mov	r3, r1
 800cddc:	4650      	mov	r0, sl
 800cdde:	4659      	mov	r1, fp
 800cde0:	f7f3 f9cc 	bl	800017c <__aeabi_dsub>
 800cde4:	4602      	mov	r2, r0
 800cde6:	460b      	mov	r3, r1
 800cde8:	4604      	mov	r4, r0
 800cdea:	460d      	mov	r5, r1
 800cdec:	4630      	mov	r0, r6
 800cdee:	4639      	mov	r1, r7
 800cdf0:	f7f3 f9c6 	bl	8000180 <__adddf3>
 800cdf4:	2000      	movs	r0, #0
 800cdf6:	4632      	mov	r2, r6
 800cdf8:	463b      	mov	r3, r7
 800cdfa:	4682      	mov	sl, r0
 800cdfc:	468b      	mov	fp, r1
 800cdfe:	f7f3 f9bd 	bl	800017c <__aeabi_dsub>
 800ce02:	4602      	mov	r2, r0
 800ce04:	460b      	mov	r3, r1
 800ce06:	4620      	mov	r0, r4
 800ce08:	4629      	mov	r1, r5
 800ce0a:	f7f3 f9b7 	bl	800017c <__aeabi_dsub>
 800ce0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ce12:	9b00      	ldr	r3, [sp, #0]
 800ce14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce16:	3b01      	subs	r3, #1
 800ce18:	4313      	orrs	r3, r2
 800ce1a:	f04f 0600 	mov.w	r6, #0
 800ce1e:	f04f 0200 	mov.w	r2, #0
 800ce22:	bf0c      	ite	eq
 800ce24:	4b2f      	ldreq	r3, [pc, #188]	; (800cee4 <__ieee754_pow+0x3dc>)
 800ce26:	4b2c      	ldrne	r3, [pc, #176]	; (800ced8 <__ieee754_pow+0x3d0>)
 800ce28:	4604      	mov	r4, r0
 800ce2a:	460d      	mov	r5, r1
 800ce2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce30:	e9cd 2300 	strd	r2, r3, [sp]
 800ce34:	4632      	mov	r2, r6
 800ce36:	463b      	mov	r3, r7
 800ce38:	f7f3 f9a0 	bl	800017c <__aeabi_dsub>
 800ce3c:	4652      	mov	r2, sl
 800ce3e:	465b      	mov	r3, fp
 800ce40:	f7f3 fb54 	bl	80004ec <__aeabi_dmul>
 800ce44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce48:	4680      	mov	r8, r0
 800ce4a:	4689      	mov	r9, r1
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	4629      	mov	r1, r5
 800ce50:	f7f3 fb4c 	bl	80004ec <__aeabi_dmul>
 800ce54:	4602      	mov	r2, r0
 800ce56:	460b      	mov	r3, r1
 800ce58:	4640      	mov	r0, r8
 800ce5a:	4649      	mov	r1, r9
 800ce5c:	f7f3 f990 	bl	8000180 <__adddf3>
 800ce60:	4632      	mov	r2, r6
 800ce62:	463b      	mov	r3, r7
 800ce64:	4680      	mov	r8, r0
 800ce66:	4689      	mov	r9, r1
 800ce68:	4650      	mov	r0, sl
 800ce6a:	4659      	mov	r1, fp
 800ce6c:	f7f3 fb3e 	bl	80004ec <__aeabi_dmul>
 800ce70:	4604      	mov	r4, r0
 800ce72:	460d      	mov	r5, r1
 800ce74:	460b      	mov	r3, r1
 800ce76:	4602      	mov	r2, r0
 800ce78:	4649      	mov	r1, r9
 800ce7a:	4640      	mov	r0, r8
 800ce7c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ce80:	f7f3 f97e 	bl	8000180 <__adddf3>
 800ce84:	4b18      	ldr	r3, [pc, #96]	; (800cee8 <__ieee754_pow+0x3e0>)
 800ce86:	4682      	mov	sl, r0
 800ce88:	4299      	cmp	r1, r3
 800ce8a:	460f      	mov	r7, r1
 800ce8c:	460e      	mov	r6, r1
 800ce8e:	f340 82e7 	ble.w	800d460 <__ieee754_pow+0x958>
 800ce92:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ce96:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ce9a:	4303      	orrs	r3, r0
 800ce9c:	f000 81e2 	beq.w	800d264 <__ieee754_pow+0x75c>
 800cea0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cea4:	2200      	movs	r2, #0
 800cea6:	2300      	movs	r3, #0
 800cea8:	f7f3 fd92 	bl	80009d0 <__aeabi_dcmplt>
 800ceac:	3800      	subs	r0, #0
 800ceae:	bf18      	it	ne
 800ceb0:	2001      	movne	r0, #1
 800ceb2:	e72f      	b.n	800cd14 <__ieee754_pow+0x20c>
 800ceb4:	f3af 8000 	nop.w
 800ceb8:	60000000 	.word	0x60000000
 800cebc:	3ff71547 	.word	0x3ff71547
 800cec0:	f85ddf44 	.word	0xf85ddf44
 800cec4:	3e54ae0b 	.word	0x3e54ae0b
 800cec8:	55555555 	.word	0x55555555
 800cecc:	3fd55555 	.word	0x3fd55555
 800ced0:	652b82fe 	.word	0x652b82fe
 800ced4:	3ff71547 	.word	0x3ff71547
 800ced8:	3ff00000 	.word	0x3ff00000
 800cedc:	3fd00000 	.word	0x3fd00000
 800cee0:	3fe00000 	.word	0x3fe00000
 800cee4:	bff00000 	.word	0xbff00000
 800cee8:	408fffff 	.word	0x408fffff
 800ceec:	4bd4      	ldr	r3, [pc, #848]	; (800d240 <__ieee754_pow+0x738>)
 800ceee:	2200      	movs	r2, #0
 800cef0:	402b      	ands	r3, r5
 800cef2:	b943      	cbnz	r3, 800cf06 <__ieee754_pow+0x3fe>
 800cef4:	4658      	mov	r0, fp
 800cef6:	4661      	mov	r1, ip
 800cef8:	4bd2      	ldr	r3, [pc, #840]	; (800d244 <__ieee754_pow+0x73c>)
 800cefa:	f7f3 faf7 	bl	80004ec <__aeabi_dmul>
 800cefe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800cf02:	4683      	mov	fp, r0
 800cf04:	460c      	mov	r4, r1
 800cf06:	1523      	asrs	r3, r4, #20
 800cf08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cf0c:	4413      	add	r3, r2
 800cf0e:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf10:	4bcd      	ldr	r3, [pc, #820]	; (800d248 <__ieee754_pow+0x740>)
 800cf12:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cf16:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800cf1a:	429c      	cmp	r4, r3
 800cf1c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cf20:	dd08      	ble.n	800cf34 <__ieee754_pow+0x42c>
 800cf22:	4bca      	ldr	r3, [pc, #808]	; (800d24c <__ieee754_pow+0x744>)
 800cf24:	429c      	cmp	r4, r3
 800cf26:	f340 8164 	ble.w	800d1f2 <__ieee754_pow+0x6ea>
 800cf2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf2c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800cf30:	3301      	adds	r3, #1
 800cf32:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf34:	2600      	movs	r6, #0
 800cf36:	00f3      	lsls	r3, r6, #3
 800cf38:	930d      	str	r3, [sp, #52]	; 0x34
 800cf3a:	4bc5      	ldr	r3, [pc, #788]	; (800d250 <__ieee754_pow+0x748>)
 800cf3c:	4658      	mov	r0, fp
 800cf3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cf42:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cf46:	4629      	mov	r1, r5
 800cf48:	461a      	mov	r2, r3
 800cf4a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800cf4e:	4623      	mov	r3, r4
 800cf50:	f7f3 f914 	bl	800017c <__aeabi_dsub>
 800cf54:	46da      	mov	sl, fp
 800cf56:	462b      	mov	r3, r5
 800cf58:	4652      	mov	r2, sl
 800cf5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800cf5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cf62:	f7f3 f90d 	bl	8000180 <__adddf3>
 800cf66:	4602      	mov	r2, r0
 800cf68:	460b      	mov	r3, r1
 800cf6a:	2000      	movs	r0, #0
 800cf6c:	49b9      	ldr	r1, [pc, #740]	; (800d254 <__ieee754_pow+0x74c>)
 800cf6e:	f7f3 fbe7 	bl	8000740 <__aeabi_ddiv>
 800cf72:	4602      	mov	r2, r0
 800cf74:	460b      	mov	r3, r1
 800cf76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cf7a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cf7e:	f7f3 fab5 	bl	80004ec <__aeabi_dmul>
 800cf82:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cf86:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800cf8a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cf8e:	2300      	movs	r3, #0
 800cf90:	2200      	movs	r2, #0
 800cf92:	46ab      	mov	fp, r5
 800cf94:	106d      	asrs	r5, r5, #1
 800cf96:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800cf9a:	9304      	str	r3, [sp, #16]
 800cf9c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800cfa0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800cfa4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800cfa8:	4640      	mov	r0, r8
 800cfaa:	4649      	mov	r1, r9
 800cfac:	4614      	mov	r4, r2
 800cfae:	461d      	mov	r5, r3
 800cfb0:	f7f3 fa9c 	bl	80004ec <__aeabi_dmul>
 800cfb4:	4602      	mov	r2, r0
 800cfb6:	460b      	mov	r3, r1
 800cfb8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cfbc:	f7f3 f8de 	bl	800017c <__aeabi_dsub>
 800cfc0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cfc4:	4606      	mov	r6, r0
 800cfc6:	460f      	mov	r7, r1
 800cfc8:	4620      	mov	r0, r4
 800cfca:	4629      	mov	r1, r5
 800cfcc:	f7f3 f8d6 	bl	800017c <__aeabi_dsub>
 800cfd0:	4602      	mov	r2, r0
 800cfd2:	460b      	mov	r3, r1
 800cfd4:	4650      	mov	r0, sl
 800cfd6:	4659      	mov	r1, fp
 800cfd8:	f7f3 f8d0 	bl	800017c <__aeabi_dsub>
 800cfdc:	4642      	mov	r2, r8
 800cfde:	464b      	mov	r3, r9
 800cfe0:	f7f3 fa84 	bl	80004ec <__aeabi_dmul>
 800cfe4:	4602      	mov	r2, r0
 800cfe6:	460b      	mov	r3, r1
 800cfe8:	4630      	mov	r0, r6
 800cfea:	4639      	mov	r1, r7
 800cfec:	f7f3 f8c6 	bl	800017c <__aeabi_dsub>
 800cff0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cff4:	f7f3 fa7a 	bl	80004ec <__aeabi_dmul>
 800cff8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cffc:	4682      	mov	sl, r0
 800cffe:	468b      	mov	fp, r1
 800d000:	4610      	mov	r0, r2
 800d002:	4619      	mov	r1, r3
 800d004:	f7f3 fa72 	bl	80004ec <__aeabi_dmul>
 800d008:	a37b      	add	r3, pc, #492	; (adr r3, 800d1f8 <__ieee754_pow+0x6f0>)
 800d00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00e:	4604      	mov	r4, r0
 800d010:	460d      	mov	r5, r1
 800d012:	f7f3 fa6b 	bl	80004ec <__aeabi_dmul>
 800d016:	a37a      	add	r3, pc, #488	; (adr r3, 800d200 <__ieee754_pow+0x6f8>)
 800d018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d01c:	f7f3 f8b0 	bl	8000180 <__adddf3>
 800d020:	4622      	mov	r2, r4
 800d022:	462b      	mov	r3, r5
 800d024:	f7f3 fa62 	bl	80004ec <__aeabi_dmul>
 800d028:	a377      	add	r3, pc, #476	; (adr r3, 800d208 <__ieee754_pow+0x700>)
 800d02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d02e:	f7f3 f8a7 	bl	8000180 <__adddf3>
 800d032:	4622      	mov	r2, r4
 800d034:	462b      	mov	r3, r5
 800d036:	f7f3 fa59 	bl	80004ec <__aeabi_dmul>
 800d03a:	a375      	add	r3, pc, #468	; (adr r3, 800d210 <__ieee754_pow+0x708>)
 800d03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d040:	f7f3 f89e 	bl	8000180 <__adddf3>
 800d044:	4622      	mov	r2, r4
 800d046:	462b      	mov	r3, r5
 800d048:	f7f3 fa50 	bl	80004ec <__aeabi_dmul>
 800d04c:	a372      	add	r3, pc, #456	; (adr r3, 800d218 <__ieee754_pow+0x710>)
 800d04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d052:	f7f3 f895 	bl	8000180 <__adddf3>
 800d056:	4622      	mov	r2, r4
 800d058:	462b      	mov	r3, r5
 800d05a:	f7f3 fa47 	bl	80004ec <__aeabi_dmul>
 800d05e:	a370      	add	r3, pc, #448	; (adr r3, 800d220 <__ieee754_pow+0x718>)
 800d060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d064:	f7f3 f88c 	bl	8000180 <__adddf3>
 800d068:	4622      	mov	r2, r4
 800d06a:	4606      	mov	r6, r0
 800d06c:	460f      	mov	r7, r1
 800d06e:	462b      	mov	r3, r5
 800d070:	4620      	mov	r0, r4
 800d072:	4629      	mov	r1, r5
 800d074:	f7f3 fa3a 	bl	80004ec <__aeabi_dmul>
 800d078:	4602      	mov	r2, r0
 800d07a:	460b      	mov	r3, r1
 800d07c:	4630      	mov	r0, r6
 800d07e:	4639      	mov	r1, r7
 800d080:	f7f3 fa34 	bl	80004ec <__aeabi_dmul>
 800d084:	4604      	mov	r4, r0
 800d086:	460d      	mov	r5, r1
 800d088:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d08c:	4642      	mov	r2, r8
 800d08e:	464b      	mov	r3, r9
 800d090:	f7f3 f876 	bl	8000180 <__adddf3>
 800d094:	4652      	mov	r2, sl
 800d096:	465b      	mov	r3, fp
 800d098:	f7f3 fa28 	bl	80004ec <__aeabi_dmul>
 800d09c:	4622      	mov	r2, r4
 800d09e:	462b      	mov	r3, r5
 800d0a0:	f7f3 f86e 	bl	8000180 <__adddf3>
 800d0a4:	4642      	mov	r2, r8
 800d0a6:	4606      	mov	r6, r0
 800d0a8:	460f      	mov	r7, r1
 800d0aa:	464b      	mov	r3, r9
 800d0ac:	4640      	mov	r0, r8
 800d0ae:	4649      	mov	r1, r9
 800d0b0:	f7f3 fa1c 	bl	80004ec <__aeabi_dmul>
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	460b      	mov	r3, r1
 800d0b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	4b66      	ldr	r3, [pc, #408]	; (800d258 <__ieee754_pow+0x750>)
 800d0c0:	f7f3 f85e 	bl	8000180 <__adddf3>
 800d0c4:	4632      	mov	r2, r6
 800d0c6:	463b      	mov	r3, r7
 800d0c8:	f7f3 f85a 	bl	8000180 <__adddf3>
 800d0cc:	2400      	movs	r4, #0
 800d0ce:	460d      	mov	r5, r1
 800d0d0:	4622      	mov	r2, r4
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	4640      	mov	r0, r8
 800d0d6:	4649      	mov	r1, r9
 800d0d8:	f7f3 fa08 	bl	80004ec <__aeabi_dmul>
 800d0dc:	2200      	movs	r2, #0
 800d0de:	4680      	mov	r8, r0
 800d0e0:	4689      	mov	r9, r1
 800d0e2:	4620      	mov	r0, r4
 800d0e4:	4629      	mov	r1, r5
 800d0e6:	4b5c      	ldr	r3, [pc, #368]	; (800d258 <__ieee754_pow+0x750>)
 800d0e8:	f7f3 f848 	bl	800017c <__aeabi_dsub>
 800d0ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d0f0:	f7f3 f844 	bl	800017c <__aeabi_dsub>
 800d0f4:	4602      	mov	r2, r0
 800d0f6:	460b      	mov	r3, r1
 800d0f8:	4630      	mov	r0, r6
 800d0fa:	4639      	mov	r1, r7
 800d0fc:	f7f3 f83e 	bl	800017c <__aeabi_dsub>
 800d100:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d104:	f7f3 f9f2 	bl	80004ec <__aeabi_dmul>
 800d108:	4622      	mov	r2, r4
 800d10a:	4606      	mov	r6, r0
 800d10c:	460f      	mov	r7, r1
 800d10e:	462b      	mov	r3, r5
 800d110:	4650      	mov	r0, sl
 800d112:	4659      	mov	r1, fp
 800d114:	f7f3 f9ea 	bl	80004ec <__aeabi_dmul>
 800d118:	4602      	mov	r2, r0
 800d11a:	460b      	mov	r3, r1
 800d11c:	4630      	mov	r0, r6
 800d11e:	4639      	mov	r1, r7
 800d120:	f7f3 f82e 	bl	8000180 <__adddf3>
 800d124:	2400      	movs	r4, #0
 800d126:	4606      	mov	r6, r0
 800d128:	460f      	mov	r7, r1
 800d12a:	4602      	mov	r2, r0
 800d12c:	460b      	mov	r3, r1
 800d12e:	4640      	mov	r0, r8
 800d130:	4649      	mov	r1, r9
 800d132:	f7f3 f825 	bl	8000180 <__adddf3>
 800d136:	a33c      	add	r3, pc, #240	; (adr r3, 800d228 <__ieee754_pow+0x720>)
 800d138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13c:	4620      	mov	r0, r4
 800d13e:	460d      	mov	r5, r1
 800d140:	f7f3 f9d4 	bl	80004ec <__aeabi_dmul>
 800d144:	4642      	mov	r2, r8
 800d146:	464b      	mov	r3, r9
 800d148:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d14c:	4620      	mov	r0, r4
 800d14e:	4629      	mov	r1, r5
 800d150:	f7f3 f814 	bl	800017c <__aeabi_dsub>
 800d154:	4602      	mov	r2, r0
 800d156:	460b      	mov	r3, r1
 800d158:	4630      	mov	r0, r6
 800d15a:	4639      	mov	r1, r7
 800d15c:	f7f3 f80e 	bl	800017c <__aeabi_dsub>
 800d160:	a333      	add	r3, pc, #204	; (adr r3, 800d230 <__ieee754_pow+0x728>)
 800d162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d166:	f7f3 f9c1 	bl	80004ec <__aeabi_dmul>
 800d16a:	a333      	add	r3, pc, #204	; (adr r3, 800d238 <__ieee754_pow+0x730>)
 800d16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d170:	4606      	mov	r6, r0
 800d172:	460f      	mov	r7, r1
 800d174:	4620      	mov	r0, r4
 800d176:	4629      	mov	r1, r5
 800d178:	f7f3 f9b8 	bl	80004ec <__aeabi_dmul>
 800d17c:	4602      	mov	r2, r0
 800d17e:	460b      	mov	r3, r1
 800d180:	4630      	mov	r0, r6
 800d182:	4639      	mov	r1, r7
 800d184:	f7f2 fffc 	bl	8000180 <__adddf3>
 800d188:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d18a:	4b34      	ldr	r3, [pc, #208]	; (800d25c <__ieee754_pow+0x754>)
 800d18c:	4413      	add	r3, r2
 800d18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d192:	f7f2 fff5 	bl	8000180 <__adddf3>
 800d196:	4680      	mov	r8, r0
 800d198:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d19a:	4689      	mov	r9, r1
 800d19c:	f7f3 f93c 	bl	8000418 <__aeabi_i2d>
 800d1a0:	4604      	mov	r4, r0
 800d1a2:	460d      	mov	r5, r1
 800d1a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d1a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d1aa:	4b2d      	ldr	r3, [pc, #180]	; (800d260 <__ieee754_pow+0x758>)
 800d1ac:	4413      	add	r3, r2
 800d1ae:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d1b2:	4642      	mov	r2, r8
 800d1b4:	464b      	mov	r3, r9
 800d1b6:	f7f2 ffe3 	bl	8000180 <__adddf3>
 800d1ba:	4632      	mov	r2, r6
 800d1bc:	463b      	mov	r3, r7
 800d1be:	f7f2 ffdf 	bl	8000180 <__adddf3>
 800d1c2:	4622      	mov	r2, r4
 800d1c4:	462b      	mov	r3, r5
 800d1c6:	f7f2 ffdb 	bl	8000180 <__adddf3>
 800d1ca:	2000      	movs	r0, #0
 800d1cc:	4622      	mov	r2, r4
 800d1ce:	462b      	mov	r3, r5
 800d1d0:	4682      	mov	sl, r0
 800d1d2:	468b      	mov	fp, r1
 800d1d4:	f7f2 ffd2 	bl	800017c <__aeabi_dsub>
 800d1d8:	4632      	mov	r2, r6
 800d1da:	463b      	mov	r3, r7
 800d1dc:	f7f2 ffce 	bl	800017c <__aeabi_dsub>
 800d1e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d1e4:	f7f2 ffca 	bl	800017c <__aeabi_dsub>
 800d1e8:	4602      	mov	r2, r0
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	4640      	mov	r0, r8
 800d1ee:	4649      	mov	r1, r9
 800d1f0:	e60b      	b.n	800ce0a <__ieee754_pow+0x302>
 800d1f2:	2601      	movs	r6, #1
 800d1f4:	e69f      	b.n	800cf36 <__ieee754_pow+0x42e>
 800d1f6:	bf00      	nop
 800d1f8:	4a454eef 	.word	0x4a454eef
 800d1fc:	3fca7e28 	.word	0x3fca7e28
 800d200:	93c9db65 	.word	0x93c9db65
 800d204:	3fcd864a 	.word	0x3fcd864a
 800d208:	a91d4101 	.word	0xa91d4101
 800d20c:	3fd17460 	.word	0x3fd17460
 800d210:	518f264d 	.word	0x518f264d
 800d214:	3fd55555 	.word	0x3fd55555
 800d218:	db6fabff 	.word	0xdb6fabff
 800d21c:	3fdb6db6 	.word	0x3fdb6db6
 800d220:	33333303 	.word	0x33333303
 800d224:	3fe33333 	.word	0x3fe33333
 800d228:	e0000000 	.word	0xe0000000
 800d22c:	3feec709 	.word	0x3feec709
 800d230:	dc3a03fd 	.word	0xdc3a03fd
 800d234:	3feec709 	.word	0x3feec709
 800d238:	145b01f5 	.word	0x145b01f5
 800d23c:	be3e2fe0 	.word	0xbe3e2fe0
 800d240:	7ff00000 	.word	0x7ff00000
 800d244:	43400000 	.word	0x43400000
 800d248:	0003988e 	.word	0x0003988e
 800d24c:	000bb679 	.word	0x000bb679
 800d250:	0800ded0 	.word	0x0800ded0
 800d254:	3ff00000 	.word	0x3ff00000
 800d258:	40080000 	.word	0x40080000
 800d25c:	0800def0 	.word	0x0800def0
 800d260:	0800dee0 	.word	0x0800dee0
 800d264:	a39c      	add	r3, pc, #624	; (adr r3, 800d4d8 <__ieee754_pow+0x9d0>)
 800d266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26a:	4640      	mov	r0, r8
 800d26c:	4649      	mov	r1, r9
 800d26e:	f7f2 ff87 	bl	8000180 <__adddf3>
 800d272:	4622      	mov	r2, r4
 800d274:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d278:	462b      	mov	r3, r5
 800d27a:	4650      	mov	r0, sl
 800d27c:	4639      	mov	r1, r7
 800d27e:	f7f2 ff7d 	bl	800017c <__aeabi_dsub>
 800d282:	4602      	mov	r2, r0
 800d284:	460b      	mov	r3, r1
 800d286:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d28a:	f7f3 fbbf 	bl	8000a0c <__aeabi_dcmpgt>
 800d28e:	2800      	cmp	r0, #0
 800d290:	f47f ae06 	bne.w	800cea0 <__ieee754_pow+0x398>
 800d294:	4aa2      	ldr	r2, [pc, #648]	; (800d520 <__ieee754_pow+0xa18>)
 800d296:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800d29a:	4293      	cmp	r3, r2
 800d29c:	f340 8100 	ble.w	800d4a0 <__ieee754_pow+0x998>
 800d2a0:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d2a4:	151b      	asrs	r3, r3, #20
 800d2a6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d2aa:	fa4a fa03 	asr.w	sl, sl, r3
 800d2ae:	44b2      	add	sl, r6
 800d2b0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d2b4:	489b      	ldr	r0, [pc, #620]	; (800d524 <__ieee754_pow+0xa1c>)
 800d2b6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d2ba:	4108      	asrs	r0, r1
 800d2bc:	ea00 030a 	and.w	r3, r0, sl
 800d2c0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d2c4:	f1c1 0114 	rsb	r1, r1, #20
 800d2c8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d2cc:	fa4a fa01 	asr.w	sl, sl, r1
 800d2d0:	2e00      	cmp	r6, #0
 800d2d2:	f04f 0200 	mov.w	r2, #0
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	4629      	mov	r1, r5
 800d2da:	bfb8      	it	lt
 800d2dc:	f1ca 0a00 	rsblt	sl, sl, #0
 800d2e0:	f7f2 ff4c 	bl	800017c <__aeabi_dsub>
 800d2e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2ec:	2400      	movs	r4, #0
 800d2ee:	4642      	mov	r2, r8
 800d2f0:	464b      	mov	r3, r9
 800d2f2:	f7f2 ff45 	bl	8000180 <__adddf3>
 800d2f6:	a37a      	add	r3, pc, #488	; (adr r3, 800d4e0 <__ieee754_pow+0x9d8>)
 800d2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	460d      	mov	r5, r1
 800d300:	f7f3 f8f4 	bl	80004ec <__aeabi_dmul>
 800d304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d308:	4606      	mov	r6, r0
 800d30a:	460f      	mov	r7, r1
 800d30c:	4620      	mov	r0, r4
 800d30e:	4629      	mov	r1, r5
 800d310:	f7f2 ff34 	bl	800017c <__aeabi_dsub>
 800d314:	4602      	mov	r2, r0
 800d316:	460b      	mov	r3, r1
 800d318:	4640      	mov	r0, r8
 800d31a:	4649      	mov	r1, r9
 800d31c:	f7f2 ff2e 	bl	800017c <__aeabi_dsub>
 800d320:	a371      	add	r3, pc, #452	; (adr r3, 800d4e8 <__ieee754_pow+0x9e0>)
 800d322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d326:	f7f3 f8e1 	bl	80004ec <__aeabi_dmul>
 800d32a:	a371      	add	r3, pc, #452	; (adr r3, 800d4f0 <__ieee754_pow+0x9e8>)
 800d32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d330:	4680      	mov	r8, r0
 800d332:	4689      	mov	r9, r1
 800d334:	4620      	mov	r0, r4
 800d336:	4629      	mov	r1, r5
 800d338:	f7f3 f8d8 	bl	80004ec <__aeabi_dmul>
 800d33c:	4602      	mov	r2, r0
 800d33e:	460b      	mov	r3, r1
 800d340:	4640      	mov	r0, r8
 800d342:	4649      	mov	r1, r9
 800d344:	f7f2 ff1c 	bl	8000180 <__adddf3>
 800d348:	4604      	mov	r4, r0
 800d34a:	460d      	mov	r5, r1
 800d34c:	4602      	mov	r2, r0
 800d34e:	460b      	mov	r3, r1
 800d350:	4630      	mov	r0, r6
 800d352:	4639      	mov	r1, r7
 800d354:	f7f2 ff14 	bl	8000180 <__adddf3>
 800d358:	4632      	mov	r2, r6
 800d35a:	463b      	mov	r3, r7
 800d35c:	4680      	mov	r8, r0
 800d35e:	4689      	mov	r9, r1
 800d360:	f7f2 ff0c 	bl	800017c <__aeabi_dsub>
 800d364:	4602      	mov	r2, r0
 800d366:	460b      	mov	r3, r1
 800d368:	4620      	mov	r0, r4
 800d36a:	4629      	mov	r1, r5
 800d36c:	f7f2 ff06 	bl	800017c <__aeabi_dsub>
 800d370:	4642      	mov	r2, r8
 800d372:	4606      	mov	r6, r0
 800d374:	460f      	mov	r7, r1
 800d376:	464b      	mov	r3, r9
 800d378:	4640      	mov	r0, r8
 800d37a:	4649      	mov	r1, r9
 800d37c:	f7f3 f8b6 	bl	80004ec <__aeabi_dmul>
 800d380:	a35d      	add	r3, pc, #372	; (adr r3, 800d4f8 <__ieee754_pow+0x9f0>)
 800d382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d386:	4604      	mov	r4, r0
 800d388:	460d      	mov	r5, r1
 800d38a:	f7f3 f8af 	bl	80004ec <__aeabi_dmul>
 800d38e:	a35c      	add	r3, pc, #368	; (adr r3, 800d500 <__ieee754_pow+0x9f8>)
 800d390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d394:	f7f2 fef2 	bl	800017c <__aeabi_dsub>
 800d398:	4622      	mov	r2, r4
 800d39a:	462b      	mov	r3, r5
 800d39c:	f7f3 f8a6 	bl	80004ec <__aeabi_dmul>
 800d3a0:	a359      	add	r3, pc, #356	; (adr r3, 800d508 <__ieee754_pow+0xa00>)
 800d3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a6:	f7f2 feeb 	bl	8000180 <__adddf3>
 800d3aa:	4622      	mov	r2, r4
 800d3ac:	462b      	mov	r3, r5
 800d3ae:	f7f3 f89d 	bl	80004ec <__aeabi_dmul>
 800d3b2:	a357      	add	r3, pc, #348	; (adr r3, 800d510 <__ieee754_pow+0xa08>)
 800d3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b8:	f7f2 fee0 	bl	800017c <__aeabi_dsub>
 800d3bc:	4622      	mov	r2, r4
 800d3be:	462b      	mov	r3, r5
 800d3c0:	f7f3 f894 	bl	80004ec <__aeabi_dmul>
 800d3c4:	a354      	add	r3, pc, #336	; (adr r3, 800d518 <__ieee754_pow+0xa10>)
 800d3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ca:	f7f2 fed9 	bl	8000180 <__adddf3>
 800d3ce:	4622      	mov	r2, r4
 800d3d0:	462b      	mov	r3, r5
 800d3d2:	f7f3 f88b 	bl	80004ec <__aeabi_dmul>
 800d3d6:	4602      	mov	r2, r0
 800d3d8:	460b      	mov	r3, r1
 800d3da:	4640      	mov	r0, r8
 800d3dc:	4649      	mov	r1, r9
 800d3de:	f7f2 fecd 	bl	800017c <__aeabi_dsub>
 800d3e2:	4604      	mov	r4, r0
 800d3e4:	460d      	mov	r5, r1
 800d3e6:	4602      	mov	r2, r0
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	4640      	mov	r0, r8
 800d3ec:	4649      	mov	r1, r9
 800d3ee:	f7f3 f87d 	bl	80004ec <__aeabi_dmul>
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	4629      	mov	r1, r5
 800d400:	f7f2 febc 	bl	800017c <__aeabi_dsub>
 800d404:	4602      	mov	r2, r0
 800d406:	460b      	mov	r3, r1
 800d408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d40c:	f7f3 f998 	bl	8000740 <__aeabi_ddiv>
 800d410:	4632      	mov	r2, r6
 800d412:	4604      	mov	r4, r0
 800d414:	460d      	mov	r5, r1
 800d416:	463b      	mov	r3, r7
 800d418:	4640      	mov	r0, r8
 800d41a:	4649      	mov	r1, r9
 800d41c:	f7f3 f866 	bl	80004ec <__aeabi_dmul>
 800d420:	4632      	mov	r2, r6
 800d422:	463b      	mov	r3, r7
 800d424:	f7f2 feac 	bl	8000180 <__adddf3>
 800d428:	4602      	mov	r2, r0
 800d42a:	460b      	mov	r3, r1
 800d42c:	4620      	mov	r0, r4
 800d42e:	4629      	mov	r1, r5
 800d430:	f7f2 fea4 	bl	800017c <__aeabi_dsub>
 800d434:	4642      	mov	r2, r8
 800d436:	464b      	mov	r3, r9
 800d438:	f7f2 fea0 	bl	800017c <__aeabi_dsub>
 800d43c:	4602      	mov	r2, r0
 800d43e:	460b      	mov	r3, r1
 800d440:	2000      	movs	r0, #0
 800d442:	4939      	ldr	r1, [pc, #228]	; (800d528 <__ieee754_pow+0xa20>)
 800d444:	f7f2 fe9a 	bl	800017c <__aeabi_dsub>
 800d448:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d44c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d450:	da29      	bge.n	800d4a6 <__ieee754_pow+0x99e>
 800d452:	4652      	mov	r2, sl
 800d454:	f000 f874 	bl	800d540 <scalbn>
 800d458:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d45c:	f7ff bbfd 	b.w	800cc5a <__ieee754_pow+0x152>
 800d460:	4b32      	ldr	r3, [pc, #200]	; (800d52c <__ieee754_pow+0xa24>)
 800d462:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800d466:	429f      	cmp	r7, r3
 800d468:	f77f af14 	ble.w	800d294 <__ieee754_pow+0x78c>
 800d46c:	4b30      	ldr	r3, [pc, #192]	; (800d530 <__ieee754_pow+0xa28>)
 800d46e:	440b      	add	r3, r1
 800d470:	4303      	orrs	r3, r0
 800d472:	d009      	beq.n	800d488 <__ieee754_pow+0x980>
 800d474:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d478:	2200      	movs	r2, #0
 800d47a:	2300      	movs	r3, #0
 800d47c:	f7f3 faa8 	bl	80009d0 <__aeabi_dcmplt>
 800d480:	3800      	subs	r0, #0
 800d482:	bf18      	it	ne
 800d484:	2001      	movne	r0, #1
 800d486:	e452      	b.n	800cd2e <__ieee754_pow+0x226>
 800d488:	4622      	mov	r2, r4
 800d48a:	462b      	mov	r3, r5
 800d48c:	f7f2 fe76 	bl	800017c <__aeabi_dsub>
 800d490:	4642      	mov	r2, r8
 800d492:	464b      	mov	r3, r9
 800d494:	f7f3 fab0 	bl	80009f8 <__aeabi_dcmpge>
 800d498:	2800      	cmp	r0, #0
 800d49a:	f43f aefb 	beq.w	800d294 <__ieee754_pow+0x78c>
 800d49e:	e7e9      	b.n	800d474 <__ieee754_pow+0x96c>
 800d4a0:	f04f 0a00 	mov.w	sl, #0
 800d4a4:	e720      	b.n	800d2e8 <__ieee754_pow+0x7e0>
 800d4a6:	4621      	mov	r1, r4
 800d4a8:	e7d6      	b.n	800d458 <__ieee754_pow+0x950>
 800d4aa:	f04f 0b00 	mov.w	fp, #0
 800d4ae:	f8df c078 	ldr.w	ip, [pc, #120]	; 800d528 <__ieee754_pow+0xa20>
 800d4b2:	f7ff bbb9 	b.w	800cc28 <__ieee754_pow+0x120>
 800d4b6:	f04f 0b00 	mov.w	fp, #0
 800d4ba:	f04f 0c00 	mov.w	ip, #0
 800d4be:	f7ff bbb3 	b.w	800cc28 <__ieee754_pow+0x120>
 800d4c2:	4640      	mov	r0, r8
 800d4c4:	4649      	mov	r1, r9
 800d4c6:	f7ff bb3c 	b.w	800cb42 <__ieee754_pow+0x3a>
 800d4ca:	9200      	str	r2, [sp, #0]
 800d4cc:	f7ff bb88 	b.w	800cbe0 <__ieee754_pow+0xd8>
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	f7ff bb72 	b.w	800cbba <__ieee754_pow+0xb2>
 800d4d6:	bf00      	nop
 800d4d8:	652b82fe 	.word	0x652b82fe
 800d4dc:	3c971547 	.word	0x3c971547
 800d4e0:	00000000 	.word	0x00000000
 800d4e4:	3fe62e43 	.word	0x3fe62e43
 800d4e8:	fefa39ef 	.word	0xfefa39ef
 800d4ec:	3fe62e42 	.word	0x3fe62e42
 800d4f0:	0ca86c39 	.word	0x0ca86c39
 800d4f4:	be205c61 	.word	0xbe205c61
 800d4f8:	72bea4d0 	.word	0x72bea4d0
 800d4fc:	3e663769 	.word	0x3e663769
 800d500:	c5d26bf1 	.word	0xc5d26bf1
 800d504:	3ebbbd41 	.word	0x3ebbbd41
 800d508:	af25de2c 	.word	0xaf25de2c
 800d50c:	3f11566a 	.word	0x3f11566a
 800d510:	16bebd93 	.word	0x16bebd93
 800d514:	3f66c16c 	.word	0x3f66c16c
 800d518:	5555553e 	.word	0x5555553e
 800d51c:	3fc55555 	.word	0x3fc55555
 800d520:	3fe00000 	.word	0x3fe00000
 800d524:	fff00000 	.word	0xfff00000
 800d528:	3ff00000 	.word	0x3ff00000
 800d52c:	4090cbff 	.word	0x4090cbff
 800d530:	3f6f3400 	.word	0x3f6f3400

0800d534 <fabs>:
 800d534:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d538:	4619      	mov	r1, r3
 800d53a:	4770      	bx	lr
 800d53c:	0000      	movs	r0, r0
	...

0800d540 <scalbn>:
 800d540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d542:	4616      	mov	r6, r2
 800d544:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d548:	4604      	mov	r4, r0
 800d54a:	460d      	mov	r5, r1
 800d54c:	460b      	mov	r3, r1
 800d54e:	b992      	cbnz	r2, 800d576 <scalbn+0x36>
 800d550:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d554:	4303      	orrs	r3, r0
 800d556:	d03c      	beq.n	800d5d2 <scalbn+0x92>
 800d558:	4b31      	ldr	r3, [pc, #196]	; (800d620 <scalbn+0xe0>)
 800d55a:	2200      	movs	r2, #0
 800d55c:	f7f2 ffc6 	bl	80004ec <__aeabi_dmul>
 800d560:	4b30      	ldr	r3, [pc, #192]	; (800d624 <scalbn+0xe4>)
 800d562:	4604      	mov	r4, r0
 800d564:	429e      	cmp	r6, r3
 800d566:	460d      	mov	r5, r1
 800d568:	da0f      	bge.n	800d58a <scalbn+0x4a>
 800d56a:	a329      	add	r3, pc, #164	; (adr r3, 800d610 <scalbn+0xd0>)
 800d56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d570:	f7f2 ffbc 	bl	80004ec <__aeabi_dmul>
 800d574:	e006      	b.n	800d584 <scalbn+0x44>
 800d576:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800d57a:	42ba      	cmp	r2, r7
 800d57c:	d109      	bne.n	800d592 <scalbn+0x52>
 800d57e:	4602      	mov	r2, r0
 800d580:	f7f2 fdfe 	bl	8000180 <__adddf3>
 800d584:	4604      	mov	r4, r0
 800d586:	460d      	mov	r5, r1
 800d588:	e023      	b.n	800d5d2 <scalbn+0x92>
 800d58a:	460b      	mov	r3, r1
 800d58c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d590:	3a36      	subs	r2, #54	; 0x36
 800d592:	f24c 3150 	movw	r1, #50000	; 0xc350
 800d596:	428e      	cmp	r6, r1
 800d598:	dd0e      	ble.n	800d5b8 <scalbn+0x78>
 800d59a:	a31f      	add	r3, pc, #124	; (adr r3, 800d618 <scalbn+0xd8>)
 800d59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a0:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800d5a4:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800d5a8:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800d5ac:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800d5b0:	481d      	ldr	r0, [pc, #116]	; (800d628 <scalbn+0xe8>)
 800d5b2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800d5b6:	e7db      	b.n	800d570 <scalbn+0x30>
 800d5b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d5bc:	4432      	add	r2, r6
 800d5be:	428a      	cmp	r2, r1
 800d5c0:	dceb      	bgt.n	800d59a <scalbn+0x5a>
 800d5c2:	2a00      	cmp	r2, #0
 800d5c4:	dd08      	ble.n	800d5d8 <scalbn+0x98>
 800d5c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d5ca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d5ce:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	4629      	mov	r1, r5
 800d5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5d8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d5dc:	da0c      	bge.n	800d5f8 <scalbn+0xb8>
 800d5de:	a30c      	add	r3, pc, #48	; (adr r3, 800d610 <scalbn+0xd0>)
 800d5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800d5e8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800d5ec:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800d5f0:	480e      	ldr	r0, [pc, #56]	; (800d62c <scalbn+0xec>)
 800d5f2:	f041 011f 	orr.w	r1, r1, #31
 800d5f6:	e7bb      	b.n	800d570 <scalbn+0x30>
 800d5f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d5fc:	3236      	adds	r2, #54	; 0x36
 800d5fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d602:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d606:	4620      	mov	r0, r4
 800d608:	4629      	mov	r1, r5
 800d60a:	2200      	movs	r2, #0
 800d60c:	4b08      	ldr	r3, [pc, #32]	; (800d630 <scalbn+0xf0>)
 800d60e:	e7af      	b.n	800d570 <scalbn+0x30>
 800d610:	c2f8f359 	.word	0xc2f8f359
 800d614:	01a56e1f 	.word	0x01a56e1f
 800d618:	8800759c 	.word	0x8800759c
 800d61c:	7e37e43c 	.word	0x7e37e43c
 800d620:	43500000 	.word	0x43500000
 800d624:	ffff3cb0 	.word	0xffff3cb0
 800d628:	8800759c 	.word	0x8800759c
 800d62c:	c2f8f359 	.word	0xc2f8f359
 800d630:	3c900000 	.word	0x3c900000

0800d634 <with_errno>:
 800d634:	b570      	push	{r4, r5, r6, lr}
 800d636:	4604      	mov	r4, r0
 800d638:	460d      	mov	r5, r1
 800d63a:	4616      	mov	r6, r2
 800d63c:	f7fb fcbe 	bl	8008fbc <__errno>
 800d640:	4629      	mov	r1, r5
 800d642:	6006      	str	r6, [r0, #0]
 800d644:	4620      	mov	r0, r4
 800d646:	bd70      	pop	{r4, r5, r6, pc}

0800d648 <xflow>:
 800d648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d64a:	4615      	mov	r5, r2
 800d64c:	461c      	mov	r4, r3
 800d64e:	b180      	cbz	r0, 800d672 <xflow+0x2a>
 800d650:	4610      	mov	r0, r2
 800d652:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d656:	e9cd 0100 	strd	r0, r1, [sp]
 800d65a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d65e:	4628      	mov	r0, r5
 800d660:	4621      	mov	r1, r4
 800d662:	f7f2 ff43 	bl	80004ec <__aeabi_dmul>
 800d666:	2222      	movs	r2, #34	; 0x22
 800d668:	b003      	add	sp, #12
 800d66a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d66e:	f7ff bfe1 	b.w	800d634 <with_errno>
 800d672:	4610      	mov	r0, r2
 800d674:	4619      	mov	r1, r3
 800d676:	e7ee      	b.n	800d656 <xflow+0xe>

0800d678 <__math_uflow>:
 800d678:	2200      	movs	r2, #0
 800d67a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d67e:	f7ff bfe3 	b.w	800d648 <xflow>

0800d682 <__math_oflow>:
 800d682:	2200      	movs	r2, #0
 800d684:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d688:	f7ff bfde 	b.w	800d648 <xflow>

0800d68c <__ieee754_sqrt>:
 800d68c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800d830 <__ieee754_sqrt+0x1a4>
 800d690:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d694:	ea3c 0c01 	bics.w	ip, ip, r1
 800d698:	460b      	mov	r3, r1
 800d69a:	4606      	mov	r6, r0
 800d69c:	460d      	mov	r5, r1
 800d69e:	460a      	mov	r2, r1
 800d6a0:	4604      	mov	r4, r0
 800d6a2:	d10e      	bne.n	800d6c2 <__ieee754_sqrt+0x36>
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	f7f2 ff21 	bl	80004ec <__aeabi_dmul>
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	4630      	mov	r0, r6
 800d6b0:	4629      	mov	r1, r5
 800d6b2:	f7f2 fd65 	bl	8000180 <__adddf3>
 800d6b6:	4606      	mov	r6, r0
 800d6b8:	460d      	mov	r5, r1
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	4629      	mov	r1, r5
 800d6be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6c2:	2900      	cmp	r1, #0
 800d6c4:	dc0d      	bgt.n	800d6e2 <__ieee754_sqrt+0x56>
 800d6c6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800d6ca:	ea5c 0c00 	orrs.w	ip, ip, r0
 800d6ce:	d0f4      	beq.n	800d6ba <__ieee754_sqrt+0x2e>
 800d6d0:	b139      	cbz	r1, 800d6e2 <__ieee754_sqrt+0x56>
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	f7f2 fd52 	bl	800017c <__aeabi_dsub>
 800d6d8:	4602      	mov	r2, r0
 800d6da:	460b      	mov	r3, r1
 800d6dc:	f7f3 f830 	bl	8000740 <__aeabi_ddiv>
 800d6e0:	e7e9      	b.n	800d6b6 <__ieee754_sqrt+0x2a>
 800d6e2:	1512      	asrs	r2, r2, #20
 800d6e4:	f000 8089 	beq.w	800d7fa <__ieee754_sqrt+0x16e>
 800d6e8:	2500      	movs	r5, #0
 800d6ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6ee:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800d6f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d6f6:	07d2      	lsls	r2, r2, #31
 800d6f8:	bf5c      	itt	pl
 800d6fa:	005b      	lslpl	r3, r3, #1
 800d6fc:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800d700:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d704:	bf58      	it	pl
 800d706:	0064      	lslpl	r4, r4, #1
 800d708:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800d70c:	0062      	lsls	r2, r4, #1
 800d70e:	2016      	movs	r0, #22
 800d710:	4629      	mov	r1, r5
 800d712:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800d716:	1076      	asrs	r6, r6, #1
 800d718:	190f      	adds	r7, r1, r4
 800d71a:	429f      	cmp	r7, r3
 800d71c:	bfde      	ittt	le
 800d71e:	1bdb      	suble	r3, r3, r7
 800d720:	1939      	addle	r1, r7, r4
 800d722:	192d      	addle	r5, r5, r4
 800d724:	005b      	lsls	r3, r3, #1
 800d726:	3801      	subs	r0, #1
 800d728:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d72c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d730:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d734:	d1f0      	bne.n	800d718 <__ieee754_sqrt+0x8c>
 800d736:	4604      	mov	r4, r0
 800d738:	2720      	movs	r7, #32
 800d73a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800d73e:	428b      	cmp	r3, r1
 800d740:	eb0c 0e00 	add.w	lr, ip, r0
 800d744:	dc02      	bgt.n	800d74c <__ieee754_sqrt+0xc0>
 800d746:	d113      	bne.n	800d770 <__ieee754_sqrt+0xe4>
 800d748:	4596      	cmp	lr, r2
 800d74a:	d811      	bhi.n	800d770 <__ieee754_sqrt+0xe4>
 800d74c:	f1be 0f00 	cmp.w	lr, #0
 800d750:	eb0e 000c 	add.w	r0, lr, ip
 800d754:	da56      	bge.n	800d804 <__ieee754_sqrt+0x178>
 800d756:	2800      	cmp	r0, #0
 800d758:	db54      	blt.n	800d804 <__ieee754_sqrt+0x178>
 800d75a:	f101 0801 	add.w	r8, r1, #1
 800d75e:	1a5b      	subs	r3, r3, r1
 800d760:	4641      	mov	r1, r8
 800d762:	4596      	cmp	lr, r2
 800d764:	bf88      	it	hi
 800d766:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d76a:	eba2 020e 	sub.w	r2, r2, lr
 800d76e:	4464      	add	r4, ip
 800d770:	005b      	lsls	r3, r3, #1
 800d772:	3f01      	subs	r7, #1
 800d774:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d778:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d77c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d780:	d1dd      	bne.n	800d73e <__ieee754_sqrt+0xb2>
 800d782:	4313      	orrs	r3, r2
 800d784:	d01b      	beq.n	800d7be <__ieee754_sqrt+0x132>
 800d786:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d834 <__ieee754_sqrt+0x1a8>
 800d78a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d838 <__ieee754_sqrt+0x1ac>
 800d78e:	e9da 0100 	ldrd	r0, r1, [sl]
 800d792:	e9db 2300 	ldrd	r2, r3, [fp]
 800d796:	f7f2 fcf1 	bl	800017c <__aeabi_dsub>
 800d79a:	e9da 8900 	ldrd	r8, r9, [sl]
 800d79e:	4602      	mov	r2, r0
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	4640      	mov	r0, r8
 800d7a4:	4649      	mov	r1, r9
 800d7a6:	f7f3 f91d 	bl	80009e4 <__aeabi_dcmple>
 800d7aa:	b140      	cbz	r0, 800d7be <__ieee754_sqrt+0x132>
 800d7ac:	e9da 0100 	ldrd	r0, r1, [sl]
 800d7b0:	e9db 2300 	ldrd	r2, r3, [fp]
 800d7b4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d7b8:	d126      	bne.n	800d808 <__ieee754_sqrt+0x17c>
 800d7ba:	463c      	mov	r4, r7
 800d7bc:	3501      	adds	r5, #1
 800d7be:	106b      	asrs	r3, r5, #1
 800d7c0:	0864      	lsrs	r4, r4, #1
 800d7c2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d7c6:	07ea      	lsls	r2, r5, #31
 800d7c8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d7cc:	bf48      	it	mi
 800d7ce:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800d7d8:	e76d      	b.n	800d6b6 <__ieee754_sqrt+0x2a>
 800d7da:	0ae3      	lsrs	r3, r4, #11
 800d7dc:	3915      	subs	r1, #21
 800d7de:	0564      	lsls	r4, r4, #21
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d0fa      	beq.n	800d7da <__ieee754_sqrt+0x14e>
 800d7e4:	02d8      	lsls	r0, r3, #11
 800d7e6:	d50a      	bpl.n	800d7fe <__ieee754_sqrt+0x172>
 800d7e8:	f1c2 0020 	rsb	r0, r2, #32
 800d7ec:	fa24 f000 	lsr.w	r0, r4, r0
 800d7f0:	1e55      	subs	r5, r2, #1
 800d7f2:	4094      	lsls	r4, r2
 800d7f4:	4303      	orrs	r3, r0
 800d7f6:	1b4a      	subs	r2, r1, r5
 800d7f8:	e776      	b.n	800d6e8 <__ieee754_sqrt+0x5c>
 800d7fa:	4611      	mov	r1, r2
 800d7fc:	e7f0      	b.n	800d7e0 <__ieee754_sqrt+0x154>
 800d7fe:	005b      	lsls	r3, r3, #1
 800d800:	3201      	adds	r2, #1
 800d802:	e7ef      	b.n	800d7e4 <__ieee754_sqrt+0x158>
 800d804:	4688      	mov	r8, r1
 800d806:	e7aa      	b.n	800d75e <__ieee754_sqrt+0xd2>
 800d808:	f7f2 fcba 	bl	8000180 <__adddf3>
 800d80c:	e9da 8900 	ldrd	r8, r9, [sl]
 800d810:	4602      	mov	r2, r0
 800d812:	460b      	mov	r3, r1
 800d814:	4640      	mov	r0, r8
 800d816:	4649      	mov	r1, r9
 800d818:	f7f3 f8da 	bl	80009d0 <__aeabi_dcmplt>
 800d81c:	b120      	cbz	r0, 800d828 <__ieee754_sqrt+0x19c>
 800d81e:	1ca1      	adds	r1, r4, #2
 800d820:	bf08      	it	eq
 800d822:	3501      	addeq	r5, #1
 800d824:	3402      	adds	r4, #2
 800d826:	e7ca      	b.n	800d7be <__ieee754_sqrt+0x132>
 800d828:	3401      	adds	r4, #1
 800d82a:	f024 0401 	bic.w	r4, r4, #1
 800d82e:	e7c6      	b.n	800d7be <__ieee754_sqrt+0x132>
 800d830:	7ff00000 	.word	0x7ff00000
 800d834:	200001e0 	.word	0x200001e0
 800d838:	200001e8 	.word	0x200001e8

0800d83c <_init>:
 800d83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d83e:	bf00      	nop
 800d840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d842:	bc08      	pop	{r3}
 800d844:	469e      	mov	lr, r3
 800d846:	4770      	bx	lr

0800d848 <_fini>:
 800d848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d84a:	bf00      	nop
 800d84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d84e:	bc08      	pop	{r3}
 800d850:	469e      	mov	lr, r3
 800d852:	4770      	bx	lr
