
DEVI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006620  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800672c  0800672c  0001672c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068b4  080068b4  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080068b4  080068b4  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068b4  080068b4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068b4  080068b4  000168b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068b8  080068b8  000168b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080068bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  20000060  0800691c  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  0800691c  000203b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010227  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d8b  00000000  00000000  000302f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001000  00000000  00000000  00033080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c66  00000000  00000000  00034080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001921f  00000000  00000000  00034ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000150e8  00000000  00000000  0004df05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cefa  00000000  00000000  00062fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004720  00000000  00000000  000efee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000f4608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08006714 	.word	0x08006714

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08006714 	.word	0x08006714

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <btn_pressing_callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void btn_pressing_callback(Button_Typdef *ButtonX)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	if (stateDevice == IDLE) {
 8000178:	4b24      	ldr	r3, [pc, #144]	; (800020c <btn_pressing_callback+0x9c>)
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d10f      	bne.n	80001a0 <btn_pressing_callback+0x30>
		MQSensor_powerOn(&MQSensor, true);
 8000180:	2101      	movs	r1, #1
 8000182:	4823      	ldr	r0, [pc, #140]	; (8000210 <btn_pressing_callback+0xa0>)
 8000184:	f000 f98a 	bl	800049c <MQSensor_powerOn>
		MQSensor.start_heating_time = HAL_GetTick();
 8000188:	f001 fb2c 	bl	80017e4 <HAL_GetTick>
 800018c:	4603      	mov	r3, r0
 800018e:	4a20      	ldr	r2, [pc, #128]	; (8000210 <btn_pressing_callback+0xa0>)
 8000190:	6093      	str	r3, [r2, #8]
		stateDevice = HEATING;
 8000192:	4b1e      	ldr	r3, [pc, #120]	; (800020c <btn_pressing_callback+0x9c>)
 8000194:	2202      	movs	r2, #2
 8000196:	701a      	strb	r2, [r3, #0]
		lcd_clear_display(&hlcd);
 8000198:	481e      	ldr	r0, [pc, #120]	; (8000214 <btn_pressing_callback+0xa4>)
 800019a:	f005 fd23 	bl	8005be4 <lcd_clear_display>
		return;
 800019e:	e031      	b.n	8000204 <btn_pressing_callback+0x94>
	}

	if (stateDevice == HEATING) {
 80001a0:	4b1a      	ldr	r3, [pc, #104]	; (800020c <btn_pressing_callback+0x9c>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	2b02      	cmp	r3, #2
 80001a6:	d10a      	bne.n	80001be <btn_pressing_callback+0x4e>
		lcd_clear_display(&hlcd);
 80001a8:	481a      	ldr	r0, [pc, #104]	; (8000214 <btn_pressing_callback+0xa4>)
 80001aa:	f005 fd1b 	bl	8005be4 <lcd_clear_display>
		MQSensor_powerOn(&MQSensor, false);
 80001ae:	2100      	movs	r1, #0
 80001b0:	4817      	ldr	r0, [pc, #92]	; (8000210 <btn_pressing_callback+0xa0>)
 80001b2:	f000 f973 	bl	800049c <MQSensor_powerOn>
		stateDevice = IDLE;
 80001b6:	4b15      	ldr	r3, [pc, #84]	; (800020c <btn_pressing_callback+0x9c>)
 80001b8:	2201      	movs	r2, #1
 80001ba:	701a      	strb	r2, [r3, #0]
		return;
 80001bc:	e022      	b.n	8000204 <btn_pressing_callback+0x94>
	}

	if (stateDevice == COMMUNICATING) {
 80001be:	4b13      	ldr	r3, [pc, #76]	; (800020c <btn_pressing_callback+0x9c>)
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	2b04      	cmp	r3, #4
 80001c4:	d11e      	bne.n	8000204 <btn_pressing_callback+0x94>
		lcd_clear_display(&hlcd);
 80001c6:	4813      	ldr	r0, [pc, #76]	; (8000214 <btn_pressing_callback+0xa4>)
 80001c8:	f005 fd0c 	bl	8005be4 <lcd_clear_display>
		stateDevice = IDLE;
 80001cc:	4b0f      	ldr	r3, [pc, #60]	; (800020c <btn_pressing_callback+0x9c>)
 80001ce:	2201      	movs	r2, #1
 80001d0:	701a      	strb	r2, [r3, #0]
		char str[] = "AHT03\n";
 80001d2:	4a11      	ldr	r2, [pc, #68]	; (8000218 <btn_pressing_callback+0xa8>)
 80001d4:	f107 0308 	add.w	r3, r7, #8
 80001d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001dc:	6018      	str	r0, [r3, #0]
 80001de:	3304      	adds	r3, #4
 80001e0:	8019      	strh	r1, [r3, #0]
 80001e2:	3302      	adds	r3, #2
 80001e4:	0c0a      	lsrs	r2, r1, #16
 80001e6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 500);
 80001e8:	f107 0308 	add.w	r3, r7, #8
 80001ec:	4618      	mov	r0, r3
 80001ee:	f7ff ffb7 	bl	8000160 <strlen>
 80001f2:	4603      	mov	r3, r0
 80001f4:	b29a      	uxth	r2, r3
 80001f6:	f107 0108 	add.w	r1, r7, #8
 80001fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80001fe:	4807      	ldr	r0, [pc, #28]	; (800021c <btn_pressing_callback+0xac>)
 8000200:	f004 fe4c 	bl	8004e9c <HAL_UART_Transmit>
		return;
	}

}
 8000204:	3710      	adds	r7, #16
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	200001fc 	.word	0x200001fc
 8000210:	200001d8 	.word	0x200001d8
 8000214:	200001b0 	.word	0x200001b0
 8000218:	0800672c 	.word	0x0800672c
 800021c:	20000168 	.word	0x20000168

08000220 <btn_press_short_callback>:

void btn_press_short_callback(Button_Typdef *ButtonX)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]

}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr

08000232 <btn_release_callback>:

void btn_release_callback(Button_Typdef *ButtonX)
{
 8000232:	b480      	push	{r7}
 8000234:	b083      	sub	sp, #12
 8000236:	af00      	add	r7, sp, #0
 8000238:	6078      	str	r0, [r7, #4]

}
 800023a:	bf00      	nop
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr

08000244 <btn_press_timeout_callback>:

void btn_press_timeout_callback(Button_Typdef *ButtonX)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
	hold_count++;
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <btn_press_timeout_callback+0x24>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	3301      	adds	r3, #1
 8000252:	b2da      	uxtb	r2, r3
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <btn_press_timeout_callback+0x24>)
 8000256:	701a      	strb	r2, [r3, #0]
	flag = true;
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <btn_press_timeout_callback+0x28>)
 800025a:	2201      	movs	r2, #1
 800025c:	701a      	strb	r2, [r3, #0]
}
 800025e:	bf00      	nop
 8000260:	370c      	adds	r7, #12
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	200001bc 	.word	0x200001bc
 800026c:	200001bd 	.word	0x200001bd

08000270 <button_init>:

void button_init(Button_Typdef *ButtonX,GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	4613      	mov	r3, r2
 800027c:	80fb      	strh	r3, [r7, #6]
	ButtonX->GPIOx = GPIOx;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	68ba      	ldr	r2, [r7, #8]
 8000282:	611a      	str	r2, [r3, #16]
	ButtonX->GPIO_Pin = GPIO_Pin;
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	88fa      	ldrh	r2, [r7, #6]
 8000288:	829a      	strh	r2, [r3, #20]
}
 800028a:	bf00      	nop
 800028c:	3714      	adds	r7, #20
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr

08000294 <button_handle>:

void button_handle(Button_Typdef *ButtonX)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	/* */
	uint8_t sta = HAL_GPIO_ReadPin(ButtonX->GPIOx, ButtonX->GPIO_Pin);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	691a      	ldr	r2, [r3, #16]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	8a9b      	ldrh	r3, [r3, #20]
 80002a4:	4619      	mov	r1, r3
 80002a6:	4610      	mov	r0, r2
 80002a8:	f002 fd14 	bl	8002cd4 <HAL_GPIO_ReadPin>
 80002ac:	4603      	mov	r3, r0
 80002ae:	73fb      	strb	r3, [r7, #15]
	if (sta != ButtonX->btn_filter) {
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	789b      	ldrb	r3, [r3, #2]
 80002b4:	7bfa      	ldrb	r2, [r7, #15]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d00a      	beq.n	80002d0 <button_handle+0x3c>
		ButtonX->btn_filter = sta;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	7bfa      	ldrb	r2, [r7, #15]
 80002be:	709a      	strb	r2, [r3, #2]
		ButtonX->is_debouncing = true;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2201      	movs	r2, #1
 80002c4:	70da      	strb	r2, [r3, #3]
		ButtonX->time_deboune = HAL_GetTick();
 80002c6:	f001 fa8d 	bl	80017e4 <HAL_GetTick>
 80002ca:	4602      	mov	r2, r0
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	605a      	str	r2, [r3, #4]
	}

	/* */
	if ((sta == ButtonX->btn_filter) && (HAL_GetTick() - ButtonX->time_deboune) > 15) {
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	789b      	ldrb	r3, [r3, #2]
 80002d4:	7bfa      	ldrb	r2, [r7, #15]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d10e      	bne.n	80002f8 <button_handle+0x64>
 80002da:	f001 fa83 	bl	80017e4 <HAL_GetTick>
 80002de:	4602      	mov	r2, r0
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	2b0f      	cmp	r3, #15
 80002e8:	d906      	bls.n	80002f8 <button_handle+0x64>
		ButtonX->is_debouncing = false;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2200      	movs	r2, #0
 80002ee:	70da      	strb	r2, [r3, #3]
		ButtonX->btn_current = ButtonX->btn_filter;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	789a      	ldrb	r2, [r3, #2]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	701a      	strb	r2, [r3, #0]
	}

	/* */
	if (ButtonX->btn_current != ButtonX->btn_last)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	781a      	ldrb	r2, [r3, #0]
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	785b      	ldrb	r3, [r3, #1]
 8000300:	429a      	cmp	r2, r3
 8000302:	d029      	beq.n	8000358 <button_handle+0xc4>
	{
		if(ButtonX->btn_current == GPIO_PIN_RESET) // Press the button
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d10b      	bne.n	8000324 <button_handle+0x90>
		{
			ButtonX->is_press_timeout = true;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2201      	movs	r2, #1
 8000310:	731a      	strb	r2, [r3, #12]
			btn_pressing_callback(ButtonX);
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f7ff ff2c 	bl	8000170 <btn_pressing_callback>
			ButtonX->time_start_press = HAL_GetTick();
 8000318:	f001 fa64 	bl	80017e4 <HAL_GetTick>
 800031c:	4602      	mov	r2, r0
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	e015      	b.n	8000350 <button_handle+0xbc>
		}
		else if(ButtonX->btn_current == GPIO_PIN_SET) // Release the button
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d111      	bne.n	8000350 <button_handle+0xbc>
		{
			if(HAL_GetTick() - ButtonX->time_start_press <= SHORT_PRESS_TIME)
 800032c:	f001 fa5a 	bl	80017e4 <HAL_GetTick>
 8000330:	4602      	mov	r2, r0
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	689b      	ldr	r3, [r3, #8]
 8000336:	1ad3      	subs	r3, r2, r3
 8000338:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800033c:	d802      	bhi.n	8000344 <button_handle+0xb0>
			{
				btn_press_short_callback(ButtonX);
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f7ff ff6e 	bl	8000220 <btn_press_short_callback>
			}
			btn_release_callback(ButtonX);
 8000344:	6878      	ldr	r0, [r7, #4]
 8000346:	f7ff ff74 	bl	8000232 <btn_release_callback>
			ButtonX->is_press_timeout = false;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	2200      	movs	r2, #0
 800034e:	731a      	strb	r2, [r3, #12]
		}
		ButtonX->btn_last = ButtonX->btn_current;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	781a      	ldrb	r2, [r3, #0]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	705a      	strb	r2, [r3, #1]
	}

	/* */
	if(ButtonX->is_press_timeout && (HAL_GetTick() - ButtonX->time_start_press >= HOLD_DOWN_TIME))
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	7b1b      	ldrb	r3, [r3, #12]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d00f      	beq.n	8000380 <button_handle+0xec>
 8000360:	f001 fa40 	bl	80017e4 <HAL_GetTick>
 8000364:	4602      	mov	r2, r0
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	689b      	ldr	r3, [r3, #8]
 800036a:	1ad3      	subs	r3, r2, r3
 800036c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000370:	4293      	cmp	r3, r2
 8000372:	d905      	bls.n	8000380 <button_handle+0xec>
	{
		ButtonX->is_press_timeout = false;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2200      	movs	r2, #0
 8000378:	731a      	strb	r2, [r3, #12]
		btn_press_timeout_callback(ButtonX);
 800037a:	6878      	ldr	r0, [r7, #4]
 800037c:	f7ff ff62 	bl	8000244 <btn_press_timeout_callback>
	}

} /* END button_handle */
 8000380:	bf00      	nop
 8000382:	3710      	adds	r7, #16
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <MQSensor_Init>:

void MQSensor_Init(MQSensor_Typdef *sensor, GPIO_TypeDef *HT_GPIOx, uint16_t HT_GPIO_Pin, ADC_HandleTypeDef* hadc,  uint32_t Channel)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	60f8      	str	r0, [r7, #12]
 8000390:	60b9      	str	r1, [r7, #8]
 8000392:	603b      	str	r3, [r7, #0]
 8000394:	4613      	mov	r3, r2
 8000396:	80fb      	strh	r3, [r7, #6]
	sensor->HT_GPIOx = HT_GPIOx;
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	68ba      	ldr	r2, [r7, #8]
 800039c:	601a      	str	r2, [r3, #0]
	sensor->HT_GPIO_Pin = HT_GPIO_Pin;
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	88fa      	ldrh	r2, [r7, #6]
 80003a2:	809a      	strh	r2, [r3, #4]
	sensor->hadc = hadc;
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	683a      	ldr	r2, [r7, #0]
 80003a8:	611a      	str	r2, [r3, #16]
	sensor->Channel = Channel;
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	69ba      	ldr	r2, [r7, #24]
 80003ae:	615a      	str	r2, [r3, #20]

	HAL_ADCEx_Calibration_Start(sensor->hadc);
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	691b      	ldr	r3, [r3, #16]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f001 fe9b 	bl	80020f0 <HAL_ADCEx_Calibration_Start>

}
 80003ba:	bf00      	nop
 80003bc:	3710      	adds	r7, #16
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <MQSensor_get_adc>:

HAL_StatusTypeDef MQSensor_get_adc(MQSensor_Typdef *sensor)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	MQSensor_powerOn(&MQSensor, true);
 80003cc:	2101      	movs	r1, #1
 80003ce:	4832      	ldr	r0, [pc, #200]	; (8000498 <MQSensor_get_adc+0xd4>)
 80003d0:	f000 f864 	bl	800049c <MQSensor_powerOn>
	HAL_Delay(10);
 80003d4:	200a      	movs	r0, #10
 80003d6:	f001 fa0f 	bl	80017f8 <HAL_Delay>
	HAL_StatusTypeDef ret = HAL_OK;
 80003da:	2300      	movs	r3, #0
 80003dc:	75fb      	strb	r3, [r7, #23]
	ADC_ChannelConfTypeDef sConfig = {0};
 80003de:	f107 0308 	add.w	r3, r7, #8
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
	sConfig.Channel = sensor->Channel;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80003f0:	2301      	movs	r3, #1
 80003f2:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80003f4:	2307      	movs	r3, #7
 80003f6:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(sensor->hadc, &sConfig) != HAL_OK)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	691b      	ldr	r3, [r3, #16]
 80003fc:	f107 0208 	add.w	r2, r7, #8
 8000400:	4611      	mov	r1, r2
 8000402:	4618      	mov	r0, r3
 8000404:	f001 fce0 	bl	8001dc8 <HAL_ADC_ConfigChannel>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MQSensor_get_adc+0x4e>
	{
		Error_Handler();
 800040e:	f000 ff8b 	bl	8001328 <Error_Handler>
	}

	ret = HAL_ADC_Start(sensor->hadc);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	691b      	ldr	r3, [r3, #16]
 8000416:	4618      	mov	r0, r3
 8000418:	f001 faea 	bl	80019f0 <HAL_ADC_Start>
 800041c:	4603      	mov	r3, r0
 800041e:	75fb      	strb	r3, [r7, #23]
	if(ret) {
 8000420:	7dfb      	ldrb	r3, [r7, #23]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d005      	beq.n	8000432 <MQSensor_get_adc+0x6e>
		MQSensor_powerOn(&MQSensor, false);
 8000426:	2100      	movs	r1, #0
 8000428:	481b      	ldr	r0, [pc, #108]	; (8000498 <MQSensor_get_adc+0xd4>)
 800042a:	f000 f837 	bl	800049c <MQSensor_powerOn>
		return ret;
 800042e:	7dfb      	ldrb	r3, [r7, #23]
 8000430:	e02e      	b.n	8000490 <MQSensor_get_adc+0xcc>
	}
	ret = HAL_ADC_PollForConversion(sensor->hadc, 1000);
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	691b      	ldr	r3, [r3, #16]
 8000436:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800043a:	4618      	mov	r0, r3
 800043c:	f001 fbb2 	bl	8001ba4 <HAL_ADC_PollForConversion>
 8000440:	4603      	mov	r3, r0
 8000442:	75fb      	strb	r3, [r7, #23]
	if(ret) {
 8000444:	7dfb      	ldrb	r3, [r7, #23]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d005      	beq.n	8000456 <MQSensor_get_adc+0x92>
		MQSensor_powerOn(&MQSensor, false);
 800044a:	2100      	movs	r1, #0
 800044c:	4812      	ldr	r0, [pc, #72]	; (8000498 <MQSensor_get_adc+0xd4>)
 800044e:	f000 f825 	bl	800049c <MQSensor_powerOn>
		return ret;
 8000452:	7dfb      	ldrb	r3, [r7, #23]
 8000454:	e01c      	b.n	8000490 <MQSensor_get_adc+0xcc>
	}
	sensor->adc_value = HAL_ADC_GetValue(sensor->hadc);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	691b      	ldr	r3, [r3, #16]
 800045a:	4618      	mov	r0, r3
 800045c:	f001 fca8 	bl	8001db0 <HAL_ADC_GetValue>
 8000460:	4602      	mov	r2, r0
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	619a      	str	r2, [r3, #24]
	ret = HAL_ADC_Stop(sensor->hadc);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	691b      	ldr	r3, [r3, #16]
 800046a:	4618      	mov	r0, r3
 800046c:	f001 fb6e 	bl	8001b4c <HAL_ADC_Stop>
 8000470:	4603      	mov	r3, r0
 8000472:	75fb      	strb	r3, [r7, #23]
	if(ret) {
 8000474:	7dfb      	ldrb	r3, [r7, #23]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d005      	beq.n	8000486 <MQSensor_get_adc+0xc2>
		MQSensor_powerOn(&MQSensor, false);
 800047a:	2100      	movs	r1, #0
 800047c:	4806      	ldr	r0, [pc, #24]	; (8000498 <MQSensor_get_adc+0xd4>)
 800047e:	f000 f80d 	bl	800049c <MQSensor_powerOn>
		return ret;
 8000482:	7dfb      	ldrb	r3, [r7, #23]
 8000484:	e004      	b.n	8000490 <MQSensor_get_adc+0xcc>
	}
	MQSensor_powerOn(&MQSensor, false);
 8000486:	2100      	movs	r1, #0
 8000488:	4803      	ldr	r0, [pc, #12]	; (8000498 <MQSensor_get_adc+0xd4>)
 800048a:	f000 f807 	bl	800049c <MQSensor_powerOn>
	return ret;
 800048e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000490:	4618      	mov	r0, r3
 8000492:	3718      	adds	r7, #24
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	200001d8 	.word	0x200001d8

0800049c <MQSensor_powerOn>:

void MQSensor_powerOn(MQSensor_Typdef *sensor, bool power)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	460b      	mov	r3, r1
 80004a6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sensor->HT_GPIOx, sensor->HT_GPIO_Pin, power ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	6818      	ldr	r0, [r3, #0]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	889b      	ldrh	r3, [r3, #4]
 80004b0:	78fa      	ldrb	r2, [r7, #3]
 80004b2:	4619      	mov	r1, r3
 80004b4:	f002 fc25 	bl	8002d02 <HAL_GPIO_WritePin>
}
 80004b8:	bf00      	nop
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <MQSensor_calc>:

void MQSensor_calc(MQSensor_Typdef *sensor)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	sensor->ppm = sensor->adc_value;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	699a      	ldr	r2, [r3, #24]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	621a      	str	r2, [r3, #32]

}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr

080004da <Flash_Earse>:

MLB_EraseError Flash_Earse(uint32_t address)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	b088      	sub	sp, #32
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
 80004e2:	6039      	str	r1, [r7, #0]
	MLB_EraseError eraseError;
	eraseError.status = HAL_ERROR;
 80004e4:	2301      	movs	r3, #1
 80004e6:	763b      	strb	r3, [r7, #24]
	eraseError.pageError = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	767b      	strb	r3, [r7, #25]
 80004ec:	2300      	movs	r3, #0
 80004ee:	76bb      	strb	r3, [r7, #26]
 80004f0:	2300      	movs	r3, #0
 80004f2:	76fb      	strb	r3, [r7, #27]
 80004f4:	2300      	movs	r3, #0
 80004f6:	773b      	strb	r3, [r7, #28]

	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.Banks = FLASH_BANK_1;
 80004f8:	2301      	movs	r3, #1
 80004fa:	60fb      	str	r3, [r7, #12]
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60bb      	str	r3, [r7, #8]
	EraseInit.PageAddress = address;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	613b      	str	r3, [r7, #16]
	EraseInit.NbPages = 1;
 8000504:	2301      	movs	r3, #1
 8000506:	617b      	str	r3, [r7, #20]

	eraseError.status = HAL_FLASH_Unlock();
 8000508:	f002 f8d0 	bl	80026ac <HAL_FLASH_Unlock>
 800050c:	4603      	mov	r3, r0
 800050e:	763b      	strb	r3, [r7, #24]
	if(eraseError.status)
 8000510:	7e3b      	ldrb	r3, [r7, #24]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d008      	beq.n	8000528 <Flash_Earse+0x4e>
		return eraseError;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	461a      	mov	r2, r3
 800051a:	f107 0318 	add.w	r3, r7, #24
 800051e:	6818      	ldr	r0, [r3, #0]
 8000520:	6010      	str	r0, [r2, #0]
 8000522:	791b      	ldrb	r3, [r3, #4]
 8000524:	7113      	strb	r3, [r2, #4]
 8000526:	e02e      	b.n	8000586 <Flash_Earse+0xac>

	eraseError.status = HAL_FLASHEx_Erase(&EraseInit, &eraseError.pageError);
 8000528:	f107 0318 	add.w	r3, r7, #24
 800052c:	1c5a      	adds	r2, r3, #1
 800052e:	f107 0308 	add.w	r3, r7, #8
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f002 f9a1 	bl	800287c <HAL_FLASHEx_Erase>
 800053a:	4603      	mov	r3, r0
 800053c:	763b      	strb	r3, [r7, #24]
	if(eraseError.status)
 800053e:	7e3b      	ldrb	r3, [r7, #24]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d008      	beq.n	8000556 <Flash_Earse+0x7c>
		return eraseError;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	461a      	mov	r2, r3
 8000548:	f107 0318 	add.w	r3, r7, #24
 800054c:	6818      	ldr	r0, [r3, #0]
 800054e:	6010      	str	r0, [r2, #0]
 8000550:	791b      	ldrb	r3, [r3, #4]
 8000552:	7113      	strb	r3, [r2, #4]
 8000554:	e017      	b.n	8000586 <Flash_Earse+0xac>

	eraseError.status = HAL_FLASH_Lock();
 8000556:	f002 f8cf 	bl	80026f8 <HAL_FLASH_Lock>
 800055a:	4603      	mov	r3, r0
 800055c:	763b      	strb	r3, [r7, #24]
	if(eraseError.status)
 800055e:	7e3b      	ldrb	r3, [r7, #24]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d008      	beq.n	8000576 <Flash_Earse+0x9c>
		return eraseError;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	461a      	mov	r2, r3
 8000568:	f107 0318 	add.w	r3, r7, #24
 800056c:	6818      	ldr	r0, [r3, #0]
 800056e:	6010      	str	r0, [r2, #0]
 8000570:	791b      	ldrb	r3, [r3, #4]
 8000572:	7113      	strb	r3, [r2, #4]
 8000574:	e007      	b.n	8000586 <Flash_Earse+0xac>

	return eraseError;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	461a      	mov	r2, r3
 800057a:	f107 0318 	add.w	r3, r7, #24
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	6010      	str	r0, [r2, #0]
 8000582:	791b      	ldrb	r3, [r3, #4]
 8000584:	7113      	strb	r3, [r2, #4]
}
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	3720      	adds	r7, #32
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <Flash_Write_Array>:

HAL_StatusTypeDef Flash_Write_Array(uint32_t address, uint8_t *arr,  uint16_t len)
{
 800058e:	b5b0      	push	{r4, r5, r7, lr}
 8000590:	b086      	sub	sp, #24
 8000592:	af00      	add	r7, sp, #0
 8000594:	60f8      	str	r0, [r7, #12]
 8000596:	60b9      	str	r1, [r7, #8]
 8000598:	4613      	mov	r3, r2
 800059a:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef ret = HAL_OK;
 800059c:	2300      	movs	r3, #0
 800059e:	747b      	strb	r3, [r7, #17]
	uint16_t *pt = (uint16_t *)arr;
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	617b      	str	r3, [r7, #20]
	ret = HAL_FLASH_Unlock();
 80005a4:	f002 f882 	bl	80026ac <HAL_FLASH_Unlock>
 80005a8:	4603      	mov	r3, r0
 80005aa:	747b      	strb	r3, [r7, #17]
	if (ret)
 80005ac:	7c7b      	ldrb	r3, [r7, #17]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <Flash_Write_Array+0x28>
		return ret;
 80005b2:	7c7b      	ldrb	r3, [r7, #17]
 80005b4:	e031      	b.n	800061a <Flash_Write_Array+0x8c>
	for (uint16_t i = 0; i < (len+1)/2; ++i) {
 80005b6:	2300      	movs	r3, #0
 80005b8:	827b      	strh	r3, [r7, #18]
 80005ba:	e01c      	b.n	80005f6 <Flash_Write_Array+0x68>
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2*i, *pt);
 80005bc:	8a7b      	ldrh	r3, [r7, #18]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	461a      	mov	r2, r3
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	18d1      	adds	r1, r2, r3
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	2200      	movs	r2, #0
 80005ce:	461c      	mov	r4, r3
 80005d0:	4615      	mov	r5, r2
 80005d2:	4622      	mov	r2, r4
 80005d4:	462b      	mov	r3, r5
 80005d6:	2001      	movs	r0, #1
 80005d8:	f001 fff8 	bl	80025cc <HAL_FLASH_Program>
 80005dc:	4603      	mov	r3, r0
 80005de:	747b      	strb	r3, [r7, #17]
		if (ret)
 80005e0:	7c7b      	ldrb	r3, [r7, #17]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <Flash_Write_Array+0x5c>
			return ret;
 80005e6:	7c7b      	ldrb	r3, [r7, #17]
 80005e8:	e017      	b.n	800061a <Flash_Write_Array+0x8c>
		pt++;
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	3302      	adds	r3, #2
 80005ee:	617b      	str	r3, [r7, #20]
	for (uint16_t i = 0; i < (len+1)/2; ++i) {
 80005f0:	8a7b      	ldrh	r3, [r7, #18]
 80005f2:	3301      	adds	r3, #1
 80005f4:	827b      	strh	r3, [r7, #18]
 80005f6:	8a7a      	ldrh	r2, [r7, #18]
 80005f8:	88fb      	ldrh	r3, [r7, #6]
 80005fa:	3301      	adds	r3, #1
 80005fc:	0fd9      	lsrs	r1, r3, #31
 80005fe:	440b      	add	r3, r1
 8000600:	105b      	asrs	r3, r3, #1
 8000602:	429a      	cmp	r2, r3
 8000604:	dbda      	blt.n	80005bc <Flash_Write_Array+0x2e>
	}
	ret = HAL_FLASH_Lock();
 8000606:	f002 f877 	bl	80026f8 <HAL_FLASH_Lock>
 800060a:	4603      	mov	r3, r0
 800060c:	747b      	strb	r3, [r7, #17]
	if (ret)
 800060e:	7c7b      	ldrb	r3, [r7, #17]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <Flash_Write_Array+0x8a>
		return ret;
 8000614:	7c7b      	ldrb	r3, [r7, #17]
 8000616:	e000      	b.n	800061a <Flash_Write_Array+0x8c>

	return ret;
 8000618:	7c7b      	ldrb	r3, [r7, #17]
}
 800061a:	4618      	mov	r0, r3
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bdb0      	pop	{r4, r5, r7, pc}

08000622 <Flash_Read_Array>:

HAL_StatusTypeDef Flash_Read_Array(uint32_t address, uint8_t *arr,  uint16_t len)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b086      	sub	sp, #24
 8000626:	af00      	add	r7, sp, #0
 8000628:	60f8      	str	r0, [r7, #12]
 800062a:	60b9      	str	r1, [r7, #8]
 800062c:	4613      	mov	r3, r2
 800062e:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef ret = HAL_OK;
 8000630:	2300      	movs	r3, #0
 8000632:	747b      	strb	r3, [r7, #17]
	uint16_t *pt = (uint16_t *)arr;
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	617b      	str	r3, [r7, #20]
	ret = HAL_FLASH_Unlock();
 8000638:	f002 f838 	bl	80026ac <HAL_FLASH_Unlock>
 800063c:	4603      	mov	r3, r0
 800063e:	747b      	strb	r3, [r7, #17]
	if (ret)
 8000640:	7c7b      	ldrb	r3, [r7, #17]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <Flash_Read_Array+0x28>
		return ret;
 8000646:	7c7b      	ldrb	r3, [r7, #17]
 8000648:	e027      	b.n	800069a <Flash_Read_Array+0x78>
	for (uint16_t i = 0; i < (len+1)/2; ++i) {
 800064a:	2300      	movs	r3, #0
 800064c:	827b      	strh	r3, [r7, #18]
 800064e:	e012      	b.n	8000676 <Flash_Read_Array+0x54>
		*pt = *(uint16_t *)(address + 2*i);
 8000650:	8a7b      	ldrh	r3, [r7, #18]
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	461a      	mov	r2, r3
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	4413      	add	r3, r2
 800065a:	881a      	ldrh	r2, [r3, #0]
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	801a      	strh	r2, [r3, #0]
		if (ret)
 8000660:	7c7b      	ldrb	r3, [r7, #17]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <Flash_Read_Array+0x48>
			return ret;
 8000666:	7c7b      	ldrb	r3, [r7, #17]
 8000668:	e017      	b.n	800069a <Flash_Read_Array+0x78>
		pt++;
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	3302      	adds	r3, #2
 800066e:	617b      	str	r3, [r7, #20]
	for (uint16_t i = 0; i < (len+1)/2; ++i) {
 8000670:	8a7b      	ldrh	r3, [r7, #18]
 8000672:	3301      	adds	r3, #1
 8000674:	827b      	strh	r3, [r7, #18]
 8000676:	8a7a      	ldrh	r2, [r7, #18]
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	3301      	adds	r3, #1
 800067c:	0fd9      	lsrs	r1, r3, #31
 800067e:	440b      	add	r3, r1
 8000680:	105b      	asrs	r3, r3, #1
 8000682:	429a      	cmp	r2, r3
 8000684:	dbe4      	blt.n	8000650 <Flash_Read_Array+0x2e>
	}
	ret = HAL_FLASH_Lock();
 8000686:	f002 f837 	bl	80026f8 <HAL_FLASH_Lock>
 800068a:	4603      	mov	r3, r0
 800068c:	747b      	strb	r3, [r7, #17]
	if (ret)
 800068e:	7c7b      	ldrb	r3, [r7, #17]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <Flash_Read_Array+0x76>
		return ret;
 8000694:	7c7b      	ldrb	r3, [r7, #17]
 8000696:	e000      	b.n	800069a <Flash_Read_Array+0x78>
	return ret;
 8000698:	7c7b      	ldrb	r3, [r7, #17]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <Flash_Write_Struct>:

HAL_StatusTypeDef Flash_Write_Struct(uint32_t address, Sensor_Data_Typdef data)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b086      	sub	sp, #24
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	60f8      	str	r0, [r7, #12]
 80006aa:	4638      	mov	r0, r7
 80006ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	HAL_StatusTypeDef ret = Flash_Write_Array(address, (uint8_t*)&data, sizeof(data));
 80006b0:	463b      	mov	r3, r7
 80006b2:	220c      	movs	r2, #12
 80006b4:	4619      	mov	r1, r3
 80006b6:	68f8      	ldr	r0, [r7, #12]
 80006b8:	f7ff ff69 	bl	800058e <Flash_Write_Array>
 80006bc:	4603      	mov	r3, r0
 80006be:	75fb      	strb	r3, [r7, #23]
	return ret;
 80006c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <Flash_Read_Struct>:

HAL_StatusTypeDef Flash_Read_Struct(uint32_t address, Sensor_Data_Typdef *data)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b084      	sub	sp, #16
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
 80006d2:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret = Flash_Read_Array(address, (uint8_t*)data, sizeof(Sensor_Data_Typdef));
 80006d4:	220c      	movs	r2, #12
 80006d6:	6839      	ldr	r1, [r7, #0]
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ffa2 	bl	8000622 <Flash_Read_Array>
 80006de:	4603      	mov	r3, r0
 80006e0:	73fb      	strb	r3, [r7, #15]
	return ret;
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <heating_display>:

void heating_display()
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
	if ((HAL_GetTick()-MQSensor.previous_heating_time) < 60000 && MQSensor.is_heating) {
 80006f2:	f001 f877 	bl	80017e4 <HAL_GetTick>
 80006f6:	4602      	mov	r2, r0
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <heating_display+0x80>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000702:	4293      	cmp	r3, r2
 8000704:	d807      	bhi.n	8000716 <heating_display+0x2a>
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <heating_display+0x80>)
 8000708:	7f1b      	ldrb	r3, [r3, #28]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d003      	beq.n	8000716 <heating_display+0x2a>
		stateDevice = MEASURING;
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <heating_display+0x84>)
 8000710:	2203      	movs	r2, #3
 8000712:	701a      	strb	r2, [r3, #0]
		return;
 8000714:	e026      	b.n	8000764 <heating_display+0x78>
	}
	uint8_t tick = 20 - (HAL_GetTick()-MQSensor.start_heating_time)/1000;
 8000716:	f001 f865 	bl	80017e4 <HAL_GetTick>
 800071a:	4602      	mov	r2, r0
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <heating_display+0x80>)
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	4a14      	ldr	r2, [pc, #80]	; (8000774 <heating_display+0x88>)
 8000724:	fba2 2303 	umull	r2, r3, r2, r3
 8000728:	099b      	lsrs	r3, r3, #6
 800072a:	b2db      	uxtb	r3, r3
 800072c:	f1c3 0314 	rsb	r3, r3, #20
 8000730:	71fb      	strb	r3, [r7, #7]
	lcd_set_cursor(&hlcd, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	4810      	ldr	r0, [pc, #64]	; (8000778 <heating_display+0x8c>)
 8000738:	f005 fa64 	bl	8005c04 <lcd_set_cursor>
	lcd_printf(&hlcd, "Heating %2ds", tick);
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	461a      	mov	r2, r3
 8000740:	490e      	ldr	r1, [pc, #56]	; (800077c <heating_display+0x90>)
 8000742:	480d      	ldr	r0, [pc, #52]	; (8000778 <heating_display+0x8c>)
 8000744:	f005 fa98 	bl	8005c78 <lcd_printf>
	if (tick == 255) {
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	2bff      	cmp	r3, #255	; 0xff
 800074c:	d10a      	bne.n	8000764 <heating_display+0x78>
		MQSensor.previous_heating_time = HAL_GetTick();
 800074e:	f001 f849 	bl	80017e4 <HAL_GetTick>
 8000752:	4603      	mov	r3, r0
 8000754:	4a05      	ldr	r2, [pc, #20]	; (800076c <heating_display+0x80>)
 8000756:	60d3      	str	r3, [r2, #12]
		MQSensor.is_heating = true;
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <heating_display+0x80>)
 800075a:	2201      	movs	r2, #1
 800075c:	771a      	strb	r2, [r3, #28]
		stateDevice = MEASURING;
 800075e:	4b04      	ldr	r3, [pc, #16]	; (8000770 <heating_display+0x84>)
 8000760:	2203      	movs	r2, #3
 8000762:	701a      	strb	r2, [r3, #0]
	}
}
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200001d8 	.word	0x200001d8
 8000770:	200001fc 	.word	0x200001fc
 8000774:	10624dd3 	.word	0x10624dd3
 8000778:	200001b0 	.word	0x200001b0
 800077c:	08006734 	.word	0x08006734

08000780 <measuring_display>:

void measuring_display(bool isCpltMeas)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	if (isCpltMeas)
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d012      	beq.n	80007b6 <measuring_display+0x36>
	{
		lcd_clear_display(&hlcd);
 8000790:	4811      	ldr	r0, [pc, #68]	; (80007d8 <measuring_display+0x58>)
 8000792:	f005 fa27 	bl	8005be4 <lcd_clear_display>
		lcd_set_cursor(&hlcd, 0, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	480f      	ldr	r0, [pc, #60]	; (80007d8 <measuring_display+0x58>)
 800079c:	f005 fa32 	bl	8005c04 <lcd_set_cursor>
		lcd_printf(&hlcd, "ADC value %4ld", MQSensor.adc_value);
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <measuring_display+0x5c>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	461a      	mov	r2, r3
 80007a6:	490e      	ldr	r1, [pc, #56]	; (80007e0 <measuring_display+0x60>)
 80007a8:	480b      	ldr	r0, [pc, #44]	; (80007d8 <measuring_display+0x58>)
 80007aa:	f005 fa65 	bl	8005c78 <lcd_printf>
		stateDevice = IDLE;
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <measuring_display+0x64>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	701a      	strb	r2, [r3, #0]
	else {
		lcd_clear_display(&hlcd);
		lcd_set_cursor(&hlcd, 0, 0);
		lcd_printf(&hlcd, "Measuring ...");
	}
}
 80007b4:	e00b      	b.n	80007ce <measuring_display+0x4e>
		lcd_clear_display(&hlcd);
 80007b6:	4808      	ldr	r0, [pc, #32]	; (80007d8 <measuring_display+0x58>)
 80007b8:	f005 fa14 	bl	8005be4 <lcd_clear_display>
		lcd_set_cursor(&hlcd, 0, 0);
 80007bc:	2200      	movs	r2, #0
 80007be:	2100      	movs	r1, #0
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <measuring_display+0x58>)
 80007c2:	f005 fa1f 	bl	8005c04 <lcd_set_cursor>
		lcd_printf(&hlcd, "Measuring ...");
 80007c6:	4908      	ldr	r1, [pc, #32]	; (80007e8 <measuring_display+0x68>)
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <measuring_display+0x58>)
 80007ca:	f005 fa55 	bl	8005c78 <lcd_printf>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200001b0 	.word	0x200001b0
 80007dc:	200001d8 	.word	0x200001d8
 80007e0:	08006744 	.word	0x08006744
 80007e4:	200001fc 	.word	0x200001fc
 80007e8:	08006754 	.word	0x08006754

080007ec <idle_display>:

void idle_display()
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	lcd_set_cursor(&hlcd, 1, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2101      	movs	r1, #1
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <idle_display+0x1c>)
 80007f6:	f005 fa05 	bl	8005c04 <lcd_set_cursor>
	lcd_printf(&hlcd, "Press to measure");
 80007fa:	4904      	ldr	r1, [pc, #16]	; (800080c <idle_display+0x20>)
 80007fc:	4802      	ldr	r0, [pc, #8]	; (8000808 <idle_display+0x1c>)
 80007fe:	f005 fa3b 	bl	8005c78 <lcd_printf>
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200001b0 	.word	0x200001b0
 800080c:	08006764 	.word	0x08006764

08000810 <store_data>:

void store_data()
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &data.sTime, RTC_FORMAT_BIN);
 8000814:	2200      	movs	r2, #0
 8000816:	4907      	ldr	r1, [pc, #28]	; (8000834 <store_data+0x24>)
 8000818:	4807      	ldr	r0, [pc, #28]	; (8000838 <store_data+0x28>)
 800081a:	f003 fdeb 	bl	80043f4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &data.sDate, RTC_FORMAT_BIN);
 800081e:	2200      	movs	r2, #0
 8000820:	4906      	ldr	r1, [pc, #24]	; (800083c <store_data+0x2c>)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <store_data+0x28>)
 8000824:	f003 ff74 	bl	8004710 <HAL_RTC_GetDate>
	data.ppm = MQSensor.ppm;
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <store_data+0x30>)
 800082a:	6a1b      	ldr	r3, [r3, #32]
 800082c:	4a05      	ldr	r2, [pc, #20]	; (8000844 <store_data+0x34>)
 800082e:	6093      	str	r3, [r2, #8]

	// store
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000201 	.word	0x20000201
 8000838:	20000154 	.word	0x20000154
 800083c:	20000204 	.word	0x20000204
 8000840:	200001d8 	.word	0x200001d8
 8000844:	20000200 	.word	0x20000200

08000848 <warning>:

void warning()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, (MQSensor.ppm > LEL) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <warning+0x24>)
 800084e:	6a1b      	ldr	r3, [r3, #32]
 8000850:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000854:	bf8c      	ite	hi
 8000856:	2301      	movhi	r3, #1
 8000858:	2300      	movls	r3, #0
 800085a:	b2db      	uxtb	r3, r3
 800085c:	461a      	mov	r2, r3
 800085e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000862:	4803      	ldr	r0, [pc, #12]	; (8000870 <warning+0x28>)
 8000864:	f002 fa4d 	bl	8002d02 <HAL_GPIO_WritePin>
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200001d8 	.word	0x200001d8
 8000870:	40010c00 	.word	0x40010c00

08000874 <send_OK>:

void send_OK()
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
	char str[] = "AHT02\n";
 800087a:	4a0d      	ldr	r2, [pc, #52]	; (80008b0 <send_OK+0x3c>)
 800087c:	463b      	mov	r3, r7
 800087e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000882:	6018      	str	r0, [r3, #0]
 8000884:	3304      	adds	r3, #4
 8000886:	8019      	strh	r1, [r3, #0]
 8000888:	3302      	adds	r3, #2
 800088a:	0c0a      	lsrs	r2, r1, #16
 800088c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 500);
 800088e:	463b      	mov	r3, r7
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fc65 	bl	8000160 <strlen>
 8000896:	4603      	mov	r3, r0
 8000898:	b29a      	uxth	r2, r3
 800089a:	4639      	mov	r1, r7
 800089c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <send_OK+0x40>)
 80008a2:	f004 fafb 	bl	8004e9c <HAL_UART_Transmit>
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	08006778 	.word	0x08006778
 80008b4:	20000168 	.word	0x20000168

080008b8 <send_allData>:

void send_allData()
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <send_test>:

HAL_StatusTypeDef send_test()
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b095      	sub	sp, #84	; 0x54
 80008c8:	af02      	add	r7, sp, #8
	RTC_TimeTypeDef sTime = {0};
 80008ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008ce:	2100      	movs	r1, #0
 80008d0:	460a      	mov	r2, r1
 80008d2:	801a      	strh	r2, [r3, #0]
 80008d4:	460a      	mov	r2, r1
 80008d6:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef sDay = {0};
 80008d8:	2300      	movs	r3, #0
 80008da:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t tx_buff[50];
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80008dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008e0:	2200      	movs	r2, #0
 80008e2:	4619      	mov	r1, r3
 80008e4:	48a7      	ldr	r0, [pc, #668]	; (8000b84 <send_test+0x2c0>)
 80008e6:	f003 fd85 	bl	80043f4 <HAL_RTC_GetTime>
	sprintf((char *)tx_buff, "%d:%d:%d\n", sTime.Hours , sTime.Minutes, sTime.Seconds);
 80008ea:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80008ee:	461a      	mov	r2, r3
 80008f0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80008f4:	4619      	mov	r1, r3
 80008f6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80008fa:	f107 0008 	add.w	r0, r7, #8
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	460b      	mov	r3, r1
 8000902:	49a1      	ldr	r1, [pc, #644]	; (8000b88 <send_test+0x2c4>)
 8000904:	f005 fa34 	bl	8005d70 <siprintf>
	ret = HAL_UART_Transmit(&huart1, tx_buff, strlen((char*)tx_buff), 1000);
 8000908:	f107 0308 	add.w	r3, r7, #8
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fc27 	bl	8000160 <strlen>
 8000912:	4603      	mov	r3, r0
 8000914:	b29a      	uxth	r2, r3
 8000916:	f107 0108 	add.w	r1, r7, #8
 800091a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091e:	489b      	ldr	r0, [pc, #620]	; (8000b8c <send_test+0x2c8>)
 8000920:	f004 fabc 	bl	8004e9c <HAL_UART_Transmit>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	4b99      	ldr	r3, [pc, #612]	; (8000b90 <send_test+0x2cc>)
 800092a:	701a      	strb	r2, [r3, #0]

	HAL_RTC_GetDate(&hrtc, &sDay, RTC_FORMAT_BIN);
 800092c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000930:	2200      	movs	r2, #0
 8000932:	4619      	mov	r1, r3
 8000934:	4893      	ldr	r0, [pc, #588]	; (8000b84 <send_test+0x2c0>)
 8000936:	f003 feeb 	bl	8004710 <HAL_RTC_GetDate>
	sprintf((char *)tx_buff, "%d-%d/%d/%d\n", sDay.WeekDay , sDay.Date, sDay.Month, sDay.Year);
 800093a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800093e:	4619      	mov	r1, r3
 8000940:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000944:	461c      	mov	r4, r3
 8000946:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800094a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800094e:	f107 0008 	add.w	r0, r7, #8
 8000952:	9201      	str	r2, [sp, #4]
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	4623      	mov	r3, r4
 8000958:	460a      	mov	r2, r1
 800095a:	498e      	ldr	r1, [pc, #568]	; (8000b94 <send_test+0x2d0>)
 800095c:	f005 fa08 	bl	8005d70 <siprintf>
	ret = HAL_UART_Transmit(&huart1, tx_buff, strlen((char*)tx_buff), 1000);
 8000960:	f107 0308 	add.w	r3, r7, #8
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fbfb 	bl	8000160 <strlen>
 800096a:	4603      	mov	r3, r0
 800096c:	b29a      	uxth	r2, r3
 800096e:	f107 0108 	add.w	r1, r7, #8
 8000972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000976:	4885      	ldr	r0, [pc, #532]	; (8000b8c <send_test+0x2c8>)
 8000978:	f004 fa90 	bl	8004e9c <HAL_UART_Transmit>
 800097c:	4603      	mov	r3, r0
 800097e:	461a      	mov	r2, r3
 8000980:	4b83      	ldr	r3, [pc, #524]	; (8000b90 <send_test+0x2cc>)
 8000982:	701a      	strb	r2, [r3, #0]

	uint32_t check = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 8000984:	2102      	movs	r1, #2
 8000986:	487f      	ldr	r0, [pc, #508]	; (8000b84 <send_test+0x2c0>)
 8000988:	f004 fa1c 	bl	8004dc4 <HAL_RTCEx_BKUPRead>
 800098c:	6478      	str	r0, [r7, #68]	; 0x44
	sprintf((char *)tx_buff, "RTC_BKP_DR2=%2ld\n", check);
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000994:	4980      	ldr	r1, [pc, #512]	; (8000b98 <send_test+0x2d4>)
 8000996:	4618      	mov	r0, r3
 8000998:	f005 f9ea 	bl	8005d70 <siprintf>
	ret = HAL_UART_Transmit(&huart1, tx_buff, strlen((char*)tx_buff), 1000);
 800099c:	f107 0308 	add.w	r3, r7, #8
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fbdd 	bl	8000160 <strlen>
 80009a6:	4603      	mov	r3, r0
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	f107 0108 	add.w	r1, r7, #8
 80009ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b2:	4876      	ldr	r0, [pc, #472]	; (8000b8c <send_test+0x2c8>)
 80009b4:	f004 fa72 	bl	8004e9c <HAL_UART_Transmit>
 80009b8:	4603      	mov	r3, r0
 80009ba:	461a      	mov	r2, r3
 80009bc:	4b74      	ldr	r3, [pc, #464]	; (8000b90 <send_test+0x2cc>)
 80009be:	701a      	strb	r2, [r3, #0]
		sprintf((char *)tx_buff, "%d\n", arr_r[i]);
		ret = HAL_UART_Transmit(&huart1, tx_buff, strlen((char*)tx_buff), 100);
	}
	*/

	data_w.flag = 0;
 80009c0:	4b76      	ldr	r3, [pc, #472]	; (8000b9c <send_test+0x2d8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	701a      	strb	r2, [r3, #0]
	data_w.sDate = sDay;
 80009c6:	4a75      	ldr	r2, [pc, #468]	; (8000b9c <send_test+0x2d8>)
 80009c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009ca:	6053      	str	r3, [r2, #4]
	data_w.sTime = sTime;
 80009cc:	4b73      	ldr	r3, [pc, #460]	; (8000b9c <send_test+0x2d8>)
 80009ce:	3301      	adds	r3, #1
 80009d0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80009d4:	8811      	ldrh	r1, [r2, #0]
 80009d6:	7892      	ldrb	r2, [r2, #2]
 80009d8:	8019      	strh	r1, [r3, #0]
 80009da:	709a      	strb	r2, [r3, #2]
	data_w.ppm = MQSensor.ppm;
 80009dc:	4b70      	ldr	r3, [pc, #448]	; (8000ba0 <send_test+0x2dc>)
 80009de:	6a1b      	ldr	r3, [r3, #32]
 80009e0:	4a6e      	ldr	r2, [pc, #440]	; (8000b9c <send_test+0x2d8>)
 80009e2:	6093      	str	r3, [r2, #8]
	sprintf((char *)tx_buff, "Address data_w=%ld\nSzie data_w=%d\n", (uint32_t)&data_w, sizeof(data_w));
 80009e4:	4a6d      	ldr	r2, [pc, #436]	; (8000b9c <send_test+0x2d8>)
 80009e6:	f107 0008 	add.w	r0, r7, #8
 80009ea:	230c      	movs	r3, #12
 80009ec:	496d      	ldr	r1, [pc, #436]	; (8000ba4 <send_test+0x2e0>)
 80009ee:	f005 f9bf 	bl	8005d70 <siprintf>
	ret = HAL_UART_Transmit(&huart1, tx_buff, strlen((char*)tx_buff), 1000);
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fbb2 	bl	8000160 <strlen>
 80009fc:	4603      	mov	r3, r0
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	f107 0108 	add.w	r1, r7, #8
 8000a04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a08:	4860      	ldr	r0, [pc, #384]	; (8000b8c <send_test+0x2c8>)
 8000a0a:	f004 fa47 	bl	8004e9c <HAL_UART_Transmit>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b5f      	ldr	r3, [pc, #380]	; (8000b90 <send_test+0x2cc>)
 8000a14:	701a      	strb	r2, [r3, #0]

	ret = Flash_Read_Struct(check+((sizeof(Sensor_Data_Typdef)+1)/2)*2, &data_r);
 8000a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a18:	330c      	adds	r3, #12
 8000a1a:	4963      	ldr	r1, [pc, #396]	; (8000ba8 <send_test+0x2e4>)
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fe54 	bl	80006ca <Flash_Read_Struct>
 8000a22:	4603      	mov	r3, r0
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b5a      	ldr	r3, [pc, #360]	; (8000b90 <send_test+0x2cc>)
 8000a28:	701a      	strb	r2, [r3, #0]
	if ((!check) || (data_r.flag==0)) {
 8000a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d003      	beq.n	8000a38 <send_test+0x174>
 8000a30:	4b5d      	ldr	r3, [pc, #372]	; (8000ba8 <send_test+0x2e4>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d106      	bne.n	8000a46 <send_test+0x182>
		Flash_Earse(ADDRESS_DATA_STORAGE);
 8000a38:	463b      	mov	r3, r7
 8000a3a:	495c      	ldr	r1, [pc, #368]	; (8000bac <send_test+0x2e8>)
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fd4c 	bl	80004da <Flash_Earse>
		check = ADDRESS_DATA_STORAGE - ((sizeof(Sensor_Data_Typdef)+1)/2)*2;
 8000a42:	4b5b      	ldr	r3, [pc, #364]	; (8000bb0 <send_test+0x2ec>)
 8000a44:	647b      	str	r3, [r7, #68]	; 0x44
	}

//	sprintf((char *)tx_buff, "data_r.flag=%d\n!data_r.flag=%d\n", data_r.flag, !data_r.flag);
//	ret = HAL_UART_Transmit(&huart1, tx_buff, strlen((char*)tx_buff), 1000);

	ret = Flash_Write_Struct(check+((sizeof(Sensor_Data_Typdef)+1)/2)*2, data_w);
 8000a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a48:	f103 000c 	add.w	r0, r3, #12
 8000a4c:	4b53      	ldr	r3, [pc, #332]	; (8000b9c <send_test+0x2d8>)
 8000a4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a50:	f7ff fe27 	bl	80006a2 <Flash_Write_Struct>
 8000a54:	4603      	mov	r3, r0
 8000a56:	461a      	mov	r2, r3
 8000a58:	4b4d      	ldr	r3, [pc, #308]	; (8000b90 <send_test+0x2cc>)
 8000a5a:	701a      	strb	r2, [r3, #0]
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, check+((sizeof(Sensor_Data_Typdef)+1)/2)*2);
 8000a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a5e:	330c      	adds	r3, #12
 8000a60:	461a      	mov	r2, r3
 8000a62:	2102      	movs	r1, #2
 8000a64:	4847      	ldr	r0, [pc, #284]	; (8000b84 <send_test+0x2c0>)
 8000a66:	f004 f993 	bl	8004d90 <HAL_RTCEx_BKUPWrite>

	check = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	4845      	ldr	r0, [pc, #276]	; (8000b84 <send_test+0x2c0>)
 8000a6e:	f004 f9a9 	bl	8004dc4 <HAL_RTCEx_BKUPRead>
 8000a72:	6478      	str	r0, [r7, #68]	; 0x44
	sprintf((char *)tx_buff, "RTC_BKP_DR2=%2ld\n", check);
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000a7a:	4947      	ldr	r1, [pc, #284]	; (8000b98 <send_test+0x2d4>)
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f005 f977 	bl	8005d70 <siprintf>
	ret = HAL_UART_Transmit(&huart1, tx_buff, strlen((char*)tx_buff), 1000);
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fb6a 	bl	8000160 <strlen>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	f107 0108 	add.w	r1, r7, #8
 8000a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a98:	483c      	ldr	r0, [pc, #240]	; (8000b8c <send_test+0x2c8>)
 8000a9a:	f004 f9ff 	bl	8004e9c <HAL_UART_Transmit>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b3b      	ldr	r3, [pc, #236]	; (8000b90 <send_test+0x2cc>)
 8000aa4:	701a      	strb	r2, [r3, #0]

	ret = Flash_Read_Struct(check, &data_r);
 8000aa6:	4940      	ldr	r1, [pc, #256]	; (8000ba8 <send_test+0x2e4>)
 8000aa8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000aaa:	f7ff fe0e 	bl	80006ca <Flash_Read_Struct>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b37      	ldr	r3, [pc, #220]	; (8000b90 <send_test+0x2cc>)
 8000ab4:	701a      	strb	r2, [r3, #0]
	sprintf((char *)tx_buff, "Time=%d:%d:%d\n", data_r.sTime.Hours , data_r.sTime.Minutes, data_r.sTime.Seconds);
 8000ab6:	4b3c      	ldr	r3, [pc, #240]	; (8000ba8 <send_test+0x2e4>)
 8000ab8:	785b      	ldrb	r3, [r3, #1]
 8000aba:	461a      	mov	r2, r3
 8000abc:	4b3a      	ldr	r3, [pc, #232]	; (8000ba8 <send_test+0x2e4>)
 8000abe:	789b      	ldrb	r3, [r3, #2]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4b39      	ldr	r3, [pc, #228]	; (8000ba8 <send_test+0x2e4>)
 8000ac4:	78db      	ldrb	r3, [r3, #3]
 8000ac6:	f107 0008 	add.w	r0, r7, #8
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	460b      	mov	r3, r1
 8000ace:	4939      	ldr	r1, [pc, #228]	; (8000bb4 <send_test+0x2f0>)
 8000ad0:	f005 f94e 	bl	8005d70 <siprintf>
	ret = HAL_UART_Transmit(&huart1, tx_buff, strlen((char*)tx_buff), 1000);
 8000ad4:	f107 0308 	add.w	r3, r7, #8
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fb41 	bl	8000160 <strlen>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	f107 0108 	add.w	r1, r7, #8
 8000ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aea:	4828      	ldr	r0, [pc, #160]	; (8000b8c <send_test+0x2c8>)
 8000aec:	f004 f9d6 	bl	8004e9c <HAL_UART_Transmit>
 8000af0:	4603      	mov	r3, r0
 8000af2:	461a      	mov	r2, r3
 8000af4:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <send_test+0x2cc>)
 8000af6:	701a      	strb	r2, [r3, #0]
	sprintf((char *)tx_buff, "Date=%d-%d/%d/%d\n", data_r.sDate.WeekDay , data_r.sDate.Date, data_r.sDate.Month, data_r.sDate.Year);
 8000af8:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <send_test+0x2e4>)
 8000afa:	791b      	ldrb	r3, [r3, #4]
 8000afc:	4619      	mov	r1, r3
 8000afe:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <send_test+0x2e4>)
 8000b00:	799b      	ldrb	r3, [r3, #6]
 8000b02:	461c      	mov	r4, r3
 8000b04:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <send_test+0x2e4>)
 8000b06:	795b      	ldrb	r3, [r3, #5]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <send_test+0x2e4>)
 8000b0c:	79db      	ldrb	r3, [r3, #7]
 8000b0e:	f107 0008 	add.w	r0, r7, #8
 8000b12:	9301      	str	r3, [sp, #4]
 8000b14:	9200      	str	r2, [sp, #0]
 8000b16:	4623      	mov	r3, r4
 8000b18:	460a      	mov	r2, r1
 8000b1a:	4927      	ldr	r1, [pc, #156]	; (8000bb8 <send_test+0x2f4>)
 8000b1c:	f005 f928 	bl	8005d70 <siprintf>
	ret = HAL_UART_Transmit(&huart1, tx_buff, strlen((char*)tx_buff), 1000);
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fb1b 	bl	8000160 <strlen>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	f107 0108 	add.w	r1, r7, #8
 8000b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b36:	4815      	ldr	r0, [pc, #84]	; (8000b8c <send_test+0x2c8>)
 8000b38:	f004 f9b0 	bl	8004e9c <HAL_UART_Transmit>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <send_test+0x2cc>)
 8000b42:	701a      	strb	r2, [r3, #0]
	sprintf((char *)tx_buff, "PPM=%ld\n", data_r.ppm);
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <send_test+0x2e4>)
 8000b46:	689a      	ldr	r2, [r3, #8]
 8000b48:	f107 0308 	add.w	r3, r7, #8
 8000b4c:	491b      	ldr	r1, [pc, #108]	; (8000bbc <send_test+0x2f8>)
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f005 f90e 	bl	8005d70 <siprintf>
	ret = HAL_UART_Transmit(&huart1, tx_buff, strlen((char*)tx_buff), 1000);
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fb01 	bl	8000160 <strlen>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	f107 0108 	add.w	r1, r7, #8
 8000b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6a:	4808      	ldr	r0, [pc, #32]	; (8000b8c <send_test+0x2c8>)
 8000b6c:	f004 f996 	bl	8004e9c <HAL_UART_Transmit>
 8000b70:	4603      	mov	r3, r0
 8000b72:	461a      	mov	r2, r3
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <send_test+0x2cc>)
 8000b76:	701a      	strb	r2, [r3, #0]

	return ret;
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <send_test+0x2cc>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	374c      	adds	r7, #76	; 0x4c
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd90      	pop	{r4, r7, pc}
 8000b84:	20000154 	.word	0x20000154
 8000b88:	08006780 	.word	0x08006780
 8000b8c:	20000168 	.word	0x20000168
 8000b90:	20000221 	.word	0x20000221
 8000b94:	0800678c 	.word	0x0800678c
 8000b98:	0800679c 	.word	0x0800679c
 8000b9c:	20000230 	.word	0x20000230
 8000ba0:	200001d8 	.word	0x200001d8
 8000ba4:	080067b0 	.word	0x080067b0
 8000ba8:	20000224 	.word	0x20000224
 8000bac:	0800fc00 	.word	0x0800fc00
 8000bb0:	0800fbf4 	.word	0x0800fbf4
 8000bb4:	080067d4 	.word	0x080067d4
 8000bb8:	080067e4 	.word	0x080067e4
 8000bbc:	080067f8 	.word	0x080067f8

08000bc0 <communicating_handle>:

void communicating_handle()
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	if (disp_flag) {
 8000bc4:	4b50      	ldr	r3, [pc, #320]	; (8000d08 <communicating_handle+0x148>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00b      	beq.n	8000be4 <communicating_handle+0x24>
		lcd_set_cursor(&hlcd, 0, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	484e      	ldr	r0, [pc, #312]	; (8000d0c <communicating_handle+0x14c>)
 8000bd2:	f005 f817 	bl	8005c04 <lcd_set_cursor>
		lcd_printf(&hlcd, "Communicating ...");
 8000bd6:	494e      	ldr	r1, [pc, #312]	; (8000d10 <communicating_handle+0x150>)
 8000bd8:	484c      	ldr	r0, [pc, #304]	; (8000d0c <communicating_handle+0x14c>)
 8000bda:	f005 f84d 	bl	8005c78 <lcd_printf>
		disp_flag = false;
 8000bde:	4b4a      	ldr	r3, [pc, #296]	; (8000d08 <communicating_handle+0x148>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
	}
	if (uart_flag)
 8000be4:	4b4b      	ldr	r3, [pc, #300]	; (8000d14 <communicating_handle+0x154>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	f000 808b 	beq.w	8000d04 <communicating_handle+0x144>
	{
		uart_flag = false;
 8000bee:	4b49      	ldr	r3, [pc, #292]	; (8000d14 <communicating_handle+0x154>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]

		// Request Connect
		if (!strcmp((char *)rx_buffer, "AT01")) {
 8000bf4:	4948      	ldr	r1, [pc, #288]	; (8000d18 <communicating_handle+0x158>)
 8000bf6:	4849      	ldr	r0, [pc, #292]	; (8000d1c <communicating_handle+0x15c>)
 8000bf8:	f7ff faa8 	bl	800014c <strcmp>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d110      	bne.n	8000c24 <communicating_handle+0x64>
			send_OK();
 8000c02:	f7ff fe37 	bl	8000874 <send_OK>
			memset((char *)rx_buffer, '\0', sizeofBuff);
 8000c06:	2214      	movs	r2, #20
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4844      	ldr	r0, [pc, #272]	; (8000d1c <communicating_handle+0x15c>)
 8000c0c:	f005 f8f0 	bl	8005df0 <memset>
			ret = HAL_UART_Receive_IT(&huart1, rx_buffer, 5);
 8000c10:	2205      	movs	r2, #5
 8000c12:	4942      	ldr	r1, [pc, #264]	; (8000d1c <communicating_handle+0x15c>)
 8000c14:	4842      	ldr	r0, [pc, #264]	; (8000d20 <communicating_handle+0x160>)
 8000c16:	f004 f9c4 	bl	8004fa2 <HAL_UART_Receive_IT>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b41      	ldr	r3, [pc, #260]	; (8000d24 <communicating_handle+0x164>)
 8000c20:	701a      	strb	r2, [r3, #0]
			return;
 8000c22:	e06f      	b.n	8000d04 <communicating_handle+0x144>
		}

		// Close Connect
		if (!strcmp((char *)rx_buffer, "AT04")) {
 8000c24:	4940      	ldr	r1, [pc, #256]	; (8000d28 <communicating_handle+0x168>)
 8000c26:	483d      	ldr	r0, [pc, #244]	; (8000d1c <communicating_handle+0x15c>)
 8000c28:	f7ff fa90 	bl	800014c <strcmp>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d116      	bne.n	8000c60 <communicating_handle+0xa0>
			send_OK();
 8000c32:	f7ff fe1f 	bl	8000874 <send_OK>
			memset((char *)rx_buffer, '\0', sizeofBuff);
 8000c36:	2214      	movs	r2, #20
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4838      	ldr	r0, [pc, #224]	; (8000d1c <communicating_handle+0x15c>)
 8000c3c:	f005 f8d8 	bl	8005df0 <memset>
			ret = HAL_UART_Receive_IT(&huart1, rx_buffer, 5);
 8000c40:	2205      	movs	r2, #5
 8000c42:	4936      	ldr	r1, [pc, #216]	; (8000d1c <communicating_handle+0x15c>)
 8000c44:	4836      	ldr	r0, [pc, #216]	; (8000d20 <communicating_handle+0x160>)
 8000c46:	f004 f9ac 	bl	8004fa2 <HAL_UART_Receive_IT>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b35      	ldr	r3, [pc, #212]	; (8000d24 <communicating_handle+0x164>)
 8000c50:	701a      	strb	r2, [r3, #0]
			stateDevice = IDLE;
 8000c52:	4b36      	ldr	r3, [pc, #216]	; (8000d2c <communicating_handle+0x16c>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
			lcd_clear_display(&hlcd);
 8000c58:	482c      	ldr	r0, [pc, #176]	; (8000d0c <communicating_handle+0x14c>)
 8000c5a:	f004 ffc3 	bl	8005be4 <lcd_clear_display>
			return;
 8000c5e:	e051      	b.n	8000d04 <communicating_handle+0x144>
		}

		// TEST
		if (!strcmp((char *)rx_buffer, "AT05")) {
 8000c60:	4933      	ldr	r1, [pc, #204]	; (8000d30 <communicating_handle+0x170>)
 8000c62:	482e      	ldr	r0, [pc, #184]	; (8000d1c <communicating_handle+0x15c>)
 8000c64:	f7ff fa72 	bl	800014c <strcmp>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d110      	bne.n	8000c90 <communicating_handle+0xd0>
//			send_OK();
			memset((char *)rx_buffer, '\0', sizeofBuff);
 8000c6e:	2214      	movs	r2, #20
 8000c70:	2100      	movs	r1, #0
 8000c72:	482a      	ldr	r0, [pc, #168]	; (8000d1c <communicating_handle+0x15c>)
 8000c74:	f005 f8bc 	bl	8005df0 <memset>
			ret = HAL_UART_Receive_IT(&huart1, rx_buffer, 5);
 8000c78:	2205      	movs	r2, #5
 8000c7a:	4928      	ldr	r1, [pc, #160]	; (8000d1c <communicating_handle+0x15c>)
 8000c7c:	4828      	ldr	r0, [pc, #160]	; (8000d20 <communicating_handle+0x160>)
 8000c7e:	f004 f990 	bl	8004fa2 <HAL_UART_Receive_IT>
 8000c82:	4603      	mov	r3, r0
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b27      	ldr	r3, [pc, #156]	; (8000d24 <communicating_handle+0x164>)
 8000c88:	701a      	strb	r2, [r3, #0]
			send_test();
 8000c8a:	f7ff fe1b 	bl	80008c4 <send_test>
			return;
 8000c8e:	e039      	b.n	8000d04 <communicating_handle+0x144>
		}

		// all Data
		if (!strcmp((char *)rx_buffer, "AT06")) {
 8000c90:	4928      	ldr	r1, [pc, #160]	; (8000d34 <communicating_handle+0x174>)
 8000c92:	4822      	ldr	r0, [pc, #136]	; (8000d1c <communicating_handle+0x15c>)
 8000c94:	f7ff fa5a 	bl	800014c <strcmp>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d102      	bne.n	8000ca4 <communicating_handle+0xe4>
			send_allData();
 8000c9e:	f7ff fe0b 	bl	80008b8 <send_allData>
			return;
 8000ca2:	e02f      	b.n	8000d04 <communicating_handle+0x144>
		}

		// set Time
		if (!strcmp((char *)rx_buffer, "AT07")) {
 8000ca4:	4924      	ldr	r1, [pc, #144]	; (8000d38 <communicating_handle+0x178>)
 8000ca6:	481d      	ldr	r0, [pc, #116]	; (8000d1c <communicating_handle+0x15c>)
 8000ca8:	f7ff fa50 	bl	800014c <strcmp>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d110      	bne.n	8000cd4 <communicating_handle+0x114>
			send_OK();
 8000cb2:	f7ff fddf 	bl	8000874 <send_OK>
			memset((char *)rx_buffer, '\0', sizeofBuff);
 8000cb6:	2214      	movs	r2, #20
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4818      	ldr	r0, [pc, #96]	; (8000d1c <communicating_handle+0x15c>)
 8000cbc:	f005 f898 	bl	8005df0 <memset>
			ret = HAL_UART_Receive_IT(&huart1, rx_buffer, 5);
 8000cc0:	2205      	movs	r2, #5
 8000cc2:	4916      	ldr	r1, [pc, #88]	; (8000d1c <communicating_handle+0x15c>)
 8000cc4:	4816      	ldr	r0, [pc, #88]	; (8000d20 <communicating_handle+0x160>)
 8000cc6:	f004 f96c 	bl	8004fa2 <HAL_UART_Receive_IT>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <communicating_handle+0x164>)
 8000cd0:	701a      	strb	r2, [r3, #0]
			return;
 8000cd2:	e017      	b.n	8000d04 <communicating_handle+0x144>
		}

		// set Day
		if (!strcmp((char *)rx_buffer, "AT07")) {
 8000cd4:	4918      	ldr	r1, [pc, #96]	; (8000d38 <communicating_handle+0x178>)
 8000cd6:	4811      	ldr	r0, [pc, #68]	; (8000d1c <communicating_handle+0x15c>)
 8000cd8:	f7ff fa38 	bl	800014c <strcmp>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d110      	bne.n	8000d04 <communicating_handle+0x144>
			send_OK();
 8000ce2:	f7ff fdc7 	bl	8000874 <send_OK>
			memset((char *)rx_buffer, '\0', sizeofBuff);
 8000ce6:	2214      	movs	r2, #20
 8000ce8:	2100      	movs	r1, #0
 8000cea:	480c      	ldr	r0, [pc, #48]	; (8000d1c <communicating_handle+0x15c>)
 8000cec:	f005 f880 	bl	8005df0 <memset>
			ret = HAL_UART_Receive_IT(&huart1, rx_buffer, 5);
 8000cf0:	2205      	movs	r2, #5
 8000cf2:	490a      	ldr	r1, [pc, #40]	; (8000d1c <communicating_handle+0x15c>)
 8000cf4:	480a      	ldr	r0, [pc, #40]	; (8000d20 <communicating_handle+0x160>)
 8000cf6:	f004 f954 	bl	8004fa2 <HAL_UART_Receive_IT>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <communicating_handle+0x164>)
 8000d00:	701a      	strb	r2, [r3, #0]
			return;
 8000d02:	bf00      	nop
		}
	}
}
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	200001b0 	.word	0x200001b0
 8000d10:	08006804 	.word	0x08006804
 8000d14:	20000220 	.word	0x20000220
 8000d18:	08006818 	.word	0x08006818
 8000d1c:	2000020c 	.word	0x2000020c
 8000d20:	20000168 	.word	0x20000168
 8000d24:	20000221 	.word	0x20000221
 8000d28:	08006820 	.word	0x08006820
 8000d2c:	200001fc 	.word	0x200001fc
 8000d30:	08006828 	.word	0x08006828
 8000d34:	08006830 	.word	0x08006830
 8000d38:	08006838 	.word	0x08006838

08000d3c <uart_handle>:

void uart_handle()
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	if (uart_flag) {
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <uart_handle+0x50>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d01f      	beq.n	8000d88 <uart_handle+0x4c>
		if (stateDevice == IDLE) {
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <uart_handle+0x54>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d11b      	bne.n	8000d88 <uart_handle+0x4c>
			if (!strcmp((char *)rx_buffer, "AT01")) {
 8000d50:	4910      	ldr	r1, [pc, #64]	; (8000d94 <uart_handle+0x58>)
 8000d52:	4811      	ldr	r0, [pc, #68]	; (8000d98 <uart_handle+0x5c>)
 8000d54:	f7ff f9fa 	bl	800014c <strcmp>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d109      	bne.n	8000d72 <uart_handle+0x36>
				lcd_clear_display(&hlcd);
 8000d5e:	480f      	ldr	r0, [pc, #60]	; (8000d9c <uart_handle+0x60>)
 8000d60:	f004 ff40 	bl	8005be4 <lcd_clear_display>
				stateDevice = COMMUNICATING;
 8000d64:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <uart_handle+0x54>)
 8000d66:	2204      	movs	r2, #4
 8000d68:	701a      	strb	r2, [r3, #0]
				disp_flag = true;
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <uart_handle+0x64>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
				return;
 8000d70:	e00a      	b.n	8000d88 <uart_handle+0x4c>
			}
			else
			{
				memset((char *)rx_buffer, '\0', sizeofBuff);
 8000d72:	2214      	movs	r2, #20
 8000d74:	2100      	movs	r1, #0
 8000d76:	4808      	ldr	r0, [pc, #32]	; (8000d98 <uart_handle+0x5c>)
 8000d78:	f005 f83a 	bl	8005df0 <memset>
				HAL_UART_Receive_IT(&huart1, rx_buffer, 5);
 8000d7c:	2205      	movs	r2, #5
 8000d7e:	4906      	ldr	r1, [pc, #24]	; (8000d98 <uart_handle+0x5c>)
 8000d80:	4808      	ldr	r0, [pc, #32]	; (8000da4 <uart_handle+0x68>)
 8000d82:	f004 f90e 	bl	8004fa2 <HAL_UART_Receive_IT>
				return;
 8000d86:	bf00      	nop

		if (stateDevice == COMMUNICATING) {

		}
	}
}
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000220 	.word	0x20000220
 8000d90:	200001fc 	.word	0x200001fc
 8000d94:	08006818 	.word	0x08006818
 8000d98:	2000020c 	.word	0x2000020c
 8000d9c:	200001b0 	.word	0x200001b0
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000168 	.word	0x20000168

08000da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dae:	f000 fcc1 	bl	8001734 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db2:	f000 f877 	bl	8000ea4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db6:	f000 fa17 	bl	80011e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dba:	f000 f911 	bl	8000fe0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000dbe:	f000 f93d 	bl	800103c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000dc2:	f000 f9e7 	bl	8001194 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000dc6:	f000 f8cd 	bl	8000f64 <MX_ADC1_Init>
  MX_RTC_Init();
 8000dca:	f000 f965 	bl	8001098 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  lcd_init(&hlcd, &hi2c2, LCD_ADDR_DEFAULT);
 8000dce:	2227      	movs	r2, #39	; 0x27
 8000dd0:	4929      	ldr	r1, [pc, #164]	; (8000e78 <main+0xd0>)
 8000dd2:	482a      	ldr	r0, [pc, #168]	; (8000e7c <main+0xd4>)
 8000dd4:	f004 ff87 	bl	8005ce6 <lcd_init>
  button_init(&button1, GPIOA, GPIO_PIN_8);
 8000dd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ddc:	4928      	ldr	r1, [pc, #160]	; (8000e80 <main+0xd8>)
 8000dde:	4829      	ldr	r0, [pc, #164]	; (8000e84 <main+0xdc>)
 8000de0:	f7ff fa46 	bl	8000270 <button_init>
  MQSensor_Init(&MQSensor, HT_CTRL_GPIO_Port, HT_CTRL_Pin, &hadc1, ADC_CHANNEL_0);
 8000de4:	2300      	movs	r3, #0
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <main+0xe0>)
 8000dea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dee:	4927      	ldr	r1, [pc, #156]	; (8000e8c <main+0xe4>)
 8000df0:	4827      	ldr	r0, [pc, #156]	; (8000e90 <main+0xe8>)
 8000df2:	f7ff fac9 	bl	8000388 <MQSensor_Init>

  stateDevice = IDLE;
 8000df6:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <main+0xec>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]

  disp_flag = true;
 8000dfc:	4b26      	ldr	r3, [pc, #152]	; (8000e98 <main+0xf0>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart1, rx_buffer, 5);
 8000e02:	2205      	movs	r2, #5
 8000e04:	4925      	ldr	r1, [pc, #148]	; (8000e9c <main+0xf4>)
 8000e06:	4826      	ldr	r0, [pc, #152]	; (8000ea0 <main+0xf8>)
 8000e08:	f004 f8cb 	bl	8004fa2 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  button_handle(&button1);
 8000e0c:	481d      	ldr	r0, [pc, #116]	; (8000e84 <main+0xdc>)
 8000e0e:	f7ff fa41 	bl	8000294 <button_handle>
	  switch (stateDevice) {
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <main+0xec>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	d827      	bhi.n	8000e6c <main+0xc4>
 8000e1c:	a201      	add	r2, pc, #4	; (adr r2, 8000e24 <main+0x7c>)
 8000e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e22:	bf00      	nop
 8000e24:	08000e35 	.word	0x08000e35
 8000e28:	08000e3f 	.word	0x08000e3f
 8000e2c:	08000e45 	.word	0x08000e45
 8000e30:	08000e67 	.word	0x08000e67
	  	case IDLE:
	  		idle_display();
 8000e34:	f7ff fcda 	bl	80007ec <idle_display>
	  		uart_handle();
 8000e38:	f7ff ff80 	bl	8000d3c <uart_handle>
	  		break;
 8000e3c:	e01a      	b.n	8000e74 <main+0xcc>
		case HEATING:
			heating_display();
 8000e3e:	f7ff fc55 	bl	80006ec <heating_display>
			break;
 8000e42:	e017      	b.n	8000e74 <main+0xcc>
		case MEASURING:
			measuring_display(false);
 8000e44:	2000      	movs	r0, #0
 8000e46:	f7ff fc9b 	bl	8000780 <measuring_display>
			MQSensor_get_adc(&MQSensor);
 8000e4a:	4811      	ldr	r0, [pc, #68]	; (8000e90 <main+0xe8>)
 8000e4c:	f7ff faba 	bl	80003c4 <MQSensor_get_adc>
			MQSensor_calc(&MQSensor);
 8000e50:	480f      	ldr	r0, [pc, #60]	; (8000e90 <main+0xe8>)
 8000e52:	f7ff fb35 	bl	80004c0 <MQSensor_calc>
			warning();
 8000e56:	f7ff fcf7 	bl	8000848 <warning>
			measuring_display(true);
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f7ff fc90 	bl	8000780 <measuring_display>
			store_data();
 8000e60:	f7ff fcd6 	bl	8000810 <store_data>
			break;
 8000e64:	e006      	b.n	8000e74 <main+0xcc>
		case COMMUNICATING:
			communicating_handle();
 8000e66:	f7ff feab 	bl	8000bc0 <communicating_handle>
			break;
 8000e6a:	e003      	b.n	8000e74 <main+0xcc>
		default:
			stateDevice = IDLE;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <main+0xec>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	701a      	strb	r2, [r3, #0]
			break;
 8000e72:	bf00      	nop
	  button_handle(&button1);
 8000e74:	e7ca      	b.n	8000e0c <main+0x64>
 8000e76:	bf00      	nop
 8000e78:	20000100 	.word	0x20000100
 8000e7c:	200001b0 	.word	0x200001b0
 8000e80:	40010800 	.word	0x40010800
 8000e84:	200001c0 	.word	0x200001c0
 8000e88:	2000007c 	.word	0x2000007c
 8000e8c:	40010c00 	.word	0x40010c00
 8000e90:	200001d8 	.word	0x200001d8
 8000e94:	200001fc 	.word	0x200001fc
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	2000020c 	.word	0x2000020c
 8000ea0:	20000168 	.word	0x20000168

08000ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b094      	sub	sp, #80	; 0x50
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eae:	2228      	movs	r2, #40	; 0x28
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f004 ff9c 	bl	8005df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000ed4:	2305      	movs	r3, #5
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eea:	2302      	movs	r3, #2
 8000eec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ef2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ef4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 fbd8 	bl	80036b4 <HAL_RCC_OscConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000f0a:	f000 fa0d 	bl	8001328 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f0e:	230f      	movs	r3, #15
 8000f10:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f12:	2302      	movs	r3, #2
 8000f14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f1e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2102      	movs	r1, #2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f002 fe44 	bl	8003bb8 <HAL_RCC_ClockConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f36:	f000 f9f7 	bl	8001328 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f42:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f48:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f002 ffc1 	bl	8003ed4 <HAL_RCCEx_PeriphCLKConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000f58:	f000 f9e6 	bl	8001328 <Error_Handler>
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	3750      	adds	r7, #80	; 0x50
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_ADC1_Init+0x74>)
 8000f76:	4a19      	ldr	r2, [pc, #100]	; (8000fdc <MX_ADC1_Init+0x78>)
 8000f78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <MX_ADC1_Init+0x74>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <MX_ADC1_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_ADC1_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_ADC1_Init+0x74>)
 8000f8e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f92:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f94:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <MX_ADC1_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_ADC1_Init+0x74>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <MX_ADC1_Init+0x74>)
 8000fa2:	f000 fc4d 	bl	8001840 <HAL_ADC_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000fac:	f000 f9bc 	bl	8001328 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_ADC1_Init+0x74>)
 8000fc2:	f000 ff01 	bl	8001dc8 <HAL_ADC_ConfigChannel>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000fcc:	f000 f9ac 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	2000007c 	.word	0x2000007c
 8000fdc:	40012400 	.word	0x40012400

08000fe0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <MX_I2C1_Init+0x50>)
 8000fe6:	4a13      	ldr	r2, [pc, #76]	; (8001034 <MX_I2C1_Init+0x54>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MX_I2C1_Init+0x50>)
 8000fec:	4a12      	ldr	r2, [pc, #72]	; (8001038 <MX_I2C1_Init+0x58>)
 8000fee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <MX_I2C1_Init+0x50>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <MX_I2C1_Init+0x50>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MX_I2C1_Init+0x50>)
 8000ffe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001002:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <MX_I2C1_Init+0x50>)
 8001006:	2200      	movs	r2, #0
 8001008:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_I2C1_Init+0x50>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <MX_I2C1_Init+0x50>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <MX_I2C1_Init+0x50>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <MX_I2C1_Init+0x50>)
 800101e:	f001 fea1 	bl	8002d64 <HAL_I2C_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001028:	f000 f97e 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200000ac 	.word	0x200000ac
 8001034:	40005400 	.word	0x40005400
 8001038:	000186a0 	.word	0x000186a0

0800103c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_Init 0 */
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <MX_I2C2_Init+0x50>)
 8001042:	4a13      	ldr	r2, [pc, #76]	; (8001090 <MX_I2C2_Init+0x54>)
 8001044:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_I2C2_Init+0x50>)
 8001048:	4a12      	ldr	r2, [pc, #72]	; (8001094 <MX_I2C2_Init+0x58>)
 800104a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_I2C2_Init+0x50>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <MX_I2C2_Init+0x50>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <MX_I2C2_Init+0x50>)
 800105a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800105e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <MX_I2C2_Init+0x50>)
 8001062:	2200      	movs	r2, #0
 8001064:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <MX_I2C2_Init+0x50>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800106c:	4b07      	ldr	r3, [pc, #28]	; (800108c <MX_I2C2_Init+0x50>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <MX_I2C2_Init+0x50>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <MX_I2C2_Init+0x50>)
 800107a:	f001 fe73 	bl	8002d64 <HAL_I2C_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001084:	f000 f950 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  /* USER CODE END I2C2_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000100 	.word	0x20000100
 8001090:	40005800 	.word	0x40005800
 8001094:	000186a0 	.word	0x000186a0

08001098 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2100      	movs	r1, #0
 80010a2:	460a      	mov	r2, r1
 80010a4:	801a      	strh	r2, [r3, #0]
 80010a6:	460a      	mov	r2, r1
 80010a8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010ae:	4b37      	ldr	r3, [pc, #220]	; (800118c <MX_RTC_Init+0xf4>)
 80010b0:	4a37      	ldr	r2, [pc, #220]	; (8001190 <MX_RTC_Init+0xf8>)
 80010b2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80010b4:	4b35      	ldr	r3, [pc, #212]	; (800118c <MX_RTC_Init+0xf4>)
 80010b6:	f04f 32ff 	mov.w	r2, #4294967295
 80010ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80010bc:	4b33      	ldr	r3, [pc, #204]	; (800118c <MX_RTC_Init+0xf4>)
 80010be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c2:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010c4:	4831      	ldr	r0, [pc, #196]	; (800118c <MX_RTC_Init+0xf4>)
 80010c6:	f003 f871 	bl	80041ac <HAL_RTC_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80010d0:	f000 f92a 	bl	8001328 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != RTC_BKP_SET_TIME)
 80010d4:	2101      	movs	r1, #1
 80010d6:	482d      	ldr	r0, [pc, #180]	; (800118c <MX_RTC_Init+0xf4>)
 80010d8:	f003 fe74 	bl	8004dc4 <HAL_RTCEx_BKUPRead>
 80010dc:	4603      	mov	r3, r0
 80010de:	f242 6206 	movw	r2, #9734	; 0x2606
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d023      	beq.n	800112e <MX_RTC_Init+0x96>
  {
	  	sTime.Hours = 18;
 80010e6:	2312      	movs	r3, #18
 80010e8:	713b      	strb	r3, [r7, #4]
	    sTime.Minutes = 5;
 80010ea:	2305      	movs	r3, #5
 80010ec:	717b      	strb	r3, [r7, #5]
	    sTime.Seconds = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	71bb      	strb	r3, [r7, #6]

	    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2200      	movs	r2, #0
 80010f6:	4619      	mov	r1, r3
 80010f8:	4824      	ldr	r0, [pc, #144]	; (800118c <MX_RTC_Init+0xf4>)
 80010fa:	f003 f8e3 	bl	80042c4 <HAL_RTC_SetTime>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_RTC_Init+0x70>
	    {
	      Error_Handler();
 8001104:	f000 f910 	bl	8001328 <Error_Handler>
	    }
	    DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8001108:	2306      	movs	r3, #6
 800110a:	703b      	strb	r3, [r7, #0]
	    DateToUpdate.Month = RTC_MONTH_SEPTEMBER;
 800110c:	2309      	movs	r3, #9
 800110e:	707b      	strb	r3, [r7, #1]
	    DateToUpdate.Date = 23;
 8001110:	2317      	movs	r3, #23
 8001112:	70bb      	strb	r3, [r7, #2]
	    DateToUpdate.Year = 23;
 8001114:	2317      	movs	r3, #23
 8001116:	70fb      	strb	r3, [r7, #3]

	    if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8001118:	463b      	mov	r3, r7
 800111a:	2200      	movs	r2, #0
 800111c:	4619      	mov	r1, r3
 800111e:	481b      	ldr	r0, [pc, #108]	; (800118c <MX_RTC_Init+0xf4>)
 8001120:	f003 fa40 	bl	80045a4 <HAL_RTC_SetDate>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_RTC_Init+0x96>
	    {
	      Error_Handler();
 800112a:	f000 f8fd 	bl	8001328 <Error_Handler>
	    }
  }

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_BKP_SET_TIME);
 800112e:	f242 6206 	movw	r2, #9734	; 0x2606
 8001132:	2101      	movs	r1, #1
 8001134:	4815      	ldr	r0, [pc, #84]	; (800118c <MX_RTC_Init+0xf4>)
 8001136:	f003 fe2b 	bl	8004d90 <HAL_RTCEx_BKUPWrite>
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 17;
 800113a:	2311      	movs	r3, #17
 800113c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 56;
 800113e:	2338      	movs	r3, #56	; 0x38
 8001140:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2200      	movs	r2, #0
 800114a:	4619      	mov	r1, r3
 800114c:	480f      	ldr	r0, [pc, #60]	; (800118c <MX_RTC_Init+0xf4>)
 800114e:	f003 f8b9 	bl	80042c4 <HAL_RTC_SetTime>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001158:	f000 f8e6 	bl	8001328 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800115c:	2306      	movs	r3, #6
 800115e:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_SEPTEMBER;
 8001160:	2309      	movs	r3, #9
 8001162:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 23;
 8001164:	2317      	movs	r3, #23
 8001166:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 23;
 8001168:	2317      	movs	r3, #23
 800116a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	2200      	movs	r2, #0
 8001170:	4619      	mov	r1, r3
 8001172:	4806      	ldr	r0, [pc, #24]	; (800118c <MX_RTC_Init+0xf4>)
 8001174:	f003 fa16 	bl	80045a4 <HAL_RTC_SetDate>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_RTC_Init+0xea>
  {
    Error_Handler();
 800117e:	f000 f8d3 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000154 	.word	0x20000154
 8001190:	40002800 	.word	0x40002800

08001194 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <MX_USART1_UART_Init+0x50>)
 800119c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011ba:	220c      	movs	r2, #12
 80011bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_USART1_UART_Init+0x4c>)
 80011cc:	f003 fe16 	bl	8004dfc <HAL_UART_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011d6:	f000 f8a7 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000168 	.word	0x20000168
 80011e4:	40013800 	.word	0x40013800

080011e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fc:	4b39      	ldr	r3, [pc, #228]	; (80012e4 <MX_GPIO_Init+0xfc>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a38      	ldr	r2, [pc, #224]	; (80012e4 <MX_GPIO_Init+0xfc>)
 8001202:	f043 0310 	orr.w	r3, r3, #16
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <MX_GPIO_Init+0xfc>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0310 	and.w	r3, r3, #16
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001214:	4b33      	ldr	r3, [pc, #204]	; (80012e4 <MX_GPIO_Init+0xfc>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a32      	ldr	r2, [pc, #200]	; (80012e4 <MX_GPIO_Init+0xfc>)
 800121a:	f043 0320 	orr.w	r3, r3, #32
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b30      	ldr	r3, [pc, #192]	; (80012e4 <MX_GPIO_Init+0xfc>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0320 	and.w	r3, r3, #32
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122c:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <MX_GPIO_Init+0xfc>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4a2c      	ldr	r2, [pc, #176]	; (80012e4 <MX_GPIO_Init+0xfc>)
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	6193      	str	r3, [r2, #24]
 8001238:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <MX_GPIO_Init+0xfc>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001244:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <MX_GPIO_Init+0xfc>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4a26      	ldr	r2, [pc, #152]	; (80012e4 <MX_GPIO_Init+0xfc>)
 800124a:	f043 0308 	orr.w	r3, r3, #8
 800124e:	6193      	str	r3, [r2, #24]
 8001250:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <MX_GPIO_Init+0xfc>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f003 0308 	and.w	r3, r3, #8
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001262:	4821      	ldr	r0, [pc, #132]	; (80012e8 <MX_GPIO_Init+0x100>)
 8001264:	f001 fd4d 	bl	8002d02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|HT_CTRL_Pin, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800126e:	481f      	ldr	r0, [pc, #124]	; (80012ec <MX_GPIO_Init+0x104>)
 8001270:	f001 fd47 	bl	8002d02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001278:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2302      	movs	r3, #2
 8001284:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001286:	f107 0310 	add.w	r3, r7, #16
 800128a:	4619      	mov	r1, r3
 800128c:	4816      	ldr	r0, [pc, #88]	; (80012e8 <MX_GPIO_Init+0x100>)
 800128e:	f001 fb9d 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin HT_CTRL_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|HT_CTRL_Pin;
 8001292:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001298:	2301      	movs	r3, #1
 800129a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2302      	movs	r3, #2
 80012a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	4619      	mov	r1, r3
 80012aa:	4810      	ldr	r0, [pc, #64]	; (80012ec <MX_GPIO_Init+0x104>)
 80012ac:	f001 fb8e 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80012b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_GPIO_Init+0x108>)
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	4619      	mov	r1, r3
 80012c4:	480b      	ldr	r0, [pc, #44]	; (80012f4 <MX_GPIO_Init+0x10c>)
 80012c6:	f001 fb81 	bl	80029cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2102      	movs	r1, #2
 80012ce:	2017      	movs	r0, #23
 80012d0:	f001 f893 	bl	80023fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012d4:	2017      	movs	r0, #23
 80012d6:	f001 f8ac 	bl	8002432 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012da:	bf00      	nop
 80012dc:	3720      	adds	r7, #32
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40011000 	.word	0x40011000
 80012ec:	40010c00 	.word	0x40010c00
 80012f0:	10210000 	.word	0x10210000
 80012f4:	40010800 	.word	0x40010800

080012f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	80fb      	strh	r3, [r7, #6]
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  if (GPIO_Pin == GPIO_PIN_8) {

  }
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  uart_flag = true;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <HAL_UART_RxCpltCallback+0x18>)
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	20000220 	.word	0x20000220

08001328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_MspInit+0x5c>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	4a14      	ldr	r2, [pc, #80]	; (8001390 <HAL_MspInit+0x5c>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6193      	str	r3, [r2, #24]
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_MspInit+0x5c>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <HAL_MspInit+0x5c>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <HAL_MspInit+0x5c>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135c:	61d3      	str	r3, [r2, #28]
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <HAL_MspInit+0x5c>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_MspInit+0x60>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <HAL_MspInit+0x60>)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	40021000 	.word	0x40021000
 8001394:	40010000 	.word	0x40010000

08001398 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a14      	ldr	r2, [pc, #80]	; (8001404 <HAL_ADC_MspInit+0x6c>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d121      	bne.n	80013fc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <HAL_ADC_MspInit+0x70>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a12      	ldr	r2, [pc, #72]	; (8001408 <HAL_ADC_MspInit+0x70>)
 80013be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_ADC_MspInit+0x70>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <HAL_ADC_MspInit+0x70>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a0c      	ldr	r2, [pc, #48]	; (8001408 <HAL_ADC_MspInit+0x70>)
 80013d6:	f043 0304 	orr.w	r3, r3, #4
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_ADC_MspInit+0x70>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = MQ2_ADC_Pin;
 80013e8:	2301      	movs	r3, #1
 80013ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ec:	2303      	movs	r3, #3
 80013ee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(MQ2_ADC_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4619      	mov	r1, r3
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_ADC_MspInit+0x74>)
 80013f8:	f001 fae8 	bl	80029cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013fc:	bf00      	nop
 80013fe:	3720      	adds	r7, #32
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40012400 	.word	0x40012400
 8001408:	40021000 	.word	0x40021000
 800140c:	40010800 	.word	0x40010800

08001410 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0318 	add.w	r3, r7, #24
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a2b      	ldr	r2, [pc, #172]	; (80014d8 <HAL_I2C_MspInit+0xc8>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d124      	bne.n	800147a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001430:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <HAL_I2C_MspInit+0xcc>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a29      	ldr	r2, [pc, #164]	; (80014dc <HAL_I2C_MspInit+0xcc>)
 8001436:	f043 0308 	orr.w	r3, r3, #8
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b27      	ldr	r3, [pc, #156]	; (80014dc <HAL_I2C_MspInit+0xcc>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	617b      	str	r3, [r7, #20]
 8001446:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = AHT10_SCL_Pin|AHT10_SDA_Pin;
 8001448:	23c0      	movs	r3, #192	; 0xc0
 800144a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800144c:	2312      	movs	r3, #18
 800144e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001454:	f107 0318 	add.w	r3, r7, #24
 8001458:	4619      	mov	r1, r3
 800145a:	4821      	ldr	r0, [pc, #132]	; (80014e0 <HAL_I2C_MspInit+0xd0>)
 800145c:	f001 fab6 	bl	80029cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <HAL_I2C_MspInit+0xcc>)
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	4a1d      	ldr	r2, [pc, #116]	; (80014dc <HAL_I2C_MspInit+0xcc>)
 8001466:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800146a:	61d3      	str	r3, [r2, #28]
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <HAL_I2C_MspInit+0xcc>)
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001478:	e029      	b.n	80014ce <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <HAL_I2C_MspInit+0xd4>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d124      	bne.n	80014ce <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001484:	4b15      	ldr	r3, [pc, #84]	; (80014dc <HAL_I2C_MspInit+0xcc>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a14      	ldr	r2, [pc, #80]	; (80014dc <HAL_I2C_MspInit+0xcc>)
 800148a:	f043 0308 	orr.w	r3, r3, #8
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_I2C_MspInit+0xcc>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800149c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a2:	2312      	movs	r3, #18
 80014a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014aa:	f107 0318 	add.w	r3, r7, #24
 80014ae:	4619      	mov	r1, r3
 80014b0:	480b      	ldr	r0, [pc, #44]	; (80014e0 <HAL_I2C_MspInit+0xd0>)
 80014b2:	f001 fa8b 	bl	80029cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_I2C_MspInit+0xcc>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	4a08      	ldr	r2, [pc, #32]	; (80014dc <HAL_I2C_MspInit+0xcc>)
 80014bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014c0:	61d3      	str	r3, [r2, #28]
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_I2C_MspInit+0xcc>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
}
 80014ce:	bf00      	nop
 80014d0:	3728      	adds	r7, #40	; 0x28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40005400 	.word	0x40005400
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40010c00 	.word	0x40010c00
 80014e4:	40005800 	.word	0x40005800

080014e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <HAL_RTC_MspInit+0x4c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d118      	bne.n	800152c <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80014fa:	f002 f8cf 	bl	800369c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <HAL_RTC_MspInit+0x50>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <HAL_RTC_MspInit+0x50>)
 8001504:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001508:	61d3      	str	r3, [r2, #28]
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_RTC_MspInit+0x50>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_RTC_MspInit+0x54>)
 8001518:	2201      	movs	r2, #1
 800151a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 1, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2101      	movs	r1, #1
 8001520:	2003      	movs	r0, #3
 8001522:	f000 ff6a 	bl	80023fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001526:	2003      	movs	r0, #3
 8001528:	f000 ff83 	bl	8002432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800152c:	bf00      	nop
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40002800 	.word	0x40002800
 8001538:	40021000 	.word	0x40021000
 800153c:	4242043c 	.word	0x4242043c

08001540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a20      	ldr	r2, [pc, #128]	; (80015dc <HAL_UART_MspInit+0x9c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d139      	bne.n	80015d4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001560:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <HAL_UART_MspInit+0xa0>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a1e      	ldr	r2, [pc, #120]	; (80015e0 <HAL_UART_MspInit+0xa0>)
 8001566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <HAL_UART_MspInit+0xa0>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <HAL_UART_MspInit+0xa0>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4a18      	ldr	r2, [pc, #96]	; (80015e0 <HAL_UART_MspInit+0xa0>)
 800157e:	f043 0304 	orr.w	r3, r3, #4
 8001582:	6193      	str	r3, [r2, #24]
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <HAL_UART_MspInit+0xa0>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001594:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	4619      	mov	r1, r3
 80015a4:	480f      	ldr	r0, [pc, #60]	; (80015e4 <HAL_UART_MspInit+0xa4>)
 80015a6:	f001 fa11 	bl	80029cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 0310 	add.w	r3, r7, #16
 80015bc:	4619      	mov	r1, r3
 80015be:	4809      	ldr	r0, [pc, #36]	; (80015e4 <HAL_UART_MspInit+0xa4>)
 80015c0:	f001 fa04 	bl	80029cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2102      	movs	r1, #2
 80015c8:	2025      	movs	r0, #37	; 0x25
 80015ca:	f000 ff16 	bl	80023fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015ce:	2025      	movs	r0, #37	; 0x25
 80015d0:	f000 ff2f 	bl	8002432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015d4:	bf00      	nop
 80015d6:	3720      	adds	r7, #32
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40013800 	.word	0x40013800
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40010800 	.word	0x40010800

080015e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <NMI_Handler+0x4>

080015ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <HardFault_Handler+0x4>

080015f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <MemManage_Handler+0x4>

080015fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <BusFault_Handler+0x4>

08001600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <UsageFault_Handler+0x4>

08001606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr

0800161e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162e:	f000 f8c7 	bl	80017c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <RTC_IRQHandler+0x10>)
 800163e:	f003 fb5d 	bl	8004cfc <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000154 	.word	0x20000154

0800164c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8001650:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001654:	f001 fb6e 	bl	8002d34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}

0800165c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <USART1_IRQHandler+0x10>)
 8001662:	f003 fcc3 	bl	8004fec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000168 	.word	0x20000168

08001670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <_sbrk+0x5c>)
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <_sbrk+0x60>)
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <_sbrk+0x64>)
 800168e:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <_sbrk+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	429a      	cmp	r2, r3
 800169e:	d207      	bcs.n	80016b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a0:	f004 fbae 	bl	8005e00 <__errno>
 80016a4:	4603      	mov	r3, r0
 80016a6:	220c      	movs	r2, #12
 80016a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	e009      	b.n	80016c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <_sbrk+0x64>)
 80016c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20005000 	.word	0x20005000
 80016d0:	00000400 	.word	0x00000400
 80016d4:	2000023c 	.word	0x2000023c
 80016d8:	200003b0 	.word	0x200003b0

080016dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016e8:	f7ff fff8 	bl	80016dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016ec:	480b      	ldr	r0, [pc, #44]	; (800171c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016ee:	490c      	ldr	r1, [pc, #48]	; (8001720 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016f0:	4a0c      	ldr	r2, [pc, #48]	; (8001724 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f4:	e002      	b.n	80016fc <LoopCopyDataInit>

080016f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fa:	3304      	adds	r3, #4

080016fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001700:	d3f9      	bcc.n	80016f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001702:	4a09      	ldr	r2, [pc, #36]	; (8001728 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001704:	4c09      	ldr	r4, [pc, #36]	; (800172c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001708:	e001      	b.n	800170e <LoopFillZerobss>

0800170a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800170c:	3204      	adds	r2, #4

0800170e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001710:	d3fb      	bcc.n	800170a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001712:	f004 fb7b 	bl	8005e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001716:	f7ff fb47 	bl	8000da8 <main>
  bx lr
 800171a:	4770      	bx	lr
  ldr r0, =_sdata
 800171c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001720:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001724:	080068bc 	.word	0x080068bc
  ldr r2, =_sbss
 8001728:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800172c:	200003b0 	.word	0x200003b0

08001730 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001730:	e7fe      	b.n	8001730 <ADC1_2_IRQHandler>
	...

08001734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <HAL_Init+0x28>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a07      	ldr	r2, [pc, #28]	; (800175c <HAL_Init+0x28>)
 800173e:	f043 0310 	orr.w	r3, r3, #16
 8001742:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001744:	2003      	movs	r0, #3
 8001746:	f000 fe4d 	bl	80023e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800174a:	200f      	movs	r0, #15
 800174c:	f000 f808 	bl	8001760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001750:	f7ff fdf0 	bl	8001334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40022000 	.word	0x40022000

08001760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_InitTick+0x54>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_InitTick+0x58>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	4619      	mov	r1, r3
 8001772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001776:	fbb3 f3f1 	udiv	r3, r3, r1
 800177a:	fbb2 f3f3 	udiv	r3, r2, r3
 800177e:	4618      	mov	r0, r3
 8001780:	f000 fe65 	bl	800244e <HAL_SYSTICK_Config>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e00e      	b.n	80017ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b0f      	cmp	r3, #15
 8001792:	d80a      	bhi.n	80017aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001794:	2200      	movs	r2, #0
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f000 fe2d 	bl	80023fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a0:	4a06      	ldr	r2, [pc, #24]	; (80017bc <HAL_InitTick+0x5c>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e000      	b.n	80017ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000004 	.word	0x20000004
 80017b8:	2000000c 	.word	0x2000000c
 80017bc:	20000008 	.word	0x20000008

080017c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_IncTick+0x1c>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_IncTick+0x20>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	4a03      	ldr	r2, [pc, #12]	; (80017e0 <HAL_IncTick+0x20>)
 80017d2:	6013      	str	r3, [r2, #0]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	2000000c 	.word	0x2000000c
 80017e0:	20000240 	.word	0x20000240

080017e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b02      	ldr	r3, [pc, #8]	; (80017f4 <HAL_GetTick+0x10>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	20000240 	.word	0x20000240

080017f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001800:	f7ff fff0 	bl	80017e4 <HAL_GetTick>
 8001804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001810:	d005      	beq.n	800181e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_Delay+0x44>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4413      	add	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800181e:	bf00      	nop
 8001820:	f7ff ffe0 	bl	80017e4 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	429a      	cmp	r2, r3
 800182e:	d8f7      	bhi.n	8001820 <HAL_Delay+0x28>
  {
  }
}
 8001830:	bf00      	nop
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000000c 	.word	0x2000000c

08001840 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e0be      	b.n	80019e0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186c:	2b00      	cmp	r3, #0
 800186e:	d109      	bne.n	8001884 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fd8a 	bl	8001398 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 fbf1 	bl	800206c <ADC_ConversionStop_Disable>
 800188a:	4603      	mov	r3, r0
 800188c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001892:	f003 0310 	and.w	r3, r3, #16
 8001896:	2b00      	cmp	r3, #0
 8001898:	f040 8099 	bne.w	80019ce <HAL_ADC_Init+0x18e>
 800189c:	7dfb      	ldrb	r3, [r7, #23]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f040 8095 	bne.w	80019ce <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018ac:	f023 0302 	bic.w	r3, r3, #2
 80018b0:	f043 0202 	orr.w	r2, r3, #2
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	7b1b      	ldrb	r3, [r3, #12]
 80018c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018d8:	d003      	beq.n	80018e2 <HAL_ADC_Init+0xa2>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d102      	bne.n	80018e8 <HAL_ADC_Init+0xa8>
 80018e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018e6:	e000      	b.n	80018ea <HAL_ADC_Init+0xaa>
 80018e8:	2300      	movs	r3, #0
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7d1b      	ldrb	r3, [r3, #20]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d119      	bne.n	800192c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	7b1b      	ldrb	r3, [r3, #12]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d109      	bne.n	8001914 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	3b01      	subs	r3, #1
 8001906:	035a      	lsls	r2, r3, #13
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4313      	orrs	r3, r2
 800190c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	e00b      	b.n	800192c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001918:	f043 0220 	orr.w	r2, r3, #32
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001924:	f043 0201 	orr.w	r2, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	430a      	orrs	r2, r1
 800193e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <HAL_ADC_Init+0x1a8>)
 8001948:	4013      	ands	r3, r2
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	68b9      	ldr	r1, [r7, #8]
 8001950:	430b      	orrs	r3, r1
 8001952:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800195c:	d003      	beq.n	8001966 <HAL_ADC_Init+0x126>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d104      	bne.n	8001970 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	3b01      	subs	r3, #1
 800196c:	051b      	lsls	r3, r3, #20
 800196e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001976:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	430a      	orrs	r2, r1
 8001982:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	4b18      	ldr	r3, [pc, #96]	; (80019ec <HAL_ADC_Init+0x1ac>)
 800198c:	4013      	ands	r3, r2
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	429a      	cmp	r2, r3
 8001992:	d10b      	bne.n	80019ac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	f023 0303 	bic.w	r3, r3, #3
 80019a2:	f043 0201 	orr.w	r2, r3, #1
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019aa:	e018      	b.n	80019de <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b0:	f023 0312 	bic.w	r3, r3, #18
 80019b4:	f043 0210 	orr.w	r2, r3, #16
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c0:	f043 0201 	orr.w	r2, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019cc:	e007      	b.n	80019de <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d2:	f043 0210 	orr.w	r2, r3, #16
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019de:	7dfb      	ldrb	r3, [r7, #23]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	ffe1f7fd 	.word	0xffe1f7fd
 80019ec:	ff1f0efe 	.word	0xff1f0efe

080019f0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <HAL_ADC_Start+0x1a>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e098      	b.n	8001b3c <HAL_ADC_Start+0x14c>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 fad0 	bl	8001fb8 <ADC_Enable>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f040 8087 	bne.w	8001b32 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a2c:	f023 0301 	bic.w	r3, r3, #1
 8001a30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a41      	ldr	r2, [pc, #260]	; (8001b44 <HAL_ADC_Start+0x154>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d105      	bne.n	8001a4e <HAL_ADC_Start+0x5e>
 8001a42:	4b41      	ldr	r3, [pc, #260]	; (8001b48 <HAL_ADC_Start+0x158>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d115      	bne.n	8001a7a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d026      	beq.n	8001ab6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a78:	e01d      	b.n	8001ab6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a2f      	ldr	r2, [pc, #188]	; (8001b48 <HAL_ADC_Start+0x158>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d004      	beq.n	8001a9a <HAL_ADC_Start+0xaa>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a2b      	ldr	r2, [pc, #172]	; (8001b44 <HAL_ADC_Start+0x154>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d10d      	bne.n	8001ab6 <HAL_ADC_Start+0xc6>
 8001a9a:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <HAL_ADC_Start+0x158>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d007      	beq.n	8001ab6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d006      	beq.n	8001ad0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac6:	f023 0206 	bic.w	r2, r3, #6
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ace:	e002      	b.n	8001ad6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f06f 0202 	mvn.w	r2, #2
 8001ae6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001af2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001af6:	d113      	bne.n	8001b20 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001afc:	4a11      	ldr	r2, [pc, #68]	; (8001b44 <HAL_ADC_Start+0x154>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d105      	bne.n	8001b0e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <HAL_ADC_Start+0x158>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d108      	bne.n	8001b20 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	e00c      	b.n	8001b3a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	e003      	b.n	8001b3a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40012800 	.word	0x40012800
 8001b48:	40012400 	.word	0x40012400

08001b4c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_ADC_Stop+0x1a>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e01a      	b.n	8001b9c <HAL_ADC_Stop+0x50>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 fa7c 	bl	800206c <ADC_ConversionStop_Disable>
 8001b74:	4603      	mov	r3, r0
 8001b76:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d109      	bne.n	8001b92 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b86:	f023 0301 	bic.w	r3, r3, #1
 8001b8a:	f043 0201 	orr.w	r2, r3, #1
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ba4:	b590      	push	{r4, r7, lr}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001bba:	f7ff fe13 	bl	80017e4 <HAL_GetTick>
 8001bbe:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00b      	beq.n	8001be6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	f043 0220 	orr.w	r2, r3, #32
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e0d3      	b.n	8001d8e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d131      	bne.n	8001c58 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d12a      	bne.n	8001c58 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c02:	e021      	b.n	8001c48 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0a:	d01d      	beq.n	8001c48 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d007      	beq.n	8001c22 <HAL_ADC_PollForConversion+0x7e>
 8001c12:	f7ff fde7 	bl	80017e4 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d212      	bcs.n	8001c48 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10b      	bne.n	8001c48 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	f043 0204 	orr.w	r2, r3, #4
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e0a2      	b.n	8001d8e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0d6      	beq.n	8001c04 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c56:	e070      	b.n	8001d3a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001c58:	4b4f      	ldr	r3, [pc, #316]	; (8001d98 <HAL_ADC_PollForConversion+0x1f4>)
 8001c5a:	681c      	ldr	r4, [r3, #0]
 8001c5c:	2002      	movs	r0, #2
 8001c5e:	f002 f9ef 	bl	8004040 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c62:	4603      	mov	r3, r0
 8001c64:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6919      	ldr	r1, [r3, #16]
 8001c6e:	4b4b      	ldr	r3, [pc, #300]	; (8001d9c <HAL_ADC_PollForConversion+0x1f8>)
 8001c70:	400b      	ands	r3, r1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d118      	bne.n	8001ca8 <HAL_ADC_PollForConversion+0x104>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68d9      	ldr	r1, [r3, #12]
 8001c7c:	4b48      	ldr	r3, [pc, #288]	; (8001da0 <HAL_ADC_PollForConversion+0x1fc>)
 8001c7e:	400b      	ands	r3, r1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d111      	bne.n	8001ca8 <HAL_ADC_PollForConversion+0x104>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6919      	ldr	r1, [r3, #16]
 8001c8a:	4b46      	ldr	r3, [pc, #280]	; (8001da4 <HAL_ADC_PollForConversion+0x200>)
 8001c8c:	400b      	ands	r3, r1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d108      	bne.n	8001ca4 <HAL_ADC_PollForConversion+0x100>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68d9      	ldr	r1, [r3, #12]
 8001c98:	4b43      	ldr	r3, [pc, #268]	; (8001da8 <HAL_ADC_PollForConversion+0x204>)
 8001c9a:	400b      	ands	r3, r1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_ADC_PollForConversion+0x100>
 8001ca0:	2314      	movs	r3, #20
 8001ca2:	e020      	b.n	8001ce6 <HAL_ADC_PollForConversion+0x142>
 8001ca4:	2329      	movs	r3, #41	; 0x29
 8001ca6:	e01e      	b.n	8001ce6 <HAL_ADC_PollForConversion+0x142>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6919      	ldr	r1, [r3, #16]
 8001cae:	4b3d      	ldr	r3, [pc, #244]	; (8001da4 <HAL_ADC_PollForConversion+0x200>)
 8001cb0:	400b      	ands	r3, r1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d106      	bne.n	8001cc4 <HAL_ADC_PollForConversion+0x120>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68d9      	ldr	r1, [r3, #12]
 8001cbc:	4b3a      	ldr	r3, [pc, #232]	; (8001da8 <HAL_ADC_PollForConversion+0x204>)
 8001cbe:	400b      	ands	r3, r1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00d      	beq.n	8001ce0 <HAL_ADC_PollForConversion+0x13c>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6919      	ldr	r1, [r3, #16]
 8001cca:	4b38      	ldr	r3, [pc, #224]	; (8001dac <HAL_ADC_PollForConversion+0x208>)
 8001ccc:	400b      	ands	r3, r1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d108      	bne.n	8001ce4 <HAL_ADC_PollForConversion+0x140>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68d9      	ldr	r1, [r3, #12]
 8001cd8:	4b34      	ldr	r3, [pc, #208]	; (8001dac <HAL_ADC_PollForConversion+0x208>)
 8001cda:	400b      	ands	r3, r1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_ADC_PollForConversion+0x140>
 8001ce0:	2354      	movs	r3, #84	; 0x54
 8001ce2:	e000      	b.n	8001ce6 <HAL_ADC_PollForConversion+0x142>
 8001ce4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001cec:	e021      	b.n	8001d32 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf4:	d01a      	beq.n	8001d2c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d007      	beq.n	8001d0c <HAL_ADC_PollForConversion+0x168>
 8001cfc:	f7ff fd72 	bl	80017e4 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d20f      	bcs.n	8001d2c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d90b      	bls.n	8001d2c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	f043 0204 	orr.w	r2, r3, #4
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e030      	b.n	8001d8e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d8d9      	bhi.n	8001cee <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f06f 0212 	mvn.w	r2, #18
 8001d42:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d5a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d5e:	d115      	bne.n	8001d8c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d111      	bne.n	8001d8c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d105      	bne.n	8001d8c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	f043 0201 	orr.w	r2, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	371c      	adds	r7, #28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd90      	pop	{r4, r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000004 	.word	0x20000004
 8001d9c:	24924924 	.word	0x24924924
 8001da0:	00924924 	.word	0x00924924
 8001da4:	12492492 	.word	0x12492492
 8001da8:	00492492 	.word	0x00492492
 8001dac:	00249249 	.word	0x00249249

08001db0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x20>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e0dc      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x1da>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b06      	cmp	r3, #6
 8001df6:	d81c      	bhi.n	8001e32 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	3b05      	subs	r3, #5
 8001e0a:	221f      	movs	r2, #31
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	4019      	ands	r1, r3
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	3b05      	subs	r3, #5
 8001e24:	fa00 f203 	lsl.w	r2, r0, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	635a      	str	r2, [r3, #52]	; 0x34
 8001e30:	e03c      	b.n	8001eac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b0c      	cmp	r3, #12
 8001e38:	d81c      	bhi.n	8001e74 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	3b23      	subs	r3, #35	; 0x23
 8001e4c:	221f      	movs	r2, #31
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	4019      	ands	r1, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	3b23      	subs	r3, #35	; 0x23
 8001e66:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	631a      	str	r2, [r3, #48]	; 0x30
 8001e72:	e01b      	b.n	8001eac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	3b41      	subs	r3, #65	; 0x41
 8001e86:	221f      	movs	r2, #31
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	4019      	ands	r1, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3b41      	subs	r3, #65	; 0x41
 8001ea0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b09      	cmp	r3, #9
 8001eb2:	d91c      	bls.n	8001eee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68d9      	ldr	r1, [r3, #12]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3b1e      	subs	r3, #30
 8001ec6:	2207      	movs	r2, #7
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	4019      	ands	r1, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	6898      	ldr	r0, [r3, #8]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4413      	add	r3, r2
 8001ede:	3b1e      	subs	r3, #30
 8001ee0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	e019      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6919      	ldr	r1, [r3, #16]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	2207      	movs	r2, #7
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	4019      	ands	r1, r3
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	6898      	ldr	r0, [r3, #8]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4613      	mov	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	fa00 f203 	lsl.w	r2, r0, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b10      	cmp	r3, #16
 8001f28:	d003      	beq.n	8001f32 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f2e:	2b11      	cmp	r3, #17
 8001f30:	d132      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a1d      	ldr	r2, [pc, #116]	; (8001fac <HAL_ADC_ConfigChannel+0x1e4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d125      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d126      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f58:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b10      	cmp	r3, #16
 8001f60:	d11a      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a13      	ldr	r2, [pc, #76]	; (8001fb4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001f68:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6c:	0c9a      	lsrs	r2, r3, #18
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f78:	e002      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f9      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x1b2>
 8001f86:	e007      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	f043 0220 	orr.w	r2, r3, #32
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	40012400 	.word	0x40012400
 8001fb0:	20000004 	.word	0x20000004
 8001fb4:	431bde83 	.word	0x431bde83

08001fb8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d040      	beq.n	8002058 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 0201 	orr.w	r2, r2, #1
 8001fe4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fe6:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <ADC_Enable+0xac>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a1f      	ldr	r2, [pc, #124]	; (8002068 <ADC_Enable+0xb0>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	0c9b      	lsrs	r3, r3, #18
 8001ff2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ff4:	e002      	b.n	8001ffc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f9      	bne.n	8001ff6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002002:	f7ff fbef 	bl	80017e4 <HAL_GetTick>
 8002006:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002008:	e01f      	b.n	800204a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800200a:	f7ff fbeb 	bl	80017e4 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d918      	bls.n	800204a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d011      	beq.n	800204a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202a:	f043 0210 	orr.w	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	f043 0201 	orr.w	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e007      	b.n	800205a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b01      	cmp	r3, #1
 8002056:	d1d8      	bne.n	800200a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000004 	.word	0x20000004
 8002068:	431bde83 	.word	0x431bde83

0800206c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b01      	cmp	r3, #1
 8002084:	d12e      	bne.n	80020e4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0201 	bic.w	r2, r2, #1
 8002094:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002096:	f7ff fba5 	bl	80017e4 <HAL_GetTick>
 800209a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800209c:	e01b      	b.n	80020d6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800209e:	f7ff fba1 	bl	80017e4 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d914      	bls.n	80020d6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d10d      	bne.n	80020d6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	f043 0210 	orr.w	r2, r3, #16
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ca:	f043 0201 	orr.w	r2, r3, #1
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e007      	b.n	80020e6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d0dc      	beq.n	800209e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_ADCEx_Calibration_Start+0x1e>
 800210a:	2302      	movs	r3, #2
 800210c:	e097      	b.n	800223e <HAL_ADCEx_Calibration_Start+0x14e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ffa8 	bl	800206c <ADC_ConversionStop_Disable>
 800211c:	4603      	mov	r3, r0
 800211e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff49 	bl	8001fb8 <ADC_Enable>
 8002126:	4603      	mov	r3, r0
 8002128:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800212a:	7dfb      	ldrb	r3, [r7, #23]
 800212c:	2b00      	cmp	r3, #0
 800212e:	f040 8081 	bne.w	8002234 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800213a:	f023 0302 	bic.w	r3, r3, #2
 800213e:	f043 0202 	orr.w	r2, r3, #2
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002146:	4b40      	ldr	r3, [pc, #256]	; (8002248 <HAL_ADCEx_Calibration_Start+0x158>)
 8002148:	681c      	ldr	r4, [r3, #0]
 800214a:	2002      	movs	r0, #2
 800214c:	f001 ff78 	bl	8004040 <HAL_RCCEx_GetPeriphCLKFreq>
 8002150:	4603      	mov	r3, r0
 8002152:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002156:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002158:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800215a:	e002      	b.n	8002162 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	3b01      	subs	r3, #1
 8002160:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f9      	bne.n	800215c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0208 	orr.w	r2, r2, #8
 8002176:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002178:	f7ff fb34 	bl	80017e4 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800217e:	e01b      	b.n	80021b8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002180:	f7ff fb30 	bl	80017e4 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b0a      	cmp	r3, #10
 800218c:	d914      	bls.n	80021b8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00d      	beq.n	80021b8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	f023 0312 	bic.w	r3, r3, #18
 80021a4:	f043 0210 	orr.w	r2, r3, #16
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e042      	b.n	800223e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1dc      	bne.n	8002180 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 0204 	orr.w	r2, r2, #4
 80021d4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80021d6:	f7ff fb05 	bl	80017e4 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80021dc:	e01b      	b.n	8002216 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80021de:	f7ff fb01 	bl	80017e4 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b0a      	cmp	r3, #10
 80021ea:	d914      	bls.n	8002216 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00d      	beq.n	8002216 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	f023 0312 	bic.w	r3, r3, #18
 8002202:	f043 0210 	orr.w	r2, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e013      	b.n	800223e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1dc      	bne.n	80021de <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002228:	f023 0303 	bic.w	r3, r3, #3
 800222c:	f043 0201 	orr.w	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800223c:	7dfb      	ldrb	r3, [r7, #23]
}
 800223e:	4618      	mov	r0, r3
 8002240:	371c      	adds	r7, #28
 8002242:	46bd      	mov	sp, r7
 8002244:	bd90      	pop	{r4, r7, pc}
 8002246:	bf00      	nop
 8002248:	20000004 	.word	0x20000004

0800224c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002268:	4013      	ands	r3, r2
 800226a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800227c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227e:	4a04      	ldr	r2, [pc, #16]	; (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	60d3      	str	r3, [r2, #12]
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <__NVIC_GetPriorityGrouping+0x18>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	f003 0307 	and.w	r3, r3, #7
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	db0b      	blt.n	80022da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	f003 021f 	and.w	r2, r3, #31
 80022c8:	4906      	ldr	r1, [pc, #24]	; (80022e4 <__NVIC_EnableIRQ+0x34>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	2001      	movs	r0, #1
 80022d2:	fa00 f202 	lsl.w	r2, r0, r2
 80022d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	e000e100 	.word	0xe000e100

080022e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	6039      	str	r1, [r7, #0]
 80022f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	db0a      	blt.n	8002312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	490c      	ldr	r1, [pc, #48]	; (8002334 <__NVIC_SetPriority+0x4c>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	0112      	lsls	r2, r2, #4
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	440b      	add	r3, r1
 800230c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002310:	e00a      	b.n	8002328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	b2da      	uxtb	r2, r3
 8002316:	4908      	ldr	r1, [pc, #32]	; (8002338 <__NVIC_SetPriority+0x50>)
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	3b04      	subs	r3, #4
 8002320:	0112      	lsls	r2, r2, #4
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	440b      	add	r3, r1
 8002326:	761a      	strb	r2, [r3, #24]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	e000e100 	.word	0xe000e100
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800233c:	b480      	push	{r7}
 800233e:	b089      	sub	sp, #36	; 0x24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f1c3 0307 	rsb	r3, r3, #7
 8002356:	2b04      	cmp	r3, #4
 8002358:	bf28      	it	cs
 800235a:	2304      	movcs	r3, #4
 800235c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3304      	adds	r3, #4
 8002362:	2b06      	cmp	r3, #6
 8002364:	d902      	bls.n	800236c <NVIC_EncodePriority+0x30>
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3b03      	subs	r3, #3
 800236a:	e000      	b.n	800236e <NVIC_EncodePriority+0x32>
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002370:	f04f 32ff 	mov.w	r2, #4294967295
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43da      	mvns	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	401a      	ands	r2, r3
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002384:	f04f 31ff 	mov.w	r1, #4294967295
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	fa01 f303 	lsl.w	r3, r1, r3
 800238e:	43d9      	mvns	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	4313      	orrs	r3, r2
         );
}
 8002396:	4618      	mov	r0, r3
 8002398:	3724      	adds	r7, #36	; 0x24
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr

080023a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b0:	d301      	bcc.n	80023b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023b2:	2301      	movs	r3, #1
 80023b4:	e00f      	b.n	80023d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b6:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <SysTick_Config+0x40>)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023be:	210f      	movs	r1, #15
 80023c0:	f04f 30ff 	mov.w	r0, #4294967295
 80023c4:	f7ff ff90 	bl	80022e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <SysTick_Config+0x40>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ce:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <SysTick_Config+0x40>)
 80023d0:	2207      	movs	r2, #7
 80023d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	e000e010 	.word	0xe000e010

080023e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff ff2d 	bl	800224c <__NVIC_SetPriorityGrouping>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b086      	sub	sp, #24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	4603      	mov	r3, r0
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
 8002406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800240c:	f7ff ff42 	bl	8002294 <__NVIC_GetPriorityGrouping>
 8002410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	6978      	ldr	r0, [r7, #20]
 8002418:	f7ff ff90 	bl	800233c <NVIC_EncodePriority>
 800241c:	4602      	mov	r2, r0
 800241e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff5f 	bl	80022e8 <__NVIC_SetPriority>
}
 800242a:	bf00      	nop
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	4603      	mov	r3, r0
 800243a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800243c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff35 	bl	80022b0 <__NVIC_EnableIRQ>
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff ffa2 	bl	80023a0 <SysTick_Config>
 800245c:	4603      	mov	r3, r0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002466:	b480      	push	{r7}
 8002468:	b085      	sub	sp, #20
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d008      	beq.n	8002490 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2204      	movs	r2, #4
 8002482:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e020      	b.n	80024d2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 020e 	bic.w	r2, r2, #14
 800249e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b8:	2101      	movs	r1, #1
 80024ba:	fa01 f202 	lsl.w	r2, r1, r2
 80024be:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d005      	beq.n	8002500 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2204      	movs	r2, #4
 80024f8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
 80024fe:	e051      	b.n	80025a4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 020e 	bic.w	r2, r2, #14
 800250e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0201 	bic.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a22      	ldr	r2, [pc, #136]	; (80025b0 <HAL_DMA_Abort_IT+0xd4>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d029      	beq.n	800257e <HAL_DMA_Abort_IT+0xa2>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a21      	ldr	r2, [pc, #132]	; (80025b4 <HAL_DMA_Abort_IT+0xd8>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d022      	beq.n	800257a <HAL_DMA_Abort_IT+0x9e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1f      	ldr	r2, [pc, #124]	; (80025b8 <HAL_DMA_Abort_IT+0xdc>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d01a      	beq.n	8002574 <HAL_DMA_Abort_IT+0x98>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1e      	ldr	r2, [pc, #120]	; (80025bc <HAL_DMA_Abort_IT+0xe0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d012      	beq.n	800256e <HAL_DMA_Abort_IT+0x92>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1c      	ldr	r2, [pc, #112]	; (80025c0 <HAL_DMA_Abort_IT+0xe4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d00a      	beq.n	8002568 <HAL_DMA_Abort_IT+0x8c>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1b      	ldr	r2, [pc, #108]	; (80025c4 <HAL_DMA_Abort_IT+0xe8>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d102      	bne.n	8002562 <HAL_DMA_Abort_IT+0x86>
 800255c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002560:	e00e      	b.n	8002580 <HAL_DMA_Abort_IT+0xa4>
 8002562:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002566:	e00b      	b.n	8002580 <HAL_DMA_Abort_IT+0xa4>
 8002568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800256c:	e008      	b.n	8002580 <HAL_DMA_Abort_IT+0xa4>
 800256e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002572:	e005      	b.n	8002580 <HAL_DMA_Abort_IT+0xa4>
 8002574:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002578:	e002      	b.n	8002580 <HAL_DMA_Abort_IT+0xa4>
 800257a:	2310      	movs	r3, #16
 800257c:	e000      	b.n	8002580 <HAL_DMA_Abort_IT+0xa4>
 800257e:	2301      	movs	r3, #1
 8002580:	4a11      	ldr	r2, [pc, #68]	; (80025c8 <HAL_DMA_Abort_IT+0xec>)
 8002582:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	4798      	blx	r3
    } 
  }
  return status;
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40020008 	.word	0x40020008
 80025b4:	4002001c 	.word	0x4002001c
 80025b8:	40020030 	.word	0x40020030
 80025bc:	40020044 	.word	0x40020044
 80025c0:	40020058 	.word	0x40020058
 80025c4:	4002006c 	.word	0x4002006c
 80025c8:	40020000 	.word	0x40020000

080025cc <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80025cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80025e6:	4b2f      	ldr	r3, [pc, #188]	; (80026a4 <HAL_FLASH_Program+0xd8>)
 80025e8:	7e1b      	ldrb	r3, [r3, #24]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_FLASH_Program+0x26>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e054      	b.n	800269c <HAL_FLASH_Program+0xd0>
 80025f2:	4b2c      	ldr	r3, [pc, #176]	; (80026a4 <HAL_FLASH_Program+0xd8>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80025f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025fc:	f000 f8a8 	bl	8002750 <FLASH_WaitForLastOperation>
 8002600:	4603      	mov	r3, r0
 8002602:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002604:	7dfb      	ldrb	r3, [r7, #23]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d144      	bne.n	8002694 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d102      	bne.n	8002616 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002610:	2301      	movs	r3, #1
 8002612:	757b      	strb	r3, [r7, #21]
 8002614:	e007      	b.n	8002626 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d102      	bne.n	8002622 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800261c:	2302      	movs	r3, #2
 800261e:	757b      	strb	r3, [r7, #21]
 8002620:	e001      	b.n	8002626 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002622:	2304      	movs	r3, #4
 8002624:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002626:	2300      	movs	r3, #0
 8002628:	75bb      	strb	r3, [r7, #22]
 800262a:	e02d      	b.n	8002688 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800262c:	7dbb      	ldrb	r3, [r7, #22]
 800262e:	005a      	lsls	r2, r3, #1
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	eb02 0c03 	add.w	ip, r2, r3
 8002636:	7dbb      	ldrb	r3, [r7, #22]
 8002638:	0119      	lsls	r1, r3, #4
 800263a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800263e:	f1c1 0620 	rsb	r6, r1, #32
 8002642:	f1a1 0020 	sub.w	r0, r1, #32
 8002646:	fa22 f401 	lsr.w	r4, r2, r1
 800264a:	fa03 f606 	lsl.w	r6, r3, r6
 800264e:	4334      	orrs	r4, r6
 8002650:	fa23 f000 	lsr.w	r0, r3, r0
 8002654:	4304      	orrs	r4, r0
 8002656:	fa23 f501 	lsr.w	r5, r3, r1
 800265a:	b2a3      	uxth	r3, r4
 800265c:	4619      	mov	r1, r3
 800265e:	4660      	mov	r0, ip
 8002660:	f000 f85a 	bl	8002718 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002664:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002668:	f000 f872 	bl	8002750 <FLASH_WaitForLastOperation>
 800266c:	4603      	mov	r3, r0
 800266e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002670:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <HAL_FLASH_Program+0xdc>)
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	4a0c      	ldr	r2, [pc, #48]	; (80026a8 <HAL_FLASH_Program+0xdc>)
 8002676:	f023 0301 	bic.w	r3, r3, #1
 800267a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800267c:	7dfb      	ldrb	r3, [r7, #23]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d107      	bne.n	8002692 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002682:	7dbb      	ldrb	r3, [r7, #22]
 8002684:	3301      	adds	r3, #1
 8002686:	75bb      	strb	r3, [r7, #22]
 8002688:	7dba      	ldrb	r2, [r7, #22]
 800268a:	7d7b      	ldrb	r3, [r7, #21]
 800268c:	429a      	cmp	r2, r3
 800268e:	d3cd      	bcc.n	800262c <HAL_FLASH_Program+0x60>
 8002690:	e000      	b.n	8002694 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002692:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002694:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <HAL_FLASH_Program+0xd8>)
 8002696:	2200      	movs	r2, #0
 8002698:	761a      	strb	r2, [r3, #24]

  return status;
 800269a:	7dfb      	ldrb	r3, [r7, #23]
}
 800269c:	4618      	mov	r0, r3
 800269e:	371c      	adds	r7, #28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026a4:	20000248 	.word	0x20000248
 80026a8:	40022000 	.word	0x40022000

080026ac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80026b6:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <HAL_FLASH_Unlock+0x40>)
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00d      	beq.n	80026de <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80026c2:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <HAL_FLASH_Unlock+0x40>)
 80026c4:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <HAL_FLASH_Unlock+0x44>)
 80026c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <HAL_FLASH_Unlock+0x40>)
 80026ca:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <HAL_FLASH_Unlock+0x48>)
 80026cc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80026ce:	4b07      	ldr	r3, [pc, #28]	; (80026ec <HAL_FLASH_Unlock+0x40>)
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80026de:	79fb      	ldrb	r3, [r7, #7]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40022000 	.word	0x40022000
 80026f0:	45670123 	.word	0x45670123
 80026f4:	cdef89ab 	.word	0xcdef89ab

080026f8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <HAL_FLASH_Lock+0x1c>)
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	4a04      	ldr	r2, [pc, #16]	; (8002714 <HAL_FLASH_Lock+0x1c>)
 8002702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002706:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40022000 	.word	0x40022000

08002718 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <FLASH_Program_HalfWord+0x30>)
 8002726:	2200      	movs	r2, #0
 8002728:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <FLASH_Program_HalfWord+0x34>)
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	4a07      	ldr	r2, [pc, #28]	; (800274c <FLASH_Program_HalfWord+0x34>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	887a      	ldrh	r2, [r7, #2]
 800273a:	801a      	strh	r2, [r3, #0]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	20000248 	.word	0x20000248
 800274c:	40022000 	.word	0x40022000

08002750 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002758:	f7ff f844 	bl	80017e4 <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800275e:	e010      	b.n	8002782 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002766:	d00c      	beq.n	8002782 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d007      	beq.n	800277e <FLASH_WaitForLastOperation+0x2e>
 800276e:	f7ff f839 	bl	80017e4 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	429a      	cmp	r2, r3
 800277c:	d201      	bcs.n	8002782 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e025      	b.n	80027ce <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <FLASH_WaitForLastOperation+0x88>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1e8      	bne.n	8002760 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <FLASH_WaitForLastOperation+0x88>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800279a:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <FLASH_WaitForLastOperation+0x88>)
 800279c:	2220      	movs	r2, #32
 800279e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80027a0:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <FLASH_WaitForLastOperation+0x88>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10b      	bne.n	80027c4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80027ac:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <FLASH_WaitForLastOperation+0x88>)
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d105      	bne.n	80027c4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80027b8:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <FLASH_WaitForLastOperation+0x88>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80027c4:	f000 f80a 	bl	80027dc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40022000 	.word	0x40022000

080027dc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80027e6:	4b23      	ldr	r3, [pc, #140]	; (8002874 <FLASH_SetErrorCode+0x98>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d009      	beq.n	8002806 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80027f2:	4b21      	ldr	r3, [pc, #132]	; (8002878 <FLASH_SetErrorCode+0x9c>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f043 0302 	orr.w	r3, r3, #2
 80027fa:	4a1f      	ldr	r2, [pc, #124]	; (8002878 <FLASH_SetErrorCode+0x9c>)
 80027fc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f043 0310 	orr.w	r3, r3, #16
 8002804:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002806:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <FLASH_SetErrorCode+0x98>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d009      	beq.n	8002826 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002812:	4b19      	ldr	r3, [pc, #100]	; (8002878 <FLASH_SetErrorCode+0x9c>)
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	4a17      	ldr	r2, [pc, #92]	; (8002878 <FLASH_SetErrorCode+0x9c>)
 800281c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002826:	4b13      	ldr	r3, [pc, #76]	; (8002874 <FLASH_SetErrorCode+0x98>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00b      	beq.n	800284a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002832:	4b11      	ldr	r3, [pc, #68]	; (8002878 <FLASH_SetErrorCode+0x9c>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f043 0304 	orr.w	r3, r3, #4
 800283a:	4a0f      	ldr	r2, [pc, #60]	; (8002878 <FLASH_SetErrorCode+0x9c>)
 800283c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800283e:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <FLASH_SetErrorCode+0x98>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	4a0c      	ldr	r2, [pc, #48]	; (8002874 <FLASH_SetErrorCode+0x98>)
 8002844:	f023 0301 	bic.w	r3, r3, #1
 8002848:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f240 1201 	movw	r2, #257	; 0x101
 8002850:	4293      	cmp	r3, r2
 8002852:	d106      	bne.n	8002862 <FLASH_SetErrorCode+0x86>
 8002854:	4b07      	ldr	r3, [pc, #28]	; (8002874 <FLASH_SetErrorCode+0x98>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	4a06      	ldr	r2, [pc, #24]	; (8002874 <FLASH_SetErrorCode+0x98>)
 800285a:	f023 0301 	bic.w	r3, r3, #1
 800285e:	61d3      	str	r3, [r2, #28]
}  
 8002860:	e002      	b.n	8002868 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002862:	4a04      	ldr	r2, [pc, #16]	; (8002874 <FLASH_SetErrorCode+0x98>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	60d3      	str	r3, [r2, #12]
}  
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40022000 	.word	0x40022000
 8002878:	20000248 	.word	0x20000248

0800287c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800288e:	4b2f      	ldr	r3, [pc, #188]	; (800294c <HAL_FLASHEx_Erase+0xd0>)
 8002890:	7e1b      	ldrb	r3, [r3, #24]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_FLASHEx_Erase+0x1e>
 8002896:	2302      	movs	r3, #2
 8002898:	e053      	b.n	8002942 <HAL_FLASHEx_Erase+0xc6>
 800289a:	4b2c      	ldr	r3, [pc, #176]	; (800294c <HAL_FLASHEx_Erase+0xd0>)
 800289c:	2201      	movs	r2, #1
 800289e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d116      	bne.n	80028d6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80028a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028ac:	f7ff ff50 	bl	8002750 <FLASH_WaitForLastOperation>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d141      	bne.n	800293a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80028b6:	2001      	movs	r0, #1
 80028b8:	f000 f84c 	bl	8002954 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028c0:	f7ff ff46 	bl	8002750 <FLASH_WaitForLastOperation>
 80028c4:	4603      	mov	r3, r0
 80028c6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80028c8:	4b21      	ldr	r3, [pc, #132]	; (8002950 <HAL_FLASHEx_Erase+0xd4>)
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	4a20      	ldr	r2, [pc, #128]	; (8002950 <HAL_FLASHEx_Erase+0xd4>)
 80028ce:	f023 0304 	bic.w	r3, r3, #4
 80028d2:	6113      	str	r3, [r2, #16]
 80028d4:	e031      	b.n	800293a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80028d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028da:	f7ff ff39 	bl	8002750 <FLASH_WaitForLastOperation>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d12a      	bne.n	800293a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	f04f 32ff 	mov.w	r2, #4294967295
 80028ea:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	e019      	b.n	8002928 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80028f4:	68b8      	ldr	r0, [r7, #8]
 80028f6:	f000 f849 	bl	800298c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028fa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028fe:	f7ff ff27 	bl	8002750 <FLASH_WaitForLastOperation>
 8002902:	4603      	mov	r3, r0
 8002904:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002906:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_FLASHEx_Erase+0xd4>)
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	4a11      	ldr	r2, [pc, #68]	; (8002950 <HAL_FLASHEx_Erase+0xd4>)
 800290c:	f023 0302 	bic.w	r3, r3, #2
 8002910:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	601a      	str	r2, [r3, #0]
            break;
 800291e:	e00c      	b.n	800293a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002926:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	029a      	lsls	r2, r3, #10
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	4413      	add	r3, r2
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	429a      	cmp	r2, r3
 8002938:	d3dc      	bcc.n	80028f4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800293a:	4b04      	ldr	r3, [pc, #16]	; (800294c <HAL_FLASHEx_Erase+0xd0>)
 800293c:	2200      	movs	r2, #0
 800293e:	761a      	strb	r2, [r3, #24]

  return status;
 8002940:	7bfb      	ldrb	r3, [r7, #15]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000248 	.word	0x20000248
 8002950:	40022000 	.word	0x40022000

08002954 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800295c:	4b09      	ldr	r3, [pc, #36]	; (8002984 <FLASH_MassErase+0x30>)
 800295e:	2200      	movs	r2, #0
 8002960:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <FLASH_MassErase+0x34>)
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	4a08      	ldr	r2, [pc, #32]	; (8002988 <FLASH_MassErase+0x34>)
 8002968:	f043 0304 	orr.w	r3, r3, #4
 800296c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800296e:	4b06      	ldr	r3, [pc, #24]	; (8002988 <FLASH_MassErase+0x34>)
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	4a05      	ldr	r2, [pc, #20]	; (8002988 <FLASH_MassErase+0x34>)
 8002974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002978:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	20000248 	.word	0x20000248
 8002988:	40022000 	.word	0x40022000

0800298c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <FLASH_PageErase+0x38>)
 8002996:	2200      	movs	r2, #0
 8002998:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800299a:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <FLASH_PageErase+0x3c>)
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <FLASH_PageErase+0x3c>)
 80029a0:	f043 0302 	orr.w	r3, r3, #2
 80029a4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80029a6:	4a08      	ldr	r2, [pc, #32]	; (80029c8 <FLASH_PageErase+0x3c>)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <FLASH_PageErase+0x3c>)
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	4a05      	ldr	r2, [pc, #20]	; (80029c8 <FLASH_PageErase+0x3c>)
 80029b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029b6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000248 	.word	0x20000248
 80029c8:	40022000 	.word	0x40022000

080029cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b08b      	sub	sp, #44	; 0x2c
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029d6:	2300      	movs	r3, #0
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029da:	2300      	movs	r3, #0
 80029dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029de:	e169      	b.n	8002cb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029e0:	2201      	movs	r2, #1
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	f040 8158 	bne.w	8002cae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	4a9a      	ldr	r2, [pc, #616]	; (8002c6c <HAL_GPIO_Init+0x2a0>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d05e      	beq.n	8002ac6 <HAL_GPIO_Init+0xfa>
 8002a08:	4a98      	ldr	r2, [pc, #608]	; (8002c6c <HAL_GPIO_Init+0x2a0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d875      	bhi.n	8002afa <HAL_GPIO_Init+0x12e>
 8002a0e:	4a98      	ldr	r2, [pc, #608]	; (8002c70 <HAL_GPIO_Init+0x2a4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d058      	beq.n	8002ac6 <HAL_GPIO_Init+0xfa>
 8002a14:	4a96      	ldr	r2, [pc, #600]	; (8002c70 <HAL_GPIO_Init+0x2a4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d86f      	bhi.n	8002afa <HAL_GPIO_Init+0x12e>
 8002a1a:	4a96      	ldr	r2, [pc, #600]	; (8002c74 <HAL_GPIO_Init+0x2a8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d052      	beq.n	8002ac6 <HAL_GPIO_Init+0xfa>
 8002a20:	4a94      	ldr	r2, [pc, #592]	; (8002c74 <HAL_GPIO_Init+0x2a8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d869      	bhi.n	8002afa <HAL_GPIO_Init+0x12e>
 8002a26:	4a94      	ldr	r2, [pc, #592]	; (8002c78 <HAL_GPIO_Init+0x2ac>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d04c      	beq.n	8002ac6 <HAL_GPIO_Init+0xfa>
 8002a2c:	4a92      	ldr	r2, [pc, #584]	; (8002c78 <HAL_GPIO_Init+0x2ac>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d863      	bhi.n	8002afa <HAL_GPIO_Init+0x12e>
 8002a32:	4a92      	ldr	r2, [pc, #584]	; (8002c7c <HAL_GPIO_Init+0x2b0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d046      	beq.n	8002ac6 <HAL_GPIO_Init+0xfa>
 8002a38:	4a90      	ldr	r2, [pc, #576]	; (8002c7c <HAL_GPIO_Init+0x2b0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d85d      	bhi.n	8002afa <HAL_GPIO_Init+0x12e>
 8002a3e:	2b12      	cmp	r3, #18
 8002a40:	d82a      	bhi.n	8002a98 <HAL_GPIO_Init+0xcc>
 8002a42:	2b12      	cmp	r3, #18
 8002a44:	d859      	bhi.n	8002afa <HAL_GPIO_Init+0x12e>
 8002a46:	a201      	add	r2, pc, #4	; (adr r2, 8002a4c <HAL_GPIO_Init+0x80>)
 8002a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4c:	08002ac7 	.word	0x08002ac7
 8002a50:	08002aa1 	.word	0x08002aa1
 8002a54:	08002ab3 	.word	0x08002ab3
 8002a58:	08002af5 	.word	0x08002af5
 8002a5c:	08002afb 	.word	0x08002afb
 8002a60:	08002afb 	.word	0x08002afb
 8002a64:	08002afb 	.word	0x08002afb
 8002a68:	08002afb 	.word	0x08002afb
 8002a6c:	08002afb 	.word	0x08002afb
 8002a70:	08002afb 	.word	0x08002afb
 8002a74:	08002afb 	.word	0x08002afb
 8002a78:	08002afb 	.word	0x08002afb
 8002a7c:	08002afb 	.word	0x08002afb
 8002a80:	08002afb 	.word	0x08002afb
 8002a84:	08002afb 	.word	0x08002afb
 8002a88:	08002afb 	.word	0x08002afb
 8002a8c:	08002afb 	.word	0x08002afb
 8002a90:	08002aa9 	.word	0x08002aa9
 8002a94:	08002abd 	.word	0x08002abd
 8002a98:	4a79      	ldr	r2, [pc, #484]	; (8002c80 <HAL_GPIO_Init+0x2b4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a9e:	e02c      	b.n	8002afa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	623b      	str	r3, [r7, #32]
          break;
 8002aa6:	e029      	b.n	8002afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	3304      	adds	r3, #4
 8002aae:	623b      	str	r3, [r7, #32]
          break;
 8002ab0:	e024      	b.n	8002afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	3308      	adds	r3, #8
 8002ab8:	623b      	str	r3, [r7, #32]
          break;
 8002aba:	e01f      	b.n	8002afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	330c      	adds	r3, #12
 8002ac2:	623b      	str	r3, [r7, #32]
          break;
 8002ac4:	e01a      	b.n	8002afc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d102      	bne.n	8002ad4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ace:	2304      	movs	r3, #4
 8002ad0:	623b      	str	r3, [r7, #32]
          break;
 8002ad2:	e013      	b.n	8002afc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d105      	bne.n	8002ae8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002adc:	2308      	movs	r3, #8
 8002ade:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69fa      	ldr	r2, [r7, #28]
 8002ae4:	611a      	str	r2, [r3, #16]
          break;
 8002ae6:	e009      	b.n	8002afc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ae8:	2308      	movs	r3, #8
 8002aea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69fa      	ldr	r2, [r7, #28]
 8002af0:	615a      	str	r2, [r3, #20]
          break;
 8002af2:	e003      	b.n	8002afc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002af4:	2300      	movs	r3, #0
 8002af6:	623b      	str	r3, [r7, #32]
          break;
 8002af8:	e000      	b.n	8002afc <HAL_GPIO_Init+0x130>
          break;
 8002afa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	2bff      	cmp	r3, #255	; 0xff
 8002b00:	d801      	bhi.n	8002b06 <HAL_GPIO_Init+0x13a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	e001      	b.n	8002b0a <HAL_GPIO_Init+0x13e>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	2bff      	cmp	r3, #255	; 0xff
 8002b10:	d802      	bhi.n	8002b18 <HAL_GPIO_Init+0x14c>
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	e002      	b.n	8002b1e <HAL_GPIO_Init+0x152>
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	3b08      	subs	r3, #8
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	210f      	movs	r1, #15
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	401a      	ands	r2, r3
 8002b30:	6a39      	ldr	r1, [r7, #32]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	fa01 f303 	lsl.w	r3, r1, r3
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 80b1 	beq.w	8002cae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b4c:	4b4d      	ldr	r3, [pc, #308]	; (8002c84 <HAL_GPIO_Init+0x2b8>)
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	4a4c      	ldr	r2, [pc, #304]	; (8002c84 <HAL_GPIO_Init+0x2b8>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	6193      	str	r3, [r2, #24]
 8002b58:	4b4a      	ldr	r3, [pc, #296]	; (8002c84 <HAL_GPIO_Init+0x2b8>)
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b64:	4a48      	ldr	r2, [pc, #288]	; (8002c88 <HAL_GPIO_Init+0x2bc>)
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	089b      	lsrs	r3, r3, #2
 8002b6a:	3302      	adds	r3, #2
 8002b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	220f      	movs	r2, #15
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4013      	ands	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a40      	ldr	r2, [pc, #256]	; (8002c8c <HAL_GPIO_Init+0x2c0>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d013      	beq.n	8002bb8 <HAL_GPIO_Init+0x1ec>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a3f      	ldr	r2, [pc, #252]	; (8002c90 <HAL_GPIO_Init+0x2c4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d00d      	beq.n	8002bb4 <HAL_GPIO_Init+0x1e8>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a3e      	ldr	r2, [pc, #248]	; (8002c94 <HAL_GPIO_Init+0x2c8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d007      	beq.n	8002bb0 <HAL_GPIO_Init+0x1e4>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a3d      	ldr	r2, [pc, #244]	; (8002c98 <HAL_GPIO_Init+0x2cc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d101      	bne.n	8002bac <HAL_GPIO_Init+0x1e0>
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e006      	b.n	8002bba <HAL_GPIO_Init+0x1ee>
 8002bac:	2304      	movs	r3, #4
 8002bae:	e004      	b.n	8002bba <HAL_GPIO_Init+0x1ee>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e002      	b.n	8002bba <HAL_GPIO_Init+0x1ee>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <HAL_GPIO_Init+0x1ee>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bbc:	f002 0203 	and.w	r2, r2, #3
 8002bc0:	0092      	lsls	r2, r2, #2
 8002bc2:	4093      	lsls	r3, r2
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bca:	492f      	ldr	r1, [pc, #188]	; (8002c88 <HAL_GPIO_Init+0x2bc>)
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	089b      	lsrs	r3, r3, #2
 8002bd0:	3302      	adds	r3, #2
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d006      	beq.n	8002bf2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002be4:	4b2d      	ldr	r3, [pc, #180]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	492c      	ldr	r1, [pc, #176]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	608b      	str	r3, [r1, #8]
 8002bf0:	e006      	b.n	8002c00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bf2:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	4928      	ldr	r1, [pc, #160]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d006      	beq.n	8002c1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c0c:	4b23      	ldr	r3, [pc, #140]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	4922      	ldr	r1, [pc, #136]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60cb      	str	r3, [r1, #12]
 8002c18:	e006      	b.n	8002c28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c1a:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	43db      	mvns	r3, r3
 8002c22:	491e      	ldr	r1, [pc, #120]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d006      	beq.n	8002c42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c34:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	4918      	ldr	r1, [pc, #96]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]
 8002c40:	e006      	b.n	8002c50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c42:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	4914      	ldr	r1, [pc, #80]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d021      	beq.n	8002ca0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c5c:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	490e      	ldr	r1, [pc, #56]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	600b      	str	r3, [r1, #0]
 8002c68:	e021      	b.n	8002cae <HAL_GPIO_Init+0x2e2>
 8002c6a:	bf00      	nop
 8002c6c:	10320000 	.word	0x10320000
 8002c70:	10310000 	.word	0x10310000
 8002c74:	10220000 	.word	0x10220000
 8002c78:	10210000 	.word	0x10210000
 8002c7c:	10120000 	.word	0x10120000
 8002c80:	10110000 	.word	0x10110000
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40010000 	.word	0x40010000
 8002c8c:	40010800 	.word	0x40010800
 8002c90:	40010c00 	.word	0x40010c00
 8002c94:	40011000 	.word	0x40011000
 8002c98:	40011400 	.word	0x40011400
 8002c9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	4909      	ldr	r1, [pc, #36]	; (8002cd0 <HAL_GPIO_Init+0x304>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	fa22 f303 	lsr.w	r3, r2, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f47f ae8e 	bne.w	80029e0 <HAL_GPIO_Init+0x14>
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
 8002cc8:	372c      	adds	r7, #44	; 0x2c
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr
 8002cd0:	40010400 	.word	0x40010400

08002cd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	887b      	ldrh	r3, [r7, #2]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
 8002cf0:	e001      	b.n	8002cf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr

08002d02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	807b      	strh	r3, [r7, #2]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d12:	787b      	ldrb	r3, [r7, #1]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d18:	887a      	ldrh	r2, [r7, #2]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d1e:	e003      	b.n	8002d28 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d20:	887b      	ldrh	r3, [r7, #2]
 8002d22:	041a      	lsls	r2, r3, #16
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	611a      	str	r2, [r3, #16]
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr
	...

08002d34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d3e:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d40:	695a      	ldr	r2, [r3, #20]
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d006      	beq.n	8002d58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d4a:	4a05      	ldr	r2, [pc, #20]	; (8002d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d4c:	88fb      	ldrh	r3, [r7, #6]
 8002d4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fe fad0 	bl	80012f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d58:	bf00      	nop
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40010400 	.word	0x40010400

08002d64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e12b      	b.n	8002fce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fe fb40 	bl	8001410 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2224      	movs	r2, #36	; 0x24
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0201 	bic.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002db6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dc8:	f001 f83e 	bl	8003e48 <HAL_RCC_GetPCLK1Freq>
 8002dcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	4a81      	ldr	r2, [pc, #516]	; (8002fd8 <HAL_I2C_Init+0x274>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d807      	bhi.n	8002de8 <HAL_I2C_Init+0x84>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4a80      	ldr	r2, [pc, #512]	; (8002fdc <HAL_I2C_Init+0x278>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	bf94      	ite	ls
 8002de0:	2301      	movls	r3, #1
 8002de2:	2300      	movhi	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e006      	b.n	8002df6 <HAL_I2C_Init+0x92>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4a7d      	ldr	r2, [pc, #500]	; (8002fe0 <HAL_I2C_Init+0x27c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	bf94      	ite	ls
 8002df0:	2301      	movls	r3, #1
 8002df2:	2300      	movhi	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0e7      	b.n	8002fce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4a78      	ldr	r2, [pc, #480]	; (8002fe4 <HAL_I2C_Init+0x280>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	0c9b      	lsrs	r3, r3, #18
 8002e08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4a6a      	ldr	r2, [pc, #424]	; (8002fd8 <HAL_I2C_Init+0x274>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d802      	bhi.n	8002e38 <HAL_I2C_Init+0xd4>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	3301      	adds	r3, #1
 8002e36:	e009      	b.n	8002e4c <HAL_I2C_Init+0xe8>
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e3e:	fb02 f303 	mul.w	r3, r2, r3
 8002e42:	4a69      	ldr	r2, [pc, #420]	; (8002fe8 <HAL_I2C_Init+0x284>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	099b      	lsrs	r3, r3, #6
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	430b      	orrs	r3, r1
 8002e52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	495c      	ldr	r1, [pc, #368]	; (8002fd8 <HAL_I2C_Init+0x274>)
 8002e68:	428b      	cmp	r3, r1
 8002e6a:	d819      	bhi.n	8002ea0 <HAL_I2C_Init+0x13c>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1e59      	subs	r1, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e7a:	1c59      	adds	r1, r3, #1
 8002e7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e80:	400b      	ands	r3, r1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_I2C_Init+0x138>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1e59      	subs	r1, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e94:	3301      	adds	r3, #1
 8002e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9a:	e051      	b.n	8002f40 <HAL_I2C_Init+0x1dc>
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	e04f      	b.n	8002f40 <HAL_I2C_Init+0x1dc>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d111      	bne.n	8002ecc <HAL_I2C_Init+0x168>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1e58      	subs	r0, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	440b      	add	r3, r1
 8002eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eba:	3301      	adds	r3, #1
 8002ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf0c      	ite	eq
 8002ec4:	2301      	moveq	r3, #1
 8002ec6:	2300      	movne	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	e012      	b.n	8002ef2 <HAL_I2C_Init+0x18e>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1e58      	subs	r0, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6859      	ldr	r1, [r3, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	0099      	lsls	r1, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_I2C_Init+0x196>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e022      	b.n	8002f40 <HAL_I2C_Init+0x1dc>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10e      	bne.n	8002f20 <HAL_I2C_Init+0x1bc>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1e58      	subs	r0, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6859      	ldr	r1, [r3, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	440b      	add	r3, r1
 8002f10:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f14:	3301      	adds	r3, #1
 8002f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f1e:	e00f      	b.n	8002f40 <HAL_I2C_Init+0x1dc>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1e58      	subs	r0, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	0099      	lsls	r1, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f36:	3301      	adds	r3, #1
 8002f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	6809      	ldr	r1, [r1, #0]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69da      	ldr	r2, [r3, #28]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6911      	ldr	r1, [r2, #16]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68d2      	ldr	r2, [r2, #12]
 8002f7a:	4311      	orrs	r1, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6812      	ldr	r2, [r2, #0]
 8002f80:	430b      	orrs	r3, r1
 8002f82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	000186a0 	.word	0x000186a0
 8002fdc:	001e847f 	.word	0x001e847f
 8002fe0:	003d08ff 	.word	0x003d08ff
 8002fe4:	431bde83 	.word	0x431bde83
 8002fe8:	10624dd3 	.word	0x10624dd3

08002fec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	607a      	str	r2, [r7, #4]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	817b      	strh	r3, [r7, #10]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003000:	f7fe fbf0 	bl	80017e4 <HAL_GetTick>
 8003004:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b20      	cmp	r3, #32
 8003010:	f040 80e0 	bne.w	80031d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	2319      	movs	r3, #25
 800301a:	2201      	movs	r2, #1
 800301c:	4970      	ldr	r1, [pc, #448]	; (80031e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f964 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800302a:	2302      	movs	r3, #2
 800302c:	e0d3      	b.n	80031d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_I2C_Master_Transmit+0x50>
 8003038:	2302      	movs	r3, #2
 800303a:	e0cc      	b.n	80031d6 <HAL_I2C_Master_Transmit+0x1ea>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b01      	cmp	r3, #1
 8003050:	d007      	beq.n	8003062 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f042 0201 	orr.w	r2, r2, #1
 8003060:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003070:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2221      	movs	r2, #33	; 0x21
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2210      	movs	r2, #16
 800307e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	893a      	ldrh	r2, [r7, #8]
 8003092:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4a50      	ldr	r2, [pc, #320]	; (80031e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80030a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030a4:	8979      	ldrh	r1, [r7, #10]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	6a3a      	ldr	r2, [r7, #32]
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f89c 	bl	80031e8 <I2C_MasterRequestWrite>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e08d      	b.n	80031d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ba:	2300      	movs	r3, #0
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030d0:	e066      	b.n	80031a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	6a39      	ldr	r1, [r7, #32]
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 fa22 	bl	8003520 <I2C_WaitOnTXEFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00d      	beq.n	80030fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d107      	bne.n	80030fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e06b      	b.n	80031d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	781a      	ldrb	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b04      	cmp	r3, #4
 800313a:	d11b      	bne.n	8003174 <HAL_I2C_Master_Transmit+0x188>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003140:	2b00      	cmp	r3, #0
 8003142:	d017      	beq.n	8003174 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	781a      	ldrb	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	6a39      	ldr	r1, [r7, #32]
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fa19 	bl	80035b0 <I2C_WaitOnBTFFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00d      	beq.n	80031a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	2b04      	cmp	r3, #4
 800318a:	d107      	bne.n	800319c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800319a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e01a      	b.n	80031d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d194      	bne.n	80030d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	e000      	b.n	80031d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031d4:	2302      	movs	r3, #2
  }
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	00100002 	.word	0x00100002
 80031e4:	ffff0000 	.word	0xffff0000

080031e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	607a      	str	r2, [r7, #4]
 80031f2:	603b      	str	r3, [r7, #0]
 80031f4:	460b      	mov	r3, r1
 80031f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2b08      	cmp	r3, #8
 8003202:	d006      	beq.n	8003212 <I2C_MasterRequestWrite+0x2a>
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d003      	beq.n	8003212 <I2C_MasterRequestWrite+0x2a>
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003210:	d108      	bne.n	8003224 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	e00b      	b.n	800323c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	2b12      	cmp	r3, #18
 800322a:	d107      	bne.n	800323c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800323a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 f84f 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00d      	beq.n	8003270 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003262:	d103      	bne.n	800326c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800326a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e035      	b.n	80032dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003278:	d108      	bne.n	800328c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800327a:	897b      	ldrh	r3, [r7, #10]
 800327c:	b2db      	uxtb	r3, r3
 800327e:	461a      	mov	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003288:	611a      	str	r2, [r3, #16]
 800328a:	e01b      	b.n	80032c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800328c:	897b      	ldrh	r3, [r7, #10]
 800328e:	11db      	asrs	r3, r3, #7
 8003290:	b2db      	uxtb	r3, r3
 8003292:	f003 0306 	and.w	r3, r3, #6
 8003296:	b2db      	uxtb	r3, r3
 8003298:	f063 030f 	orn	r3, r3, #15
 800329c:	b2da      	uxtb	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	490e      	ldr	r1, [pc, #56]	; (80032e4 <I2C_MasterRequestWrite+0xfc>)
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f898 	bl	80033e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e010      	b.n	80032dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032ba:	897b      	ldrh	r3, [r7, #10]
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	4907      	ldr	r1, [pc, #28]	; (80032e8 <I2C_MasterRequestWrite+0x100>)
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f888 	bl	80033e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	00010008 	.word	0x00010008
 80032e8:	00010002 	.word	0x00010002

080032ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	4613      	mov	r3, r2
 80032fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032fc:	e048      	b.n	8003390 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003304:	d044      	beq.n	8003390 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003306:	f7fe fa6d 	bl	80017e4 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d302      	bcc.n	800331c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d139      	bne.n	8003390 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	0c1b      	lsrs	r3, r3, #16
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b01      	cmp	r3, #1
 8003324:	d10d      	bne.n	8003342 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	43da      	mvns	r2, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	4013      	ands	r3, r2
 8003332:	b29b      	uxth	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	bf0c      	ite	eq
 8003338:	2301      	moveq	r3, #1
 800333a:	2300      	movne	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	461a      	mov	r2, r3
 8003340:	e00c      	b.n	800335c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	43da      	mvns	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	4013      	ands	r3, r2
 800334e:	b29b      	uxth	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	bf0c      	ite	eq
 8003354:	2301      	moveq	r3, #1
 8003356:	2300      	movne	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	79fb      	ldrb	r3, [r7, #7]
 800335e:	429a      	cmp	r2, r3
 8003360:	d116      	bne.n	8003390 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	f043 0220 	orr.w	r2, r3, #32
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e023      	b.n	80033d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	0c1b      	lsrs	r3, r3, #16
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d10d      	bne.n	80033b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	43da      	mvns	r2, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	4013      	ands	r3, r2
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf0c      	ite	eq
 80033ac:	2301      	moveq	r3, #1
 80033ae:	2300      	movne	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	461a      	mov	r2, r3
 80033b4:	e00c      	b.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	43da      	mvns	r2, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	4013      	ands	r3, r2
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	461a      	mov	r2, r3
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d093      	beq.n	80032fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033ee:	e071      	b.n	80034d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fe:	d123      	bne.n	8003448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800340e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003418:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f043 0204 	orr.w	r2, r3, #4
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e067      	b.n	8003518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344e:	d041      	beq.n	80034d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003450:	f7fe f9c8 	bl	80017e4 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	429a      	cmp	r2, r3
 800345e:	d302      	bcc.n	8003466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d136      	bne.n	80034d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	0c1b      	lsrs	r3, r3, #16
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b01      	cmp	r3, #1
 800346e:	d10c      	bne.n	800348a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	43da      	mvns	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4013      	ands	r3, r2
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	bf14      	ite	ne
 8003482:	2301      	movne	r3, #1
 8003484:	2300      	moveq	r3, #0
 8003486:	b2db      	uxtb	r3, r3
 8003488:	e00b      	b.n	80034a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	43da      	mvns	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	4013      	ands	r3, r2
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	bf14      	ite	ne
 800349c:	2301      	movne	r3, #1
 800349e:	2300      	moveq	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d016      	beq.n	80034d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	f043 0220 	orr.w	r2, r3, #32
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e021      	b.n	8003518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	0c1b      	lsrs	r3, r3, #16
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d10c      	bne.n	80034f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	43da      	mvns	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4013      	ands	r3, r2
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf14      	ite	ne
 80034f0:	2301      	movne	r3, #1
 80034f2:	2300      	moveq	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	e00b      	b.n	8003510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	43da      	mvns	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4013      	ands	r3, r2
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	bf14      	ite	ne
 800350a:	2301      	movne	r3, #1
 800350c:	2300      	moveq	r3, #0
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	f47f af6d 	bne.w	80033f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800352c:	e034      	b.n	8003598 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f886 	bl	8003640 <I2C_IsAcknowledgeFailed>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e034      	b.n	80035a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003544:	d028      	beq.n	8003598 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003546:	f7fe f94d 	bl	80017e4 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	429a      	cmp	r2, r3
 8003554:	d302      	bcc.n	800355c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d11d      	bne.n	8003598 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003566:	2b80      	cmp	r3, #128	; 0x80
 8003568:	d016      	beq.n	8003598 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	f043 0220 	orr.w	r2, r3, #32
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e007      	b.n	80035a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a2:	2b80      	cmp	r3, #128	; 0x80
 80035a4:	d1c3      	bne.n	800352e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035bc:	e034      	b.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f83e 	bl	8003640 <I2C_IsAcknowledgeFailed>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e034      	b.n	8003638 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d028      	beq.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d6:	f7fe f905 	bl	80017e4 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d302      	bcc.n	80035ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d11d      	bne.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d016      	beq.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	f043 0220 	orr.w	r2, r3, #32
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e007      	b.n	8003638 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b04      	cmp	r3, #4
 8003634:	d1c3      	bne.n	80035be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003656:	d11b      	bne.n	8003690 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003660:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	f043 0204 	orr.w	r2, r3, #4
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	bc80      	pop	{r7}
 800369a:	4770      	bx	lr

0800369c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80036a0:	4b03      	ldr	r3, [pc, #12]	; (80036b0 <HAL_PWR_EnableBkUpAccess+0x14>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	601a      	str	r2, [r3, #0]
}
 80036a6:	bf00      	nop
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	420e0020 	.word	0x420e0020

080036b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e272      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 8087 	beq.w	80037e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036d4:	4b92      	ldr	r3, [pc, #584]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 030c 	and.w	r3, r3, #12
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d00c      	beq.n	80036fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036e0:	4b8f      	ldr	r3, [pc, #572]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 030c 	and.w	r3, r3, #12
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d112      	bne.n	8003712 <HAL_RCC_OscConfig+0x5e>
 80036ec:	4b8c      	ldr	r3, [pc, #560]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f8:	d10b      	bne.n	8003712 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036fa:	4b89      	ldr	r3, [pc, #548]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d06c      	beq.n	80037e0 <HAL_RCC_OscConfig+0x12c>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d168      	bne.n	80037e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e24c      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800371a:	d106      	bne.n	800372a <HAL_RCC_OscConfig+0x76>
 800371c:	4b80      	ldr	r3, [pc, #512]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a7f      	ldr	r2, [pc, #508]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	e02e      	b.n	8003788 <HAL_RCC_OscConfig+0xd4>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10c      	bne.n	800374c <HAL_RCC_OscConfig+0x98>
 8003732:	4b7b      	ldr	r3, [pc, #492]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a7a      	ldr	r2, [pc, #488]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	4b78      	ldr	r3, [pc, #480]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a77      	ldr	r2, [pc, #476]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003744:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	e01d      	b.n	8003788 <HAL_RCC_OscConfig+0xd4>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003754:	d10c      	bne.n	8003770 <HAL_RCC_OscConfig+0xbc>
 8003756:	4b72      	ldr	r3, [pc, #456]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a71      	ldr	r2, [pc, #452]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 800375c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	4b6f      	ldr	r3, [pc, #444]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a6e      	ldr	r2, [pc, #440]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	e00b      	b.n	8003788 <HAL_RCC_OscConfig+0xd4>
 8003770:	4b6b      	ldr	r3, [pc, #428]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a6a      	ldr	r2, [pc, #424]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	4b68      	ldr	r3, [pc, #416]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a67      	ldr	r2, [pc, #412]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003786:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d013      	beq.n	80037b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003790:	f7fe f828 	bl	80017e4 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003798:	f7fe f824 	bl	80017e4 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b64      	cmp	r3, #100	; 0x64
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e200      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037aa:	4b5d      	ldr	r3, [pc, #372]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0xe4>
 80037b6:	e014      	b.n	80037e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b8:	f7fe f814 	bl	80017e4 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c0:	f7fe f810 	bl	80017e4 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b64      	cmp	r3, #100	; 0x64
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e1ec      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037d2:	4b53      	ldr	r3, [pc, #332]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x10c>
 80037de:	e000      	b.n	80037e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d063      	beq.n	80038b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037ee:	4b4c      	ldr	r3, [pc, #304]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00b      	beq.n	8003812 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037fa:	4b49      	ldr	r3, [pc, #292]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b08      	cmp	r3, #8
 8003804:	d11c      	bne.n	8003840 <HAL_RCC_OscConfig+0x18c>
 8003806:	4b46      	ldr	r3, [pc, #280]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d116      	bne.n	8003840 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003812:	4b43      	ldr	r3, [pc, #268]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d005      	beq.n	800382a <HAL_RCC_OscConfig+0x176>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d001      	beq.n	800382a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e1c0      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382a:	4b3d      	ldr	r3, [pc, #244]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4939      	ldr	r1, [pc, #228]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 800383a:	4313      	orrs	r3, r2
 800383c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383e:	e03a      	b.n	80038b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d020      	beq.n	800388a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003848:	4b36      	ldr	r3, [pc, #216]	; (8003924 <HAL_RCC_OscConfig+0x270>)
 800384a:	2201      	movs	r2, #1
 800384c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384e:	f7fd ffc9 	bl	80017e4 <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003856:	f7fd ffc5 	bl	80017e4 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e1a1      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003868:	4b2d      	ldr	r3, [pc, #180]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0f0      	beq.n	8003856 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003874:	4b2a      	ldr	r3, [pc, #168]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	4927      	ldr	r1, [pc, #156]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 8003884:	4313      	orrs	r3, r2
 8003886:	600b      	str	r3, [r1, #0]
 8003888:	e015      	b.n	80038b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800388a:	4b26      	ldr	r3, [pc, #152]	; (8003924 <HAL_RCC_OscConfig+0x270>)
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003890:	f7fd ffa8 	bl	80017e4 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003898:	f7fd ffa4 	bl	80017e4 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e180      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038aa:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d03a      	beq.n	8003938 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d019      	beq.n	80038fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ca:	4b17      	ldr	r3, [pc, #92]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d0:	f7fd ff88 	bl	80017e4 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d8:	f7fd ff84 	bl	80017e4 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e160      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ea:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f0      	beq.n	80038d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038f6:	2001      	movs	r0, #1
 80038f8:	f000 face 	bl	8003e98 <RCC_Delay>
 80038fc:	e01c      	b.n	8003938 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038fe:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <HAL_RCC_OscConfig+0x274>)
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003904:	f7fd ff6e 	bl	80017e4 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800390a:	e00f      	b.n	800392c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800390c:	f7fd ff6a 	bl	80017e4 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d908      	bls.n	800392c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e146      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
 800391e:	bf00      	nop
 8003920:	40021000 	.word	0x40021000
 8003924:	42420000 	.word	0x42420000
 8003928:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800392c:	4b92      	ldr	r3, [pc, #584]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e9      	bne.n	800390c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80a6 	beq.w	8003a92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003946:	2300      	movs	r3, #0
 8003948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800394a:	4b8b      	ldr	r3, [pc, #556]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10d      	bne.n	8003972 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003956:	4b88      	ldr	r3, [pc, #544]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	4a87      	ldr	r2, [pc, #540]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 800395c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003960:	61d3      	str	r3, [r2, #28]
 8003962:	4b85      	ldr	r3, [pc, #532]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800396e:	2301      	movs	r3, #1
 8003970:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003972:	4b82      	ldr	r3, [pc, #520]	; (8003b7c <HAL_RCC_OscConfig+0x4c8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397a:	2b00      	cmp	r3, #0
 800397c:	d118      	bne.n	80039b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800397e:	4b7f      	ldr	r3, [pc, #508]	; (8003b7c <HAL_RCC_OscConfig+0x4c8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a7e      	ldr	r2, [pc, #504]	; (8003b7c <HAL_RCC_OscConfig+0x4c8>)
 8003984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800398a:	f7fd ff2b 	bl	80017e4 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003992:	f7fd ff27 	bl	80017e4 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b64      	cmp	r3, #100	; 0x64
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e103      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a4:	4b75      	ldr	r3, [pc, #468]	; (8003b7c <HAL_RCC_OscConfig+0x4c8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d106      	bne.n	80039c6 <HAL_RCC_OscConfig+0x312>
 80039b8:	4b6f      	ldr	r3, [pc, #444]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	4a6e      	ldr	r2, [pc, #440]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	6213      	str	r3, [r2, #32]
 80039c4:	e02d      	b.n	8003a22 <HAL_RCC_OscConfig+0x36e>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCC_OscConfig+0x334>
 80039ce:	4b6a      	ldr	r3, [pc, #424]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	4a69      	ldr	r2, [pc, #420]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	f023 0301 	bic.w	r3, r3, #1
 80039d8:	6213      	str	r3, [r2, #32]
 80039da:	4b67      	ldr	r3, [pc, #412]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	4a66      	ldr	r2, [pc, #408]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 80039e0:	f023 0304 	bic.w	r3, r3, #4
 80039e4:	6213      	str	r3, [r2, #32]
 80039e6:	e01c      	b.n	8003a22 <HAL_RCC_OscConfig+0x36e>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	2b05      	cmp	r3, #5
 80039ee:	d10c      	bne.n	8003a0a <HAL_RCC_OscConfig+0x356>
 80039f0:	4b61      	ldr	r3, [pc, #388]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	4a60      	ldr	r2, [pc, #384]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 80039f6:	f043 0304 	orr.w	r3, r3, #4
 80039fa:	6213      	str	r3, [r2, #32]
 80039fc:	4b5e      	ldr	r3, [pc, #376]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	4a5d      	ldr	r2, [pc, #372]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	6213      	str	r3, [r2, #32]
 8003a08:	e00b      	b.n	8003a22 <HAL_RCC_OscConfig+0x36e>
 8003a0a:	4b5b      	ldr	r3, [pc, #364]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	4a5a      	ldr	r2, [pc, #360]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003a10:	f023 0301 	bic.w	r3, r3, #1
 8003a14:	6213      	str	r3, [r2, #32]
 8003a16:	4b58      	ldr	r3, [pc, #352]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	4a57      	ldr	r2, [pc, #348]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003a1c:	f023 0304 	bic.w	r3, r3, #4
 8003a20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d015      	beq.n	8003a56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2a:	f7fd fedb 	bl	80017e4 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a30:	e00a      	b.n	8003a48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a32:	f7fd fed7 	bl	80017e4 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e0b1      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a48:	4b4b      	ldr	r3, [pc, #300]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0ee      	beq.n	8003a32 <HAL_RCC_OscConfig+0x37e>
 8003a54:	e014      	b.n	8003a80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a56:	f7fd fec5 	bl	80017e4 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a5c:	e00a      	b.n	8003a74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5e:	f7fd fec1 	bl	80017e4 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e09b      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a74:	4b40      	ldr	r3, [pc, #256]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1ee      	bne.n	8003a5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a80:	7dfb      	ldrb	r3, [r7, #23]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d105      	bne.n	8003a92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a86:	4b3c      	ldr	r3, [pc, #240]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	4a3b      	ldr	r2, [pc, #236]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 8087 	beq.w	8003baa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a9c:	4b36      	ldr	r3, [pc, #216]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 030c 	and.w	r3, r3, #12
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d061      	beq.n	8003b6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d146      	bne.n	8003b3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab0:	4b33      	ldr	r3, [pc, #204]	; (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab6:	f7fd fe95 	bl	80017e4 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003abe:	f7fd fe91 	bl	80017e4 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e06d      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ad0:	4b29      	ldr	r3, [pc, #164]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1f0      	bne.n	8003abe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae4:	d108      	bne.n	8003af8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ae6:	4b24      	ldr	r3, [pc, #144]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	4921      	ldr	r1, [pc, #132]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003af8:	4b1f      	ldr	r3, [pc, #124]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a19      	ldr	r1, [r3, #32]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	491b      	ldr	r1, [pc, #108]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b10:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b16:	f7fd fe65 	bl	80017e4 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b1e:	f7fd fe61 	bl	80017e4 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e03d      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b30:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x46a>
 8003b3c:	e035      	b.n	8003baa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3e:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <HAL_RCC_OscConfig+0x4cc>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b44:	f7fd fe4e 	bl	80017e4 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4c:	f7fd fe4a 	bl	80017e4 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e026      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b5e:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <HAL_RCC_OscConfig+0x4c4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x498>
 8003b6a:	e01e      	b.n	8003baa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d107      	bne.n	8003b84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e019      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	40007000 	.word	0x40007000
 8003b80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b84:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <HAL_RCC_OscConfig+0x500>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d106      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d001      	beq.n	8003baa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40021000 	.word	0x40021000

08003bb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0d0      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bcc:	4b6a      	ldr	r3, [pc, #424]	; (8003d78 <HAL_RCC_ClockConfig+0x1c0>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d910      	bls.n	8003bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bda:	4b67      	ldr	r3, [pc, #412]	; (8003d78 <HAL_RCC_ClockConfig+0x1c0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 0207 	bic.w	r2, r3, #7
 8003be2:	4965      	ldr	r1, [pc, #404]	; (8003d78 <HAL_RCC_ClockConfig+0x1c0>)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bea:	4b63      	ldr	r3, [pc, #396]	; (8003d78 <HAL_RCC_ClockConfig+0x1c0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e0b8      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d020      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c14:	4b59      	ldr	r3, [pc, #356]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	4a58      	ldr	r2, [pc, #352]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003c1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c2c:	4b53      	ldr	r3, [pc, #332]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	4a52      	ldr	r2, [pc, #328]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003c32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c38:	4b50      	ldr	r3, [pc, #320]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	494d      	ldr	r1, [pc, #308]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d040      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d107      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5e:	4b47      	ldr	r3, [pc, #284]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d115      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e07f      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d107      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c76:	4b41      	ldr	r3, [pc, #260]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d109      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e073      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c86:	4b3d      	ldr	r3, [pc, #244]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e06b      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c96:	4b39      	ldr	r3, [pc, #228]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f023 0203 	bic.w	r2, r3, #3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4936      	ldr	r1, [pc, #216]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ca8:	f7fd fd9c 	bl	80017e4 <HAL_GetTick>
 8003cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cae:	e00a      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb0:	f7fd fd98 	bl	80017e4 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e053      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc6:	4b2d      	ldr	r3, [pc, #180]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f003 020c 	and.w	r2, r3, #12
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d1eb      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd8:	4b27      	ldr	r3, [pc, #156]	; (8003d78 <HAL_RCC_ClockConfig+0x1c0>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d210      	bcs.n	8003d08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce6:	4b24      	ldr	r3, [pc, #144]	; (8003d78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 0207 	bic.w	r2, r3, #7
 8003cee:	4922      	ldr	r1, [pc, #136]	; (8003d78 <HAL_RCC_ClockConfig+0x1c0>)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf6:	4b20      	ldr	r3, [pc, #128]	; (8003d78 <HAL_RCC_ClockConfig+0x1c0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d001      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e032      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d14:	4b19      	ldr	r3, [pc, #100]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4916      	ldr	r1, [pc, #88]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d009      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d32:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	490e      	ldr	r1, [pc, #56]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d46:	f000 f821 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	091b      	lsrs	r3, r3, #4
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	490a      	ldr	r1, [pc, #40]	; (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003d58:	5ccb      	ldrb	r3, [r1, r3]
 8003d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5e:	4a09      	ldr	r2, [pc, #36]	; (8003d84 <HAL_RCC_ClockConfig+0x1cc>)
 8003d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <HAL_RCC_ClockConfig+0x1d0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fd fcfa 	bl	8001760 <HAL_InitTick>

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40022000 	.word	0x40022000
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	08006840 	.word	0x08006840
 8003d84:	20000004 	.word	0x20000004
 8003d88:	20000008 	.word	0x20000008

08003d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003da6:	4b1e      	ldr	r3, [pc, #120]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x94>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 030c 	and.w	r3, r3, #12
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d002      	beq.n	8003dbc <HAL_RCC_GetSysClockFreq+0x30>
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	d003      	beq.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x36>
 8003dba:	e027      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003dbc:	4b19      	ldr	r3, [pc, #100]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dbe:	613b      	str	r3, [r7, #16]
      break;
 8003dc0:	e027      	b.n	8003e12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	0c9b      	lsrs	r3, r3, #18
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	4a17      	ldr	r2, [pc, #92]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003dcc:	5cd3      	ldrb	r3, [r2, r3]
 8003dce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d010      	beq.n	8003dfc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dda:	4b11      	ldr	r3, [pc, #68]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	0c5b      	lsrs	r3, r3, #17
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	4a11      	ldr	r2, [pc, #68]	; (8003e2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003de6:	5cd3      	ldrb	r3, [r2, r3]
 8003de8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a0d      	ldr	r2, [pc, #52]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dee:	fb03 f202 	mul.w	r2, r3, r2
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	e004      	b.n	8003e06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a0c      	ldr	r2, [pc, #48]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e00:	fb02 f303 	mul.w	r3, r2, r3
 8003e04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	613b      	str	r3, [r7, #16]
      break;
 8003e0a:	e002      	b.n	8003e12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e0e:	613b      	str	r3, [r7, #16]
      break;
 8003e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e12:	693b      	ldr	r3, [r7, #16]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	371c      	adds	r7, #28
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40021000 	.word	0x40021000
 8003e24:	007a1200 	.word	0x007a1200
 8003e28:	08006858 	.word	0x08006858
 8003e2c:	08006868 	.word	0x08006868
 8003e30:	003d0900 	.word	0x003d0900

08003e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e38:	4b02      	ldr	r3, [pc, #8]	; (8003e44 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr
 8003e44:	20000004 	.word	0x20000004

08003e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e4c:	f7ff fff2 	bl	8003e34 <HAL_RCC_GetHCLKFreq>
 8003e50:	4602      	mov	r2, r0
 8003e52:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	0a1b      	lsrs	r3, r3, #8
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	4903      	ldr	r1, [pc, #12]	; (8003e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e5e:	5ccb      	ldrb	r3, [r1, r3]
 8003e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	08006850 	.word	0x08006850

08003e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e74:	f7ff ffde 	bl	8003e34 <HAL_RCC_GetHCLKFreq>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	0adb      	lsrs	r3, r3, #11
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	4903      	ldr	r1, [pc, #12]	; (8003e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e86:	5ccb      	ldrb	r3, [r1, r3]
 8003e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40021000 	.word	0x40021000
 8003e94:	08006850 	.word	0x08006850

08003e98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ea0:	4b0a      	ldr	r3, [pc, #40]	; (8003ecc <RCC_Delay+0x34>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a0a      	ldr	r2, [pc, #40]	; (8003ed0 <RCC_Delay+0x38>)
 8003ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eaa:	0a5b      	lsrs	r3, r3, #9
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	fb02 f303 	mul.w	r3, r2, r3
 8003eb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003eb4:	bf00      	nop
  }
  while (Delay --);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1e5a      	subs	r2, r3, #1
 8003eba:	60fa      	str	r2, [r7, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1f9      	bne.n	8003eb4 <RCC_Delay+0x1c>
}
 8003ec0:	bf00      	nop
 8003ec2:	bf00      	nop
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr
 8003ecc:	20000004 	.word	0x20000004
 8003ed0:	10624dd3 	.word	0x10624dd3

08003ed4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	613b      	str	r3, [r7, #16]
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d07d      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ef4:	4b4f      	ldr	r3, [pc, #316]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10d      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f00:	4b4c      	ldr	r3, [pc, #304]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	4a4b      	ldr	r2, [pc, #300]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	61d3      	str	r3, [r2, #28]
 8003f0c:	4b49      	ldr	r3, [pc, #292]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1c:	4b46      	ldr	r3, [pc, #280]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d118      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f28:	4b43      	ldr	r3, [pc, #268]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a42      	ldr	r2, [pc, #264]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f34:	f7fd fc56 	bl	80017e4 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3a:	e008      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3c:	f7fd fc52 	bl	80017e4 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b64      	cmp	r3, #100	; 0x64
 8003f48:	d901      	bls.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e06d      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4e:	4b3a      	ldr	r3, [pc, #232]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f5a:	4b36      	ldr	r3, [pc, #216]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d02e      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d027      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f78:	4b2e      	ldr	r3, [pc, #184]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f82:	4b2e      	ldr	r3, [pc, #184]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f84:	2201      	movs	r2, #1
 8003f86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f88:	4b2c      	ldr	r3, [pc, #176]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f8e:	4a29      	ldr	r2, [pc, #164]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d014      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9e:	f7fd fc21 	bl	80017e4 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa4:	e00a      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa6:	f7fd fc1d 	bl	80017e4 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e036      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fbc:	4b1d      	ldr	r3, [pc, #116]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0ee      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fc8:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	4917      	ldr	r1, [pc, #92]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fda:	7dfb      	ldrb	r3, [r7, #23]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d105      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe0:	4b14      	ldr	r3, [pc, #80]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	4a13      	ldr	r2, [pc, #76]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ff8:	4b0e      	ldr	r3, [pc, #56]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	490b      	ldr	r1, [pc, #44]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004006:	4313      	orrs	r3, r2
 8004008:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b00      	cmp	r3, #0
 8004014:	d008      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004016:	4b07      	ldr	r3, [pc, #28]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	4904      	ldr	r1, [pc, #16]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004024:	4313      	orrs	r3, r2
 8004026:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40021000 	.word	0x40021000
 8004038:	40007000 	.word	0x40007000
 800403c:	42420440 	.word	0x42420440

08004040 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	2300      	movs	r3, #0
 800404e:	61fb      	str	r3, [r7, #28]
 8004050:	2300      	movs	r3, #0
 8004052:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	2300      	movs	r3, #0
 800405a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b10      	cmp	r3, #16
 8004060:	d00a      	beq.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b10      	cmp	r3, #16
 8004066:	f200 808a 	bhi.w	800417e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d045      	beq.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d075      	beq.n	8004162 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004076:	e082      	b.n	800417e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004078:	4b46      	ldr	r3, [pc, #280]	; (8004194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800407e:	4b45      	ldr	r3, [pc, #276]	; (8004194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d07b      	beq.n	8004182 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	0c9b      	lsrs	r3, r3, #18
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	4a41      	ldr	r2, [pc, #260]	; (8004198 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004094:	5cd3      	ldrb	r3, [r2, r3]
 8004096:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d015      	beq.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040a2:	4b3c      	ldr	r3, [pc, #240]	; (8004194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	0c5b      	lsrs	r3, r3, #17
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	4a3b      	ldr	r2, [pc, #236]	; (800419c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80040ae:	5cd3      	ldrb	r3, [r2, r3]
 80040b0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00d      	beq.n	80040d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80040bc:	4a38      	ldr	r2, [pc, #224]	; (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	fb02 f303 	mul.w	r3, r2, r3
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	e004      	b.n	80040d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4a34      	ldr	r2, [pc, #208]	; (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80040d2:	fb02 f303 	mul.w	r3, r2, r3
 80040d6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80040d8:	4b2e      	ldr	r3, [pc, #184]	; (8004194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e4:	d102      	bne.n	80040ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	61bb      	str	r3, [r7, #24]
      break;
 80040ea:	e04a      	b.n	8004182 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	4a2d      	ldr	r2, [pc, #180]	; (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	085b      	lsrs	r3, r3, #1
 80040f8:	61bb      	str	r3, [r7, #24]
      break;
 80040fa:	e042      	b.n	8004182 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80040fc:	4b25      	ldr	r3, [pc, #148]	; (8004194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800410c:	d108      	bne.n	8004120 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004118:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	e01f      	b.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004126:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800412a:	d109      	bne.n	8004140 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800412c:	4b19      	ldr	r3, [pc, #100]	; (8004194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004138:	f649 4340 	movw	r3, #40000	; 0x9c40
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	e00f      	b.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800414a:	d11c      	bne.n	8004186 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800414c:	4b11      	ldr	r3, [pc, #68]	; (8004194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d016      	beq.n	8004186 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004158:	f24f 4324 	movw	r3, #62500	; 0xf424
 800415c:	61bb      	str	r3, [r7, #24]
      break;
 800415e:	e012      	b.n	8004186 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004160:	e011      	b.n	8004186 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004162:	f7ff fe85 	bl	8003e70 <HAL_RCC_GetPCLK2Freq>
 8004166:	4602      	mov	r2, r0
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	0b9b      	lsrs	r3, r3, #14
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	3301      	adds	r3, #1
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	fbb2 f3f3 	udiv	r3, r2, r3
 800417a:	61bb      	str	r3, [r7, #24]
      break;
 800417c:	e004      	b.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800417e:	bf00      	nop
 8004180:	e002      	b.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004182:	bf00      	nop
 8004184:	e000      	b.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004186:	bf00      	nop
    }
  }
  return (frequency);
 8004188:	69bb      	ldr	r3, [r7, #24]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3720      	adds	r7, #32
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40021000 	.word	0x40021000
 8004198:	0800686c 	.word	0x0800686c
 800419c:	0800687c 	.word	0x0800687c
 80041a0:	007a1200 	.word	0x007a1200
 80041a4:	003d0900 	.word	0x003d0900
 80041a8:	aaaaaaab 	.word	0xaaaaaaab

080041ac <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e07a      	b.n	80042b8 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	7c5b      	ldrb	r3, [r3, #17]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d105      	bne.n	80041d8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7fd f988 	bl	80014e8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 faea 	bl	80047b8 <HAL_RTC_WaitForSynchro>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d004      	beq.n	80041f4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2204      	movs	r2, #4
 80041ee:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e061      	b.n	80042b8 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fba3 	bl	8004940 <RTC_EnterInitMode>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d004      	beq.n	800420a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2204      	movs	r2, #4
 8004204:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e056      	b.n	80042b8 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0207 	bic.w	r2, r2, #7
 8004218:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004222:	4b27      	ldr	r3, [pc, #156]	; (80042c0 <HAL_RTC_Init+0x114>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	4a26      	ldr	r2, [pc, #152]	; (80042c0 <HAL_RTC_Init+0x114>)
 8004228:	f023 0301 	bic.w	r3, r3, #1
 800422c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800422e:	4b24      	ldr	r3, [pc, #144]	; (80042c0 <HAL_RTC_Init+0x114>)
 8004230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004232:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	4921      	ldr	r1, [pc, #132]	; (80042c0 <HAL_RTC_Init+0x114>)
 800423c:	4313      	orrs	r3, r2
 800423e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004248:	d003      	beq.n	8004252 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	e00e      	b.n	8004270 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004252:	2001      	movs	r0, #1
 8004254:	f7ff fef4 	bl	8004040 <HAL_RCCEx_GetPeriphCLKFreq>
 8004258:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d104      	bne.n	800426a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2204      	movs	r2, #4
 8004264:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e026      	b.n	80042b8 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3b01      	subs	r3, #1
 800426e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	0c1a      	lsrs	r2, r3, #16
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f002 020f 	and.w	r2, r2, #15
 800427c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	b292      	uxth	r2, r2
 8004286:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 fb81 	bl	8004990 <RTC_ExitInitMode>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d004      	beq.n	800429e <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2204      	movs	r2, #4
 8004298:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e00c      	b.n	80042b8 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80042b6:	2300      	movs	r3, #0
  }
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40006c00 	.word	0x40006c00

080042c4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80042c4:	b590      	push	{r4, r7, lr}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	2300      	movs	r3, #0
 80042d6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <HAL_RTC_SetTime+0x20>
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e080      	b.n	80043ea <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	7c1b      	ldrb	r3, [r3, #16]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <HAL_RTC_SetTime+0x30>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e07a      	b.n	80043ea <HAL_RTC_SetTime+0x126>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2201      	movs	r2, #1
 80042f8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2202      	movs	r2, #2
 80042fe:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d113      	bne.n	800432e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004310:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	785b      	ldrb	r3, [r3, #1]
 8004318:	4619      	mov	r1, r3
 800431a:	460b      	mov	r3, r1
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	1a5b      	subs	r3, r3, r1
 8004320:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004322:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004328:	4413      	add	r3, r2
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	e01e      	b.n	800436c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fb71 	bl	8004a1a <RTC_Bcd2ToByte>
 8004338:	4603      	mov	r3, r0
 800433a:	461a      	mov	r2, r3
 800433c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004340:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	785b      	ldrb	r3, [r3, #1]
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fb66 	bl	8004a1a <RTC_Bcd2ToByte>
 800434e:	4603      	mov	r3, r0
 8004350:	461a      	mov	r2, r3
 8004352:	4613      	mov	r3, r2
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800435a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	789b      	ldrb	r3, [r3, #2]
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fb5a 	bl	8004a1a <RTC_Bcd2ToByte>
 8004366:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004368:	4423      	add	r3, r4
 800436a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800436c:	6979      	ldr	r1, [r7, #20]
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 fa7f 	bl	8004872 <RTC_WriteTimeCounter>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d007      	beq.n	800438a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2204      	movs	r2, #4
 800437e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e02f      	b.n	80043ea <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0205 	bic.w	r2, r2, #5
 8004398:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 fa90 	bl	80048c0 <RTC_ReadAlarmCounter>
 80043a0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a8:	d018      	beq.n	80043dc <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d214      	bcs.n	80043dc <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80043b8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80043bc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80043be:	6939      	ldr	r1, [r7, #16]
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 fa96 	bl	80048f2 <RTC_WriteAlarmCounter>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d007      	beq.n	80043dc <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2204      	movs	r2, #4
 80043d0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e006      	b.n	80043ea <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2201      	movs	r2, #1
 80043e0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80043e8:	2300      	movs	r3, #0
  }
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	371c      	adds	r7, #28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd90      	pop	{r4, r7, pc}
	...

080043f4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	61bb      	str	r3, [r7, #24]
 8004404:	2300      	movs	r3, #0
 8004406:	61fb      	str	r3, [r7, #28]
 8004408:	2300      	movs	r3, #0
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	2300      	movs	r3, #0
 800440e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <HAL_RTC_GetTime+0x28>
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0b5      	b.n	800458c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e0ac      	b.n	800458c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 f9ed 	bl	8004812 <RTC_ReadTimeCounter>
 8004438:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	4a55      	ldr	r2, [pc, #340]	; (8004594 <HAL_RTC_GetTime+0x1a0>)
 800443e:	fba2 2303 	umull	r2, r3, r2, r3
 8004442:	0adb      	lsrs	r3, r3, #11
 8004444:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	4b52      	ldr	r3, [pc, #328]	; (8004594 <HAL_RTC_GetTime+0x1a0>)
 800444a:	fba3 1302 	umull	r1, r3, r3, r2
 800444e:	0adb      	lsrs	r3, r3, #11
 8004450:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004454:	fb01 f303 	mul.w	r3, r1, r3
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	4a4f      	ldr	r2, [pc, #316]	; (8004598 <HAL_RTC_GetTime+0x1a4>)
 800445c:	fba2 2303 	umull	r2, r3, r2, r3
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	b2da      	uxtb	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	4a4a      	ldr	r2, [pc, #296]	; (8004594 <HAL_RTC_GetTime+0x1a0>)
 800446c:	fba2 1203 	umull	r1, r2, r2, r3
 8004470:	0ad2      	lsrs	r2, r2, #11
 8004472:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004476:	fb01 f202 	mul.w	r2, r1, r2
 800447a:	1a9a      	subs	r2, r3, r2
 800447c:	4b46      	ldr	r3, [pc, #280]	; (8004598 <HAL_RTC_GetTime+0x1a4>)
 800447e:	fba3 1302 	umull	r1, r3, r3, r2
 8004482:	0959      	lsrs	r1, r3, #5
 8004484:	460b      	mov	r3, r1
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	1a5b      	subs	r3, r3, r1
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	1ad1      	subs	r1, r2, r3
 800448e:	b2ca      	uxtb	r2, r1
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	2b17      	cmp	r3, #23
 8004498:	d955      	bls.n	8004546 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	4a3f      	ldr	r2, [pc, #252]	; (800459c <HAL_RTC_GetTime+0x1a8>)
 800449e:	fba2 2303 	umull	r2, r3, r2, r3
 80044a2:	091b      	lsrs	r3, r3, #4
 80044a4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80044a6:	6939      	ldr	r1, [r7, #16]
 80044a8:	4b3c      	ldr	r3, [pc, #240]	; (800459c <HAL_RTC_GetTime+0x1a8>)
 80044aa:	fba3 2301 	umull	r2, r3, r3, r1
 80044ae:	091a      	lsrs	r2, r3, #4
 80044b0:	4613      	mov	r3, r2
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	4413      	add	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	1aca      	subs	r2, r1, r3
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f9fd 	bl	80048c0 <RTC_ReadAlarmCounter>
 80044c6:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ce:	d008      	beq.n	80044e2 <HAL_RTC_GetTime+0xee>
 80044d0:	69fa      	ldr	r2, [r7, #28]
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d904      	bls.n	80044e2 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	61fb      	str	r3, [r7, #28]
 80044e0:	e002      	b.n	80044e8 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80044e2:	f04f 33ff 	mov.w	r3, #4294967295
 80044e6:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	4a2d      	ldr	r2, [pc, #180]	; (80045a0 <HAL_RTC_GetTime+0x1ac>)
 80044ec:	fb02 f303 	mul.w	r3, r2, r3
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80044f6:	69b9      	ldr	r1, [r7, #24]
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f9ba 	bl	8004872 <RTC_WriteTimeCounter>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e041      	b.n	800458c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450e:	d00c      	beq.n	800452a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004510:	69fa      	ldr	r2, [r7, #28]
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	4413      	add	r3, r2
 8004516:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004518:	69f9      	ldr	r1, [r7, #28]
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 f9e9 	bl	80048f2 <RTC_WriteAlarmCounter>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e030      	b.n	800458c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800452a:	69f9      	ldr	r1, [r7, #28]
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 f9e0 	bl	80048f2 <RTC_WriteAlarmCounter>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e027      	b.n	800458c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800453c:	6979      	ldr	r1, [r7, #20]
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 fa88 	bl	8004a54 <RTC_DateUpdate>
 8004544:	e003      	b.n	800454e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	b2da      	uxtb	r2, r3
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d01a      	beq.n	800458a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	4618      	mov	r0, r3
 800455a:	f000 fa41 	bl	80049e0 <RTC_ByteToBcd2>
 800455e:	4603      	mov	r3, r0
 8004560:	461a      	mov	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	785b      	ldrb	r3, [r3, #1]
 800456a:	4618      	mov	r0, r3
 800456c:	f000 fa38 	bl	80049e0 <RTC_ByteToBcd2>
 8004570:	4603      	mov	r3, r0
 8004572:	461a      	mov	r2, r3
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	789b      	ldrb	r3, [r3, #2]
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fa2f 	bl	80049e0 <RTC_ByteToBcd2>
 8004582:	4603      	mov	r3, r0
 8004584:	461a      	mov	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3720      	adds	r7, #32
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	91a2b3c5 	.word	0x91a2b3c5
 8004598:	88888889 	.word	0x88888889
 800459c:	aaaaaaab 	.word	0xaaaaaaab
 80045a0:	00015180 	.word	0x00015180

080045a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61fb      	str	r3, [r7, #28]
 80045b4:	2300      	movs	r3, #0
 80045b6:	61bb      	str	r3, [r7, #24]
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_RTC_SetDate+0x24>
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e097      	b.n	80046fc <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	7c1b      	ldrb	r3, [r3, #16]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_RTC_SetDate+0x34>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e091      	b.n	80046fc <HAL_RTC_SetDate+0x158>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2201      	movs	r2, #1
 80045dc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2202      	movs	r2, #2
 80045e2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10c      	bne.n	8004604 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	78da      	ldrb	r2, [r3, #3]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	785a      	ldrb	r2, [r3, #1]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	789a      	ldrb	r2, [r3, #2]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	739a      	strb	r2, [r3, #14]
 8004602:	e01a      	b.n	800463a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	78db      	ldrb	r3, [r3, #3]
 8004608:	4618      	mov	r0, r3
 800460a:	f000 fa06 	bl	8004a1a <RTC_Bcd2ToByte>
 800460e:	4603      	mov	r3, r0
 8004610:	461a      	mov	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	785b      	ldrb	r3, [r3, #1]
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f9fd 	bl	8004a1a <RTC_Bcd2ToByte>
 8004620:	4603      	mov	r3, r0
 8004622:	461a      	mov	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	789b      	ldrb	r3, [r3, #2]
 800462c:	4618      	mov	r0, r3
 800462e:	f000 f9f4 	bl	8004a1a <RTC_Bcd2ToByte>
 8004632:	4603      	mov	r3, r0
 8004634:	461a      	mov	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	7bdb      	ldrb	r3, [r3, #15]
 800463e:	4618      	mov	r0, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	7b59      	ldrb	r1, [r3, #13]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	7b9b      	ldrb	r3, [r3, #14]
 8004648:	461a      	mov	r2, r3
 800464a:	f000 fadf 	bl	8004c0c <RTC_WeekDayNum>
 800464e:	4603      	mov	r3, r0
 8004650:	461a      	mov	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	7b1a      	ldrb	r2, [r3, #12]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f8d7 	bl	8004812 <RTC_ReadTimeCounter>
 8004664:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	4a26      	ldr	r2, [pc, #152]	; (8004704 <HAL_RTC_SetDate+0x160>)
 800466a:	fba2 2303 	umull	r2, r3, r2, r3
 800466e:	0adb      	lsrs	r3, r3, #11
 8004670:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b18      	cmp	r3, #24
 8004676:	d93a      	bls.n	80046ee <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	4a23      	ldr	r2, [pc, #140]	; (8004708 <HAL_RTC_SetDate+0x164>)
 800467c:	fba2 2303 	umull	r2, r3, r2, r3
 8004680:	091b      	lsrs	r3, r3, #4
 8004682:	4a22      	ldr	r2, [pc, #136]	; (800470c <HAL_RTC_SetDate+0x168>)
 8004684:	fb02 f303 	mul.w	r3, r2, r3
 8004688:	69fa      	ldr	r2, [r7, #28]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800468e:	69f9      	ldr	r1, [r7, #28]
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f8ee 	bl	8004872 <RTC_WriteTimeCounter>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d007      	beq.n	80046ac <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2204      	movs	r2, #4
 80046a0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e027      	b.n	80046fc <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 f907 	bl	80048c0 <RTC_ReadAlarmCounter>
 80046b2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ba:	d018      	beq.n	80046ee <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d214      	bcs.n	80046ee <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80046ca:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80046ce:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80046d0:	69b9      	ldr	r1, [r7, #24]
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 f90d 	bl	80048f2 <RTC_WriteAlarmCounter>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d007      	beq.n	80046ee <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2204      	movs	r2, #4
 80046e2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e006      	b.n	80046fc <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3720      	adds	r7, #32
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	91a2b3c5 	.word	0x91a2b3c5
 8004708:	aaaaaaab 	.word	0xaaaaaaab
 800470c:	00015180 	.word	0x00015180

08004710 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 800471c:	f107 0314 	add.w	r3, r7, #20
 8004720:	2100      	movs	r1, #0
 8004722:	460a      	mov	r2, r1
 8004724:	801a      	strh	r2, [r3, #0]
 8004726:	460a      	mov	r2, r1
 8004728:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <HAL_RTC_GetDate+0x26>
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e03a      	b.n	80047b0 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800473a:	f107 0314 	add.w	r3, r7, #20
 800473e:	2200      	movs	r2, #0
 8004740:	4619      	mov	r1, r3
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f7ff fe56 	bl	80043f4 <HAL_RTC_GetTime>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e02e      	b.n	80047b0 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	7b1a      	ldrb	r2, [r3, #12]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	7bda      	ldrb	r2, [r3, #15]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	7b5a      	ldrb	r2, [r3, #13]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	7b9a      	ldrb	r2, [r3, #14]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d01a      	beq.n	80047ae <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	78db      	ldrb	r3, [r3, #3]
 800477c:	4618      	mov	r0, r3
 800477e:	f000 f92f 	bl	80049e0 <RTC_ByteToBcd2>
 8004782:	4603      	mov	r3, r0
 8004784:	461a      	mov	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	785b      	ldrb	r3, [r3, #1]
 800478e:	4618      	mov	r0, r3
 8004790:	f000 f926 	bl	80049e0 <RTC_ByteToBcd2>
 8004794:	4603      	mov	r3, r0
 8004796:	461a      	mov	r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	789b      	ldrb	r3, [r3, #2]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 f91d 	bl	80049e0 <RTC_ByteToBcd2>
 80047a6:	4603      	mov	r3, r0
 80047a8:	461a      	mov	r2, r3
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e01d      	b.n	800480a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0208 	bic.w	r2, r2, #8
 80047dc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80047de:	f7fd f801 	bl	80017e4 <HAL_GetTick>
 80047e2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80047e4:	e009      	b.n	80047fa <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80047e6:	f7fc fffd 	bl	80017e4 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047f4:	d901      	bls.n	80047fa <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e007      	b.n	800480a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f003 0308 	and.w	r3, r3, #8
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0ee      	beq.n	80047e6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004812:	b480      	push	{r7}
 8004814:	b087      	sub	sp, #28
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	827b      	strh	r3, [r7, #18]
 800481e:	2300      	movs	r3, #0
 8004820:	823b      	strh	r3, [r7, #16]
 8004822:	2300      	movs	r3, #0
 8004824:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004842:	8a7a      	ldrh	r2, [r7, #18]
 8004844:	8a3b      	ldrh	r3, [r7, #16]
 8004846:	429a      	cmp	r2, r3
 8004848:	d008      	beq.n	800485c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800484a:	8a3b      	ldrh	r3, [r7, #16]
 800484c:	041a      	lsls	r2, r3, #16
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	b29b      	uxth	r3, r3
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	e004      	b.n	8004866 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800485c:	8a7b      	ldrh	r3, [r7, #18]
 800485e:	041a      	lsls	r2, r3, #16
 8004860:	89fb      	ldrh	r3, [r7, #14]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004866:	697b      	ldr	r3, [r7, #20]
}
 8004868:	4618      	mov	r0, r3
 800486a:	371c      	adds	r7, #28
 800486c:	46bd      	mov	sp, r7
 800486e:	bc80      	pop	{r7}
 8004870:	4770      	bx	lr

08004872 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f85d 	bl	8004940 <RTC_EnterInitMode>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
 8004890:	e011      	b.n	80048b6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	0c12      	lsrs	r2, r2, #16
 800489a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	b292      	uxth	r2, r2
 80048a4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f872 	bl	8004990 <RTC_ExitInitMode>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	81fb      	strh	r3, [r7, #14]
 80048cc:	2300      	movs	r3, #0
 80048ce:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80048e0:	89fb      	ldrh	r3, [r7, #14]
 80048e2:	041a      	lsls	r2, r3, #16
 80048e4:	89bb      	ldrh	r3, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr

080048f2 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b084      	sub	sp, #16
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048fc:	2300      	movs	r3, #0
 80048fe:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f81d 	bl	8004940 <RTC_EnterInitMode>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	73fb      	strb	r3, [r7, #15]
 8004910:	e011      	b.n	8004936 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	0c12      	lsrs	r2, r2, #16
 800491a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	b292      	uxth	r2, r2
 8004924:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f832 	bl	8004990 <RTC_ExitInitMode>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004936:	7bfb      	ldrb	r3, [r7, #15]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800494c:	f7fc ff4a 	bl	80017e4 <HAL_GetTick>
 8004950:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004952:	e009      	b.n	8004968 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004954:	f7fc ff46 	bl	80017e4 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004962:	d901      	bls.n	8004968 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e00f      	b.n	8004988 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0ee      	beq.n	8004954 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0210 	orr.w	r2, r2, #16
 8004984:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0210 	bic.w	r2, r2, #16
 80049aa:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80049ac:	f7fc ff1a 	bl	80017e4 <HAL_GetTick>
 80049b0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80049b2:	e009      	b.n	80049c8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80049b4:	f7fc ff16 	bl	80017e4 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049c2:	d901      	bls.n	80049c8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e007      	b.n	80049d8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0ee      	beq.n	80049b4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	4603      	mov	r3, r0
 80049e8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80049ee:	e005      	b.n	80049fc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	3301      	adds	r3, #1
 80049f4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80049f6:	79fb      	ldrb	r3, [r7, #7]
 80049f8:	3b0a      	subs	r3, #10
 80049fa:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80049fc:	79fb      	ldrb	r3, [r7, #7]
 80049fe:	2b09      	cmp	r3, #9
 8004a00:	d8f6      	bhi.n	80049f0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	b2db      	uxtb	r3, r3
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bc80      	pop	{r7}
 8004a18:	4770      	bx	lr

08004a1a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b085      	sub	sp, #20
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	4603      	mov	r3, r0
 8004a22:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	091b      	lsrs	r3, r3, #4
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	461a      	mov	r2, r3
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	f003 030f 	and.w	r3, r3, #15
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	4413      	add	r3, r2
 8004a48:	b2db      	uxtb	r3, r3
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr

08004a54 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	2300      	movs	r3, #0
 8004a64:	613b      	str	r3, [r7, #16]
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	7bdb      	ldrb	r3, [r3, #15]
 8004a72:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	7b5b      	ldrb	r3, [r3, #13]
 8004a78:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	7b9b      	ldrb	r3, [r3, #14]
 8004a7e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004a80:	2300      	movs	r3, #0
 8004a82:	60bb      	str	r3, [r7, #8]
 8004a84:	e06f      	b.n	8004b66 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d011      	beq.n	8004ab0 <RTC_DateUpdate+0x5c>
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d00e      	beq.n	8004ab0 <RTC_DateUpdate+0x5c>
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	2b05      	cmp	r3, #5
 8004a96:	d00b      	beq.n	8004ab0 <RTC_DateUpdate+0x5c>
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	2b07      	cmp	r3, #7
 8004a9c:	d008      	beq.n	8004ab0 <RTC_DateUpdate+0x5c>
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d005      	beq.n	8004ab0 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	2b0a      	cmp	r3, #10
 8004aa8:	d002      	beq.n	8004ab0 <RTC_DateUpdate+0x5c>
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	2b0c      	cmp	r3, #12
 8004aae:	d117      	bne.n	8004ae0 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b1e      	cmp	r3, #30
 8004ab4:	d803      	bhi.n	8004abe <RTC_DateUpdate+0x6a>
      {
        day++;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004abc:	e050      	b.n	8004b60 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	2b0c      	cmp	r3, #12
 8004ac2:	d005      	beq.n	8004ad0 <RTC_DateUpdate+0x7c>
        {
          month++;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004aca:	2301      	movs	r3, #1
 8004acc:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004ace:	e047      	b.n	8004b60 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	60fb      	str	r3, [r7, #12]
          year++;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	3301      	adds	r3, #1
 8004adc:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004ade:	e03f      	b.n	8004b60 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d008      	beq.n	8004af8 <RTC_DateUpdate+0xa4>
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	2b06      	cmp	r3, #6
 8004aea:	d005      	beq.n	8004af8 <RTC_DateUpdate+0xa4>
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	2b09      	cmp	r3, #9
 8004af0:	d002      	beq.n	8004af8 <RTC_DateUpdate+0xa4>
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	2b0b      	cmp	r3, #11
 8004af6:	d10c      	bne.n	8004b12 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b1d      	cmp	r3, #29
 8004afc:	d803      	bhi.n	8004b06 <RTC_DateUpdate+0xb2>
      {
        day++;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3301      	adds	r3, #1
 8004b02:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004b04:	e02c      	b.n	8004b60 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004b10:	e026      	b.n	8004b60 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d123      	bne.n	8004b60 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b1b      	cmp	r3, #27
 8004b1c:	d803      	bhi.n	8004b26 <RTC_DateUpdate+0xd2>
      {
        day++;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3301      	adds	r3, #1
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	e01c      	b.n	8004b60 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b1c      	cmp	r3, #28
 8004b2a:	d111      	bne.n	8004b50 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 f839 	bl	8004ba8 <RTC_IsLeapYear>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <RTC_DateUpdate+0xf0>
        {
          day++;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	60fb      	str	r3, [r7, #12]
 8004b42:	e00d      	b.n	8004b60 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	3301      	adds	r3, #1
 8004b48:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	e007      	b.n	8004b60 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b1d      	cmp	r3, #29
 8004b54:	d104      	bne.n	8004b60 <RTC_DateUpdate+0x10c>
      {
        month++;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	3301      	adds	r3, #1
 8004b64:	60bb      	str	r3, [r7, #8]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d38b      	bcc.n	8004a86 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	4619      	mov	r1, r3
 8004b90:	6978      	ldr	r0, [r7, #20]
 8004b92:	f000 f83b 	bl	8004c0c <RTC_WeekDayNum>
 8004b96:	4603      	mov	r3, r0
 8004b98:	461a      	mov	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	731a      	strb	r2, [r3, #12]
}
 8004b9e:	bf00      	nop
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
	...

08004ba8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8004bb2:	88fb      	ldrh	r3, [r7, #6]
 8004bb4:	f003 0303 	and.w	r3, r3, #3
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e01d      	b.n	8004bfe <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004bc2:	88fb      	ldrh	r3, [r7, #6]
 8004bc4:	4a10      	ldr	r2, [pc, #64]	; (8004c08 <RTC_IsLeapYear+0x60>)
 8004bc6:	fba2 1203 	umull	r1, r2, r2, r3
 8004bca:	0952      	lsrs	r2, r2, #5
 8004bcc:	2164      	movs	r1, #100	; 0x64
 8004bce:	fb01 f202 	mul.w	r2, r1, r2
 8004bd2:	1a9b      	subs	r3, r3, r2
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e00f      	b.n	8004bfe <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004bde:	88fb      	ldrh	r3, [r7, #6]
 8004be0:	4a09      	ldr	r2, [pc, #36]	; (8004c08 <RTC_IsLeapYear+0x60>)
 8004be2:	fba2 1203 	umull	r1, r2, r2, r3
 8004be6:	09d2      	lsrs	r2, r2, #7
 8004be8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004bec:	fb01 f202 	mul.w	r2, r1, r2
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8004bfc:	2300      	movs	r3, #0
  }
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bc80      	pop	{r7}
 8004c06:	4770      	bx	lr
 8004c08:	51eb851f 	.word	0x51eb851f

08004c0c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	70fb      	strb	r3, [r7, #3]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60bb      	str	r3, [r7, #8]
 8004c20:	2300      	movs	r3, #0
 8004c22:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004c2a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004c2c:	78fb      	ldrb	r3, [r7, #3]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d82d      	bhi.n	8004c8e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004c32:	78fa      	ldrb	r2, [r7, #3]
 8004c34:	4613      	mov	r3, r2
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	4413      	add	r3, r2
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	1a9b      	subs	r3, r3, r2
 8004c3e:	4a2c      	ldr	r2, [pc, #176]	; (8004cf0 <RTC_WeekDayNum+0xe4>)
 8004c40:	fba2 2303 	umull	r2, r3, r2, r3
 8004c44:	085a      	lsrs	r2, r3, #1
 8004c46:	78bb      	ldrb	r3, [r7, #2]
 8004c48:	441a      	add	r2, r3
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	441a      	add	r2, r3
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	3b01      	subs	r3, #1
 8004c52:	089b      	lsrs	r3, r3, #2
 8004c54:	441a      	add	r2, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	4926      	ldr	r1, [pc, #152]	; (8004cf4 <RTC_WeekDayNum+0xe8>)
 8004c5c:	fba1 1303 	umull	r1, r3, r1, r3
 8004c60:	095b      	lsrs	r3, r3, #5
 8004c62:	1ad2      	subs	r2, r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	4922      	ldr	r1, [pc, #136]	; (8004cf4 <RTC_WeekDayNum+0xe8>)
 8004c6a:	fba1 1303 	umull	r1, r3, r1, r3
 8004c6e:	09db      	lsrs	r3, r3, #7
 8004c70:	4413      	add	r3, r2
 8004c72:	1d1a      	adds	r2, r3, #4
 8004c74:	4b20      	ldr	r3, [pc, #128]	; (8004cf8 <RTC_WeekDayNum+0xec>)
 8004c76:	fba3 1302 	umull	r1, r3, r3, r2
 8004c7a:	1ad1      	subs	r1, r2, r3
 8004c7c:	0849      	lsrs	r1, r1, #1
 8004c7e:	440b      	add	r3, r1
 8004c80:	0899      	lsrs	r1, r3, #2
 8004c82:	460b      	mov	r3, r1
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	1a5b      	subs	r3, r3, r1
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	e029      	b.n	8004ce2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004c8e:	78fa      	ldrb	r2, [r7, #3]
 8004c90:	4613      	mov	r3, r2
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	4413      	add	r3, r2
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	4a15      	ldr	r2, [pc, #84]	; (8004cf0 <RTC_WeekDayNum+0xe4>)
 8004c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca0:	085a      	lsrs	r2, r3, #1
 8004ca2:	78bb      	ldrb	r3, [r7, #2]
 8004ca4:	441a      	add	r2, r3
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	441a      	add	r2, r3
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	089b      	lsrs	r3, r3, #2
 8004cae:	441a      	add	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4910      	ldr	r1, [pc, #64]	; (8004cf4 <RTC_WeekDayNum+0xe8>)
 8004cb4:	fba1 1303 	umull	r1, r3, r1, r3
 8004cb8:	095b      	lsrs	r3, r3, #5
 8004cba:	1ad2      	subs	r2, r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	490d      	ldr	r1, [pc, #52]	; (8004cf4 <RTC_WeekDayNum+0xe8>)
 8004cc0:	fba1 1303 	umull	r1, r3, r1, r3
 8004cc4:	09db      	lsrs	r3, r3, #7
 8004cc6:	4413      	add	r3, r2
 8004cc8:	1c9a      	adds	r2, r3, #2
 8004cca:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <RTC_WeekDayNum+0xec>)
 8004ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8004cd0:	1ad1      	subs	r1, r2, r3
 8004cd2:	0849      	lsrs	r1, r1, #1
 8004cd4:	440b      	add	r3, r1
 8004cd6:	0899      	lsrs	r1, r3, #2
 8004cd8:	460b      	mov	r3, r1
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	1a5b      	subs	r3, r3, r1
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	b2db      	uxtb	r3, r3
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bc80      	pop	{r7}
 8004cee:	4770      	bx	lr
 8004cf0:	38e38e39 	.word	0x38e38e39
 8004cf4:	51eb851f 	.word	0x51eb851f
 8004cf8:	24924925 	.word	0x24924925

08004cfc <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d027      	beq.n	8004d62 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d020      	beq.n	8004d62 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 0304 	and.w	r3, r3, #4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00b      	beq.n	8004d46 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f824 	bl	8004d7c <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0204 	mvn.w	r2, #4
 8004d3c:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2204      	movs	r2, #4
 8004d42:	745a      	strb	r2, [r3, #17]
 8004d44:	e005      	b.n	8004d52 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f80f 	bl	8004d6a <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0201 	bic.w	r2, r2, #1
 8004d60:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004d62:	bf00      	nop
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bc80      	pop	{r7}
 8004d7a:	4770      	bx	lr

08004d7c <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bc80      	pop	{r7}
 8004d8c:	4770      	bx	lr
	...

08004d90 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8004da0:	4b07      	ldr	r3, [pc, #28]	; (8004dc0 <HAL_RTCEx_BKUPWrite+0x30>)
 8004da2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	4413      	add	r3, r2
 8004dac:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	b292      	uxth	r2, r2
 8004db4:	601a      	str	r2, [r3, #0]
}
 8004db6:	bf00      	nop
 8004db8:	371c      	adds	r7, #28
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr
 8004dc0:	40006c00 	.word	0x40006c00

08004dc4 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8004dd6:	4b08      	ldr	r3, [pc, #32]	; (8004df8 <HAL_RTCEx_BKUPRead+0x34>)
 8004dd8:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	4413      	add	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8004dec:	68bb      	ldr	r3, [r7, #8]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bc80      	pop	{r7}
 8004df6:	4770      	bx	lr
 8004df8:	40006c00 	.word	0x40006c00

08004dfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e042      	b.n	8004e94 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fc fb8c 	bl	8001540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2224      	movs	r2, #36	; 0x24
 8004e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fdc5 	bl	80059d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695a      	ldr	r2, [r3, #20]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08a      	sub	sp, #40	; 0x28
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d16d      	bne.n	8004f98 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <HAL_UART_Transmit+0x2c>
 8004ec2:	88fb      	ldrh	r3, [r7, #6]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e066      	b.n	8004f9a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2221      	movs	r2, #33	; 0x21
 8004ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eda:	f7fc fc83 	bl	80017e4 <HAL_GetTick>
 8004ede:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	88fa      	ldrh	r2, [r7, #6]
 8004ee4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	88fa      	ldrh	r2, [r7, #6]
 8004eea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef4:	d108      	bne.n	8004f08 <HAL_UART_Transmit+0x6c>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d104      	bne.n	8004f08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	e003      	b.n	8004f10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f10:	e02a      	b.n	8004f68 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	2180      	movs	r1, #128	; 0x80
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 fb14 	bl	800554a <UART_WaitOnFlagUntilTimeout>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e036      	b.n	8004f9a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10b      	bne.n	8004f4a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	461a      	mov	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	3302      	adds	r3, #2
 8004f46:	61bb      	str	r3, [r7, #24]
 8004f48:	e007      	b.n	8004f5a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	781a      	ldrb	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	3301      	adds	r3, #1
 8004f58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1cf      	bne.n	8004f12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2140      	movs	r1, #64	; 0x40
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 fae4 	bl	800554a <UART_WaitOnFlagUntilTimeout>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e006      	b.n	8004f9a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004f94:	2300      	movs	r3, #0
 8004f96:	e000      	b.n	8004f9a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004f98:	2302      	movs	r3, #2
  }
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3720      	adds	r7, #32
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	60f8      	str	r0, [r7, #12]
 8004faa:	60b9      	str	r1, [r7, #8]
 8004fac:	4613      	mov	r3, r2
 8004fae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	d112      	bne.n	8004fe2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <HAL_UART_Receive_IT+0x26>
 8004fc2:	88fb      	ldrh	r3, [r7, #6]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e00b      	b.n	8004fe4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	68b9      	ldr	r1, [r7, #8]
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 fb24 	bl	8005626 <UART_Start_Receive_IT>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	e000      	b.n	8004fe4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004fe2:	2302      	movs	r3, #2
  }
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b0ba      	sub	sp, #232	; 0xe8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005012:	2300      	movs	r3, #0
 8005014:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005018:	2300      	movs	r3, #0
 800501a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800501e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800502a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10f      	bne.n	8005052 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	2b00      	cmp	r3, #0
 800503c:	d009      	beq.n	8005052 <HAL_UART_IRQHandler+0x66>
 800503e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 fc01 	bl	8005852 <UART_Receive_IT>
      return;
 8005050:	e25b      	b.n	800550a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005052:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 80de 	beq.w	8005218 <HAL_UART_IRQHandler+0x22c>
 800505c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d106      	bne.n	8005076 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800506c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 80d1 	beq.w	8005218 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00b      	beq.n	800509a <HAL_UART_IRQHandler+0xae>
 8005082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508a:	2b00      	cmp	r3, #0
 800508c:	d005      	beq.n	800509a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005092:	f043 0201 	orr.w	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800509a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509e:	f003 0304 	and.w	r3, r3, #4
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00b      	beq.n	80050be <HAL_UART_IRQHandler+0xd2>
 80050a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b6:	f043 0202 	orr.w	r2, r3, #2
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00b      	beq.n	80050e2 <HAL_UART_IRQHandler+0xf6>
 80050ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d005      	beq.n	80050e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050da:	f043 0204 	orr.w	r2, r3, #4
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d011      	beq.n	8005112 <HAL_UART_IRQHandler+0x126>
 80050ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d105      	bne.n	8005106 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d005      	beq.n	8005112 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510a:	f043 0208 	orr.w	r2, r3, #8
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 81f2 	beq.w	8005500 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800511c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b00      	cmp	r3, #0
 8005126:	d008      	beq.n	800513a <HAL_UART_IRQHandler+0x14e>
 8005128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800512c:	f003 0320 	and.w	r3, r3, #32
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fb8c 	bl	8005852 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005144:	2b00      	cmp	r3, #0
 8005146:	bf14      	ite	ne
 8005148:	2301      	movne	r3, #1
 800514a:	2300      	moveq	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d103      	bne.n	8005166 <HAL_UART_IRQHandler+0x17a>
 800515e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005162:	2b00      	cmp	r3, #0
 8005164:	d04f      	beq.n	8005206 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fa96 	bl	8005698 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	d041      	beq.n	80051fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3314      	adds	r3, #20
 8005180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005184:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005190:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3314      	adds	r3, #20
 80051a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80051aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80051b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051b6:	e841 2300 	strex	r3, r2, [r1]
 80051ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80051be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1d9      	bne.n	800517a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d013      	beq.n	80051f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d2:	4a7e      	ldr	r2, [pc, #504]	; (80053cc <HAL_UART_IRQHandler+0x3e0>)
 80051d4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fd f97e 	bl	80024dc <HAL_DMA_Abort_IT>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d016      	beq.n	8005214 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80051f0:	4610      	mov	r0, r2
 80051f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f4:	e00e      	b.n	8005214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f993 	bl	8005522 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051fc:	e00a      	b.n	8005214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f98f 	bl	8005522 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005204:	e006      	b.n	8005214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f98b 	bl	8005522 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005212:	e175      	b.n	8005500 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005214:	bf00      	nop
    return;
 8005216:	e173      	b.n	8005500 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521c:	2b01      	cmp	r3, #1
 800521e:	f040 814f 	bne.w	80054c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005226:	f003 0310 	and.w	r3, r3, #16
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 8148 	beq.w	80054c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 8141 	beq.w	80054c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800523e:	2300      	movs	r3, #0
 8005240:	60bb      	str	r3, [r7, #8]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	60bb      	str	r3, [r7, #8]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	60bb      	str	r3, [r7, #8]
 8005252:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 80b6 	beq.w	80053d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005270:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 8145 	beq.w	8005504 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800527e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005282:	429a      	cmp	r2, r3
 8005284:	f080 813e 	bcs.w	8005504 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800528e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	2b20      	cmp	r3, #32
 8005298:	f000 8088 	beq.w	80053ac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	330c      	adds	r3, #12
 80052a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80052b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	330c      	adds	r3, #12
 80052c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80052c8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80052d8:	e841 2300 	strex	r3, r2, [r1]
 80052dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80052e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1d9      	bne.n	800529c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3314      	adds	r3, #20
 80052ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052f2:	e853 3f00 	ldrex	r3, [r3]
 80052f6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80052f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052fa:	f023 0301 	bic.w	r3, r3, #1
 80052fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3314      	adds	r3, #20
 8005308:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800530c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005310:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005312:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005314:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005318:	e841 2300 	strex	r3, r2, [r1]
 800531c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800531e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e1      	bne.n	80052e8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3314      	adds	r3, #20
 800532a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800532e:	e853 3f00 	ldrex	r3, [r3]
 8005332:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800533a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3314      	adds	r3, #20
 8005344:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005348:	66fa      	str	r2, [r7, #108]	; 0x6c
 800534a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800534e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005350:	e841 2300 	strex	r3, r2, [r1]
 8005354:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005356:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e3      	bne.n	8005324 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2220      	movs	r2, #32
 8005360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	330c      	adds	r3, #12
 8005370:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005374:	e853 3f00 	ldrex	r3, [r3]
 8005378:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800537a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800537c:	f023 0310 	bic.w	r3, r3, #16
 8005380:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	330c      	adds	r3, #12
 800538a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800538e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005390:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005392:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005394:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005396:	e841 2300 	strex	r3, r2, [r1]
 800539a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800539c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1e3      	bne.n	800536a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7fd f85d 	bl	8002466 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	b29b      	uxth	r3, r3
 80053c0:	4619      	mov	r1, r3
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f8b6 	bl	8005534 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053c8:	e09c      	b.n	8005504 <HAL_UART_IRQHandler+0x518>
 80053ca:	bf00      	nop
 80053cc:	0800575d 	.word	0x0800575d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053d8:	b29b      	uxth	r3, r3
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 808e 	beq.w	8005508 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80053ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 8089 	beq.w	8005508 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	330c      	adds	r3, #12
 80053fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	e853 3f00 	ldrex	r3, [r3]
 8005404:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005408:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800540c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	330c      	adds	r3, #12
 8005416:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800541a:	647a      	str	r2, [r7, #68]	; 0x44
 800541c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005420:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005422:	e841 2300 	strex	r3, r2, [r1]
 8005426:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1e3      	bne.n	80053f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3314      	adds	r3, #20
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	623b      	str	r3, [r7, #32]
   return(result);
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	f023 0301 	bic.w	r3, r3, #1
 8005444:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3314      	adds	r3, #20
 800544e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005452:	633a      	str	r2, [r7, #48]	; 0x30
 8005454:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005456:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800545a:	e841 2300 	strex	r3, r2, [r1]
 800545e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1e3      	bne.n	800542e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2220      	movs	r2, #32
 800546a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	330c      	adds	r3, #12
 800547a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	e853 3f00 	ldrex	r3, [r3]
 8005482:	60fb      	str	r3, [r7, #12]
   return(result);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0310 	bic.w	r3, r3, #16
 800548a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	330c      	adds	r3, #12
 8005494:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005498:	61fa      	str	r2, [r7, #28]
 800549a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549c:	69b9      	ldr	r1, [r7, #24]
 800549e:	69fa      	ldr	r2, [r7, #28]
 80054a0:	e841 2300 	strex	r3, r2, [r1]
 80054a4:	617b      	str	r3, [r7, #20]
   return(result);
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1e3      	bne.n	8005474 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054b6:	4619      	mov	r1, r3
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f83b 	bl	8005534 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054be:	e023      	b.n	8005508 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d009      	beq.n	80054e0 <HAL_UART_IRQHandler+0x4f4>
 80054cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f953 	bl	8005784 <UART_Transmit_IT>
    return;
 80054de:	e014      	b.n	800550a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00e      	beq.n	800550a <HAL_UART_IRQHandler+0x51e>
 80054ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d008      	beq.n	800550a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f992 	bl	8005822 <UART_EndTransmit_IT>
    return;
 80054fe:	e004      	b.n	800550a <HAL_UART_IRQHandler+0x51e>
    return;
 8005500:	bf00      	nop
 8005502:	e002      	b.n	800550a <HAL_UART_IRQHandler+0x51e>
      return;
 8005504:	bf00      	nop
 8005506:	e000      	b.n	800550a <HAL_UART_IRQHandler+0x51e>
      return;
 8005508:	bf00      	nop
  }
}
 800550a:	37e8      	adds	r7, #232	; 0xe8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	4770      	bx	lr

08005522 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr

08005534 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	460b      	mov	r3, r1
 800553e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr

0800554a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b090      	sub	sp, #64	; 0x40
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	603b      	str	r3, [r7, #0]
 8005556:	4613      	mov	r3, r2
 8005558:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800555a:	e050      	b.n	80055fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800555c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800555e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005562:	d04c      	beq.n	80055fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005566:	2b00      	cmp	r3, #0
 8005568:	d007      	beq.n	800557a <UART_WaitOnFlagUntilTimeout+0x30>
 800556a:	f7fc f93b 	bl	80017e4 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005576:	429a      	cmp	r2, r3
 8005578:	d241      	bcs.n	80055fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	330c      	adds	r3, #12
 8005580:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005584:	e853 3f00 	ldrex	r3, [r3]
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	330c      	adds	r3, #12
 8005598:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800559a:	637a      	str	r2, [r7, #52]	; 0x34
 800559c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1e5      	bne.n	800557a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3314      	adds	r3, #20
 80055b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	e853 3f00 	ldrex	r3, [r3]
 80055bc:	613b      	str	r3, [r7, #16]
   return(result);
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f023 0301 	bic.w	r3, r3, #1
 80055c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	3314      	adds	r3, #20
 80055cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055ce:	623a      	str	r2, [r7, #32]
 80055d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	69f9      	ldr	r1, [r7, #28]
 80055d4:	6a3a      	ldr	r2, [r7, #32]
 80055d6:	e841 2300 	strex	r3, r2, [r1]
 80055da:	61bb      	str	r3, [r7, #24]
   return(result);
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1e5      	bne.n	80055ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e00f      	b.n	800561e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4013      	ands	r3, r2
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	429a      	cmp	r2, r3
 800560c:	bf0c      	ite	eq
 800560e:	2301      	moveq	r3, #1
 8005610:	2300      	movne	r3, #0
 8005612:	b2db      	uxtb	r3, r3
 8005614:	461a      	mov	r2, r3
 8005616:	79fb      	ldrb	r3, [r7, #7]
 8005618:	429a      	cmp	r2, r3
 800561a:	d09f      	beq.n	800555c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3740      	adds	r7, #64	; 0x40
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005626:	b480      	push	{r7}
 8005628:	b085      	sub	sp, #20
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	4613      	mov	r3, r2
 8005632:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	88fa      	ldrh	r2, [r7, #6]
 800563e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	88fa      	ldrh	r2, [r7, #6]
 8005644:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2222      	movs	r2, #34	; 0x22
 8005650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d007      	beq.n	800566c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800566a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695a      	ldr	r2, [r3, #20]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0201 	orr.w	r2, r2, #1
 800567a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0220 	orr.w	r2, r2, #32
 800568a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	bc80      	pop	{r7}
 8005696:	4770      	bx	lr

08005698 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005698:	b480      	push	{r7}
 800569a:	b095      	sub	sp, #84	; 0x54
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	330c      	adds	r3, #12
 80056a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056aa:	e853 3f00 	ldrex	r3, [r3]
 80056ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	330c      	adds	r3, #12
 80056be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056c0:	643a      	str	r2, [r7, #64]	; 0x40
 80056c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056c8:	e841 2300 	strex	r3, r2, [r1]
 80056cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1e5      	bne.n	80056a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3314      	adds	r3, #20
 80056da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	e853 3f00 	ldrex	r3, [r3]
 80056e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	f023 0301 	bic.w	r3, r3, #1
 80056ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3314      	adds	r3, #20
 80056f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e5      	bne.n	80056d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570c:	2b01      	cmp	r3, #1
 800570e:	d119      	bne.n	8005744 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	330c      	adds	r3, #12
 8005716:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	e853 3f00 	ldrex	r3, [r3]
 800571e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f023 0310 	bic.w	r3, r3, #16
 8005726:	647b      	str	r3, [r7, #68]	; 0x44
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	330c      	adds	r3, #12
 800572e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005730:	61ba      	str	r2, [r7, #24]
 8005732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005734:	6979      	ldr	r1, [r7, #20]
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	e841 2300 	strex	r3, r2, [r1]
 800573c:	613b      	str	r3, [r7, #16]
   return(result);
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1e5      	bne.n	8005710 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005752:	bf00      	nop
 8005754:	3754      	adds	r7, #84	; 0x54
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr

0800575c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f7ff fed3 	bl	8005522 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800577c:	bf00      	nop
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b21      	cmp	r3, #33	; 0x21
 8005796:	d13e      	bne.n	8005816 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a0:	d114      	bne.n	80057cc <UART_Transmit_IT+0x48>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d110      	bne.n	80057cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	461a      	mov	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	1c9a      	adds	r2, r3, #2
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	621a      	str	r2, [r3, #32]
 80057ca:	e008      	b.n	80057de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	1c59      	adds	r1, r3, #1
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6211      	str	r1, [r2, #32]
 80057d6:	781a      	ldrb	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	3b01      	subs	r3, #1
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	4619      	mov	r1, r3
 80057ec:	84d1      	strh	r1, [r2, #38]	; 0x26
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10f      	bne.n	8005812 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005800:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005810:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	e000      	b.n	8005818 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005816:	2302      	movs	r3, #2
  }
}
 8005818:	4618      	mov	r0, r3
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	bc80      	pop	{r7}
 8005820:	4770      	bx	lr

08005822 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b082      	sub	sp, #8
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68da      	ldr	r2, [r3, #12]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005838:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2220      	movs	r2, #32
 800583e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7ff fe64 	bl	8005510 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b08c      	sub	sp, #48	; 0x30
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b22      	cmp	r3, #34	; 0x22
 8005864:	f040 80ae 	bne.w	80059c4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005870:	d117      	bne.n	80058a2 <UART_Receive_IT+0x50>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d113      	bne.n	80058a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800587a:	2300      	movs	r3, #0
 800587c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005882:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	b29b      	uxth	r3, r3
 800588c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005890:	b29a      	uxth	r2, r3
 8005892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005894:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589a:	1c9a      	adds	r2, r3, #2
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	629a      	str	r2, [r3, #40]	; 0x28
 80058a0:	e026      	b.n	80058f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80058a8:	2300      	movs	r3, #0
 80058aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b4:	d007      	beq.n	80058c6 <UART_Receive_IT+0x74>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10a      	bne.n	80058d4 <UART_Receive_IT+0x82>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d106      	bne.n	80058d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d0:	701a      	strb	r2, [r3, #0]
 80058d2:	e008      	b.n	80058e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	3b01      	subs	r3, #1
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	4619      	mov	r1, r3
 80058fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005900:	2b00      	cmp	r3, #0
 8005902:	d15d      	bne.n	80059c0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 0220 	bic.w	r2, r2, #32
 8005912:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005922:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695a      	ldr	r2, [r3, #20]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0201 	bic.w	r2, r2, #1
 8005932:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2220      	movs	r2, #32
 8005938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005946:	2b01      	cmp	r3, #1
 8005948:	d135      	bne.n	80059b6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	330c      	adds	r3, #12
 8005956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	e853 3f00 	ldrex	r3, [r3]
 800595e:	613b      	str	r3, [r7, #16]
   return(result);
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f023 0310 	bic.w	r3, r3, #16
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	330c      	adds	r3, #12
 800596e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005970:	623a      	str	r2, [r7, #32]
 8005972:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005974:	69f9      	ldr	r1, [r7, #28]
 8005976:	6a3a      	ldr	r2, [r7, #32]
 8005978:	e841 2300 	strex	r3, r2, [r1]
 800597c:	61bb      	str	r3, [r7, #24]
   return(result);
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1e5      	bne.n	8005950 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0310 	and.w	r3, r3, #16
 800598e:	2b10      	cmp	r3, #16
 8005990:	d10a      	bne.n	80059a8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005992:	2300      	movs	r3, #0
 8005994:	60fb      	str	r3, [r7, #12]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059ac:	4619      	mov	r1, r3
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff fdc0 	bl	8005534 <HAL_UARTEx_RxEventCallback>
 80059b4:	e002      	b.n	80059bc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fb fca8 	bl	800130c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059bc:	2300      	movs	r3, #0
 80059be:	e002      	b.n	80059c6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	e000      	b.n	80059c6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80059c4:	2302      	movs	r3, #2
  }
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3730      	adds	r7, #48	; 0x30
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005a0a:	f023 030c 	bic.w	r3, r3, #12
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6812      	ldr	r2, [r2, #0]
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	430b      	orrs	r3, r1
 8005a16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699a      	ldr	r2, [r3, #24]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a2c      	ldr	r2, [pc, #176]	; (8005ae4 <UART_SetConfig+0x114>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d103      	bne.n	8005a40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005a38:	f7fe fa1a 	bl	8003e70 <HAL_RCC_GetPCLK2Freq>
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	e002      	b.n	8005a46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005a40:	f7fe fa02 	bl	8003e48 <HAL_RCC_GetPCLK1Freq>
 8005a44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	009a      	lsls	r2, r3, #2
 8005a50:	441a      	add	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5c:	4a22      	ldr	r2, [pc, #136]	; (8005ae8 <UART_SetConfig+0x118>)
 8005a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	0119      	lsls	r1, r3, #4
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009a      	lsls	r2, r3, #2
 8005a70:	441a      	add	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ae8 <UART_SetConfig+0x118>)
 8005a7e:	fba3 0302 	umull	r0, r3, r3, r2
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	2064      	movs	r0, #100	; 0x64
 8005a86:	fb00 f303 	mul.w	r3, r0, r3
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	3332      	adds	r3, #50	; 0x32
 8005a90:	4a15      	ldr	r2, [pc, #84]	; (8005ae8 <UART_SetConfig+0x118>)
 8005a92:	fba2 2303 	umull	r2, r3, r2, r3
 8005a96:	095b      	lsrs	r3, r3, #5
 8005a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a9c:	4419      	add	r1, r3
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	009a      	lsls	r2, r3, #2
 8005aa8:	441a      	add	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ab4:	4b0c      	ldr	r3, [pc, #48]	; (8005ae8 <UART_SetConfig+0x118>)
 8005ab6:	fba3 0302 	umull	r0, r3, r3, r2
 8005aba:	095b      	lsrs	r3, r3, #5
 8005abc:	2064      	movs	r0, #100	; 0x64
 8005abe:	fb00 f303 	mul.w	r3, r0, r3
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	3332      	adds	r3, #50	; 0x32
 8005ac8:	4a07      	ldr	r2, [pc, #28]	; (8005ae8 <UART_SetConfig+0x118>)
 8005aca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ace:	095b      	lsrs	r3, r3, #5
 8005ad0:	f003 020f 	and.w	r2, r3, #15
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	440a      	add	r2, r1
 8005ada:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005adc:	bf00      	nop
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	40013800 	.word	0x40013800
 8005ae8:	51eb851f 	.word	0x51eb851f

08005aec <lcd_send_cmd>:
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include "LiquidCrystal_I2C.h"
static void lcd_send_cmd (LiquidCrystal_I2C *lcd, uint8_t cmd)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	460b      	mov	r3, r1
 8005af6:	70fb      	strb	r3, [r7, #3]
  uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (cmd&0xf0);
 8005af8:	78fb      	ldrb	r3, [r7, #3]
 8005afa:	f023 030f 	bic.w	r3, r3, #15
 8005afe:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	7a5a      	ldrb	r2, [r3, #9]
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	f043 0304 	orr.w	r3, r3, #4
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	7a5a      	ldrb	r2, [r3, #9]
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	7a5a      	ldrb	r2, [r3, #9]
 8005b28:	7bbb      	ldrb	r3, [r7, #14]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	f043 0304 	orr.w	r3, r3, #4
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	7a5a      	ldrb	r2, [r3, #9]
 8005b3a:	7bbb      	ldrb	r3, [r7, #14]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(lcd->pI2c, lcd->Addr,(uint8_t *) data_t, 4, 100);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6858      	ldr	r0, [r3, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	b299      	uxth	r1, r3
 8005b4c:	f107 0208 	add.w	r2, r7, #8
 8005b50:	2364      	movs	r3, #100	; 0x64
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	2304      	movs	r3, #4
 8005b56:	f7fd fa49 	bl	8002fec <HAL_I2C_Master_Transmit>
}
 8005b5a:	bf00      	nop
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <lcd_send_data>:

static void lcd_send_data(LiquidCrystal_I2C *lcd,uint8_t data)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b086      	sub	sp, #24
 8005b66:	af02      	add	r7, sp, #8
 8005b68:	6078      	str	r0, [r7, #4]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	70fb      	strb	r3, [r7, #3]
	uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (data&0xf0);
 8005b6e:	78fb      	ldrb	r3, [r7, #3]
 8005b70:	f023 030f 	bic.w	r3, r3, #15
 8005b74:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8005b76:	78fb      	ldrb	r3, [r7, #3]
 8005b78:	011b      	lsls	r3, r3, #4
 8005b7a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	7a5a      	ldrb	r2, [r3, #9]
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	f043 0305 	orr.w	r3, r3, #5
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	7a5a      	ldrb	r2, [r3, #9]
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	f043 0301 	orr.w	r3, r3, #1
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	7a5a      	ldrb	r2, [r3, #9]
 8005ba4:	7bbb      	ldrb	r3, [r7, #14]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	f043 0305 	orr.w	r3, r3, #5
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	7a5a      	ldrb	r2, [r3, #9]
 8005bb6:	7bbb      	ldrb	r3, [r7, #14]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	f043 0301 	orr.w	r3, r3, #1
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (lcd->pI2c, lcd->Addr,(uint8_t *) data_t, 4, 100);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6858      	ldr	r0, [r3, #4]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	b299      	uxth	r1, r3
 8005bce:	f107 0208 	add.w	r2, r7, #8
 8005bd2:	2364      	movs	r3, #100	; 0x64
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	2304      	movs	r3, #4
 8005bd8:	f7fd fa08 	bl	8002fec <HAL_I2C_Master_Transmit>
}
 8005bdc:	bf00      	nop
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <lcd_clear_display>:
{
	lcd_send_data(lcd,data);
}

void lcd_clear_display (LiquidCrystal_I2C *lcd)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
	lcd_send_cmd (lcd,LCD_CLEARDISPLAY);
 8005bec:	2101      	movs	r1, #1
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7ff ff7c 	bl	8005aec <lcd_send_cmd>
	HAL_Delay(10);
 8005bf4:	200a      	movs	r0, #10
 8005bf6:	f7fb fdff 	bl	80017f8 <HAL_Delay>
}
 8005bfa:	bf00      	nop
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
	...

08005c04 <lcd_set_cursor>:
	lcd->Backlightval = LCD_NOBACKLIGHT;
	HAL_I2C_Master_Transmit (lcd->pI2c, lcd->Addr,&lcd->Backlightval, 1, 100);
}

void lcd_set_cursor(LiquidCrystal_I2C *lcd,uint8_t row, uint8_t col)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	70fb      	strb	r3, [r7, #3]
 8005c10:	4613      	mov	r3, r2
 8005c12:	70bb      	strb	r3, [r7, #2]
	uint8_t row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8005c14:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <lcd_set_cursor+0x40>)
 8005c16:	60fb      	str	r3, [r7, #12]
	lcd_send_cmd(lcd,LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8005c18:	78fb      	ldrb	r3, [r7, #3]
 8005c1a:	3310      	adds	r3, #16
 8005c1c:	443b      	add	r3, r7
 8005c1e:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8005c22:	78bb      	ldrb	r3, [r7, #2]
 8005c24:	4413      	add	r3, r2
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	b25b      	sxtb	r3, r3
 8005c2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c2e:	b25b      	sxtb	r3, r3
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	4619      	mov	r1, r3
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f7ff ff59 	bl	8005aec <lcd_send_cmd>
}
 8005c3a:	bf00      	nop
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	54144000 	.word	0x54144000

08005c48 <lcd_set_cursor_blink_off>:
	
	lcd->DisplayControl |= LCD_BLINKON;
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
}
void lcd_set_cursor_blink_off(LiquidCrystal_I2C *lcd) 
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
	lcd->DisplayControl &= ~LCD_BLINKON;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	7a1b      	ldrb	r3, [r3, #8]
 8005c54:	f023 0301 	bic.w	r3, r3, #1
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	721a      	strb	r2, [r3, #8]
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	7a1b      	ldrb	r3, [r3, #8]
 8005c62:	f043 0308 	orr.w	r3, r3, #8
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	4619      	mov	r1, r3
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7ff ff3e 	bl	8005aec <lcd_send_cmd>
}
 8005c70:	bf00      	nop
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <lcd_printf>:
void lcd_write(LiquidCrystal_I2C *lcd,uint8_t location)
{
	lcd_send_data(lcd,location);
}
void lcd_printf(LiquidCrystal_I2C *lcd,const char* str, ...)
{
 8005c78:	b40e      	push	{r1, r2, r3}
 8005c7a:	b590      	push	{r4, r7, lr}
 8005c7c:	b08a      	sub	sp, #40	; 0x28
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  char stringArray[20];
	
  va_list args;
  va_start(args, str);
 8005c82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c86:	60fb      	str	r3, [r7, #12]
  vsprintf(stringArray, str, args);
 8005c88:	f107 0310 	add.w	r3, r7, #16
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 f8a3 	bl	8005ddc <vsiprintf>
  va_end(args);
	
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8005c96:	2300      	movs	r3, #0
 8005c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005c9c:	e00e      	b.n	8005cbc <lcd_printf+0x44>
  {
    lcd_send_data(lcd,(uint8_t)stringArray[i]);
 8005c9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ca2:	3328      	adds	r3, #40	; 0x28
 8005ca4:	443b      	add	r3, r7
 8005ca6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8005caa:	4619      	mov	r1, r3
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7ff ff58 	bl	8005b62 <lcd_send_data>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8005cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005cbc:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8005cc0:	f107 0310 	add.w	r3, r7, #16
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fa fa4b 	bl	8000160 <strlen>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	429c      	cmp	r4, r3
 8005cce:	d203      	bcs.n	8005cd8 <lcd_printf+0x60>
 8005cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cd4:	2b0f      	cmp	r3, #15
 8005cd6:	d9e2      	bls.n	8005c9e <lcd_printf+0x26>
  }
}
 8005cd8:	bf00      	nop
 8005cda:	3728      	adds	r7, #40	; 0x28
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005ce2:	b003      	add	sp, #12
 8005ce4:	4770      	bx	lr

08005ce6 <lcd_init>:
void lcd_init (LiquidCrystal_I2C *lcd,I2C_HandleTypeDef *_hi2c,uint8_t addr)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	71fb      	strb	r3, [r7, #7]
	lcd->pI2c = _hi2c;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	605a      	str	r2, [r3, #4]
	lcd->Addr = addr<<1;
 8005cfa:	79fb      	ldrb	r3, [r7, #7]
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	701a      	strb	r2, [r3, #0]
	lcd->DisplayControl |= LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	7a1b      	ldrb	r3, [r3, #8]
 8005d08:	f043 0304 	orr.w	r3, r3, #4
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	721a      	strb	r2, [r3, #8]
	lcd_send_cmd (lcd,0x33); 
 8005d12:	2133      	movs	r1, #51	; 0x33
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f7ff fee9 	bl	8005aec <lcd_send_cmd>
	lcd_send_cmd (lcd,0x32);
 8005d1a:	2132      	movs	r1, #50	; 0x32
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f7ff fee5 	bl	8005aec <lcd_send_cmd>
	HAL_Delay(5);
 8005d22:	2005      	movs	r0, #5
 8005d24:	f7fb fd68 	bl	80017f8 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_CLEARDISPLAY); 
 8005d28:	2101      	movs	r1, #1
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f7ff fede 	bl	8005aec <lcd_send_cmd>
	HAL_Delay(5);
 8005d30:	2005      	movs	r0, #5
 8005d32:	f7fb fd61 	bl	80017f8 <HAL_Delay>
	lcd_send_cmd (lcd,0x0c); 	
 8005d36:	210c      	movs	r1, #12
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f7ff fed7 	bl	8005aec <lcd_send_cmd>
	HAL_Delay(5);
 8005d3e:	2005      	movs	r0, #5
 8005d40:	f7fb fd5a 	bl	80017f8 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_RETURNHOME); 
 8005d44:	2102      	movs	r1, #2
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f7ff fed0 	bl	8005aec <lcd_send_cmd>
	HAL_Delay(5);
 8005d4c:	2005      	movs	r0, #5
 8005d4e:	f7fb fd53 	bl	80017f8 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_SETDDRAMADDR);
 8005d52:	2180      	movs	r1, #128	; 0x80
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f7ff fec9 	bl	8005aec <lcd_send_cmd>
	lcd_set_cursor_blink_off(lcd);
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f7ff ff74 	bl	8005c48 <lcd_set_cursor_blink_off>
	lcd->Backlightval = LCD_BACKLIGHT;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2208      	movs	r2, #8
 8005d64:	725a      	strb	r2, [r3, #9]
}
 8005d66:	bf00      	nop
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <siprintf>:
 8005d70:	b40e      	push	{r1, r2, r3}
 8005d72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d76:	b500      	push	{lr}
 8005d78:	b09c      	sub	sp, #112	; 0x70
 8005d7a:	ab1d      	add	r3, sp, #116	; 0x74
 8005d7c:	9002      	str	r0, [sp, #8]
 8005d7e:	9006      	str	r0, [sp, #24]
 8005d80:	9107      	str	r1, [sp, #28]
 8005d82:	9104      	str	r1, [sp, #16]
 8005d84:	4808      	ldr	r0, [pc, #32]	; (8005da8 <siprintf+0x38>)
 8005d86:	4909      	ldr	r1, [pc, #36]	; (8005dac <siprintf+0x3c>)
 8005d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d8c:	9105      	str	r1, [sp, #20]
 8005d8e:	6800      	ldr	r0, [r0, #0]
 8005d90:	a902      	add	r1, sp, #8
 8005d92:	9301      	str	r3, [sp, #4]
 8005d94:	f000 f9ae 	bl	80060f4 <_svfiprintf_r>
 8005d98:	2200      	movs	r2, #0
 8005d9a:	9b02      	ldr	r3, [sp, #8]
 8005d9c:	701a      	strb	r2, [r3, #0]
 8005d9e:	b01c      	add	sp, #112	; 0x70
 8005da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005da4:	b003      	add	sp, #12
 8005da6:	4770      	bx	lr
 8005da8:	2000005c 	.word	0x2000005c
 8005dac:	ffff0208 	.word	0xffff0208

08005db0 <_vsiprintf_r>:
 8005db0:	b500      	push	{lr}
 8005db2:	b09b      	sub	sp, #108	; 0x6c
 8005db4:	9100      	str	r1, [sp, #0]
 8005db6:	9104      	str	r1, [sp, #16]
 8005db8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005dbc:	9105      	str	r1, [sp, #20]
 8005dbe:	9102      	str	r1, [sp, #8]
 8005dc0:	4905      	ldr	r1, [pc, #20]	; (8005dd8 <_vsiprintf_r+0x28>)
 8005dc2:	9103      	str	r1, [sp, #12]
 8005dc4:	4669      	mov	r1, sp
 8005dc6:	f000 f995 	bl	80060f4 <_svfiprintf_r>
 8005dca:	2200      	movs	r2, #0
 8005dcc:	9b00      	ldr	r3, [sp, #0]
 8005dce:	701a      	strb	r2, [r3, #0]
 8005dd0:	b01b      	add	sp, #108	; 0x6c
 8005dd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8005dd6:	bf00      	nop
 8005dd8:	ffff0208 	.word	0xffff0208

08005ddc <vsiprintf>:
 8005ddc:	4613      	mov	r3, r2
 8005dde:	460a      	mov	r2, r1
 8005de0:	4601      	mov	r1, r0
 8005de2:	4802      	ldr	r0, [pc, #8]	; (8005dec <vsiprintf+0x10>)
 8005de4:	6800      	ldr	r0, [r0, #0]
 8005de6:	f7ff bfe3 	b.w	8005db0 <_vsiprintf_r>
 8005dea:	bf00      	nop
 8005dec:	2000005c 	.word	0x2000005c

08005df0 <memset>:
 8005df0:	4603      	mov	r3, r0
 8005df2:	4402      	add	r2, r0
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d100      	bne.n	8005dfa <memset+0xa>
 8005df8:	4770      	bx	lr
 8005dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8005dfe:	e7f9      	b.n	8005df4 <memset+0x4>

08005e00 <__errno>:
 8005e00:	4b01      	ldr	r3, [pc, #4]	; (8005e08 <__errno+0x8>)
 8005e02:	6818      	ldr	r0, [r3, #0]
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	2000005c 	.word	0x2000005c

08005e0c <__libc_init_array>:
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	2600      	movs	r6, #0
 8005e10:	4d0c      	ldr	r5, [pc, #48]	; (8005e44 <__libc_init_array+0x38>)
 8005e12:	4c0d      	ldr	r4, [pc, #52]	; (8005e48 <__libc_init_array+0x3c>)
 8005e14:	1b64      	subs	r4, r4, r5
 8005e16:	10a4      	asrs	r4, r4, #2
 8005e18:	42a6      	cmp	r6, r4
 8005e1a:	d109      	bne.n	8005e30 <__libc_init_array+0x24>
 8005e1c:	f000 fc7a 	bl	8006714 <_init>
 8005e20:	2600      	movs	r6, #0
 8005e22:	4d0a      	ldr	r5, [pc, #40]	; (8005e4c <__libc_init_array+0x40>)
 8005e24:	4c0a      	ldr	r4, [pc, #40]	; (8005e50 <__libc_init_array+0x44>)
 8005e26:	1b64      	subs	r4, r4, r5
 8005e28:	10a4      	asrs	r4, r4, #2
 8005e2a:	42a6      	cmp	r6, r4
 8005e2c:	d105      	bne.n	8005e3a <__libc_init_array+0x2e>
 8005e2e:	bd70      	pop	{r4, r5, r6, pc}
 8005e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e34:	4798      	blx	r3
 8005e36:	3601      	adds	r6, #1
 8005e38:	e7ee      	b.n	8005e18 <__libc_init_array+0xc>
 8005e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e3e:	4798      	blx	r3
 8005e40:	3601      	adds	r6, #1
 8005e42:	e7f2      	b.n	8005e2a <__libc_init_array+0x1e>
 8005e44:	080068b4 	.word	0x080068b4
 8005e48:	080068b4 	.word	0x080068b4
 8005e4c:	080068b4 	.word	0x080068b4
 8005e50:	080068b8 	.word	0x080068b8

08005e54 <__retarget_lock_acquire_recursive>:
 8005e54:	4770      	bx	lr

08005e56 <__retarget_lock_release_recursive>:
 8005e56:	4770      	bx	lr

08005e58 <_free_r>:
 8005e58:	b538      	push	{r3, r4, r5, lr}
 8005e5a:	4605      	mov	r5, r0
 8005e5c:	2900      	cmp	r1, #0
 8005e5e:	d040      	beq.n	8005ee2 <_free_r+0x8a>
 8005e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e64:	1f0c      	subs	r4, r1, #4
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	bfb8      	it	lt
 8005e6a:	18e4      	addlt	r4, r4, r3
 8005e6c:	f000 f8dc 	bl	8006028 <__malloc_lock>
 8005e70:	4a1c      	ldr	r2, [pc, #112]	; (8005ee4 <_free_r+0x8c>)
 8005e72:	6813      	ldr	r3, [r2, #0]
 8005e74:	b933      	cbnz	r3, 8005e84 <_free_r+0x2c>
 8005e76:	6063      	str	r3, [r4, #4]
 8005e78:	6014      	str	r4, [r2, #0]
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e80:	f000 b8d8 	b.w	8006034 <__malloc_unlock>
 8005e84:	42a3      	cmp	r3, r4
 8005e86:	d908      	bls.n	8005e9a <_free_r+0x42>
 8005e88:	6820      	ldr	r0, [r4, #0]
 8005e8a:	1821      	adds	r1, r4, r0
 8005e8c:	428b      	cmp	r3, r1
 8005e8e:	bf01      	itttt	eq
 8005e90:	6819      	ldreq	r1, [r3, #0]
 8005e92:	685b      	ldreq	r3, [r3, #4]
 8005e94:	1809      	addeq	r1, r1, r0
 8005e96:	6021      	streq	r1, [r4, #0]
 8005e98:	e7ed      	b.n	8005e76 <_free_r+0x1e>
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	b10b      	cbz	r3, 8005ea4 <_free_r+0x4c>
 8005ea0:	42a3      	cmp	r3, r4
 8005ea2:	d9fa      	bls.n	8005e9a <_free_r+0x42>
 8005ea4:	6811      	ldr	r1, [r2, #0]
 8005ea6:	1850      	adds	r0, r2, r1
 8005ea8:	42a0      	cmp	r0, r4
 8005eaa:	d10b      	bne.n	8005ec4 <_free_r+0x6c>
 8005eac:	6820      	ldr	r0, [r4, #0]
 8005eae:	4401      	add	r1, r0
 8005eb0:	1850      	adds	r0, r2, r1
 8005eb2:	4283      	cmp	r3, r0
 8005eb4:	6011      	str	r1, [r2, #0]
 8005eb6:	d1e0      	bne.n	8005e7a <_free_r+0x22>
 8005eb8:	6818      	ldr	r0, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	4408      	add	r0, r1
 8005ebe:	6010      	str	r0, [r2, #0]
 8005ec0:	6053      	str	r3, [r2, #4]
 8005ec2:	e7da      	b.n	8005e7a <_free_r+0x22>
 8005ec4:	d902      	bls.n	8005ecc <_free_r+0x74>
 8005ec6:	230c      	movs	r3, #12
 8005ec8:	602b      	str	r3, [r5, #0]
 8005eca:	e7d6      	b.n	8005e7a <_free_r+0x22>
 8005ecc:	6820      	ldr	r0, [r4, #0]
 8005ece:	1821      	adds	r1, r4, r0
 8005ed0:	428b      	cmp	r3, r1
 8005ed2:	bf01      	itttt	eq
 8005ed4:	6819      	ldreq	r1, [r3, #0]
 8005ed6:	685b      	ldreq	r3, [r3, #4]
 8005ed8:	1809      	addeq	r1, r1, r0
 8005eda:	6021      	streq	r1, [r4, #0]
 8005edc:	6063      	str	r3, [r4, #4]
 8005ede:	6054      	str	r4, [r2, #4]
 8005ee0:	e7cb      	b.n	8005e7a <_free_r+0x22>
 8005ee2:	bd38      	pop	{r3, r4, r5, pc}
 8005ee4:	200003a8 	.word	0x200003a8

08005ee8 <sbrk_aligned>:
 8005ee8:	b570      	push	{r4, r5, r6, lr}
 8005eea:	4e0e      	ldr	r6, [pc, #56]	; (8005f24 <sbrk_aligned+0x3c>)
 8005eec:	460c      	mov	r4, r1
 8005eee:	6831      	ldr	r1, [r6, #0]
 8005ef0:	4605      	mov	r5, r0
 8005ef2:	b911      	cbnz	r1, 8005efa <sbrk_aligned+0x12>
 8005ef4:	f000 fbaa 	bl	800664c <_sbrk_r>
 8005ef8:	6030      	str	r0, [r6, #0]
 8005efa:	4621      	mov	r1, r4
 8005efc:	4628      	mov	r0, r5
 8005efe:	f000 fba5 	bl	800664c <_sbrk_r>
 8005f02:	1c43      	adds	r3, r0, #1
 8005f04:	d00a      	beq.n	8005f1c <sbrk_aligned+0x34>
 8005f06:	1cc4      	adds	r4, r0, #3
 8005f08:	f024 0403 	bic.w	r4, r4, #3
 8005f0c:	42a0      	cmp	r0, r4
 8005f0e:	d007      	beq.n	8005f20 <sbrk_aligned+0x38>
 8005f10:	1a21      	subs	r1, r4, r0
 8005f12:	4628      	mov	r0, r5
 8005f14:	f000 fb9a 	bl	800664c <_sbrk_r>
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d101      	bne.n	8005f20 <sbrk_aligned+0x38>
 8005f1c:	f04f 34ff 	mov.w	r4, #4294967295
 8005f20:	4620      	mov	r0, r4
 8005f22:	bd70      	pop	{r4, r5, r6, pc}
 8005f24:	200003ac 	.word	0x200003ac

08005f28 <_malloc_r>:
 8005f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f2c:	1ccd      	adds	r5, r1, #3
 8005f2e:	f025 0503 	bic.w	r5, r5, #3
 8005f32:	3508      	adds	r5, #8
 8005f34:	2d0c      	cmp	r5, #12
 8005f36:	bf38      	it	cc
 8005f38:	250c      	movcc	r5, #12
 8005f3a:	2d00      	cmp	r5, #0
 8005f3c:	4607      	mov	r7, r0
 8005f3e:	db01      	blt.n	8005f44 <_malloc_r+0x1c>
 8005f40:	42a9      	cmp	r1, r5
 8005f42:	d905      	bls.n	8005f50 <_malloc_r+0x28>
 8005f44:	230c      	movs	r3, #12
 8005f46:	2600      	movs	r6, #0
 8005f48:	603b      	str	r3, [r7, #0]
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006024 <_malloc_r+0xfc>
 8005f54:	f000 f868 	bl	8006028 <__malloc_lock>
 8005f58:	f8d8 3000 	ldr.w	r3, [r8]
 8005f5c:	461c      	mov	r4, r3
 8005f5e:	bb5c      	cbnz	r4, 8005fb8 <_malloc_r+0x90>
 8005f60:	4629      	mov	r1, r5
 8005f62:	4638      	mov	r0, r7
 8005f64:	f7ff ffc0 	bl	8005ee8 <sbrk_aligned>
 8005f68:	1c43      	adds	r3, r0, #1
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	d155      	bne.n	800601a <_malloc_r+0xf2>
 8005f6e:	f8d8 4000 	ldr.w	r4, [r8]
 8005f72:	4626      	mov	r6, r4
 8005f74:	2e00      	cmp	r6, #0
 8005f76:	d145      	bne.n	8006004 <_malloc_r+0xdc>
 8005f78:	2c00      	cmp	r4, #0
 8005f7a:	d048      	beq.n	800600e <_malloc_r+0xe6>
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	4631      	mov	r1, r6
 8005f80:	4638      	mov	r0, r7
 8005f82:	eb04 0903 	add.w	r9, r4, r3
 8005f86:	f000 fb61 	bl	800664c <_sbrk_r>
 8005f8a:	4581      	cmp	r9, r0
 8005f8c:	d13f      	bne.n	800600e <_malloc_r+0xe6>
 8005f8e:	6821      	ldr	r1, [r4, #0]
 8005f90:	4638      	mov	r0, r7
 8005f92:	1a6d      	subs	r5, r5, r1
 8005f94:	4629      	mov	r1, r5
 8005f96:	f7ff ffa7 	bl	8005ee8 <sbrk_aligned>
 8005f9a:	3001      	adds	r0, #1
 8005f9c:	d037      	beq.n	800600e <_malloc_r+0xe6>
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	442b      	add	r3, r5
 8005fa2:	6023      	str	r3, [r4, #0]
 8005fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d038      	beq.n	800601e <_malloc_r+0xf6>
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	42a2      	cmp	r2, r4
 8005fb0:	d12b      	bne.n	800600a <_malloc_r+0xe2>
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	605a      	str	r2, [r3, #4]
 8005fb6:	e00f      	b.n	8005fd8 <_malloc_r+0xb0>
 8005fb8:	6822      	ldr	r2, [r4, #0]
 8005fba:	1b52      	subs	r2, r2, r5
 8005fbc:	d41f      	bmi.n	8005ffe <_malloc_r+0xd6>
 8005fbe:	2a0b      	cmp	r2, #11
 8005fc0:	d917      	bls.n	8005ff2 <_malloc_r+0xca>
 8005fc2:	1961      	adds	r1, r4, r5
 8005fc4:	42a3      	cmp	r3, r4
 8005fc6:	6025      	str	r5, [r4, #0]
 8005fc8:	bf18      	it	ne
 8005fca:	6059      	strne	r1, [r3, #4]
 8005fcc:	6863      	ldr	r3, [r4, #4]
 8005fce:	bf08      	it	eq
 8005fd0:	f8c8 1000 	streq.w	r1, [r8]
 8005fd4:	5162      	str	r2, [r4, r5]
 8005fd6:	604b      	str	r3, [r1, #4]
 8005fd8:	4638      	mov	r0, r7
 8005fda:	f104 060b 	add.w	r6, r4, #11
 8005fde:	f000 f829 	bl	8006034 <__malloc_unlock>
 8005fe2:	f026 0607 	bic.w	r6, r6, #7
 8005fe6:	1d23      	adds	r3, r4, #4
 8005fe8:	1af2      	subs	r2, r6, r3
 8005fea:	d0ae      	beq.n	8005f4a <_malloc_r+0x22>
 8005fec:	1b9b      	subs	r3, r3, r6
 8005fee:	50a3      	str	r3, [r4, r2]
 8005ff0:	e7ab      	b.n	8005f4a <_malloc_r+0x22>
 8005ff2:	42a3      	cmp	r3, r4
 8005ff4:	6862      	ldr	r2, [r4, #4]
 8005ff6:	d1dd      	bne.n	8005fb4 <_malloc_r+0x8c>
 8005ff8:	f8c8 2000 	str.w	r2, [r8]
 8005ffc:	e7ec      	b.n	8005fd8 <_malloc_r+0xb0>
 8005ffe:	4623      	mov	r3, r4
 8006000:	6864      	ldr	r4, [r4, #4]
 8006002:	e7ac      	b.n	8005f5e <_malloc_r+0x36>
 8006004:	4634      	mov	r4, r6
 8006006:	6876      	ldr	r6, [r6, #4]
 8006008:	e7b4      	b.n	8005f74 <_malloc_r+0x4c>
 800600a:	4613      	mov	r3, r2
 800600c:	e7cc      	b.n	8005fa8 <_malloc_r+0x80>
 800600e:	230c      	movs	r3, #12
 8006010:	4638      	mov	r0, r7
 8006012:	603b      	str	r3, [r7, #0]
 8006014:	f000 f80e 	bl	8006034 <__malloc_unlock>
 8006018:	e797      	b.n	8005f4a <_malloc_r+0x22>
 800601a:	6025      	str	r5, [r4, #0]
 800601c:	e7dc      	b.n	8005fd8 <_malloc_r+0xb0>
 800601e:	605b      	str	r3, [r3, #4]
 8006020:	deff      	udf	#255	; 0xff
 8006022:	bf00      	nop
 8006024:	200003a8 	.word	0x200003a8

08006028 <__malloc_lock>:
 8006028:	4801      	ldr	r0, [pc, #4]	; (8006030 <__malloc_lock+0x8>)
 800602a:	f7ff bf13 	b.w	8005e54 <__retarget_lock_acquire_recursive>
 800602e:	bf00      	nop
 8006030:	200003a4 	.word	0x200003a4

08006034 <__malloc_unlock>:
 8006034:	4801      	ldr	r0, [pc, #4]	; (800603c <__malloc_unlock+0x8>)
 8006036:	f7ff bf0e 	b.w	8005e56 <__retarget_lock_release_recursive>
 800603a:	bf00      	nop
 800603c:	200003a4 	.word	0x200003a4

08006040 <__ssputs_r>:
 8006040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006044:	461f      	mov	r7, r3
 8006046:	688e      	ldr	r6, [r1, #8]
 8006048:	4682      	mov	sl, r0
 800604a:	42be      	cmp	r6, r7
 800604c:	460c      	mov	r4, r1
 800604e:	4690      	mov	r8, r2
 8006050:	680b      	ldr	r3, [r1, #0]
 8006052:	d82c      	bhi.n	80060ae <__ssputs_r+0x6e>
 8006054:	898a      	ldrh	r2, [r1, #12]
 8006056:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800605a:	d026      	beq.n	80060aa <__ssputs_r+0x6a>
 800605c:	6965      	ldr	r5, [r4, #20]
 800605e:	6909      	ldr	r1, [r1, #16]
 8006060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006064:	eba3 0901 	sub.w	r9, r3, r1
 8006068:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800606c:	1c7b      	adds	r3, r7, #1
 800606e:	444b      	add	r3, r9
 8006070:	106d      	asrs	r5, r5, #1
 8006072:	429d      	cmp	r5, r3
 8006074:	bf38      	it	cc
 8006076:	461d      	movcc	r5, r3
 8006078:	0553      	lsls	r3, r2, #21
 800607a:	d527      	bpl.n	80060cc <__ssputs_r+0x8c>
 800607c:	4629      	mov	r1, r5
 800607e:	f7ff ff53 	bl	8005f28 <_malloc_r>
 8006082:	4606      	mov	r6, r0
 8006084:	b360      	cbz	r0, 80060e0 <__ssputs_r+0xa0>
 8006086:	464a      	mov	r2, r9
 8006088:	6921      	ldr	r1, [r4, #16]
 800608a:	f000 fafd 	bl	8006688 <memcpy>
 800608e:	89a3      	ldrh	r3, [r4, #12]
 8006090:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006098:	81a3      	strh	r3, [r4, #12]
 800609a:	6126      	str	r6, [r4, #16]
 800609c:	444e      	add	r6, r9
 800609e:	6026      	str	r6, [r4, #0]
 80060a0:	463e      	mov	r6, r7
 80060a2:	6165      	str	r5, [r4, #20]
 80060a4:	eba5 0509 	sub.w	r5, r5, r9
 80060a8:	60a5      	str	r5, [r4, #8]
 80060aa:	42be      	cmp	r6, r7
 80060ac:	d900      	bls.n	80060b0 <__ssputs_r+0x70>
 80060ae:	463e      	mov	r6, r7
 80060b0:	4632      	mov	r2, r6
 80060b2:	4641      	mov	r1, r8
 80060b4:	6820      	ldr	r0, [r4, #0]
 80060b6:	f000 faaf 	bl	8006618 <memmove>
 80060ba:	2000      	movs	r0, #0
 80060bc:	68a3      	ldr	r3, [r4, #8]
 80060be:	1b9b      	subs	r3, r3, r6
 80060c0:	60a3      	str	r3, [r4, #8]
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	4433      	add	r3, r6
 80060c6:	6023      	str	r3, [r4, #0]
 80060c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060cc:	462a      	mov	r2, r5
 80060ce:	f000 fae9 	bl	80066a4 <_realloc_r>
 80060d2:	4606      	mov	r6, r0
 80060d4:	2800      	cmp	r0, #0
 80060d6:	d1e0      	bne.n	800609a <__ssputs_r+0x5a>
 80060d8:	4650      	mov	r0, sl
 80060da:	6921      	ldr	r1, [r4, #16]
 80060dc:	f7ff febc 	bl	8005e58 <_free_r>
 80060e0:	230c      	movs	r3, #12
 80060e2:	f8ca 3000 	str.w	r3, [sl]
 80060e6:	89a3      	ldrh	r3, [r4, #12]
 80060e8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060f0:	81a3      	strh	r3, [r4, #12]
 80060f2:	e7e9      	b.n	80060c8 <__ssputs_r+0x88>

080060f4 <_svfiprintf_r>:
 80060f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f8:	4698      	mov	r8, r3
 80060fa:	898b      	ldrh	r3, [r1, #12]
 80060fc:	4607      	mov	r7, r0
 80060fe:	061b      	lsls	r3, r3, #24
 8006100:	460d      	mov	r5, r1
 8006102:	4614      	mov	r4, r2
 8006104:	b09d      	sub	sp, #116	; 0x74
 8006106:	d50e      	bpl.n	8006126 <_svfiprintf_r+0x32>
 8006108:	690b      	ldr	r3, [r1, #16]
 800610a:	b963      	cbnz	r3, 8006126 <_svfiprintf_r+0x32>
 800610c:	2140      	movs	r1, #64	; 0x40
 800610e:	f7ff ff0b 	bl	8005f28 <_malloc_r>
 8006112:	6028      	str	r0, [r5, #0]
 8006114:	6128      	str	r0, [r5, #16]
 8006116:	b920      	cbnz	r0, 8006122 <_svfiprintf_r+0x2e>
 8006118:	230c      	movs	r3, #12
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	f04f 30ff 	mov.w	r0, #4294967295
 8006120:	e0d0      	b.n	80062c4 <_svfiprintf_r+0x1d0>
 8006122:	2340      	movs	r3, #64	; 0x40
 8006124:	616b      	str	r3, [r5, #20]
 8006126:	2300      	movs	r3, #0
 8006128:	9309      	str	r3, [sp, #36]	; 0x24
 800612a:	2320      	movs	r3, #32
 800612c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006130:	2330      	movs	r3, #48	; 0x30
 8006132:	f04f 0901 	mov.w	r9, #1
 8006136:	f8cd 800c 	str.w	r8, [sp, #12]
 800613a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80062dc <_svfiprintf_r+0x1e8>
 800613e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006142:	4623      	mov	r3, r4
 8006144:	469a      	mov	sl, r3
 8006146:	f813 2b01 	ldrb.w	r2, [r3], #1
 800614a:	b10a      	cbz	r2, 8006150 <_svfiprintf_r+0x5c>
 800614c:	2a25      	cmp	r2, #37	; 0x25
 800614e:	d1f9      	bne.n	8006144 <_svfiprintf_r+0x50>
 8006150:	ebba 0b04 	subs.w	fp, sl, r4
 8006154:	d00b      	beq.n	800616e <_svfiprintf_r+0x7a>
 8006156:	465b      	mov	r3, fp
 8006158:	4622      	mov	r2, r4
 800615a:	4629      	mov	r1, r5
 800615c:	4638      	mov	r0, r7
 800615e:	f7ff ff6f 	bl	8006040 <__ssputs_r>
 8006162:	3001      	adds	r0, #1
 8006164:	f000 80a9 	beq.w	80062ba <_svfiprintf_r+0x1c6>
 8006168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800616a:	445a      	add	r2, fp
 800616c:	9209      	str	r2, [sp, #36]	; 0x24
 800616e:	f89a 3000 	ldrb.w	r3, [sl]
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 80a1 	beq.w	80062ba <_svfiprintf_r+0x1c6>
 8006178:	2300      	movs	r3, #0
 800617a:	f04f 32ff 	mov.w	r2, #4294967295
 800617e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006182:	f10a 0a01 	add.w	sl, sl, #1
 8006186:	9304      	str	r3, [sp, #16]
 8006188:	9307      	str	r3, [sp, #28]
 800618a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800618e:	931a      	str	r3, [sp, #104]	; 0x68
 8006190:	4654      	mov	r4, sl
 8006192:	2205      	movs	r2, #5
 8006194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006198:	4850      	ldr	r0, [pc, #320]	; (80062dc <_svfiprintf_r+0x1e8>)
 800619a:	f000 fa67 	bl	800666c <memchr>
 800619e:	9a04      	ldr	r2, [sp, #16]
 80061a0:	b9d8      	cbnz	r0, 80061da <_svfiprintf_r+0xe6>
 80061a2:	06d0      	lsls	r0, r2, #27
 80061a4:	bf44      	itt	mi
 80061a6:	2320      	movmi	r3, #32
 80061a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061ac:	0711      	lsls	r1, r2, #28
 80061ae:	bf44      	itt	mi
 80061b0:	232b      	movmi	r3, #43	; 0x2b
 80061b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061b6:	f89a 3000 	ldrb.w	r3, [sl]
 80061ba:	2b2a      	cmp	r3, #42	; 0x2a
 80061bc:	d015      	beq.n	80061ea <_svfiprintf_r+0xf6>
 80061be:	4654      	mov	r4, sl
 80061c0:	2000      	movs	r0, #0
 80061c2:	f04f 0c0a 	mov.w	ip, #10
 80061c6:	9a07      	ldr	r2, [sp, #28]
 80061c8:	4621      	mov	r1, r4
 80061ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061ce:	3b30      	subs	r3, #48	; 0x30
 80061d0:	2b09      	cmp	r3, #9
 80061d2:	d94d      	bls.n	8006270 <_svfiprintf_r+0x17c>
 80061d4:	b1b0      	cbz	r0, 8006204 <_svfiprintf_r+0x110>
 80061d6:	9207      	str	r2, [sp, #28]
 80061d8:	e014      	b.n	8006204 <_svfiprintf_r+0x110>
 80061da:	eba0 0308 	sub.w	r3, r0, r8
 80061de:	fa09 f303 	lsl.w	r3, r9, r3
 80061e2:	4313      	orrs	r3, r2
 80061e4:	46a2      	mov	sl, r4
 80061e6:	9304      	str	r3, [sp, #16]
 80061e8:	e7d2      	b.n	8006190 <_svfiprintf_r+0x9c>
 80061ea:	9b03      	ldr	r3, [sp, #12]
 80061ec:	1d19      	adds	r1, r3, #4
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	9103      	str	r1, [sp, #12]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	bfbb      	ittet	lt
 80061f6:	425b      	neglt	r3, r3
 80061f8:	f042 0202 	orrlt.w	r2, r2, #2
 80061fc:	9307      	strge	r3, [sp, #28]
 80061fe:	9307      	strlt	r3, [sp, #28]
 8006200:	bfb8      	it	lt
 8006202:	9204      	strlt	r2, [sp, #16]
 8006204:	7823      	ldrb	r3, [r4, #0]
 8006206:	2b2e      	cmp	r3, #46	; 0x2e
 8006208:	d10c      	bne.n	8006224 <_svfiprintf_r+0x130>
 800620a:	7863      	ldrb	r3, [r4, #1]
 800620c:	2b2a      	cmp	r3, #42	; 0x2a
 800620e:	d134      	bne.n	800627a <_svfiprintf_r+0x186>
 8006210:	9b03      	ldr	r3, [sp, #12]
 8006212:	3402      	adds	r4, #2
 8006214:	1d1a      	adds	r2, r3, #4
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	9203      	str	r2, [sp, #12]
 800621a:	2b00      	cmp	r3, #0
 800621c:	bfb8      	it	lt
 800621e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006222:	9305      	str	r3, [sp, #20]
 8006224:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80062e0 <_svfiprintf_r+0x1ec>
 8006228:	2203      	movs	r2, #3
 800622a:	4650      	mov	r0, sl
 800622c:	7821      	ldrb	r1, [r4, #0]
 800622e:	f000 fa1d 	bl	800666c <memchr>
 8006232:	b138      	cbz	r0, 8006244 <_svfiprintf_r+0x150>
 8006234:	2240      	movs	r2, #64	; 0x40
 8006236:	9b04      	ldr	r3, [sp, #16]
 8006238:	eba0 000a 	sub.w	r0, r0, sl
 800623c:	4082      	lsls	r2, r0
 800623e:	4313      	orrs	r3, r2
 8006240:	3401      	adds	r4, #1
 8006242:	9304      	str	r3, [sp, #16]
 8006244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006248:	2206      	movs	r2, #6
 800624a:	4826      	ldr	r0, [pc, #152]	; (80062e4 <_svfiprintf_r+0x1f0>)
 800624c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006250:	f000 fa0c 	bl	800666c <memchr>
 8006254:	2800      	cmp	r0, #0
 8006256:	d038      	beq.n	80062ca <_svfiprintf_r+0x1d6>
 8006258:	4b23      	ldr	r3, [pc, #140]	; (80062e8 <_svfiprintf_r+0x1f4>)
 800625a:	bb1b      	cbnz	r3, 80062a4 <_svfiprintf_r+0x1b0>
 800625c:	9b03      	ldr	r3, [sp, #12]
 800625e:	3307      	adds	r3, #7
 8006260:	f023 0307 	bic.w	r3, r3, #7
 8006264:	3308      	adds	r3, #8
 8006266:	9303      	str	r3, [sp, #12]
 8006268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800626a:	4433      	add	r3, r6
 800626c:	9309      	str	r3, [sp, #36]	; 0x24
 800626e:	e768      	b.n	8006142 <_svfiprintf_r+0x4e>
 8006270:	460c      	mov	r4, r1
 8006272:	2001      	movs	r0, #1
 8006274:	fb0c 3202 	mla	r2, ip, r2, r3
 8006278:	e7a6      	b.n	80061c8 <_svfiprintf_r+0xd4>
 800627a:	2300      	movs	r3, #0
 800627c:	f04f 0c0a 	mov.w	ip, #10
 8006280:	4619      	mov	r1, r3
 8006282:	3401      	adds	r4, #1
 8006284:	9305      	str	r3, [sp, #20]
 8006286:	4620      	mov	r0, r4
 8006288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800628c:	3a30      	subs	r2, #48	; 0x30
 800628e:	2a09      	cmp	r2, #9
 8006290:	d903      	bls.n	800629a <_svfiprintf_r+0x1a6>
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0c6      	beq.n	8006224 <_svfiprintf_r+0x130>
 8006296:	9105      	str	r1, [sp, #20]
 8006298:	e7c4      	b.n	8006224 <_svfiprintf_r+0x130>
 800629a:	4604      	mov	r4, r0
 800629c:	2301      	movs	r3, #1
 800629e:	fb0c 2101 	mla	r1, ip, r1, r2
 80062a2:	e7f0      	b.n	8006286 <_svfiprintf_r+0x192>
 80062a4:	ab03      	add	r3, sp, #12
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	462a      	mov	r2, r5
 80062aa:	4638      	mov	r0, r7
 80062ac:	4b0f      	ldr	r3, [pc, #60]	; (80062ec <_svfiprintf_r+0x1f8>)
 80062ae:	a904      	add	r1, sp, #16
 80062b0:	f3af 8000 	nop.w
 80062b4:	1c42      	adds	r2, r0, #1
 80062b6:	4606      	mov	r6, r0
 80062b8:	d1d6      	bne.n	8006268 <_svfiprintf_r+0x174>
 80062ba:	89ab      	ldrh	r3, [r5, #12]
 80062bc:	065b      	lsls	r3, r3, #25
 80062be:	f53f af2d 	bmi.w	800611c <_svfiprintf_r+0x28>
 80062c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062c4:	b01d      	add	sp, #116	; 0x74
 80062c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ca:	ab03      	add	r3, sp, #12
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	462a      	mov	r2, r5
 80062d0:	4638      	mov	r0, r7
 80062d2:	4b06      	ldr	r3, [pc, #24]	; (80062ec <_svfiprintf_r+0x1f8>)
 80062d4:	a904      	add	r1, sp, #16
 80062d6:	f000 f87d 	bl	80063d4 <_printf_i>
 80062da:	e7eb      	b.n	80062b4 <_svfiprintf_r+0x1c0>
 80062dc:	0800687e 	.word	0x0800687e
 80062e0:	08006884 	.word	0x08006884
 80062e4:	08006888 	.word	0x08006888
 80062e8:	00000000 	.word	0x00000000
 80062ec:	08006041 	.word	0x08006041

080062f0 <_printf_common>:
 80062f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062f4:	4616      	mov	r6, r2
 80062f6:	4699      	mov	r9, r3
 80062f8:	688a      	ldr	r2, [r1, #8]
 80062fa:	690b      	ldr	r3, [r1, #16]
 80062fc:	4607      	mov	r7, r0
 80062fe:	4293      	cmp	r3, r2
 8006300:	bfb8      	it	lt
 8006302:	4613      	movlt	r3, r2
 8006304:	6033      	str	r3, [r6, #0]
 8006306:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800630a:	460c      	mov	r4, r1
 800630c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006310:	b10a      	cbz	r2, 8006316 <_printf_common+0x26>
 8006312:	3301      	adds	r3, #1
 8006314:	6033      	str	r3, [r6, #0]
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	0699      	lsls	r1, r3, #26
 800631a:	bf42      	ittt	mi
 800631c:	6833      	ldrmi	r3, [r6, #0]
 800631e:	3302      	addmi	r3, #2
 8006320:	6033      	strmi	r3, [r6, #0]
 8006322:	6825      	ldr	r5, [r4, #0]
 8006324:	f015 0506 	ands.w	r5, r5, #6
 8006328:	d106      	bne.n	8006338 <_printf_common+0x48>
 800632a:	f104 0a19 	add.w	sl, r4, #25
 800632e:	68e3      	ldr	r3, [r4, #12]
 8006330:	6832      	ldr	r2, [r6, #0]
 8006332:	1a9b      	subs	r3, r3, r2
 8006334:	42ab      	cmp	r3, r5
 8006336:	dc2b      	bgt.n	8006390 <_printf_common+0xa0>
 8006338:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800633c:	1e13      	subs	r3, r2, #0
 800633e:	6822      	ldr	r2, [r4, #0]
 8006340:	bf18      	it	ne
 8006342:	2301      	movne	r3, #1
 8006344:	0692      	lsls	r2, r2, #26
 8006346:	d430      	bmi.n	80063aa <_printf_common+0xba>
 8006348:	4649      	mov	r1, r9
 800634a:	4638      	mov	r0, r7
 800634c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006350:	47c0      	blx	r8
 8006352:	3001      	adds	r0, #1
 8006354:	d023      	beq.n	800639e <_printf_common+0xae>
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	6922      	ldr	r2, [r4, #16]
 800635a:	f003 0306 	and.w	r3, r3, #6
 800635e:	2b04      	cmp	r3, #4
 8006360:	bf14      	ite	ne
 8006362:	2500      	movne	r5, #0
 8006364:	6833      	ldreq	r3, [r6, #0]
 8006366:	f04f 0600 	mov.w	r6, #0
 800636a:	bf08      	it	eq
 800636c:	68e5      	ldreq	r5, [r4, #12]
 800636e:	f104 041a 	add.w	r4, r4, #26
 8006372:	bf08      	it	eq
 8006374:	1aed      	subeq	r5, r5, r3
 8006376:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800637a:	bf08      	it	eq
 800637c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006380:	4293      	cmp	r3, r2
 8006382:	bfc4      	itt	gt
 8006384:	1a9b      	subgt	r3, r3, r2
 8006386:	18ed      	addgt	r5, r5, r3
 8006388:	42b5      	cmp	r5, r6
 800638a:	d11a      	bne.n	80063c2 <_printf_common+0xd2>
 800638c:	2000      	movs	r0, #0
 800638e:	e008      	b.n	80063a2 <_printf_common+0xb2>
 8006390:	2301      	movs	r3, #1
 8006392:	4652      	mov	r2, sl
 8006394:	4649      	mov	r1, r9
 8006396:	4638      	mov	r0, r7
 8006398:	47c0      	blx	r8
 800639a:	3001      	adds	r0, #1
 800639c:	d103      	bne.n	80063a6 <_printf_common+0xb6>
 800639e:	f04f 30ff 	mov.w	r0, #4294967295
 80063a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a6:	3501      	adds	r5, #1
 80063a8:	e7c1      	b.n	800632e <_printf_common+0x3e>
 80063aa:	2030      	movs	r0, #48	; 0x30
 80063ac:	18e1      	adds	r1, r4, r3
 80063ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063b8:	4422      	add	r2, r4
 80063ba:	3302      	adds	r3, #2
 80063bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063c0:	e7c2      	b.n	8006348 <_printf_common+0x58>
 80063c2:	2301      	movs	r3, #1
 80063c4:	4622      	mov	r2, r4
 80063c6:	4649      	mov	r1, r9
 80063c8:	4638      	mov	r0, r7
 80063ca:	47c0      	blx	r8
 80063cc:	3001      	adds	r0, #1
 80063ce:	d0e6      	beq.n	800639e <_printf_common+0xae>
 80063d0:	3601      	adds	r6, #1
 80063d2:	e7d9      	b.n	8006388 <_printf_common+0x98>

080063d4 <_printf_i>:
 80063d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063d8:	7e0f      	ldrb	r7, [r1, #24]
 80063da:	4691      	mov	r9, r2
 80063dc:	2f78      	cmp	r7, #120	; 0x78
 80063de:	4680      	mov	r8, r0
 80063e0:	460c      	mov	r4, r1
 80063e2:	469a      	mov	sl, r3
 80063e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063ea:	d807      	bhi.n	80063fc <_printf_i+0x28>
 80063ec:	2f62      	cmp	r7, #98	; 0x62
 80063ee:	d80a      	bhi.n	8006406 <_printf_i+0x32>
 80063f0:	2f00      	cmp	r7, #0
 80063f2:	f000 80d5 	beq.w	80065a0 <_printf_i+0x1cc>
 80063f6:	2f58      	cmp	r7, #88	; 0x58
 80063f8:	f000 80c1 	beq.w	800657e <_printf_i+0x1aa>
 80063fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006400:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006404:	e03a      	b.n	800647c <_printf_i+0xa8>
 8006406:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800640a:	2b15      	cmp	r3, #21
 800640c:	d8f6      	bhi.n	80063fc <_printf_i+0x28>
 800640e:	a101      	add	r1, pc, #4	; (adr r1, 8006414 <_printf_i+0x40>)
 8006410:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006414:	0800646d 	.word	0x0800646d
 8006418:	08006481 	.word	0x08006481
 800641c:	080063fd 	.word	0x080063fd
 8006420:	080063fd 	.word	0x080063fd
 8006424:	080063fd 	.word	0x080063fd
 8006428:	080063fd 	.word	0x080063fd
 800642c:	08006481 	.word	0x08006481
 8006430:	080063fd 	.word	0x080063fd
 8006434:	080063fd 	.word	0x080063fd
 8006438:	080063fd 	.word	0x080063fd
 800643c:	080063fd 	.word	0x080063fd
 8006440:	08006587 	.word	0x08006587
 8006444:	080064ad 	.word	0x080064ad
 8006448:	08006541 	.word	0x08006541
 800644c:	080063fd 	.word	0x080063fd
 8006450:	080063fd 	.word	0x080063fd
 8006454:	080065a9 	.word	0x080065a9
 8006458:	080063fd 	.word	0x080063fd
 800645c:	080064ad 	.word	0x080064ad
 8006460:	080063fd 	.word	0x080063fd
 8006464:	080063fd 	.word	0x080063fd
 8006468:	08006549 	.word	0x08006549
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	1d1a      	adds	r2, r3, #4
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	602a      	str	r2, [r5, #0]
 8006474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006478:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800647c:	2301      	movs	r3, #1
 800647e:	e0a0      	b.n	80065c2 <_printf_i+0x1ee>
 8006480:	6820      	ldr	r0, [r4, #0]
 8006482:	682b      	ldr	r3, [r5, #0]
 8006484:	0607      	lsls	r7, r0, #24
 8006486:	f103 0104 	add.w	r1, r3, #4
 800648a:	6029      	str	r1, [r5, #0]
 800648c:	d501      	bpl.n	8006492 <_printf_i+0xbe>
 800648e:	681e      	ldr	r6, [r3, #0]
 8006490:	e003      	b.n	800649a <_printf_i+0xc6>
 8006492:	0646      	lsls	r6, r0, #25
 8006494:	d5fb      	bpl.n	800648e <_printf_i+0xba>
 8006496:	f9b3 6000 	ldrsh.w	r6, [r3]
 800649a:	2e00      	cmp	r6, #0
 800649c:	da03      	bge.n	80064a6 <_printf_i+0xd2>
 800649e:	232d      	movs	r3, #45	; 0x2d
 80064a0:	4276      	negs	r6, r6
 80064a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064a6:	230a      	movs	r3, #10
 80064a8:	4859      	ldr	r0, [pc, #356]	; (8006610 <_printf_i+0x23c>)
 80064aa:	e012      	b.n	80064d2 <_printf_i+0xfe>
 80064ac:	682b      	ldr	r3, [r5, #0]
 80064ae:	6820      	ldr	r0, [r4, #0]
 80064b0:	1d19      	adds	r1, r3, #4
 80064b2:	6029      	str	r1, [r5, #0]
 80064b4:	0605      	lsls	r5, r0, #24
 80064b6:	d501      	bpl.n	80064bc <_printf_i+0xe8>
 80064b8:	681e      	ldr	r6, [r3, #0]
 80064ba:	e002      	b.n	80064c2 <_printf_i+0xee>
 80064bc:	0641      	lsls	r1, r0, #25
 80064be:	d5fb      	bpl.n	80064b8 <_printf_i+0xe4>
 80064c0:	881e      	ldrh	r6, [r3, #0]
 80064c2:	2f6f      	cmp	r7, #111	; 0x6f
 80064c4:	bf0c      	ite	eq
 80064c6:	2308      	moveq	r3, #8
 80064c8:	230a      	movne	r3, #10
 80064ca:	4851      	ldr	r0, [pc, #324]	; (8006610 <_printf_i+0x23c>)
 80064cc:	2100      	movs	r1, #0
 80064ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064d2:	6865      	ldr	r5, [r4, #4]
 80064d4:	2d00      	cmp	r5, #0
 80064d6:	bfa8      	it	ge
 80064d8:	6821      	ldrge	r1, [r4, #0]
 80064da:	60a5      	str	r5, [r4, #8]
 80064dc:	bfa4      	itt	ge
 80064de:	f021 0104 	bicge.w	r1, r1, #4
 80064e2:	6021      	strge	r1, [r4, #0]
 80064e4:	b90e      	cbnz	r6, 80064ea <_printf_i+0x116>
 80064e6:	2d00      	cmp	r5, #0
 80064e8:	d04b      	beq.n	8006582 <_printf_i+0x1ae>
 80064ea:	4615      	mov	r5, r2
 80064ec:	fbb6 f1f3 	udiv	r1, r6, r3
 80064f0:	fb03 6711 	mls	r7, r3, r1, r6
 80064f4:	5dc7      	ldrb	r7, [r0, r7]
 80064f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064fa:	4637      	mov	r7, r6
 80064fc:	42bb      	cmp	r3, r7
 80064fe:	460e      	mov	r6, r1
 8006500:	d9f4      	bls.n	80064ec <_printf_i+0x118>
 8006502:	2b08      	cmp	r3, #8
 8006504:	d10b      	bne.n	800651e <_printf_i+0x14a>
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	07de      	lsls	r6, r3, #31
 800650a:	d508      	bpl.n	800651e <_printf_i+0x14a>
 800650c:	6923      	ldr	r3, [r4, #16]
 800650e:	6861      	ldr	r1, [r4, #4]
 8006510:	4299      	cmp	r1, r3
 8006512:	bfde      	ittt	le
 8006514:	2330      	movle	r3, #48	; 0x30
 8006516:	f805 3c01 	strble.w	r3, [r5, #-1]
 800651a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800651e:	1b52      	subs	r2, r2, r5
 8006520:	6122      	str	r2, [r4, #16]
 8006522:	464b      	mov	r3, r9
 8006524:	4621      	mov	r1, r4
 8006526:	4640      	mov	r0, r8
 8006528:	f8cd a000 	str.w	sl, [sp]
 800652c:	aa03      	add	r2, sp, #12
 800652e:	f7ff fedf 	bl	80062f0 <_printf_common>
 8006532:	3001      	adds	r0, #1
 8006534:	d14a      	bne.n	80065cc <_printf_i+0x1f8>
 8006536:	f04f 30ff 	mov.w	r0, #4294967295
 800653a:	b004      	add	sp, #16
 800653c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	f043 0320 	orr.w	r3, r3, #32
 8006546:	6023      	str	r3, [r4, #0]
 8006548:	2778      	movs	r7, #120	; 0x78
 800654a:	4832      	ldr	r0, [pc, #200]	; (8006614 <_printf_i+0x240>)
 800654c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	6829      	ldr	r1, [r5, #0]
 8006554:	061f      	lsls	r7, r3, #24
 8006556:	f851 6b04 	ldr.w	r6, [r1], #4
 800655a:	d402      	bmi.n	8006562 <_printf_i+0x18e>
 800655c:	065f      	lsls	r7, r3, #25
 800655e:	bf48      	it	mi
 8006560:	b2b6      	uxthmi	r6, r6
 8006562:	07df      	lsls	r7, r3, #31
 8006564:	bf48      	it	mi
 8006566:	f043 0320 	orrmi.w	r3, r3, #32
 800656a:	6029      	str	r1, [r5, #0]
 800656c:	bf48      	it	mi
 800656e:	6023      	strmi	r3, [r4, #0]
 8006570:	b91e      	cbnz	r6, 800657a <_printf_i+0x1a6>
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	f023 0320 	bic.w	r3, r3, #32
 8006578:	6023      	str	r3, [r4, #0]
 800657a:	2310      	movs	r3, #16
 800657c:	e7a6      	b.n	80064cc <_printf_i+0xf8>
 800657e:	4824      	ldr	r0, [pc, #144]	; (8006610 <_printf_i+0x23c>)
 8006580:	e7e4      	b.n	800654c <_printf_i+0x178>
 8006582:	4615      	mov	r5, r2
 8006584:	e7bd      	b.n	8006502 <_printf_i+0x12e>
 8006586:	682b      	ldr	r3, [r5, #0]
 8006588:	6826      	ldr	r6, [r4, #0]
 800658a:	1d18      	adds	r0, r3, #4
 800658c:	6961      	ldr	r1, [r4, #20]
 800658e:	6028      	str	r0, [r5, #0]
 8006590:	0635      	lsls	r5, r6, #24
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	d501      	bpl.n	800659a <_printf_i+0x1c6>
 8006596:	6019      	str	r1, [r3, #0]
 8006598:	e002      	b.n	80065a0 <_printf_i+0x1cc>
 800659a:	0670      	lsls	r0, r6, #25
 800659c:	d5fb      	bpl.n	8006596 <_printf_i+0x1c2>
 800659e:	8019      	strh	r1, [r3, #0]
 80065a0:	2300      	movs	r3, #0
 80065a2:	4615      	mov	r5, r2
 80065a4:	6123      	str	r3, [r4, #16]
 80065a6:	e7bc      	b.n	8006522 <_printf_i+0x14e>
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	2100      	movs	r1, #0
 80065ac:	1d1a      	adds	r2, r3, #4
 80065ae:	602a      	str	r2, [r5, #0]
 80065b0:	681d      	ldr	r5, [r3, #0]
 80065b2:	6862      	ldr	r2, [r4, #4]
 80065b4:	4628      	mov	r0, r5
 80065b6:	f000 f859 	bl	800666c <memchr>
 80065ba:	b108      	cbz	r0, 80065c0 <_printf_i+0x1ec>
 80065bc:	1b40      	subs	r0, r0, r5
 80065be:	6060      	str	r0, [r4, #4]
 80065c0:	6863      	ldr	r3, [r4, #4]
 80065c2:	6123      	str	r3, [r4, #16]
 80065c4:	2300      	movs	r3, #0
 80065c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065ca:	e7aa      	b.n	8006522 <_printf_i+0x14e>
 80065cc:	462a      	mov	r2, r5
 80065ce:	4649      	mov	r1, r9
 80065d0:	4640      	mov	r0, r8
 80065d2:	6923      	ldr	r3, [r4, #16]
 80065d4:	47d0      	blx	sl
 80065d6:	3001      	adds	r0, #1
 80065d8:	d0ad      	beq.n	8006536 <_printf_i+0x162>
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	079b      	lsls	r3, r3, #30
 80065de:	d413      	bmi.n	8006608 <_printf_i+0x234>
 80065e0:	68e0      	ldr	r0, [r4, #12]
 80065e2:	9b03      	ldr	r3, [sp, #12]
 80065e4:	4298      	cmp	r0, r3
 80065e6:	bfb8      	it	lt
 80065e8:	4618      	movlt	r0, r3
 80065ea:	e7a6      	b.n	800653a <_printf_i+0x166>
 80065ec:	2301      	movs	r3, #1
 80065ee:	4632      	mov	r2, r6
 80065f0:	4649      	mov	r1, r9
 80065f2:	4640      	mov	r0, r8
 80065f4:	47d0      	blx	sl
 80065f6:	3001      	adds	r0, #1
 80065f8:	d09d      	beq.n	8006536 <_printf_i+0x162>
 80065fa:	3501      	adds	r5, #1
 80065fc:	68e3      	ldr	r3, [r4, #12]
 80065fe:	9903      	ldr	r1, [sp, #12]
 8006600:	1a5b      	subs	r3, r3, r1
 8006602:	42ab      	cmp	r3, r5
 8006604:	dcf2      	bgt.n	80065ec <_printf_i+0x218>
 8006606:	e7eb      	b.n	80065e0 <_printf_i+0x20c>
 8006608:	2500      	movs	r5, #0
 800660a:	f104 0619 	add.w	r6, r4, #25
 800660e:	e7f5      	b.n	80065fc <_printf_i+0x228>
 8006610:	0800688f 	.word	0x0800688f
 8006614:	080068a0 	.word	0x080068a0

08006618 <memmove>:
 8006618:	4288      	cmp	r0, r1
 800661a:	b510      	push	{r4, lr}
 800661c:	eb01 0402 	add.w	r4, r1, r2
 8006620:	d902      	bls.n	8006628 <memmove+0x10>
 8006622:	4284      	cmp	r4, r0
 8006624:	4623      	mov	r3, r4
 8006626:	d807      	bhi.n	8006638 <memmove+0x20>
 8006628:	1e43      	subs	r3, r0, #1
 800662a:	42a1      	cmp	r1, r4
 800662c:	d008      	beq.n	8006640 <memmove+0x28>
 800662e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006632:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006636:	e7f8      	b.n	800662a <memmove+0x12>
 8006638:	4601      	mov	r1, r0
 800663a:	4402      	add	r2, r0
 800663c:	428a      	cmp	r2, r1
 800663e:	d100      	bne.n	8006642 <memmove+0x2a>
 8006640:	bd10      	pop	{r4, pc}
 8006642:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006646:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800664a:	e7f7      	b.n	800663c <memmove+0x24>

0800664c <_sbrk_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	2300      	movs	r3, #0
 8006650:	4d05      	ldr	r5, [pc, #20]	; (8006668 <_sbrk_r+0x1c>)
 8006652:	4604      	mov	r4, r0
 8006654:	4608      	mov	r0, r1
 8006656:	602b      	str	r3, [r5, #0]
 8006658:	f7fb f80a 	bl	8001670 <_sbrk>
 800665c:	1c43      	adds	r3, r0, #1
 800665e:	d102      	bne.n	8006666 <_sbrk_r+0x1a>
 8006660:	682b      	ldr	r3, [r5, #0]
 8006662:	b103      	cbz	r3, 8006666 <_sbrk_r+0x1a>
 8006664:	6023      	str	r3, [r4, #0]
 8006666:	bd38      	pop	{r3, r4, r5, pc}
 8006668:	200003a0 	.word	0x200003a0

0800666c <memchr>:
 800666c:	4603      	mov	r3, r0
 800666e:	b510      	push	{r4, lr}
 8006670:	b2c9      	uxtb	r1, r1
 8006672:	4402      	add	r2, r0
 8006674:	4293      	cmp	r3, r2
 8006676:	4618      	mov	r0, r3
 8006678:	d101      	bne.n	800667e <memchr+0x12>
 800667a:	2000      	movs	r0, #0
 800667c:	e003      	b.n	8006686 <memchr+0x1a>
 800667e:	7804      	ldrb	r4, [r0, #0]
 8006680:	3301      	adds	r3, #1
 8006682:	428c      	cmp	r4, r1
 8006684:	d1f6      	bne.n	8006674 <memchr+0x8>
 8006686:	bd10      	pop	{r4, pc}

08006688 <memcpy>:
 8006688:	440a      	add	r2, r1
 800668a:	4291      	cmp	r1, r2
 800668c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006690:	d100      	bne.n	8006694 <memcpy+0xc>
 8006692:	4770      	bx	lr
 8006694:	b510      	push	{r4, lr}
 8006696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800669a:	4291      	cmp	r1, r2
 800669c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066a0:	d1f9      	bne.n	8006696 <memcpy+0xe>
 80066a2:	bd10      	pop	{r4, pc}

080066a4 <_realloc_r>:
 80066a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a8:	4680      	mov	r8, r0
 80066aa:	4614      	mov	r4, r2
 80066ac:	460e      	mov	r6, r1
 80066ae:	b921      	cbnz	r1, 80066ba <_realloc_r+0x16>
 80066b0:	4611      	mov	r1, r2
 80066b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066b6:	f7ff bc37 	b.w	8005f28 <_malloc_r>
 80066ba:	b92a      	cbnz	r2, 80066c8 <_realloc_r+0x24>
 80066bc:	f7ff fbcc 	bl	8005e58 <_free_r>
 80066c0:	4625      	mov	r5, r4
 80066c2:	4628      	mov	r0, r5
 80066c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066c8:	f000 f81b 	bl	8006702 <_malloc_usable_size_r>
 80066cc:	4284      	cmp	r4, r0
 80066ce:	4607      	mov	r7, r0
 80066d0:	d802      	bhi.n	80066d8 <_realloc_r+0x34>
 80066d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80066d6:	d812      	bhi.n	80066fe <_realloc_r+0x5a>
 80066d8:	4621      	mov	r1, r4
 80066da:	4640      	mov	r0, r8
 80066dc:	f7ff fc24 	bl	8005f28 <_malloc_r>
 80066e0:	4605      	mov	r5, r0
 80066e2:	2800      	cmp	r0, #0
 80066e4:	d0ed      	beq.n	80066c2 <_realloc_r+0x1e>
 80066e6:	42bc      	cmp	r4, r7
 80066e8:	4622      	mov	r2, r4
 80066ea:	4631      	mov	r1, r6
 80066ec:	bf28      	it	cs
 80066ee:	463a      	movcs	r2, r7
 80066f0:	f7ff ffca 	bl	8006688 <memcpy>
 80066f4:	4631      	mov	r1, r6
 80066f6:	4640      	mov	r0, r8
 80066f8:	f7ff fbae 	bl	8005e58 <_free_r>
 80066fc:	e7e1      	b.n	80066c2 <_realloc_r+0x1e>
 80066fe:	4635      	mov	r5, r6
 8006700:	e7df      	b.n	80066c2 <_realloc_r+0x1e>

08006702 <_malloc_usable_size_r>:
 8006702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006706:	1f18      	subs	r0, r3, #4
 8006708:	2b00      	cmp	r3, #0
 800670a:	bfbc      	itt	lt
 800670c:	580b      	ldrlt	r3, [r1, r0]
 800670e:	18c0      	addlt	r0, r0, r3
 8006710:	4770      	bx	lr
	...

08006714 <_init>:
 8006714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006716:	bf00      	nop
 8006718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671a:	bc08      	pop	{r3}
 800671c:	469e      	mov	lr, r3
 800671e:	4770      	bx	lr

08006720 <_fini>:
 8006720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006722:	bf00      	nop
 8006724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006726:	bc08      	pop	{r3}
 8006728:	469e      	mov	lr, r3
 800672a:	4770      	bx	lr
