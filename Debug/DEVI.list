
DEVI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004d48  08004d48  00014d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e00  08004e00  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004e00  08004e00  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e00  08004e00  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e00  08004e00  00014e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e04  08004e04  00014e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004e08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  2000005c  08004e64  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08004e64  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e4e6  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000267b  00000000  00000000  0002e5ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  00030c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae0  00000000  00000000  00031a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018230  00000000  00000000  00032518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001244d  00000000  00000000  0004a748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c547  00000000  00000000  0005cb95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ea8  00000000  00000000  000e90dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000ecf84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d30 	.word	0x08004d30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004d30 	.word	0x08004d30

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <btn_pressing_callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define SHORT_PRESS_TIME 1000
#define HOLD_DOWN_TIME 3000
void btn_pressing_callback(Button_Typdef *ButtonX)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if (stateDevice == IDLE) {
 8000164:	4b12      	ldr	r3, [pc, #72]	; (80001b0 <btn_pressing_callback+0x54>)
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	2b01      	cmp	r3, #1
 800016a:	d10f      	bne.n	800018c <btn_pressing_callback+0x30>
		MQSensor_powerOn(&MQSensor, true);
 800016c:	2101      	movs	r1, #1
 800016e:	4811      	ldr	r0, [pc, #68]	; (80001b4 <btn_pressing_callback+0x58>)
 8000170:	f000 f962 	bl	8000438 <MQSensor_powerOn>
		MQSensor.start_heating_time = HAL_GetTick();
 8000174:	f000 fee6 	bl	8000f44 <HAL_GetTick>
 8000178:	4603      	mov	r3, r0
 800017a:	4a0e      	ldr	r2, [pc, #56]	; (80001b4 <btn_pressing_callback+0x58>)
 800017c:	6093      	str	r3, [r2, #8]
		stateDevice = HEATING;
 800017e:	4b0c      	ldr	r3, [pc, #48]	; (80001b0 <btn_pressing_callback+0x54>)
 8000180:	2202      	movs	r2, #2
 8000182:	701a      	strb	r2, [r3, #0]
		lcd_clear_display(&hlcd);
 8000184:	480c      	ldr	r0, [pc, #48]	; (80001b8 <btn_pressing_callback+0x5c>)
 8000186:	f004 f85b 	bl	8004240 <lcd_clear_display>
		return;
 800018a:	e00e      	b.n	80001aa <btn_pressing_callback+0x4e>
	}

	if (stateDevice == HEATING) {
 800018c:	4b08      	ldr	r3, [pc, #32]	; (80001b0 <btn_pressing_callback+0x54>)
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	2b02      	cmp	r3, #2
 8000192:	d10a      	bne.n	80001aa <btn_pressing_callback+0x4e>
		lcd_clear_display(&hlcd);
 8000194:	4808      	ldr	r0, [pc, #32]	; (80001b8 <btn_pressing_callback+0x5c>)
 8000196:	f004 f853 	bl	8004240 <lcd_clear_display>
		MQSensor_powerOn(&MQSensor, false);
 800019a:	2100      	movs	r1, #0
 800019c:	4805      	ldr	r0, [pc, #20]	; (80001b4 <btn_pressing_callback+0x58>)
 800019e:	f000 f94b 	bl	8000438 <MQSensor_powerOn>
		stateDevice = IDLE;
 80001a2:	4b03      	ldr	r3, [pc, #12]	; (80001b0 <btn_pressing_callback+0x54>)
 80001a4:	2201      	movs	r2, #1
 80001a6:	701a      	strb	r2, [r3, #0]
		return;
 80001a8:	bf00      	nop
	}

}
 80001aa:	3708      	adds	r7, #8
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	200001f8 	.word	0x200001f8
 80001b4:	200001d4 	.word	0x200001d4
 80001b8:	200001ac 	.word	0x200001ac

080001bc <btn_press_short_callback>:

void btn_press_short_callback(Button_Typdef *ButtonX)
{
 80001bc:	b480      	push	{r7}
 80001be:	b083      	sub	sp, #12
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]

}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr

080001ce <btn_release_callback>:
void btn_release_callback(Button_Typdef *ButtonX)
{
 80001ce:	b480      	push	{r7}
 80001d0:	b083      	sub	sp, #12
 80001d2:	af00      	add	r7, sp, #0
 80001d4:	6078      	str	r0, [r7, #4]

}
 80001d6:	bf00      	nop
 80001d8:	370c      	adds	r7, #12
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr

080001e0 <btn_press_timeout_callback>:
void btn_press_timeout_callback(Button_Typdef *ButtonX)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
	hold_count++;
 80001e8:	4b06      	ldr	r3, [pc, #24]	; (8000204 <btn_press_timeout_callback+0x24>)
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	3301      	adds	r3, #1
 80001ee:	b2da      	uxtb	r2, r3
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <btn_press_timeout_callback+0x24>)
 80001f2:	701a      	strb	r2, [r3, #0]
	flag = true;
 80001f4:	4b04      	ldr	r3, [pc, #16]	; (8000208 <btn_press_timeout_callback+0x28>)
 80001f6:	2201      	movs	r2, #1
 80001f8:	701a      	strb	r2, [r3, #0]
}
 80001fa:	bf00      	nop
 80001fc:	370c      	adds	r7, #12
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	200001b8 	.word	0x200001b8
 8000208:	200001b9 	.word	0x200001b9

0800020c <button_init>:

void button_init(Button_Typdef *ButtonX,GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	60f8      	str	r0, [r7, #12]
 8000214:	60b9      	str	r1, [r7, #8]
 8000216:	4613      	mov	r3, r2
 8000218:	80fb      	strh	r3, [r7, #6]
	ButtonX->GPIOx = GPIOx;
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	68ba      	ldr	r2, [r7, #8]
 800021e:	611a      	str	r2, [r3, #16]
	ButtonX->GPIO_Pin = GPIO_Pin;
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	88fa      	ldrh	r2, [r7, #6]
 8000224:	829a      	strh	r2, [r3, #20]
}
 8000226:	bf00      	nop
 8000228:	3714      	adds	r7, #20
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr

08000230 <button_handle>:

void button_handle(Button_Typdef *ButtonX)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	/* */
	uint8_t sta = HAL_GPIO_ReadPin(ButtonX->GPIOx, ButtonX->GPIO_Pin);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	691a      	ldr	r2, [r3, #16]
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	8a9b      	ldrh	r3, [r3, #20]
 8000240:	4619      	mov	r1, r3
 8000242:	4610      	mov	r0, r2
 8000244:	f001 fe44 	bl	8001ed0 <HAL_GPIO_ReadPin>
 8000248:	4603      	mov	r3, r0
 800024a:	73fb      	strb	r3, [r7, #15]
	if (sta != ButtonX->btn_filter) {
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	789b      	ldrb	r3, [r3, #2]
 8000250:	7bfa      	ldrb	r2, [r7, #15]
 8000252:	429a      	cmp	r2, r3
 8000254:	d00a      	beq.n	800026c <button_handle+0x3c>
		ButtonX->btn_filter = sta;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	7bfa      	ldrb	r2, [r7, #15]
 800025a:	709a      	strb	r2, [r3, #2]
		ButtonX->is_debouncing = true;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2201      	movs	r2, #1
 8000260:	70da      	strb	r2, [r3, #3]
		ButtonX->time_deboune = HAL_GetTick();
 8000262:	f000 fe6f 	bl	8000f44 <HAL_GetTick>
 8000266:	4602      	mov	r2, r0
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	605a      	str	r2, [r3, #4]
	}

	/* */
	if ((sta == ButtonX->btn_filter) && (HAL_GetTick() - ButtonX->time_deboune) > 15) {
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	789b      	ldrb	r3, [r3, #2]
 8000270:	7bfa      	ldrb	r2, [r7, #15]
 8000272:	429a      	cmp	r2, r3
 8000274:	d10e      	bne.n	8000294 <button_handle+0x64>
 8000276:	f000 fe65 	bl	8000f44 <HAL_GetTick>
 800027a:	4602      	mov	r2, r0
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	1ad3      	subs	r3, r2, r3
 8000282:	2b0f      	cmp	r3, #15
 8000284:	d906      	bls.n	8000294 <button_handle+0x64>
		ButtonX->is_debouncing = false;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2200      	movs	r2, #0
 800028a:	70da      	strb	r2, [r3, #3]
		ButtonX->btn_current = ButtonX->btn_filter;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	789a      	ldrb	r2, [r3, #2]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	701a      	strb	r2, [r3, #0]
	}

	/* */
	if (ButtonX->btn_current != ButtonX->btn_last)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	781a      	ldrb	r2, [r3, #0]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	785b      	ldrb	r3, [r3, #1]
 800029c:	429a      	cmp	r2, r3
 800029e:	d029      	beq.n	80002f4 <button_handle+0xc4>
	{
		if(ButtonX->btn_current == GPIO_PIN_RESET) // Press the button
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d10b      	bne.n	80002c0 <button_handle+0x90>
		{
			ButtonX->is_press_timeout = true;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2201      	movs	r2, #1
 80002ac:	731a      	strb	r2, [r3, #12]
			btn_pressing_callback(ButtonX);
 80002ae:	6878      	ldr	r0, [r7, #4]
 80002b0:	f7ff ff54 	bl	800015c <btn_pressing_callback>
			ButtonX->time_start_press = HAL_GetTick();
 80002b4:	f000 fe46 	bl	8000f44 <HAL_GetTick>
 80002b8:	4602      	mov	r2, r0
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	e015      	b.n	80002ec <button_handle+0xbc>
		}
		else if(ButtonX->btn_current == GPIO_PIN_SET) // Release the button
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d111      	bne.n	80002ec <button_handle+0xbc>
		{
			if(HAL_GetTick() - ButtonX->time_start_press <= SHORT_PRESS_TIME)
 80002c8:	f000 fe3c 	bl	8000f44 <HAL_GetTick>
 80002cc:	4602      	mov	r2, r0
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	1ad3      	subs	r3, r2, r3
 80002d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002d8:	d802      	bhi.n	80002e0 <button_handle+0xb0>
			{
				btn_press_short_callback(ButtonX);
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	f7ff ff6e 	bl	80001bc <btn_press_short_callback>
			}
			btn_release_callback(ButtonX);
 80002e0:	6878      	ldr	r0, [r7, #4]
 80002e2:	f7ff ff74 	bl	80001ce <btn_release_callback>
			ButtonX->is_press_timeout = false;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2200      	movs	r2, #0
 80002ea:	731a      	strb	r2, [r3, #12]
		}
		ButtonX->btn_last = ButtonX->btn_current;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	781a      	ldrb	r2, [r3, #0]
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	705a      	strb	r2, [r3, #1]
	}

	/* */
	if(ButtonX->is_press_timeout && (HAL_GetTick() - ButtonX->time_start_press >= HOLD_DOWN_TIME))
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	7b1b      	ldrb	r3, [r3, #12]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d00f      	beq.n	800031c <button_handle+0xec>
 80002fc:	f000 fe22 	bl	8000f44 <HAL_GetTick>
 8000300:	4602      	mov	r2, r0
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	1ad3      	subs	r3, r2, r3
 8000308:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800030c:	4293      	cmp	r3, r2
 800030e:	d905      	bls.n	800031c <button_handle+0xec>
	{
		ButtonX->is_press_timeout = false;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2200      	movs	r2, #0
 8000314:	731a      	strb	r2, [r3, #12]
		btn_press_timeout_callback(ButtonX);
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f7ff ff62 	bl	80001e0 <btn_press_timeout_callback>
	}

} /* END button_handle */
 800031c:	bf00      	nop
 800031e:	3710      	adds	r7, #16
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <MQSensor_Init>:

void MQSensor_Init(MQSensor_Typdef *sensor, GPIO_TypeDef *HT_GPIOx, uint16_t HT_GPIO_Pin, ADC_HandleTypeDef* hadc,  uint32_t Channel)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	60f8      	str	r0, [r7, #12]
 800032c:	60b9      	str	r1, [r7, #8]
 800032e:	603b      	str	r3, [r7, #0]
 8000330:	4613      	mov	r3, r2
 8000332:	80fb      	strh	r3, [r7, #6]
	sensor->HT_GPIOx = HT_GPIOx;
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	68ba      	ldr	r2, [r7, #8]
 8000338:	601a      	str	r2, [r3, #0]
	sensor->HT_GPIO_Pin = HT_GPIO_Pin;
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	88fa      	ldrh	r2, [r7, #6]
 800033e:	809a      	strh	r2, [r3, #4]
	sensor->hadc = hadc;
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	683a      	ldr	r2, [r7, #0]
 8000344:	611a      	str	r2, [r3, #16]
	sensor->Channel = Channel;
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	69ba      	ldr	r2, [r7, #24]
 800034a:	615a      	str	r2, [r3, #20]

	HAL_ADCEx_Calibration_Start(sensor->hadc);
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	691b      	ldr	r3, [r3, #16]
 8000350:	4618      	mov	r0, r3
 8000352:	f001 fa7d 	bl	8001850 <HAL_ADCEx_Calibration_Start>

}
 8000356:	bf00      	nop
 8000358:	3710      	adds	r7, #16
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <MQSensor_get_adc>:

HAL_StatusTypeDef MQSensor_get_adc(MQSensor_Typdef *sensor)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	MQSensor_powerOn(&MQSensor, true);
 8000368:	2101      	movs	r1, #1
 800036a:	4832      	ldr	r0, [pc, #200]	; (8000434 <MQSensor_get_adc+0xd4>)
 800036c:	f000 f864 	bl	8000438 <MQSensor_powerOn>
	HAL_Delay(10);
 8000370:	200a      	movs	r0, #10
 8000372:	f000 fdf1 	bl	8000f58 <HAL_Delay>
	HAL_StatusTypeDef ret = HAL_OK;
 8000376:	2300      	movs	r3, #0
 8000378:	75fb      	strb	r3, [r7, #23]
	ADC_ChannelConfTypeDef sConfig = {0};
 800037a:	f107 0308 	add.w	r3, r7, #8
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
	sConfig.Channel = sensor->Channel;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800038c:	2301      	movs	r3, #1
 800038e:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000390:	2307      	movs	r3, #7
 8000392:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(sensor->hadc, &sConfig) != HAL_OK)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	f107 0208 	add.w	r2, r7, #8
 800039c:	4611      	mov	r1, r2
 800039e:	4618      	mov	r0, r3
 80003a0:	f001 f8c2 	bl	8001528 <HAL_ADC_ConfigChannel>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MQSensor_get_adc+0x4e>
	{
		Error_Handler();
 80003aa:	f000 fb7f 	bl	8000aac <Error_Handler>
	}

	ret = HAL_ADC_Start(sensor->hadc);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	691b      	ldr	r3, [r3, #16]
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 fecc 	bl	8001150 <HAL_ADC_Start>
 80003b8:	4603      	mov	r3, r0
 80003ba:	75fb      	strb	r3, [r7, #23]
	if(ret) {
 80003bc:	7dfb      	ldrb	r3, [r7, #23]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d005      	beq.n	80003ce <MQSensor_get_adc+0x6e>
		MQSensor_powerOn(&MQSensor, false);
 80003c2:	2100      	movs	r1, #0
 80003c4:	481b      	ldr	r0, [pc, #108]	; (8000434 <MQSensor_get_adc+0xd4>)
 80003c6:	f000 f837 	bl	8000438 <MQSensor_powerOn>
		return ret;
 80003ca:	7dfb      	ldrb	r3, [r7, #23]
 80003cc:	e02e      	b.n	800042c <MQSensor_get_adc+0xcc>
	}
	ret = HAL_ADC_PollForConversion(sensor->hadc, 1000);
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	691b      	ldr	r3, [r3, #16]
 80003d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 ff94 	bl	8001304 <HAL_ADC_PollForConversion>
 80003dc:	4603      	mov	r3, r0
 80003de:	75fb      	strb	r3, [r7, #23]
	if(ret) {
 80003e0:	7dfb      	ldrb	r3, [r7, #23]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d005      	beq.n	80003f2 <MQSensor_get_adc+0x92>
		MQSensor_powerOn(&MQSensor, false);
 80003e6:	2100      	movs	r1, #0
 80003e8:	4812      	ldr	r0, [pc, #72]	; (8000434 <MQSensor_get_adc+0xd4>)
 80003ea:	f000 f825 	bl	8000438 <MQSensor_powerOn>
		return ret;
 80003ee:	7dfb      	ldrb	r3, [r7, #23]
 80003f0:	e01c      	b.n	800042c <MQSensor_get_adc+0xcc>
	}
	sensor->adc_value = HAL_ADC_GetValue(sensor->hadc);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	691b      	ldr	r3, [r3, #16]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f001 f88a 	bl	8001510 <HAL_ADC_GetValue>
 80003fc:	4602      	mov	r2, r0
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	619a      	str	r2, [r3, #24]
	ret = HAL_ADC_Stop(sensor->hadc);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	691b      	ldr	r3, [r3, #16]
 8000406:	4618      	mov	r0, r3
 8000408:	f000 ff50 	bl	80012ac <HAL_ADC_Stop>
 800040c:	4603      	mov	r3, r0
 800040e:	75fb      	strb	r3, [r7, #23]
	if(ret) {
 8000410:	7dfb      	ldrb	r3, [r7, #23]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d005      	beq.n	8000422 <MQSensor_get_adc+0xc2>
		MQSensor_powerOn(&MQSensor, false);
 8000416:	2100      	movs	r1, #0
 8000418:	4806      	ldr	r0, [pc, #24]	; (8000434 <MQSensor_get_adc+0xd4>)
 800041a:	f000 f80d 	bl	8000438 <MQSensor_powerOn>
		return ret;
 800041e:	7dfb      	ldrb	r3, [r7, #23]
 8000420:	e004      	b.n	800042c <MQSensor_get_adc+0xcc>
	}
	MQSensor_powerOn(&MQSensor, false);
 8000422:	2100      	movs	r1, #0
 8000424:	4803      	ldr	r0, [pc, #12]	; (8000434 <MQSensor_get_adc+0xd4>)
 8000426:	f000 f807 	bl	8000438 <MQSensor_powerOn>
	return ret;
 800042a:	7dfb      	ldrb	r3, [r7, #23]
}
 800042c:	4618      	mov	r0, r3
 800042e:	3718      	adds	r7, #24
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	200001d4 	.word	0x200001d4

08000438 <MQSensor_powerOn>:

void MQSensor_powerOn(MQSensor_Typdef *sensor, bool power)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	460b      	mov	r3, r1
 8000442:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sensor->HT_GPIOx, sensor->HT_GPIO_Pin, power ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	6818      	ldr	r0, [r3, #0]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	889b      	ldrh	r3, [r3, #4]
 800044c:	78fa      	ldrb	r2, [r7, #3]
 800044e:	4619      	mov	r1, r3
 8000450:	f001 fd55 	bl	8001efe <HAL_GPIO_WritePin>
}
 8000454:	bf00      	nop
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <MQSensor_calc>:

void MQSensor_calc(MQSensor_Typdef *sensor)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	sensor->ppm = sensor->ppm;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	6a1a      	ldr	r2, [r3, #32]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	621a      	str	r2, [r3, #32]

	if (sensor->ppm > LEL) {
		// baos dong
	}
}
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr
	...

08000478 <heating_display>:

void heating_display()
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
	if ((HAL_GetTick()-MQSensor.previous_heating_time) < 60000 && MQSensor.is_heating) {
 800047e:	f000 fd61 	bl	8000f44 <HAL_GetTick>
 8000482:	4602      	mov	r2, r0
 8000484:	4b1c      	ldr	r3, [pc, #112]	; (80004f8 <heating_display+0x80>)
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	1ad3      	subs	r3, r2, r3
 800048a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800048e:	4293      	cmp	r3, r2
 8000490:	d807      	bhi.n	80004a2 <heating_display+0x2a>
 8000492:	4b19      	ldr	r3, [pc, #100]	; (80004f8 <heating_display+0x80>)
 8000494:	7f1b      	ldrb	r3, [r3, #28]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d003      	beq.n	80004a2 <heating_display+0x2a>
		stateDevice = MEASURING;
 800049a:	4b18      	ldr	r3, [pc, #96]	; (80004fc <heating_display+0x84>)
 800049c:	2203      	movs	r2, #3
 800049e:	701a      	strb	r2, [r3, #0]
		return;
 80004a0:	e026      	b.n	80004f0 <heating_display+0x78>
	}
	uint8_t tick = 20 - (HAL_GetTick()-MQSensor.start_heating_time)/1000;
 80004a2:	f000 fd4f 	bl	8000f44 <HAL_GetTick>
 80004a6:	4602      	mov	r2, r0
 80004a8:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <heating_display+0x80>)
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	1ad3      	subs	r3, r2, r3
 80004ae:	4a14      	ldr	r2, [pc, #80]	; (8000500 <heating_display+0x88>)
 80004b0:	fba2 2303 	umull	r2, r3, r2, r3
 80004b4:	099b      	lsrs	r3, r3, #6
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	f1c3 0314 	rsb	r3, r3, #20
 80004bc:	71fb      	strb	r3, [r7, #7]
	lcd_set_cursor(&hlcd, 0, 0);
 80004be:	2200      	movs	r2, #0
 80004c0:	2100      	movs	r1, #0
 80004c2:	4810      	ldr	r0, [pc, #64]	; (8000504 <heating_display+0x8c>)
 80004c4:	f003 fecc 	bl	8004260 <lcd_set_cursor>
	lcd_printf(&hlcd, "Heating %2ds", tick);
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	461a      	mov	r2, r3
 80004cc:	490e      	ldr	r1, [pc, #56]	; (8000508 <heating_display+0x90>)
 80004ce:	480d      	ldr	r0, [pc, #52]	; (8000504 <heating_display+0x8c>)
 80004d0:	f003 ff00 	bl	80042d4 <lcd_printf>
	if (tick == 255) {
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	2bff      	cmp	r3, #255	; 0xff
 80004d8:	d10a      	bne.n	80004f0 <heating_display+0x78>
		MQSensor.previous_heating_time = HAL_GetTick();
 80004da:	f000 fd33 	bl	8000f44 <HAL_GetTick>
 80004de:	4603      	mov	r3, r0
 80004e0:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <heating_display+0x80>)
 80004e2:	60d3      	str	r3, [r2, #12]
		MQSensor.is_heating = true;
 80004e4:	4b04      	ldr	r3, [pc, #16]	; (80004f8 <heating_display+0x80>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	771a      	strb	r2, [r3, #28]
		stateDevice = MEASURING;
 80004ea:	4b04      	ldr	r3, [pc, #16]	; (80004fc <heating_display+0x84>)
 80004ec:	2203      	movs	r2, #3
 80004ee:	701a      	strb	r2, [r3, #0]
	}
}
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	200001d4 	.word	0x200001d4
 80004fc:	200001f8 	.word	0x200001f8
 8000500:	10624dd3 	.word	0x10624dd3
 8000504:	200001ac 	.word	0x200001ac
 8000508:	08004d48 	.word	0x08004d48

0800050c <measuring_display>:

void measuring_display(bool isCpltMeas)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
	lcd_clear_display(&hlcd);
 8000516:	4811      	ldr	r0, [pc, #68]	; (800055c <measuring_display+0x50>)
 8000518:	f003 fe92 	bl	8004240 <lcd_clear_display>
	if (isCpltMeas)
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d00f      	beq.n	8000542 <measuring_display+0x36>
	{
		lcd_set_cursor(&hlcd, 0, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2100      	movs	r1, #0
 8000526:	480d      	ldr	r0, [pc, #52]	; (800055c <measuring_display+0x50>)
 8000528:	f003 fe9a 	bl	8004260 <lcd_set_cursor>
		lcd_printf(&hlcd, "ADC value %4ld", MQSensor.adc_value);
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <measuring_display+0x54>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	461a      	mov	r2, r3
 8000532:	490c      	ldr	r1, [pc, #48]	; (8000564 <measuring_display+0x58>)
 8000534:	4809      	ldr	r0, [pc, #36]	; (800055c <measuring_display+0x50>)
 8000536:	f003 fecd 	bl	80042d4 <lcd_printf>
		stateDevice = IDLE;
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <measuring_display+0x5c>)
 800053c:	2201      	movs	r2, #1
 800053e:	701a      	strb	r2, [r3, #0]
	}
	else {
		lcd_set_cursor(&hlcd, 0, 0);
		lcd_printf(&hlcd, "Measuring ...");
	}
}
 8000540:	e008      	b.n	8000554 <measuring_display+0x48>
		lcd_set_cursor(&hlcd, 0, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	2100      	movs	r1, #0
 8000546:	4805      	ldr	r0, [pc, #20]	; (800055c <measuring_display+0x50>)
 8000548:	f003 fe8a 	bl	8004260 <lcd_set_cursor>
		lcd_printf(&hlcd, "Measuring ...");
 800054c:	4907      	ldr	r1, [pc, #28]	; (800056c <measuring_display+0x60>)
 800054e:	4803      	ldr	r0, [pc, #12]	; (800055c <measuring_display+0x50>)
 8000550:	f003 fec0 	bl	80042d4 <lcd_printf>
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	200001ac 	.word	0x200001ac
 8000560:	200001d4 	.word	0x200001d4
 8000564:	08004d58 	.word	0x08004d58
 8000568:	200001f8 	.word	0x200001f8
 800056c:	08004d68 	.word	0x08004d68

08000570 <idle_display>:

void idle_display()
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	lcd_set_cursor(&hlcd, 1, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	2101      	movs	r1, #1
 8000578:	4804      	ldr	r0, [pc, #16]	; (800058c <idle_display+0x1c>)
 800057a:	f003 fe71 	bl	8004260 <lcd_set_cursor>
	lcd_printf(&hlcd, "Press to measure");
 800057e:	4904      	ldr	r1, [pc, #16]	; (8000590 <idle_display+0x20>)
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <idle_display+0x1c>)
 8000582:	f003 fea7 	bl	80042d4 <lcd_printf>
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	200001ac 	.word	0x200001ac
 8000590:	08004d78 	.word	0x08004d78

08000594 <store_data>:


void store_data()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &data.sTime, RTC_FORMAT_BIN);
 8000598:	2200      	movs	r2, #0
 800059a:	4908      	ldr	r1, [pc, #32]	; (80005bc <store_data+0x28>)
 800059c:	4808      	ldr	r0, [pc, #32]	; (80005c0 <store_data+0x2c>)
 800059e:	f003 f827 	bl	80035f0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &data.sDate, RTC_FORMAT_BIN);
 80005a2:	2200      	movs	r2, #0
 80005a4:	4907      	ldr	r1, [pc, #28]	; (80005c4 <store_data+0x30>)
 80005a6:	4806      	ldr	r0, [pc, #24]	; (80005c0 <store_data+0x2c>)
 80005a8:	f003 f9b0 	bl	800390c <HAL_RTC_GetDate>
	data.ppm = MQSensor.ppm;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <store_data+0x34>)
 80005ae:	6a1b      	ldr	r3, [r3, #32]
 80005b0:	4a02      	ldr	r2, [pc, #8]	; (80005bc <store_data+0x28>)
 80005b2:	f8c2 3007 	str.w	r3, [r2, #7]

	// store
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200001fc 	.word	0x200001fc
 80005c0:	20000150 	.word	0x20000150
 80005c4:	200001ff 	.word	0x200001ff
 80005c8:	200001d4 	.word	0x200001d4

080005cc <warning>:

void warning()
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, (MQSensor.adc_value > 500) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <warning+0x24>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005d8:	bf8c      	ite	hi
 80005da:	2301      	movhi	r3, #1
 80005dc:	2300      	movls	r3, #0
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	461a      	mov	r2, r3
 80005e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e6:	4803      	ldr	r0, [pc, #12]	; (80005f4 <warning+0x28>)
 80005e8:	f001 fc89 	bl	8001efe <HAL_GPIO_WritePin>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200001d4 	.word	0x200001d4
 80005f4:	40010c00 	.word	0x40010c00

080005f8 <communicating_handle>:

void communicating_handle()
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0

}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 fc43 	bl	8000e94 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 f865 	bl	80006dc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000612:	f000 f9d1 	bl	80009b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000616:	f000 f8ff 	bl	8000818 <MX_I2C1_Init>
  MX_I2C2_Init();
 800061a:	f000 f92b 	bl	8000874 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800061e:	f000 f9a1 	bl	8000964 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000622:	f000 f8bb 	bl	800079c <MX_ADC1_Init>
  MX_RTC_Init();
 8000626:	f000 f953 	bl	80008d0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(&hlcd, &hi2c2, LCD_ADDR_DEFAULT);
 800062a:	2227      	movs	r2, #39	; 0x27
 800062c:	4923      	ldr	r1, [pc, #140]	; (80006bc <main+0xb8>)
 800062e:	4824      	ldr	r0, [pc, #144]	; (80006c0 <main+0xbc>)
 8000630:	f003 fe87 	bl	8004342 <lcd_init>
  button_init(&button1, GPIOA, GPIO_PIN_8);
 8000634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000638:	4922      	ldr	r1, [pc, #136]	; (80006c4 <main+0xc0>)
 800063a:	4823      	ldr	r0, [pc, #140]	; (80006c8 <main+0xc4>)
 800063c:	f7ff fde6 	bl	800020c <button_init>
  MQSensor_Init(&MQSensor, HT_CTRL_GPIO_Port, HT_CTRL_Pin, &hadc1, ADC_CHANNEL_0);
 8000640:	2300      	movs	r3, #0
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <main+0xc8>)
 8000646:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800064a:	4921      	ldr	r1, [pc, #132]	; (80006d0 <main+0xcc>)
 800064c:	4821      	ldr	r0, [pc, #132]	; (80006d4 <main+0xd0>)
 800064e:	f7ff fe69 	bl	8000324 <MQSensor_Init>

  stateDevice = IDLE;
 8000652:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <main+0xd4>)
 8000654:	2201      	movs	r2, #1
 8000656:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  button_handle(&button1);
 8000658:	481b      	ldr	r0, [pc, #108]	; (80006c8 <main+0xc4>)
 800065a:	f7ff fde9 	bl	8000230 <button_handle>
	  switch (stateDevice) {
 800065e:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <main+0xd4>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	3b01      	subs	r3, #1
 8000664:	2b03      	cmp	r3, #3
 8000666:	d824      	bhi.n	80006b2 <main+0xae>
 8000668:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <main+0x6c>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	08000681 	.word	0x08000681
 8000674:	08000687 	.word	0x08000687
 8000678:	0800068d 	.word	0x0800068d
 800067c:	080006ad 	.word	0x080006ad
	  	case IDLE:
	  		idle_display();
 8000680:	f7ff ff76 	bl	8000570 <idle_display>
	  		break;
 8000684:	e019      	b.n	80006ba <main+0xb6>
		case HEATING:
			heating_display();
 8000686:	f7ff fef7 	bl	8000478 <heating_display>
			break;
 800068a:	e016      	b.n	80006ba <main+0xb6>
		case MEASURING:
			measuring_display(false);
 800068c:	2000      	movs	r0, #0
 800068e:	f7ff ff3d 	bl	800050c <measuring_display>
			MQSensor_get_adc(&MQSensor);
 8000692:	4810      	ldr	r0, [pc, #64]	; (80006d4 <main+0xd0>)
 8000694:	f7ff fe64 	bl	8000360 <MQSensor_get_adc>
			MQSensor_calc(&MQSensor);
 8000698:	480e      	ldr	r0, [pc, #56]	; (80006d4 <main+0xd0>)
 800069a:	f7ff fedf 	bl	800045c <MQSensor_calc>
			warning();
 800069e:	f7ff ff95 	bl	80005cc <warning>
			measuring_display(true);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f7ff ff32 	bl	800050c <measuring_display>
			store_data();
 80006a8:	f7ff ff74 	bl	8000594 <store_data>
		case COMMUNICATING:
			communicating_handle();
 80006ac:	f7ff ffa4 	bl	80005f8 <communicating_handle>
			break;
 80006b0:	e003      	b.n	80006ba <main+0xb6>
		default:
			stateDevice = IDLE;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <main+0xd4>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	701a      	strb	r2, [r3, #0]
			break;
 80006b8:	bf00      	nop
	  button_handle(&button1);
 80006ba:	e7cd      	b.n	8000658 <main+0x54>
 80006bc:	200000fc 	.word	0x200000fc
 80006c0:	200001ac 	.word	0x200001ac
 80006c4:	40010800 	.word	0x40010800
 80006c8:	200001bc 	.word	0x200001bc
 80006cc:	20000078 	.word	0x20000078
 80006d0:	40010c00 	.word	0x40010c00
 80006d4:	200001d4 	.word	0x200001d4
 80006d8:	200001f8 	.word	0x200001f8

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006e6:	2228      	movs	r2, #40	; 0x28
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f003 fe8e 	bl	800440c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800070c:	2305      	movs	r3, #5
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800071a:	2301      	movs	r3, #1
 800071c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071e:	2301      	movs	r3, #1
 8000720:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000722:	2302      	movs	r3, #2
 8000724:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800072c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000730:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000736:	4618      	mov	r0, r3
 8000738:	f002 f8ba 	bl	80028b0 <HAL_RCC_OscConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000742:	f000 f9b3 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000746:	230f      	movs	r3, #15
 8000748:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074a:	2302      	movs	r3, #2
 800074c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000756:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	2102      	movs	r1, #2
 8000762:	4618      	mov	r0, r3
 8000764:	f002 fb26 	bl	8002db4 <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800076e:	f000 f99d 	bl	8000aac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000772:	2303      	movs	r3, #3
 8000774:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800077a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800077c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000780:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4618      	mov	r0, r3
 8000786:	f002 fca3 	bl	80030d0 <HAL_RCCEx_PeriphCLKConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000790:	f000 f98c 	bl	8000aac <Error_Handler>
  }
}
 8000794:	bf00      	nop
 8000796:	3750      	adds	r7, #80	; 0x50
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_ADC1_Init+0x74>)
 80007ae:	4a19      	ldr	r2, [pc, #100]	; (8000814 <MX_ADC1_Init+0x78>)
 80007b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_ADC1_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_ADC1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_ADC1_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_ADC1_Init+0x74>)
 80007c6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80007ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007cc:	4b10      	ldr	r3, [pc, #64]	; (8000810 <MX_ADC1_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_ADC1_Init+0x74>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d8:	480d      	ldr	r0, [pc, #52]	; (8000810 <MX_ADC1_Init+0x74>)
 80007da:	f000 fbe1 	bl	8000fa0 <HAL_ADC_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80007e4:	f000 f962 	bl	8000aac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ec:	2301      	movs	r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80007f0:	2307      	movs	r3, #7
 80007f2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_ADC1_Init+0x74>)
 80007fa:	f000 fe95 	bl	8001528 <HAL_ADC_ConfigChannel>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000804:	f000 f952 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000078 	.word	0x20000078
 8000814:	40012400 	.word	0x40012400

08000818 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_I2C1_Init+0x50>)
 800081e:	4a13      	ldr	r2, [pc, #76]	; (800086c <MX_I2C1_Init+0x54>)
 8000820:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_I2C1_Init+0x50>)
 8000824:	4a12      	ldr	r2, [pc, #72]	; (8000870 <MX_I2C1_Init+0x58>)
 8000826:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_I2C1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_I2C1_Init+0x50>)
 8000836:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800083a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_I2C1_Init+0x50>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_I2C1_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_I2C1_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_I2C1_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_I2C1_Init+0x50>)
 8000856:	f001 fb83 	bl	8001f60 <HAL_I2C_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000860:	f000 f924 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200000a8 	.word	0x200000a8
 800086c:	40005400 	.word	0x40005400
 8000870:	000186a0 	.word	0x000186a0

08000874 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_Init 0 */
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_I2C2_Init+0x50>)
 800087a:	4a13      	ldr	r2, [pc, #76]	; (80008c8 <MX_I2C2_Init+0x54>)
 800087c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_I2C2_Init+0x50>)
 8000880:	4a12      	ldr	r2, [pc, #72]	; (80008cc <MX_I2C2_Init+0x58>)
 8000882:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_I2C2_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_I2C2_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_I2C2_Init+0x50>)
 8000892:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000896:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <MX_I2C2_Init+0x50>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_I2C2_Init+0x50>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a4:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <MX_I2C2_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_I2C2_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008b0:	4804      	ldr	r0, [pc, #16]	; (80008c4 <MX_I2C2_Init+0x50>)
 80008b2:	f001 fb55 	bl	8001f60 <HAL_I2C_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008bc:	f000 f8f6 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  /* USER CODE END I2C2_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200000fc 	.word	0x200000fc
 80008c8:	40005800 	.word	0x40005800
 80008cc:	000186a0 	.word	0x000186a0

080008d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2100      	movs	r1, #0
 80008da:	460a      	mov	r2, r1
 80008dc:	801a      	strh	r2, [r3, #0]
 80008de:	460a      	mov	r2, r1
 80008e0:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008e6:	4b1d      	ldr	r3, [pc, #116]	; (800095c <MX_RTC_Init+0x8c>)
 80008e8:	4a1d      	ldr	r2, [pc, #116]	; (8000960 <MX_RTC_Init+0x90>)
 80008ea:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80008ec:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_RTC_Init+0x8c>)
 80008ee:	f04f 32ff 	mov.w	r2, #4294967295
 80008f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_RTC_Init+0x8c>)
 80008f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008fa:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008fc:	4817      	ldr	r0, [pc, #92]	; (800095c <MX_RTC_Init+0x8c>)
 80008fe:	f002 fd53 	bl	80033a8 <HAL_RTC_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000908:	f000 f8d0 	bl	8000aac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800090c:	2300      	movs	r3, #0
 800090e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000910:	2300      	movs	r3, #0
 8000912:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000914:	2300      	movs	r3, #0
 8000916:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2201      	movs	r2, #1
 800091c:	4619      	mov	r1, r3
 800091e:	480f      	ldr	r0, [pc, #60]	; (800095c <MX_RTC_Init+0x8c>)
 8000920:	f002 fdce 	bl	80034c0 <HAL_RTC_SetTime>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800092a:	f000 f8bf 	bl	8000aac <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800092e:	2301      	movs	r3, #1
 8000930:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000932:	2301      	movs	r3, #1
 8000934:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000936:	2301      	movs	r3, #1
 8000938:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 800093a:	2300      	movs	r3, #0
 800093c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800093e:	463b      	mov	r3, r7
 8000940:	2201      	movs	r2, #1
 8000942:	4619      	mov	r1, r3
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_RTC_Init+0x8c>)
 8000946:	f002 ff2b 	bl	80037a0 <HAL_RTC_SetDate>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000950:	f000 f8ac 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000150 	.word	0x20000150
 8000960:	40002800 	.word	0x40002800

08000964 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <MX_USART1_UART_Init+0x50>)
 800096c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 800099c:	f003 faf5 	bl	8003f8a <HAL_UART_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009a6:	f000 f881 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000164 	.word	0x20000164
 80009b4:	40013800 	.word	0x40013800

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009cc:	4b2e      	ldr	r3, [pc, #184]	; (8000a88 <MX_GPIO_Init+0xd0>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a2d      	ldr	r2, [pc, #180]	; (8000a88 <MX_GPIO_Init+0xd0>)
 80009d2:	f043 0310 	orr.w	r3, r3, #16
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b2b      	ldr	r3, [pc, #172]	; (8000a88 <MX_GPIO_Init+0xd0>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0310 	and.w	r3, r3, #16
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e4:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <MX_GPIO_Init+0xd0>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a27      	ldr	r2, [pc, #156]	; (8000a88 <MX_GPIO_Init+0xd0>)
 80009ea:	f043 0320 	orr.w	r3, r3, #32
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <MX_GPIO_Init+0xd0>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0320 	and.w	r3, r3, #32
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <MX_GPIO_Init+0xd0>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a21      	ldr	r2, [pc, #132]	; (8000a88 <MX_GPIO_Init+0xd0>)
 8000a02:	f043 0304 	orr.w	r3, r3, #4
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <MX_GPIO_Init+0xd0>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0304 	and.w	r3, r3, #4
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a14:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <MX_GPIO_Init+0xd0>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a1b      	ldr	r2, [pc, #108]	; (8000a88 <MX_GPIO_Init+0xd0>)
 8000a1a:	f043 0308 	orr.w	r3, r3, #8
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <MX_GPIO_Init+0xd0>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0308 	and.w	r3, r3, #8
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|HT_CTRL_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000a32:	4816      	ldr	r0, [pc, #88]	; (8000a8c <MX_GPIO_Init+0xd4>)
 8000a34:	f001 fa63 	bl	8001efe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUZZER_Pin HT_CTRL_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|HT_CTRL_Pin;
 8000a38:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480e      	ldr	r0, [pc, #56]	; (8000a8c <MX_GPIO_Init+0xd4>)
 8000a52:	f001 f8b9 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_GPIO_Init+0xd8>)
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480a      	ldr	r0, [pc, #40]	; (8000a94 <MX_GPIO_Init+0xdc>)
 8000a6c:	f001 f8ac 	bl	8001bc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2102      	movs	r1, #2
 8000a74:	2017      	movs	r0, #23
 8000a76:	f001 f870 	bl	8001b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a7a:	2017      	movs	r0, #23
 8000a7c:	f001 f889 	bl	8001b92 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a80:	bf00      	nop
 8000a82:	3720      	adds	r7, #32
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40010c00 	.word	0x40010c00
 8000a90:	10210000 	.word	0x10210000
 8000a94:	40010800 	.word	0x40010800

08000a98 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	80fb      	strh	r3, [r7, #6]
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  if (GPIO_Pin == GPIO_PIN_8) {

  }
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6193      	str	r3, [r2, #24]
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_MspInit+0x5c>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <HAL_MspInit+0x5c>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	61d3      	str	r3, [r2, #28]
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_MspInit+0x60>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <HAL_MspInit+0x60>)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010000 	.word	0x40010000

08000b1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <HAL_ADC_MspInit+0x6c>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d121      	bne.n	8000b80 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <HAL_ADC_MspInit+0x70>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <HAL_ADC_MspInit+0x70>)
 8000b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_ADC_MspInit+0x70>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <HAL_ADC_MspInit+0x70>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <HAL_ADC_MspInit+0x70>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_ADC_MspInit+0x70>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = MQ2_ADC_Pin;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b70:	2303      	movs	r3, #3
 8000b72:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(MQ2_ADC_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <HAL_ADC_MspInit+0x74>)
 8000b7c:	f001 f824 	bl	8001bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b80:	bf00      	nop
 8000b82:	3720      	adds	r7, #32
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40012400 	.word	0x40012400
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40010800 	.word	0x40010800

08000b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0318 	add.w	r3, r7, #24
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a2b      	ldr	r2, [pc, #172]	; (8000c5c <HAL_I2C_MspInit+0xc8>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d124      	bne.n	8000bfe <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb4:	4b2a      	ldr	r3, [pc, #168]	; (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a29      	ldr	r2, [pc, #164]	; (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000bba:	f043 0308 	orr.w	r3, r3, #8
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0308 	and.w	r3, r3, #8
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bcc:	23c0      	movs	r3, #192	; 0xc0
 8000bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd0:	2312      	movs	r3, #18
 8000bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd8:	f107 0318 	add.w	r3, r7, #24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4821      	ldr	r0, [pc, #132]	; (8000c64 <HAL_I2C_MspInit+0xd0>)
 8000be0:	f000 fff2 	bl	8001bc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000be4:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000be6:	69db      	ldr	r3, [r3, #28]
 8000be8:	4a1d      	ldr	r2, [pc, #116]	; (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000bea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bee:	61d3      	str	r3, [r2, #28]
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000bf2:	69db      	ldr	r3, [r3, #28]
 8000bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000bfc:	e029      	b.n	8000c52 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <HAL_I2C_MspInit+0xd4>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d124      	bne.n	8000c52 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c08:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000c0e:	f043 0308 	orr.w	r3, r3, #8
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0308 	and.w	r3, r3, #8
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c26:	2312      	movs	r3, #18
 8000c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f107 0318 	add.w	r3, r7, #24
 8000c32:	4619      	mov	r1, r3
 8000c34:	480b      	ldr	r0, [pc, #44]	; (8000c64 <HAL_I2C_MspInit+0xd0>)
 8000c36:	f000 ffc7 	bl	8001bc8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000c40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c44:	61d3      	str	r3, [r2, #28]
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	; 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40005400 	.word	0x40005400
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40010c00 	.word	0x40010c00
 8000c68:	40005800 	.word	0x40005800

08000c6c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0f      	ldr	r2, [pc, #60]	; (8000cb8 <HAL_RTC_MspInit+0x4c>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d118      	bne.n	8000cb0 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000c7e:	f001 fe0b 	bl	8002898 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_RTC_MspInit+0x50>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <HAL_RTC_MspInit+0x50>)
 8000c88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c8c:	61d3      	str	r3, [r2, #28]
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_RTC_MspInit+0x50>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <HAL_RTC_MspInit+0x54>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 1, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 ff58 	bl	8001b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000caa:	2003      	movs	r0, #3
 8000cac:	f000 ff71 	bl	8001b92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40002800 	.word	0x40002800
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	4242043c 	.word	0x4242043c

08000cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a1c      	ldr	r2, [pc, #112]	; (8000d50 <HAL_UART_MspInit+0x8c>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d131      	bne.n	8000d48 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <HAL_UART_MspInit+0x90>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a1a      	ldr	r2, [pc, #104]	; (8000d54 <HAL_UART_MspInit+0x90>)
 8000cea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <HAL_UART_MspInit+0x90>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <HAL_UART_MspInit+0x90>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <HAL_UART_MspInit+0x90>)
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_UART_MspInit+0x90>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0310 	add.w	r3, r7, #16
 8000d26:	4619      	mov	r1, r3
 8000d28:	480b      	ldr	r0, [pc, #44]	; (8000d58 <HAL_UART_MspInit+0x94>)
 8000d2a:	f000 ff4d 	bl	8001bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	4619      	mov	r1, r3
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <HAL_UART_MspInit+0x94>)
 8000d44:	f000 ff40 	bl	8001bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d48:	bf00      	nop
 8000d4a:	3720      	adds	r7, #32
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40013800 	.word	0x40013800
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40010800 	.word	0x40010800

08000d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <NMI_Handler+0x4>

08000d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <MemManage_Handler+0x4>

08000d6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <BusFault_Handler+0x4>

08000d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <UsageFault_Handler+0x4>

08000d7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr

08000d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr

08000d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr

08000d9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da2:	f000 f8bd 	bl	8000f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <RTC_IRQHandler+0x10>)
 8000db2:	f003 f8a1 	bl	8003ef8 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000150 	.word	0x20000150

08000dc0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8000dc4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000dc8:	f001 f8b2 	bl	8001f30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <_sbrk+0x5c>)
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <_sbrk+0x60>)
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <_sbrk+0x64>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <_sbrk+0x68>)
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d207      	bcs.n	8000e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e00:	f003 fb0c 	bl	800441c <__errno>
 8000e04:	4603      	mov	r3, r0
 8000e06:	220c      	movs	r2, #12
 8000e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	e009      	b.n	8000e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <_sbrk+0x64>)
 8000e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20005000 	.word	0x20005000
 8000e30:	00000400 	.word	0x00000400
 8000e34:	20000208 	.word	0x20000208
 8000e38:	20000358 	.word	0x20000358

08000e3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e48:	f7ff fff8 	bl	8000e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e4c:	480b      	ldr	r0, [pc, #44]	; (8000e7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e4e:	490c      	ldr	r1, [pc, #48]	; (8000e80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e50:	4a0c      	ldr	r2, [pc, #48]	; (8000e84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e64:	4c09      	ldr	r4, [pc, #36]	; (8000e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e72:	f003 fad9 	bl	8004428 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e76:	f7ff fbc5 	bl	8000604 <main>
  bx lr
 8000e7a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e84:	08004e08 	.word	0x08004e08
  ldr r2, =_sbss
 8000e88:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e8c:	20000358 	.word	0x20000358

08000e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC1_2_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <HAL_Init+0x28>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <HAL_Init+0x28>)
 8000e9e:	f043 0310 	orr.w	r3, r3, #16
 8000ea2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 fe4d 	bl	8001b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eaa:	200f      	movs	r0, #15
 8000eac:	f000 f808 	bl	8000ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb0:	f7ff fe02 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40022000 	.word	0x40022000

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x54>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_InitTick+0x58>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fe65 	bl	8001bae <HAL_SYSTICK_Config>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00e      	b.n	8000f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b0f      	cmp	r3, #15
 8000ef2:	d80a      	bhi.n	8000f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f000 fe2d 	bl	8001b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <HAL_InitTick+0x5c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e000      	b.n	8000f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000004 	.word	0x20000004

08000f20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_IncTick+0x1c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_IncTick+0x20>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a03      	ldr	r2, [pc, #12]	; (8000f40 <HAL_IncTick+0x20>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	2000020c 	.word	0x2000020c

08000f44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <HAL_GetTick+0x10>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	2000020c 	.word	0x2000020c

08000f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f60:	f7ff fff0 	bl	8000f44 <HAL_GetTick>
 8000f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f70:	d005      	beq.n	8000f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_Delay+0x44>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f7e:	bf00      	nop
 8000f80:	f7ff ffe0 	bl	8000f44 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d8f7      	bhi.n	8000f80 <HAL_Delay+0x28>
  {
  }
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000008 	.word	0x20000008

08000fa0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e0be      	b.n	8001140 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d109      	bne.n	8000fe4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff fd9c 	bl	8000b1c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 fbf1 	bl	80017cc <ADC_ConversionStop_Disable>
 8000fea:	4603      	mov	r3, r0
 8000fec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff2:	f003 0310 	and.w	r3, r3, #16
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f040 8099 	bne.w	800112e <HAL_ADC_Init+0x18e>
 8000ffc:	7dfb      	ldrb	r3, [r7, #23]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f040 8095 	bne.w	800112e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001008:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800100c:	f023 0302 	bic.w	r3, r3, #2
 8001010:	f043 0202 	orr.w	r2, r3, #2
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001020:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7b1b      	ldrb	r3, [r3, #12]
 8001026:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001028:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	4313      	orrs	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001038:	d003      	beq.n	8001042 <HAL_ADC_Init+0xa2>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d102      	bne.n	8001048 <HAL_ADC_Init+0xa8>
 8001042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001046:	e000      	b.n	800104a <HAL_ADC_Init+0xaa>
 8001048:	2300      	movs	r3, #0
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7d1b      	ldrb	r3, [r3, #20]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d119      	bne.n	800108c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7b1b      	ldrb	r3, [r3, #12]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d109      	bne.n	8001074 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	3b01      	subs	r3, #1
 8001066:	035a      	lsls	r2, r3, #13
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	e00b      	b.n	800108c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001078:	f043 0220 	orr.w	r2, r3, #32
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001084:	f043 0201 	orr.w	r2, r3, #1
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	430a      	orrs	r2, r1
 800109e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	4b28      	ldr	r3, [pc, #160]	; (8001148 <HAL_ADC_Init+0x1a8>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	6812      	ldr	r2, [r2, #0]
 80010ae:	68b9      	ldr	r1, [r7, #8]
 80010b0:	430b      	orrs	r3, r1
 80010b2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010bc:	d003      	beq.n	80010c6 <HAL_ADC_Init+0x126>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d104      	bne.n	80010d0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	051b      	lsls	r3, r3, #20
 80010ce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_ADC_Init+0x1ac>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d10b      	bne.n	800110c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fe:	f023 0303 	bic.w	r3, r3, #3
 8001102:	f043 0201 	orr.w	r2, r3, #1
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800110a:	e018      	b.n	800113e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001110:	f023 0312 	bic.w	r3, r3, #18
 8001114:	f043 0210 	orr.w	r2, r3, #16
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001120:	f043 0201 	orr.w	r2, r3, #1
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800112c:	e007      	b.n	800113e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001132:	f043 0210 	orr.w	r2, r3, #16
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800113e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	ffe1f7fd 	.word	0xffe1f7fd
 800114c:	ff1f0efe 	.word	0xff1f0efe

08001150 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001162:	2b01      	cmp	r3, #1
 8001164:	d101      	bne.n	800116a <HAL_ADC_Start+0x1a>
 8001166:	2302      	movs	r3, #2
 8001168:	e098      	b.n	800129c <HAL_ADC_Start+0x14c>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 fad0 	bl	8001718 <ADC_Enable>
 8001178:	4603      	mov	r3, r0
 800117a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	2b00      	cmp	r3, #0
 8001180:	f040 8087 	bne.w	8001292 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800118c:	f023 0301 	bic.w	r3, r3, #1
 8001190:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a41      	ldr	r2, [pc, #260]	; (80012a4 <HAL_ADC_Start+0x154>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d105      	bne.n	80011ae <HAL_ADC_Start+0x5e>
 80011a2:	4b41      	ldr	r3, [pc, #260]	; (80012a8 <HAL_ADC_Start+0x158>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d115      	bne.n	80011da <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d026      	beq.n	8001216 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011d8:	e01d      	b.n	8001216 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a2f      	ldr	r2, [pc, #188]	; (80012a8 <HAL_ADC_Start+0x158>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d004      	beq.n	80011fa <HAL_ADC_Start+0xaa>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a2b      	ldr	r2, [pc, #172]	; (80012a4 <HAL_ADC_Start+0x154>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d10d      	bne.n	8001216 <HAL_ADC_Start+0xc6>
 80011fa:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <HAL_ADC_Start+0x158>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001202:	2b00      	cmp	r3, #0
 8001204:	d007      	beq.n	8001216 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800120e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d006      	beq.n	8001230 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001226:	f023 0206 	bic.w	r2, r3, #6
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	62da      	str	r2, [r3, #44]	; 0x2c
 800122e:	e002      	b.n	8001236 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f06f 0202 	mvn.w	r2, #2
 8001246:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001252:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001256:	d113      	bne.n	8001280 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800125c:	4a11      	ldr	r2, [pc, #68]	; (80012a4 <HAL_ADC_Start+0x154>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d105      	bne.n	800126e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_ADC_Start+0x158>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800126a:	2b00      	cmp	r3, #0
 800126c:	d108      	bne.n	8001280 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	e00c      	b.n	800129a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	e003      	b.n	800129a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800129a:	7bfb      	ldrb	r3, [r7, #15]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40012800 	.word	0x40012800
 80012a8:	40012400 	.word	0x40012400

080012ac <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d101      	bne.n	80012c6 <HAL_ADC_Stop+0x1a>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e01a      	b.n	80012fc <HAL_ADC_Stop+0x50>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 fa7c 	bl	80017cc <ADC_ConversionStop_Disable>
 80012d4:	4603      	mov	r3, r0
 80012d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d109      	bne.n	80012f2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012e6:	f023 0301 	bic.w	r3, r3, #1
 80012ea:	f043 0201 	orr.w	r2, r3, #1
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001304:	b590      	push	{r4, r7, lr}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800131a:	f7ff fe13 	bl	8000f44 <HAL_GetTick>
 800131e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00b      	beq.n	8001346 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001332:	f043 0220 	orr.w	r2, r3, #32
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e0d3      	b.n	80014ee <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001350:	2b00      	cmp	r3, #0
 8001352:	d131      	bne.n	80013b8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800135e:	2b00      	cmp	r3, #0
 8001360:	d12a      	bne.n	80013b8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001362:	e021      	b.n	80013a8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136a:	d01d      	beq.n	80013a8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d007      	beq.n	8001382 <HAL_ADC_PollForConversion+0x7e>
 8001372:	f7ff fde7 	bl	8000f44 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d212      	bcs.n	80013a8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10b      	bne.n	80013a8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001394:	f043 0204 	orr.w	r2, r3, #4
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e0a2      	b.n	80014ee <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0d6      	beq.n	8001364 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80013b6:	e070      	b.n	800149a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80013b8:	4b4f      	ldr	r3, [pc, #316]	; (80014f8 <HAL_ADC_PollForConversion+0x1f4>)
 80013ba:	681c      	ldr	r4, [r3, #0]
 80013bc:	2002      	movs	r0, #2
 80013be:	f001 ff3d 	bl	800323c <HAL_RCCEx_GetPeriphCLKFreq>
 80013c2:	4603      	mov	r3, r0
 80013c4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6919      	ldr	r1, [r3, #16]
 80013ce:	4b4b      	ldr	r3, [pc, #300]	; (80014fc <HAL_ADC_PollForConversion+0x1f8>)
 80013d0:	400b      	ands	r3, r1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d118      	bne.n	8001408 <HAL_ADC_PollForConversion+0x104>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68d9      	ldr	r1, [r3, #12]
 80013dc:	4b48      	ldr	r3, [pc, #288]	; (8001500 <HAL_ADC_PollForConversion+0x1fc>)
 80013de:	400b      	ands	r3, r1
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d111      	bne.n	8001408 <HAL_ADC_PollForConversion+0x104>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6919      	ldr	r1, [r3, #16]
 80013ea:	4b46      	ldr	r3, [pc, #280]	; (8001504 <HAL_ADC_PollForConversion+0x200>)
 80013ec:	400b      	ands	r3, r1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d108      	bne.n	8001404 <HAL_ADC_PollForConversion+0x100>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68d9      	ldr	r1, [r3, #12]
 80013f8:	4b43      	ldr	r3, [pc, #268]	; (8001508 <HAL_ADC_PollForConversion+0x204>)
 80013fa:	400b      	ands	r3, r1
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <HAL_ADC_PollForConversion+0x100>
 8001400:	2314      	movs	r3, #20
 8001402:	e020      	b.n	8001446 <HAL_ADC_PollForConversion+0x142>
 8001404:	2329      	movs	r3, #41	; 0x29
 8001406:	e01e      	b.n	8001446 <HAL_ADC_PollForConversion+0x142>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6919      	ldr	r1, [r3, #16]
 800140e:	4b3d      	ldr	r3, [pc, #244]	; (8001504 <HAL_ADC_PollForConversion+0x200>)
 8001410:	400b      	ands	r3, r1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d106      	bne.n	8001424 <HAL_ADC_PollForConversion+0x120>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68d9      	ldr	r1, [r3, #12]
 800141c:	4b3a      	ldr	r3, [pc, #232]	; (8001508 <HAL_ADC_PollForConversion+0x204>)
 800141e:	400b      	ands	r3, r1
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00d      	beq.n	8001440 <HAL_ADC_PollForConversion+0x13c>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6919      	ldr	r1, [r3, #16]
 800142a:	4b38      	ldr	r3, [pc, #224]	; (800150c <HAL_ADC_PollForConversion+0x208>)
 800142c:	400b      	ands	r3, r1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d108      	bne.n	8001444 <HAL_ADC_PollForConversion+0x140>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68d9      	ldr	r1, [r3, #12]
 8001438:	4b34      	ldr	r3, [pc, #208]	; (800150c <HAL_ADC_PollForConversion+0x208>)
 800143a:	400b      	ands	r3, r1
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_ADC_PollForConversion+0x140>
 8001440:	2354      	movs	r3, #84	; 0x54
 8001442:	e000      	b.n	8001446 <HAL_ADC_PollForConversion+0x142>
 8001444:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800144c:	e021      	b.n	8001492 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001454:	d01a      	beq.n	800148c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d007      	beq.n	800146c <HAL_ADC_PollForConversion+0x168>
 800145c:	f7ff fd72 	bl	8000f44 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d20f      	bcs.n	800148c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	429a      	cmp	r2, r3
 8001472:	d90b      	bls.n	800148c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001478:	f043 0204 	orr.w	r2, r3, #4
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e030      	b.n	80014ee <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	3301      	adds	r3, #1
 8001490:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	429a      	cmp	r2, r3
 8001498:	d8d9      	bhi.n	800144e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f06f 0212 	mvn.w	r2, #18
 80014a2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80014ba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014be:	d115      	bne.n	80014ec <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d111      	bne.n	80014ec <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d105      	bne.n	80014ec <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	f043 0201 	orr.w	r2, r3, #1
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	371c      	adds	r7, #28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd90      	pop	{r4, r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000000 	.word	0x20000000
 80014fc:	24924924 	.word	0x24924924
 8001500:	00924924 	.word	0x00924924
 8001504:	12492492 	.word	0x12492492
 8001508:	00492492 	.word	0x00492492
 800150c:	00249249 	.word	0x00249249

08001510 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x20>
 8001544:	2302      	movs	r3, #2
 8001546:	e0dc      	b.n	8001702 <HAL_ADC_ConfigChannel+0x1da>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b06      	cmp	r3, #6
 8001556:	d81c      	bhi.n	8001592 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	3b05      	subs	r3, #5
 800156a:	221f      	movs	r2, #31
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	4019      	ands	r1, r3
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	3b05      	subs	r3, #5
 8001584:	fa00 f203 	lsl.w	r2, r0, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	635a      	str	r2, [r3, #52]	; 0x34
 8001590:	e03c      	b.n	800160c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b0c      	cmp	r3, #12
 8001598:	d81c      	bhi.n	80015d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	3b23      	subs	r3, #35	; 0x23
 80015ac:	221f      	movs	r2, #31
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	4019      	ands	r1, r3
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	3b23      	subs	r3, #35	; 0x23
 80015c6:	fa00 f203 	lsl.w	r2, r0, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	631a      	str	r2, [r3, #48]	; 0x30
 80015d2:	e01b      	b.n	800160c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	3b41      	subs	r3, #65	; 0x41
 80015e6:	221f      	movs	r2, #31
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	4019      	ands	r1, r3
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	3b41      	subs	r3, #65	; 0x41
 8001600:	fa00 f203 	lsl.w	r2, r0, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b09      	cmp	r3, #9
 8001612:	d91c      	bls.n	800164e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68d9      	ldr	r1, [r3, #12]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	3b1e      	subs	r3, #30
 8001626:	2207      	movs	r2, #7
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	4019      	ands	r1, r3
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	6898      	ldr	r0, [r3, #8]
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4613      	mov	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4413      	add	r3, r2
 800163e:	3b1e      	subs	r3, #30
 8001640:	fa00 f203 	lsl.w	r2, r0, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	e019      	b.n	8001682 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6919      	ldr	r1, [r3, #16]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4613      	mov	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4413      	add	r3, r2
 800165e:	2207      	movs	r2, #7
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	4019      	ands	r1, r3
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	6898      	ldr	r0, [r3, #8]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4613      	mov	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4413      	add	r3, r2
 8001676:	fa00 f203 	lsl.w	r2, r0, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b10      	cmp	r3, #16
 8001688:	d003      	beq.n	8001692 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800168e:	2b11      	cmp	r3, #17
 8001690:	d132      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a1d      	ldr	r2, [pc, #116]	; (800170c <HAL_ADC_ConfigChannel+0x1e4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d125      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d126      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016b8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b10      	cmp	r3, #16
 80016c0:	d11a      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016c2:	4b13      	ldr	r3, [pc, #76]	; (8001710 <HAL_ADC_ConfigChannel+0x1e8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a13      	ldr	r2, [pc, #76]	; (8001714 <HAL_ADC_ConfigChannel+0x1ec>)
 80016c8:	fba2 2303 	umull	r2, r3, r2, r3
 80016cc:	0c9a      	lsrs	r2, r3, #18
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016d8:	e002      	b.n	80016e0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	3b01      	subs	r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f9      	bne.n	80016da <HAL_ADC_ConfigChannel+0x1b2>
 80016e6:	e007      	b.n	80016f8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	f043 0220 	orr.w	r2, r3, #32
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001700:	7bfb      	ldrb	r3, [r7, #15]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	40012400 	.word	0x40012400
 8001710:	20000000 	.word	0x20000000
 8001714:	431bde83 	.word	0x431bde83

08001718 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b01      	cmp	r3, #1
 8001734:	d040      	beq.n	80017b8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f042 0201 	orr.w	r2, r2, #1
 8001744:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001746:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <ADC_Enable+0xac>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a1f      	ldr	r2, [pc, #124]	; (80017c8 <ADC_Enable+0xb0>)
 800174c:	fba2 2303 	umull	r2, r3, r2, r3
 8001750:	0c9b      	lsrs	r3, r3, #18
 8001752:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001754:	e002      	b.n	800175c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	3b01      	subs	r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f9      	bne.n	8001756 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001762:	f7ff fbef 	bl	8000f44 <HAL_GetTick>
 8001766:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001768:	e01f      	b.n	80017aa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800176a:	f7ff fbeb 	bl	8000f44 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d918      	bls.n	80017aa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b01      	cmp	r3, #1
 8001784:	d011      	beq.n	80017aa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178a:	f043 0210 	orr.w	r2, r3, #16
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001796:	f043 0201 	orr.w	r2, r3, #1
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e007      	b.n	80017ba <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d1d8      	bne.n	800176a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000000 	.word	0x20000000
 80017c8:	431bde83 	.word	0x431bde83

080017cc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d12e      	bne.n	8001844 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0201 	bic.w	r2, r2, #1
 80017f4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017f6:	f7ff fba5 	bl	8000f44 <HAL_GetTick>
 80017fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017fc:	e01b      	b.n	8001836 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017fe:	f7ff fba1 	bl	8000f44 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d914      	bls.n	8001836 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b01      	cmp	r3, #1
 8001818:	d10d      	bne.n	8001836 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181e:	f043 0210 	orr.w	r2, r3, #16
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182a:	f043 0201 	orr.w	r2, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e007      	b.n	8001846 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b01      	cmp	r3, #1
 8001842:	d0dc      	beq.n	80017fe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001866:	2b01      	cmp	r3, #1
 8001868:	d101      	bne.n	800186e <HAL_ADCEx_Calibration_Start+0x1e>
 800186a:	2302      	movs	r3, #2
 800186c:	e097      	b.n	800199e <HAL_ADCEx_Calibration_Start+0x14e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffa8 	bl	80017cc <ADC_ConversionStop_Disable>
 800187c:	4603      	mov	r3, r0
 800187e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff49 	bl	8001718 <ADC_Enable>
 8001886:	4603      	mov	r3, r0
 8001888:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800188a:	7dfb      	ldrb	r3, [r7, #23]
 800188c:	2b00      	cmp	r3, #0
 800188e:	f040 8081 	bne.w	8001994 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001896:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800189a:	f023 0302 	bic.w	r3, r3, #2
 800189e:	f043 0202 	orr.w	r2, r3, #2
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80018a6:	4b40      	ldr	r3, [pc, #256]	; (80019a8 <HAL_ADCEx_Calibration_Start+0x158>)
 80018a8:	681c      	ldr	r4, [r3, #0]
 80018aa:	2002      	movs	r0, #2
 80018ac:	f001 fcc6 	bl	800323c <HAL_RCCEx_GetPeriphCLKFreq>
 80018b0:	4603      	mov	r3, r0
 80018b2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80018b6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80018b8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80018ba:	e002      	b.n	80018c2 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	3b01      	subs	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f9      	bne.n	80018bc <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0208 	orr.w	r2, r2, #8
 80018d6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80018d8:	f7ff fb34 	bl	8000f44 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80018de:	e01b      	b.n	8001918 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80018e0:	f7ff fb30 	bl	8000f44 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b0a      	cmp	r3, #10
 80018ec:	d914      	bls.n	8001918 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00d      	beq.n	8001918 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001900:	f023 0312 	bic.w	r3, r3, #18
 8001904:	f043 0210 	orr.w	r2, r3, #16
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e042      	b.n	800199e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1dc      	bne.n	80018e0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0204 	orr.w	r2, r2, #4
 8001934:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001936:	f7ff fb05 	bl	8000f44 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800193c:	e01b      	b.n	8001976 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800193e:	f7ff fb01 	bl	8000f44 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b0a      	cmp	r3, #10
 800194a:	d914      	bls.n	8001976 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 0304 	and.w	r3, r3, #4
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00d      	beq.n	8001976 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195e:	f023 0312 	bic.w	r3, r3, #18
 8001962:	f043 0210 	orr.w	r2, r3, #16
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e013      	b.n	800199e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1dc      	bne.n	800193e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001988:	f023 0303 	bic.w	r3, r3, #3
 800198c:	f043 0201 	orr.w	r2, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800199c:	7dfb      	ldrb	r3, [r7, #23]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	371c      	adds	r7, #28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd90      	pop	{r4, r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000000 	.word	0x20000000

080019ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c8:	4013      	ands	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019de:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <__NVIC_SetPriorityGrouping+0x44>)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	60d3      	str	r3, [r2, #12]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <__NVIC_GetPriorityGrouping+0x18>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	0a1b      	lsrs	r3, r3, #8
 80019fe:	f003 0307 	and.w	r3, r3, #7
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	db0b      	blt.n	8001a3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	f003 021f 	and.w	r2, r3, #31
 8001a28:	4906      	ldr	r1, [pc, #24]	; (8001a44 <__NVIC_EnableIRQ+0x34>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	2001      	movs	r0, #1
 8001a32:	fa00 f202 	lsl.w	r2, r0, r2
 8001a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	e000e100 	.word	0xe000e100

08001a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	6039      	str	r1, [r7, #0]
 8001a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	db0a      	blt.n	8001a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	490c      	ldr	r1, [pc, #48]	; (8001a94 <__NVIC_SetPriority+0x4c>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	0112      	lsls	r2, r2, #4
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a70:	e00a      	b.n	8001a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	4908      	ldr	r1, [pc, #32]	; (8001a98 <__NVIC_SetPriority+0x50>)
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	3b04      	subs	r3, #4
 8001a80:	0112      	lsls	r2, r2, #4
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	440b      	add	r3, r1
 8001a86:	761a      	strb	r2, [r3, #24]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000e100 	.word	0xe000e100
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b089      	sub	sp, #36	; 0x24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f1c3 0307 	rsb	r3, r3, #7
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	bf28      	it	cs
 8001aba:	2304      	movcs	r3, #4
 8001abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	2b06      	cmp	r3, #6
 8001ac4:	d902      	bls.n	8001acc <NVIC_EncodePriority+0x30>
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3b03      	subs	r3, #3
 8001aca:	e000      	b.n	8001ace <NVIC_EncodePriority+0x32>
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43da      	mvns	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	401a      	ands	r2, r3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	fa01 f303 	lsl.w	r3, r1, r3
 8001aee:	43d9      	mvns	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	4313      	orrs	r3, r2
         );
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3724      	adds	r7, #36	; 0x24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b10:	d301      	bcc.n	8001b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00f      	b.n	8001b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <SysTick_Config+0x40>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1e:	210f      	movs	r1, #15
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f7ff ff90 	bl	8001a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <SysTick_Config+0x40>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2e:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <SysTick_Config+0x40>)
 8001b30:	2207      	movs	r2, #7
 8001b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	e000e010 	.word	0xe000e010

08001b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ff2d 	bl	80019ac <__NVIC_SetPriorityGrouping>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b6c:	f7ff ff42 	bl	80019f4 <__NVIC_GetPriorityGrouping>
 8001b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	6978      	ldr	r0, [r7, #20]
 8001b78:	f7ff ff90 	bl	8001a9c <NVIC_EncodePriority>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff5f 	bl	8001a48 <__NVIC_SetPriority>
}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff35 	bl	8001a10 <__NVIC_EnableIRQ>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ffa2 	bl	8001b00 <SysTick_Config>
 8001bbc:	4603      	mov	r3, r0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b08b      	sub	sp, #44	; 0x2c
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bda:	e169      	b.n	8001eb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	f040 8158 	bne.w	8001eaa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4a9a      	ldr	r2, [pc, #616]	; (8001e68 <HAL_GPIO_Init+0x2a0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d05e      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c04:	4a98      	ldr	r2, [pc, #608]	; (8001e68 <HAL_GPIO_Init+0x2a0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d875      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c0a:	4a98      	ldr	r2, [pc, #608]	; (8001e6c <HAL_GPIO_Init+0x2a4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d058      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c10:	4a96      	ldr	r2, [pc, #600]	; (8001e6c <HAL_GPIO_Init+0x2a4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d86f      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c16:	4a96      	ldr	r2, [pc, #600]	; (8001e70 <HAL_GPIO_Init+0x2a8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d052      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c1c:	4a94      	ldr	r2, [pc, #592]	; (8001e70 <HAL_GPIO_Init+0x2a8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d869      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c22:	4a94      	ldr	r2, [pc, #592]	; (8001e74 <HAL_GPIO_Init+0x2ac>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d04c      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c28:	4a92      	ldr	r2, [pc, #584]	; (8001e74 <HAL_GPIO_Init+0x2ac>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d863      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c2e:	4a92      	ldr	r2, [pc, #584]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d046      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
 8001c34:	4a90      	ldr	r2, [pc, #576]	; (8001e78 <HAL_GPIO_Init+0x2b0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d85d      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c3a:	2b12      	cmp	r3, #18
 8001c3c:	d82a      	bhi.n	8001c94 <HAL_GPIO_Init+0xcc>
 8001c3e:	2b12      	cmp	r3, #18
 8001c40:	d859      	bhi.n	8001cf6 <HAL_GPIO_Init+0x12e>
 8001c42:	a201      	add	r2, pc, #4	; (adr r2, 8001c48 <HAL_GPIO_Init+0x80>)
 8001c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c48:	08001cc3 	.word	0x08001cc3
 8001c4c:	08001c9d 	.word	0x08001c9d
 8001c50:	08001caf 	.word	0x08001caf
 8001c54:	08001cf1 	.word	0x08001cf1
 8001c58:	08001cf7 	.word	0x08001cf7
 8001c5c:	08001cf7 	.word	0x08001cf7
 8001c60:	08001cf7 	.word	0x08001cf7
 8001c64:	08001cf7 	.word	0x08001cf7
 8001c68:	08001cf7 	.word	0x08001cf7
 8001c6c:	08001cf7 	.word	0x08001cf7
 8001c70:	08001cf7 	.word	0x08001cf7
 8001c74:	08001cf7 	.word	0x08001cf7
 8001c78:	08001cf7 	.word	0x08001cf7
 8001c7c:	08001cf7 	.word	0x08001cf7
 8001c80:	08001cf7 	.word	0x08001cf7
 8001c84:	08001cf7 	.word	0x08001cf7
 8001c88:	08001cf7 	.word	0x08001cf7
 8001c8c:	08001ca5 	.word	0x08001ca5
 8001c90:	08001cb9 	.word	0x08001cb9
 8001c94:	4a79      	ldr	r2, [pc, #484]	; (8001e7c <HAL_GPIO_Init+0x2b4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d013      	beq.n	8001cc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c9a:	e02c      	b.n	8001cf6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	623b      	str	r3, [r7, #32]
          break;
 8001ca2:	e029      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	623b      	str	r3, [r7, #32]
          break;
 8001cac:	e024      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	3308      	adds	r3, #8
 8001cb4:	623b      	str	r3, [r7, #32]
          break;
 8001cb6:	e01f      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	330c      	adds	r3, #12
 8001cbe:	623b      	str	r3, [r7, #32]
          break;
 8001cc0:	e01a      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d102      	bne.n	8001cd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cca:	2304      	movs	r3, #4
 8001ccc:	623b      	str	r3, [r7, #32]
          break;
 8001cce:	e013      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d105      	bne.n	8001ce4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cd8:	2308      	movs	r3, #8
 8001cda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69fa      	ldr	r2, [r7, #28]
 8001ce0:	611a      	str	r2, [r3, #16]
          break;
 8001ce2:	e009      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	615a      	str	r2, [r3, #20]
          break;
 8001cee:	e003      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
          break;
 8001cf4:	e000      	b.n	8001cf8 <HAL_GPIO_Init+0x130>
          break;
 8001cf6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2bff      	cmp	r3, #255	; 0xff
 8001cfc:	d801      	bhi.n	8001d02 <HAL_GPIO_Init+0x13a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	e001      	b.n	8001d06 <HAL_GPIO_Init+0x13e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3304      	adds	r3, #4
 8001d06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	2bff      	cmp	r3, #255	; 0xff
 8001d0c:	d802      	bhi.n	8001d14 <HAL_GPIO_Init+0x14c>
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	e002      	b.n	8001d1a <HAL_GPIO_Init+0x152>
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	3b08      	subs	r3, #8
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	210f      	movs	r1, #15
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	fa01 f303 	lsl.w	r3, r1, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	6a39      	ldr	r1, [r7, #32]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	431a      	orrs	r2, r3
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 80b1 	beq.w	8001eaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d48:	4b4d      	ldr	r3, [pc, #308]	; (8001e80 <HAL_GPIO_Init+0x2b8>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a4c      	ldr	r2, [pc, #304]	; (8001e80 <HAL_GPIO_Init+0x2b8>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b4a      	ldr	r3, [pc, #296]	; (8001e80 <HAL_GPIO_Init+0x2b8>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d60:	4a48      	ldr	r2, [pc, #288]	; (8001e84 <HAL_GPIO_Init+0x2bc>)
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	089b      	lsrs	r3, r3, #2
 8001d66:	3302      	adds	r3, #2
 8001d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	220f      	movs	r2, #15
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4013      	ands	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a40      	ldr	r2, [pc, #256]	; (8001e88 <HAL_GPIO_Init+0x2c0>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d013      	beq.n	8001db4 <HAL_GPIO_Init+0x1ec>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a3f      	ldr	r2, [pc, #252]	; (8001e8c <HAL_GPIO_Init+0x2c4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d00d      	beq.n	8001db0 <HAL_GPIO_Init+0x1e8>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a3e      	ldr	r2, [pc, #248]	; (8001e90 <HAL_GPIO_Init+0x2c8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d007      	beq.n	8001dac <HAL_GPIO_Init+0x1e4>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a3d      	ldr	r2, [pc, #244]	; (8001e94 <HAL_GPIO_Init+0x2cc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d101      	bne.n	8001da8 <HAL_GPIO_Init+0x1e0>
 8001da4:	2303      	movs	r3, #3
 8001da6:	e006      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001da8:	2304      	movs	r3, #4
 8001daa:	e004      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e002      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001db4:	2300      	movs	r3, #0
 8001db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db8:	f002 0203 	and.w	r2, r2, #3
 8001dbc:	0092      	lsls	r2, r2, #2
 8001dbe:	4093      	lsls	r3, r2
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dc6:	492f      	ldr	r1, [pc, #188]	; (8001e84 <HAL_GPIO_Init+0x2bc>)
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001de0:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	492c      	ldr	r1, [pc, #176]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dee:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	4928      	ldr	r1, [pc, #160]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d006      	beq.n	8001e16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e08:	4b23      	ldr	r3, [pc, #140]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	4922      	ldr	r1, [pc, #136]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	60cb      	str	r3, [r1, #12]
 8001e14:	e006      	b.n	8001e24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e16:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	491e      	ldr	r1, [pc, #120]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4918      	ldr	r1, [pc, #96]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e3e:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	4914      	ldr	r1, [pc, #80]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d021      	beq.n	8001e9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e58:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	490e      	ldr	r1, [pc, #56]	; (8001e98 <HAL_GPIO_Init+0x2d0>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	600b      	str	r3, [r1, #0]
 8001e64:	e021      	b.n	8001eaa <HAL_GPIO_Init+0x2e2>
 8001e66:	bf00      	nop
 8001e68:	10320000 	.word	0x10320000
 8001e6c:	10310000 	.word	0x10310000
 8001e70:	10220000 	.word	0x10220000
 8001e74:	10210000 	.word	0x10210000
 8001e78:	10120000 	.word	0x10120000
 8001e7c:	10110000 	.word	0x10110000
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40010000 	.word	0x40010000
 8001e88:	40010800 	.word	0x40010800
 8001e8c:	40010c00 	.word	0x40010c00
 8001e90:	40011000 	.word	0x40011000
 8001e94:	40011400 	.word	0x40011400
 8001e98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_GPIO_Init+0x304>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	4909      	ldr	r1, [pc, #36]	; (8001ecc <HAL_GPIO_Init+0x304>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	3301      	adds	r3, #1
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f47f ae8e 	bne.w	8001bdc <HAL_GPIO_Init+0x14>
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	372c      	adds	r7, #44	; 0x2c
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	40010400 	.word	0x40010400

08001ed0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	887b      	ldrh	r3, [r7, #2]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	e001      	b.n	8001ef2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	807b      	strh	r3, [r7, #2]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f0e:	787b      	ldrb	r3, [r7, #1]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f14:	887a      	ldrh	r2, [r7, #2]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f1a:	e003      	b.n	8001f24 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f1c:	887b      	ldrh	r3, [r7, #2]
 8001f1e:	041a      	lsls	r2, r3, #16
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	611a      	str	r2, [r3, #16]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
	...

08001f30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d006      	beq.n	8001f54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f46:	4a05      	ldr	r2, [pc, #20]	; (8001f5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fda2 	bl	8000a98 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40010400 	.word	0x40010400

08001f60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e12b      	b.n	80021ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d106      	bne.n	8001f8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7fe fe04 	bl	8000b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2224      	movs	r2, #36	; 0x24
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0201 	bic.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fc4:	f001 f83e 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 8001fc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4a81      	ldr	r2, [pc, #516]	; (80021d4 <HAL_I2C_Init+0x274>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d807      	bhi.n	8001fe4 <HAL_I2C_Init+0x84>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4a80      	ldr	r2, [pc, #512]	; (80021d8 <HAL_I2C_Init+0x278>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	bf94      	ite	ls
 8001fdc:	2301      	movls	r3, #1
 8001fde:	2300      	movhi	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	e006      	b.n	8001ff2 <HAL_I2C_Init+0x92>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4a7d      	ldr	r2, [pc, #500]	; (80021dc <HAL_I2C_Init+0x27c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	bf94      	ite	ls
 8001fec:	2301      	movls	r3, #1
 8001fee:	2300      	movhi	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e0e7      	b.n	80021ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4a78      	ldr	r2, [pc, #480]	; (80021e0 <HAL_I2C_Init+0x280>)
 8001ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8002002:	0c9b      	lsrs	r3, r3, #18
 8002004:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	430a      	orrs	r2, r1
 8002018:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	4a6a      	ldr	r2, [pc, #424]	; (80021d4 <HAL_I2C_Init+0x274>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d802      	bhi.n	8002034 <HAL_I2C_Init+0xd4>
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	3301      	adds	r3, #1
 8002032:	e009      	b.n	8002048 <HAL_I2C_Init+0xe8>
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800203a:	fb02 f303 	mul.w	r3, r2, r3
 800203e:	4a69      	ldr	r2, [pc, #420]	; (80021e4 <HAL_I2C_Init+0x284>)
 8002040:	fba2 2303 	umull	r2, r3, r2, r3
 8002044:	099b      	lsrs	r3, r3, #6
 8002046:	3301      	adds	r3, #1
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	430b      	orrs	r3, r1
 800204e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800205a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	495c      	ldr	r1, [pc, #368]	; (80021d4 <HAL_I2C_Init+0x274>)
 8002064:	428b      	cmp	r3, r1
 8002066:	d819      	bhi.n	800209c <HAL_I2C_Init+0x13c>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1e59      	subs	r1, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	fbb1 f3f3 	udiv	r3, r1, r3
 8002076:	1c59      	adds	r1, r3, #1
 8002078:	f640 73fc 	movw	r3, #4092	; 0xffc
 800207c:	400b      	ands	r3, r1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00a      	beq.n	8002098 <HAL_I2C_Init+0x138>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1e59      	subs	r1, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002090:	3301      	adds	r3, #1
 8002092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002096:	e051      	b.n	800213c <HAL_I2C_Init+0x1dc>
 8002098:	2304      	movs	r3, #4
 800209a:	e04f      	b.n	800213c <HAL_I2C_Init+0x1dc>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d111      	bne.n	80020c8 <HAL_I2C_Init+0x168>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	1e58      	subs	r0, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6859      	ldr	r1, [r3, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	440b      	add	r3, r1
 80020b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b6:	3301      	adds	r3, #1
 80020b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020bc:	2b00      	cmp	r3, #0
 80020be:	bf0c      	ite	eq
 80020c0:	2301      	moveq	r3, #1
 80020c2:	2300      	movne	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	e012      	b.n	80020ee <HAL_I2C_Init+0x18e>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1e58      	subs	r0, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6859      	ldr	r1, [r3, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	0099      	lsls	r1, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	fbb0 f3f3 	udiv	r3, r0, r3
 80020de:	3301      	adds	r3, #1
 80020e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf0c      	ite	eq
 80020e8:	2301      	moveq	r3, #1
 80020ea:	2300      	movne	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_I2C_Init+0x196>
 80020f2:	2301      	movs	r3, #1
 80020f4:	e022      	b.n	800213c <HAL_I2C_Init+0x1dc>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10e      	bne.n	800211c <HAL_I2C_Init+0x1bc>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1e58      	subs	r0, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6859      	ldr	r1, [r3, #4]
 8002106:	460b      	mov	r3, r1
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	440b      	add	r3, r1
 800210c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002110:	3301      	adds	r3, #1
 8002112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800211a:	e00f      	b.n	800213c <HAL_I2C_Init+0x1dc>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1e58      	subs	r0, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	0099      	lsls	r1, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002132:	3301      	adds	r3, #1
 8002134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002138:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	6809      	ldr	r1, [r1, #0]
 8002140:	4313      	orrs	r3, r2
 8002142:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69da      	ldr	r2, [r3, #28]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800216a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6911      	ldr	r1, [r2, #16]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68d2      	ldr	r2, [r2, #12]
 8002176:	4311      	orrs	r1, r2
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	430b      	orrs	r3, r1
 800217e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695a      	ldr	r2, [r3, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0201 	orr.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2220      	movs	r2, #32
 80021b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	000186a0 	.word	0x000186a0
 80021d8:	001e847f 	.word	0x001e847f
 80021dc:	003d08ff 	.word	0x003d08ff
 80021e0:	431bde83 	.word	0x431bde83
 80021e4:	10624dd3 	.word	0x10624dd3

080021e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	461a      	mov	r2, r3
 80021f4:	460b      	mov	r3, r1
 80021f6:	817b      	strh	r3, [r7, #10]
 80021f8:	4613      	mov	r3, r2
 80021fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021fc:	f7fe fea2 	bl	8000f44 <HAL_GetTick>
 8002200:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b20      	cmp	r3, #32
 800220c:	f040 80e0 	bne.w	80023d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	2319      	movs	r3, #25
 8002216:	2201      	movs	r2, #1
 8002218:	4970      	ldr	r1, [pc, #448]	; (80023dc <HAL_I2C_Master_Transmit+0x1f4>)
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f964 	bl	80024e8 <I2C_WaitOnFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002226:	2302      	movs	r3, #2
 8002228:	e0d3      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_I2C_Master_Transmit+0x50>
 8002234:	2302      	movs	r3, #2
 8002236:	e0cc      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1ea>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b01      	cmp	r3, #1
 800224c:	d007      	beq.n	800225e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0201 	orr.w	r2, r2, #1
 800225c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800226c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2221      	movs	r2, #33	; 0x21
 8002272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2210      	movs	r2, #16
 800227a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	893a      	ldrh	r2, [r7, #8]
 800228e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4a50      	ldr	r2, [pc, #320]	; (80023e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800229e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022a0:	8979      	ldrh	r1, [r7, #10]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	6a3a      	ldr	r2, [r7, #32]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f89c 	bl	80023e4 <I2C_MasterRequestWrite>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e08d      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022cc:	e066      	b.n	800239c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	6a39      	ldr	r1, [r7, #32]
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 fa22 	bl	800271c <I2C_WaitOnTXEFlagUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00d      	beq.n	80022fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d107      	bne.n	80022f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e06b      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	781a      	ldrb	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002314:	b29b      	uxth	r3, r3
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b04      	cmp	r3, #4
 8002336:	d11b      	bne.n	8002370 <HAL_I2C_Master_Transmit+0x188>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233c:	2b00      	cmp	r3, #0
 800233e:	d017      	beq.n	8002370 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	781a      	ldrb	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002368:	3b01      	subs	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	6a39      	ldr	r1, [r7, #32]
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 fa19 	bl	80027ac <I2C_WaitOnBTFFlagUntilTimeout>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00d      	beq.n	800239c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	2b04      	cmp	r3, #4
 8002386:	d107      	bne.n	8002398 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002396:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e01a      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d194      	bne.n	80022ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	e000      	b.n	80023d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023d0:	2302      	movs	r3, #2
  }
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	00100002 	.word	0x00100002
 80023e0:	ffff0000 	.word	0xffff0000

080023e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af02      	add	r7, sp, #8
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	460b      	mov	r3, r1
 80023f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d006      	beq.n	800240e <I2C_MasterRequestWrite+0x2a>
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d003      	beq.n	800240e <I2C_MasterRequestWrite+0x2a>
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800240c:	d108      	bne.n	8002420 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	e00b      	b.n	8002438 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	2b12      	cmp	r3, #18
 8002426:	d107      	bne.n	8002438 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002436:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 f84f 	bl	80024e8 <I2C_WaitOnFlagUntilTimeout>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00d      	beq.n	800246c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800245e:	d103      	bne.n	8002468 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002466:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e035      	b.n	80024d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002474:	d108      	bne.n	8002488 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002476:	897b      	ldrh	r3, [r7, #10]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	461a      	mov	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002484:	611a      	str	r2, [r3, #16]
 8002486:	e01b      	b.n	80024c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002488:	897b      	ldrh	r3, [r7, #10]
 800248a:	11db      	asrs	r3, r3, #7
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f003 0306 	and.w	r3, r3, #6
 8002492:	b2db      	uxtb	r3, r3
 8002494:	f063 030f 	orn	r3, r3, #15
 8002498:	b2da      	uxtb	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	490e      	ldr	r1, [pc, #56]	; (80024e0 <I2C_MasterRequestWrite+0xfc>)
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f898 	bl	80025dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e010      	b.n	80024d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024b6:	897b      	ldrh	r3, [r7, #10]
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	4907      	ldr	r1, [pc, #28]	; (80024e4 <I2C_MasterRequestWrite+0x100>)
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 f888 	bl	80025dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	00010008 	.word	0x00010008
 80024e4:	00010002 	.word	0x00010002

080024e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	603b      	str	r3, [r7, #0]
 80024f4:	4613      	mov	r3, r2
 80024f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024f8:	e048      	b.n	800258c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002500:	d044      	beq.n	800258c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002502:	f7fe fd1f 	bl	8000f44 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d302      	bcc.n	8002518 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d139      	bne.n	800258c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	0c1b      	lsrs	r3, r3, #16
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d10d      	bne.n	800253e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	43da      	mvns	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	4013      	ands	r3, r2
 800252e:	b29b      	uxth	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	e00c      	b.n	8002558 <I2C_WaitOnFlagUntilTimeout+0x70>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	43da      	mvns	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	4013      	ands	r3, r2
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	429a      	cmp	r2, r3
 800255c:	d116      	bne.n	800258c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	f043 0220 	orr.w	r2, r3, #32
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e023      	b.n	80025d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	0c1b      	lsrs	r3, r3, #16
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d10d      	bne.n	80025b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	43da      	mvns	r2, r3
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	4013      	ands	r3, r2
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	bf0c      	ite	eq
 80025a8:	2301      	moveq	r3, #1
 80025aa:	2300      	movne	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	e00c      	b.n	80025cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	43da      	mvns	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	4013      	ands	r3, r2
 80025be:	b29b      	uxth	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bf0c      	ite	eq
 80025c4:	2301      	moveq	r3, #1
 80025c6:	2300      	movne	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	461a      	mov	r2, r3
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d093      	beq.n	80024fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025ea:	e071      	b.n	80026d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fa:	d123      	bne.n	8002644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002614:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	f043 0204 	orr.w	r2, r3, #4
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e067      	b.n	8002714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264a:	d041      	beq.n	80026d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264c:	f7fe fc7a 	bl	8000f44 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	429a      	cmp	r2, r3
 800265a:	d302      	bcc.n	8002662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d136      	bne.n	80026d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	0c1b      	lsrs	r3, r3, #16
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b01      	cmp	r3, #1
 800266a:	d10c      	bne.n	8002686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	43da      	mvns	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	4013      	ands	r3, r2
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	bf14      	ite	ne
 800267e:	2301      	movne	r3, #1
 8002680:	2300      	moveq	r3, #0
 8002682:	b2db      	uxtb	r3, r3
 8002684:	e00b      	b.n	800269e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	43da      	mvns	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	4013      	ands	r3, r2
 8002692:	b29b      	uxth	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf14      	ite	ne
 8002698:	2301      	movne	r3, #1
 800269a:	2300      	moveq	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d016      	beq.n	80026d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	f043 0220 	orr.w	r2, r3, #32
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e021      	b.n	8002714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	0c1b      	lsrs	r3, r3, #16
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d10c      	bne.n	80026f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	43da      	mvns	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	4013      	ands	r3, r2
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf14      	ite	ne
 80026ec:	2301      	movne	r3, #1
 80026ee:	2300      	moveq	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	e00b      	b.n	800270c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	43da      	mvns	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	4013      	ands	r3, r2
 8002700:	b29b      	uxth	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	bf14      	ite	ne
 8002706:	2301      	movne	r3, #1
 8002708:	2300      	moveq	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	f47f af6d 	bne.w	80025ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002728:	e034      	b.n	8002794 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 f886 	bl	800283c <I2C_IsAcknowledgeFailed>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e034      	b.n	80027a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d028      	beq.n	8002794 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002742:	f7fe fbff 	bl	8000f44 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	429a      	cmp	r2, r3
 8002750:	d302      	bcc.n	8002758 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d11d      	bne.n	8002794 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002762:	2b80      	cmp	r3, #128	; 0x80
 8002764:	d016      	beq.n	8002794 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	f043 0220 	orr.w	r2, r3, #32
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e007      	b.n	80027a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279e:	2b80      	cmp	r3, #128	; 0x80
 80027a0:	d1c3      	bne.n	800272a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027b8:	e034      	b.n	8002824 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f83e 	bl	800283c <I2C_IsAcknowledgeFailed>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e034      	b.n	8002834 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d0:	d028      	beq.n	8002824 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d2:	f7fe fbb7 	bl	8000f44 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d302      	bcc.n	80027e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d11d      	bne.n	8002824 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d016      	beq.n	8002824 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f043 0220 	orr.w	r2, r3, #32
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e007      	b.n	8002834 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b04      	cmp	r3, #4
 8002830:	d1c3      	bne.n	80027ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002852:	d11b      	bne.n	800288c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800285c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	f043 0204 	orr.w	r2, r3, #4
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <HAL_PWR_EnableBkUpAccess+0x14>)
 800289e:	2201      	movs	r2, #1
 80028a0:	601a      	str	r2, [r3, #0]
}
 80028a2:	bf00      	nop
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	420e0020 	.word	0x420e0020

080028b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e272      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 8087 	beq.w	80029de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028d0:	4b92      	ldr	r3, [pc, #584]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 030c 	and.w	r3, r3, #12
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d00c      	beq.n	80028f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028dc:	4b8f      	ldr	r3, [pc, #572]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d112      	bne.n	800290e <HAL_RCC_OscConfig+0x5e>
 80028e8:	4b8c      	ldr	r3, [pc, #560]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f4:	d10b      	bne.n	800290e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f6:	4b89      	ldr	r3, [pc, #548]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d06c      	beq.n	80029dc <HAL_RCC_OscConfig+0x12c>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d168      	bne.n	80029dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e24c      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002916:	d106      	bne.n	8002926 <HAL_RCC_OscConfig+0x76>
 8002918:	4b80      	ldr	r3, [pc, #512]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a7f      	ldr	r2, [pc, #508]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800291e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	e02e      	b.n	8002984 <HAL_RCC_OscConfig+0xd4>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10c      	bne.n	8002948 <HAL_RCC_OscConfig+0x98>
 800292e:	4b7b      	ldr	r3, [pc, #492]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a7a      	ldr	r2, [pc, #488]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	4b78      	ldr	r3, [pc, #480]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a77      	ldr	r2, [pc, #476]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002940:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	e01d      	b.n	8002984 <HAL_RCC_OscConfig+0xd4>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002950:	d10c      	bne.n	800296c <HAL_RCC_OscConfig+0xbc>
 8002952:	4b72      	ldr	r3, [pc, #456]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a71      	ldr	r2, [pc, #452]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	4b6f      	ldr	r3, [pc, #444]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a6e      	ldr	r2, [pc, #440]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	e00b      	b.n	8002984 <HAL_RCC_OscConfig+0xd4>
 800296c:	4b6b      	ldr	r3, [pc, #428]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a6a      	ldr	r2, [pc, #424]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	4b68      	ldr	r3, [pc, #416]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a67      	ldr	r2, [pc, #412]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800297e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002982:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d013      	beq.n	80029b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe fada 	bl	8000f44 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002994:	f7fe fad6 	bl	8000f44 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b64      	cmp	r3, #100	; 0x64
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e200      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	4b5d      	ldr	r3, [pc, #372]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0xe4>
 80029b2:	e014      	b.n	80029de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7fe fac6 	bl	8000f44 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029bc:	f7fe fac2 	bl	8000f44 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	; 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e1ec      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ce:	4b53      	ldr	r3, [pc, #332]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x10c>
 80029da:	e000      	b.n	80029de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d063      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ea:	4b4c      	ldr	r3, [pc, #304]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00b      	beq.n	8002a0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029f6:	4b49      	ldr	r3, [pc, #292]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d11c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x18c>
 8002a02:	4b46      	ldr	r3, [pc, #280]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d116      	bne.n	8002a3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0e:	4b43      	ldr	r3, [pc, #268]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <HAL_RCC_OscConfig+0x176>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d001      	beq.n	8002a26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e1c0      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a26:	4b3d      	ldr	r3, [pc, #244]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4939      	ldr	r1, [pc, #228]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3a:	e03a      	b.n	8002ab2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d020      	beq.n	8002a86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a44:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4a:	f7fe fa7b 	bl	8000f44 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a52:	f7fe fa77 	bl	8000f44 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e1a1      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a64:	4b2d      	ldr	r3, [pc, #180]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a70:	4b2a      	ldr	r3, [pc, #168]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4927      	ldr	r1, [pc, #156]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]
 8002a84:	e015      	b.n	8002ab2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a86:	4b26      	ldr	r3, [pc, #152]	; (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fa5a 	bl	8000f44 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a94:	f7fe fa56 	bl	8000f44 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e180      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa6:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d03a      	beq.n	8002b34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d019      	beq.n	8002afa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ac6:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <HAL_RCC_OscConfig+0x274>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002acc:	f7fe fa3a 	bl	8000f44 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad4:	f7fe fa36 	bl	8000f44 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e160      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002af2:	2001      	movs	r0, #1
 8002af4:	f000 face 	bl	8003094 <RCC_Delay>
 8002af8:	e01c      	b.n	8002b34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002afa:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <HAL_RCC_OscConfig+0x274>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b00:	f7fe fa20 	bl	8000f44 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b06:	e00f      	b.n	8002b28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b08:	f7fe fa1c 	bl	8000f44 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d908      	bls.n	8002b28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e146      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	42420000 	.word	0x42420000
 8002b24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b28:	4b92      	ldr	r3, [pc, #584]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e9      	bne.n	8002b08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80a6 	beq.w	8002c8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b42:	2300      	movs	r3, #0
 8002b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b46:	4b8b      	ldr	r3, [pc, #556]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10d      	bne.n	8002b6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b52:	4b88      	ldr	r3, [pc, #544]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	4a87      	ldr	r2, [pc, #540]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	61d3      	str	r3, [r2, #28]
 8002b5e:	4b85      	ldr	r3, [pc, #532]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6e:	4b82      	ldr	r3, [pc, #520]	; (8002d78 <HAL_RCC_OscConfig+0x4c8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d118      	bne.n	8002bac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b7a:	4b7f      	ldr	r3, [pc, #508]	; (8002d78 <HAL_RCC_OscConfig+0x4c8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a7e      	ldr	r2, [pc, #504]	; (8002d78 <HAL_RCC_OscConfig+0x4c8>)
 8002b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b86:	f7fe f9dd 	bl	8000f44 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8e:	f7fe f9d9 	bl	8000f44 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b64      	cmp	r3, #100	; 0x64
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e103      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba0:	4b75      	ldr	r3, [pc, #468]	; (8002d78 <HAL_RCC_OscConfig+0x4c8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d106      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x312>
 8002bb4:	4b6f      	ldr	r3, [pc, #444]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	4a6e      	ldr	r2, [pc, #440]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	6213      	str	r3, [r2, #32]
 8002bc0:	e02d      	b.n	8002c1e <HAL_RCC_OscConfig+0x36e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x334>
 8002bca:	4b6a      	ldr	r3, [pc, #424]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	4a69      	ldr	r2, [pc, #420]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	6213      	str	r3, [r2, #32]
 8002bd6:	4b67      	ldr	r3, [pc, #412]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	4a66      	ldr	r2, [pc, #408]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	f023 0304 	bic.w	r3, r3, #4
 8002be0:	6213      	str	r3, [r2, #32]
 8002be2:	e01c      	b.n	8002c1e <HAL_RCC_OscConfig+0x36e>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	d10c      	bne.n	8002c06 <HAL_RCC_OscConfig+0x356>
 8002bec:	4b61      	ldr	r3, [pc, #388]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	4a60      	ldr	r2, [pc, #384]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bf2:	f043 0304 	orr.w	r3, r3, #4
 8002bf6:	6213      	str	r3, [r2, #32]
 8002bf8:	4b5e      	ldr	r3, [pc, #376]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	4a5d      	ldr	r2, [pc, #372]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	6213      	str	r3, [r2, #32]
 8002c04:	e00b      	b.n	8002c1e <HAL_RCC_OscConfig+0x36e>
 8002c06:	4b5b      	ldr	r3, [pc, #364]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	4a5a      	ldr	r2, [pc, #360]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c0c:	f023 0301 	bic.w	r3, r3, #1
 8002c10:	6213      	str	r3, [r2, #32]
 8002c12:	4b58      	ldr	r3, [pc, #352]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	4a57      	ldr	r2, [pc, #348]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	f023 0304 	bic.w	r3, r3, #4
 8002c1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d015      	beq.n	8002c52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c26:	f7fe f98d 	bl	8000f44 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2c:	e00a      	b.n	8002c44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2e:	f7fe f989 	bl	8000f44 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e0b1      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c44:	4b4b      	ldr	r3, [pc, #300]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0ee      	beq.n	8002c2e <HAL_RCC_OscConfig+0x37e>
 8002c50:	e014      	b.n	8002c7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c52:	f7fe f977 	bl	8000f44 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c58:	e00a      	b.n	8002c70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7fe f973 	bl	8000f44 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e09b      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c70:	4b40      	ldr	r3, [pc, #256]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1ee      	bne.n	8002c5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c7c:	7dfb      	ldrb	r3, [r7, #23]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d105      	bne.n	8002c8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c82:	4b3c      	ldr	r3, [pc, #240]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	4a3b      	ldr	r2, [pc, #236]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8087 	beq.w	8002da6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c98:	4b36      	ldr	r3, [pc, #216]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d061      	beq.n	8002d68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d146      	bne.n	8002d3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cac:	4b33      	ldr	r3, [pc, #204]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb2:	f7fe f947 	bl	8000f44 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cba:	f7fe f943 	bl	8000f44 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e06d      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ccc:	4b29      	ldr	r3, [pc, #164]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f0      	bne.n	8002cba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce0:	d108      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ce2:	4b24      	ldr	r3, [pc, #144]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	4921      	ldr	r1, [pc, #132]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cf4:	4b1f      	ldr	r3, [pc, #124]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a19      	ldr	r1, [r3, #32]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	430b      	orrs	r3, r1
 8002d06:	491b      	ldr	r1, [pc, #108]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d0c:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d12:	f7fe f917 	bl	8000f44 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1a:	f7fe f913 	bl	8000f44 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e03d      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d2c:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f0      	beq.n	8002d1a <HAL_RCC_OscConfig+0x46a>
 8002d38:	e035      	b.n	8002da6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3a:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <HAL_RCC_OscConfig+0x4cc>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7fe f900 	bl	8000f44 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d48:	f7fe f8fc 	bl	8000f44 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e026      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5a:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0x498>
 8002d66:	e01e      	b.n	8002da6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d107      	bne.n	8002d80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e019      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40007000 	.word	0x40007000
 8002d7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_RCC_OscConfig+0x500>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d106      	bne.n	8002da2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d001      	beq.n	8002da6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40021000 	.word	0x40021000

08002db4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0d0      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc8:	4b6a      	ldr	r3, [pc, #424]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d910      	bls.n	8002df8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd6:	4b67      	ldr	r3, [pc, #412]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 0207 	bic.w	r2, r3, #7
 8002dde:	4965      	ldr	r1, [pc, #404]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de6:	4b63      	ldr	r3, [pc, #396]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0b8      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d020      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e10:	4b59      	ldr	r3, [pc, #356]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	4a58      	ldr	r2, [pc, #352]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e28:	4b53      	ldr	r3, [pc, #332]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4a52      	ldr	r2, [pc, #328]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e34:	4b50      	ldr	r3, [pc, #320]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	494d      	ldr	r1, [pc, #308]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d040      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d107      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5a:	4b47      	ldr	r3, [pc, #284]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d115      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e07f      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d107      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e72:	4b41      	ldr	r3, [pc, #260]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d109      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e073      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e82:	4b3d      	ldr	r3, [pc, #244]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e06b      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e92:	4b39      	ldr	r3, [pc, #228]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f023 0203 	bic.w	r2, r3, #3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4936      	ldr	r1, [pc, #216]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea4:	f7fe f84e 	bl	8000f44 <HAL_GetTick>
 8002ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eaa:	e00a      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eac:	f7fe f84a 	bl	8000f44 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e053      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec2:	4b2d      	ldr	r3, [pc, #180]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 020c 	and.w	r2, r3, #12
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d1eb      	bne.n	8002eac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed4:	4b27      	ldr	r3, [pc, #156]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d210      	bcs.n	8002f04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee2:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 0207 	bic.w	r2, r3, #7
 8002eea:	4922      	ldr	r1, [pc, #136]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef2:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d001      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e032      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f10:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4916      	ldr	r1, [pc, #88]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d009      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f2e:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	490e      	ldr	r1, [pc, #56]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f42:	f000 f821 	bl	8002f88 <HAL_RCC_GetSysClockFreq>
 8002f46:	4602      	mov	r2, r0
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	091b      	lsrs	r3, r3, #4
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	490a      	ldr	r1, [pc, #40]	; (8002f7c <HAL_RCC_ClockConfig+0x1c8>)
 8002f54:	5ccb      	ldrb	r3, [r1, r3]
 8002f56:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5a:	4a09      	ldr	r2, [pc, #36]	; (8002f80 <HAL_RCC_ClockConfig+0x1cc>)
 8002f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f5e:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <HAL_RCC_ClockConfig+0x1d0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fd ffac 	bl	8000ec0 <HAL_InitTick>

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40022000 	.word	0x40022000
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	08004d8c 	.word	0x08004d8c
 8002f80:	20000000 	.word	0x20000000
 8002f84:	20000004 	.word	0x20000004

08002f88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fa2:	4b1e      	ldr	r3, [pc, #120]	; (800301c <HAL_RCC_GetSysClockFreq+0x94>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d002      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x30>
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d003      	beq.n	8002fbe <HAL_RCC_GetSysClockFreq+0x36>
 8002fb6:	e027      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fb8:	4b19      	ldr	r3, [pc, #100]	; (8003020 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fba:	613b      	str	r3, [r7, #16]
      break;
 8002fbc:	e027      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	0c9b      	lsrs	r3, r3, #18
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	4a17      	ldr	r2, [pc, #92]	; (8003024 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fc8:	5cd3      	ldrb	r3, [r2, r3]
 8002fca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d010      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fd6:	4b11      	ldr	r3, [pc, #68]	; (800301c <HAL_RCC_GetSysClockFreq+0x94>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	0c5b      	lsrs	r3, r3, #17
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	4a11      	ldr	r2, [pc, #68]	; (8003028 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fe2:	5cd3      	ldrb	r3, [r2, r3]
 8002fe4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a0d      	ldr	r2, [pc, #52]	; (8003020 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fea:	fb03 f202 	mul.w	r2, r3, r2
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	e004      	b.n	8003002 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a0c      	ldr	r2, [pc, #48]	; (800302c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ffc:	fb02 f303 	mul.w	r3, r2, r3
 8003000:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	613b      	str	r3, [r7, #16]
      break;
 8003006:	e002      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_RCC_GetSysClockFreq+0x98>)
 800300a:	613b      	str	r3, [r7, #16]
      break;
 800300c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800300e:	693b      	ldr	r3, [r7, #16]
}
 8003010:	4618      	mov	r0, r3
 8003012:	371c      	adds	r7, #28
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40021000 	.word	0x40021000
 8003020:	007a1200 	.word	0x007a1200
 8003024:	08004da4 	.word	0x08004da4
 8003028:	08004db4 	.word	0x08004db4
 800302c:	003d0900 	.word	0x003d0900

08003030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003034:	4b02      	ldr	r3, [pc, #8]	; (8003040 <HAL_RCC_GetHCLKFreq+0x10>)
 8003036:	681b      	ldr	r3, [r3, #0]
}
 8003038:	4618      	mov	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr
 8003040:	20000000 	.word	0x20000000

08003044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003048:	f7ff fff2 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	0a1b      	lsrs	r3, r3, #8
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	4903      	ldr	r1, [pc, #12]	; (8003068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800305a:	5ccb      	ldrb	r3, [r1, r3]
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40021000 	.word	0x40021000
 8003068:	08004d9c 	.word	0x08004d9c

0800306c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003070:	f7ff ffde 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b05      	ldr	r3, [pc, #20]	; (800308c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	0adb      	lsrs	r3, r3, #11
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	4903      	ldr	r1, [pc, #12]	; (8003090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003088:	4618      	mov	r0, r3
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40021000 	.word	0x40021000
 8003090:	08004d9c 	.word	0x08004d9c

08003094 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800309c:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <RCC_Delay+0x34>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a0a      	ldr	r2, [pc, #40]	; (80030cc <RCC_Delay+0x38>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	0a5b      	lsrs	r3, r3, #9
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	fb02 f303 	mul.w	r3, r2, r3
 80030ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030b0:	bf00      	nop
  }
  while (Delay --);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1e5a      	subs	r2, r3, #1
 80030b6:	60fa      	str	r2, [r7, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1f9      	bne.n	80030b0 <RCC_Delay+0x1c>
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	20000000 	.word	0x20000000
 80030cc:	10624dd3 	.word	0x10624dd3

080030d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	2300      	movs	r3, #0
 80030de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d07d      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80030ec:	2300      	movs	r3, #0
 80030ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f0:	4b4f      	ldr	r3, [pc, #316]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10d      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fc:	4b4c      	ldr	r3, [pc, #304]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	4a4b      	ldr	r2, [pc, #300]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003106:	61d3      	str	r3, [r2, #28]
 8003108:	4b49      	ldr	r3, [pc, #292]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003114:	2301      	movs	r3, #1
 8003116:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003118:	4b46      	ldr	r3, [pc, #280]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	d118      	bne.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003124:	4b43      	ldr	r3, [pc, #268]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a42      	ldr	r2, [pc, #264]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800312a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003130:	f7fd ff08 	bl	8000f44 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003136:	e008      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003138:	f7fd ff04 	bl	8000f44 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	; 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e06d      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314a:	4b3a      	ldr	r3, [pc, #232]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003156:	4b36      	ldr	r3, [pc, #216]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d02e      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	429a      	cmp	r2, r3
 8003172:	d027      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003174:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800317c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800317e:	4b2e      	ldr	r3, [pc, #184]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003180:	2201      	movs	r2, #1
 8003182:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003184:	4b2c      	ldr	r3, [pc, #176]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800318a:	4a29      	ldr	r2, [pc, #164]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d014      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319a:	f7fd fed3 	bl	8000f44 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a0:	e00a      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a2:	f7fd fecf 	bl	8000f44 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e036      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b8:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0ee      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031c4:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	4917      	ldr	r1, [pc, #92]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031d6:	7dfb      	ldrb	r3, [r7, #23]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d105      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031dc:	4b14      	ldr	r3, [pc, #80]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	4a13      	ldr	r2, [pc, #76]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031f4:	4b0e      	ldr	r3, [pc, #56]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	490b      	ldr	r1, [pc, #44]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003202:	4313      	orrs	r3, r2
 8003204:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b00      	cmp	r3, #0
 8003210:	d008      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003212:	4b07      	ldr	r3, [pc, #28]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	4904      	ldr	r1, [pc, #16]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000
 8003234:	40007000 	.word	0x40007000
 8003238:	42420440 	.word	0x42420440

0800323c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	2300      	movs	r3, #0
 800324a:	61fb      	str	r3, [r7, #28]
 800324c:	2300      	movs	r3, #0
 800324e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	2300      	movs	r3, #0
 8003256:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b10      	cmp	r3, #16
 800325c:	d00a      	beq.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b10      	cmp	r3, #16
 8003262:	f200 808a 	bhi.w	800337a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d045      	beq.n	80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d075      	beq.n	800335e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003272:	e082      	b.n	800337a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003274:	4b46      	ldr	r3, [pc, #280]	; (8003390 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800327a:	4b45      	ldr	r3, [pc, #276]	; (8003390 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d07b      	beq.n	800337e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	0c9b      	lsrs	r3, r3, #18
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	4a41      	ldr	r2, [pc, #260]	; (8003394 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003290:	5cd3      	ldrb	r3, [r2, r3]
 8003292:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d015      	beq.n	80032ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800329e:	4b3c      	ldr	r3, [pc, #240]	; (8003390 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	0c5b      	lsrs	r3, r3, #17
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	4a3b      	ldr	r2, [pc, #236]	; (8003398 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80032aa:	5cd3      	ldrb	r3, [r2, r3]
 80032ac:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00d      	beq.n	80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80032b8:	4a38      	ldr	r2, [pc, #224]	; (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	fb02 f303 	mul.w	r3, r2, r3
 80032c6:	61fb      	str	r3, [r7, #28]
 80032c8:	e004      	b.n	80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4a34      	ldr	r2, [pc, #208]	; (80033a0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80032ce:	fb02 f303 	mul.w	r3, r2, r3
 80032d2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80032d4:	4b2e      	ldr	r3, [pc, #184]	; (8003390 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032e0:	d102      	bne.n	80032e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	61bb      	str	r3, [r7, #24]
      break;
 80032e6:	e04a      	b.n	800337e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	4a2d      	ldr	r2, [pc, #180]	; (80033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80032ee:	fba2 2303 	umull	r2, r3, r2, r3
 80032f2:	085b      	lsrs	r3, r3, #1
 80032f4:	61bb      	str	r3, [r7, #24]
      break;
 80032f6:	e042      	b.n	800337e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80032f8:	4b25      	ldr	r3, [pc, #148]	; (8003390 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003308:	d108      	bne.n	800331c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003314:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003318:	61bb      	str	r3, [r7, #24]
 800331a:	e01f      	b.n	800335c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003326:	d109      	bne.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003328:	4b19      	ldr	r3, [pc, #100]	; (8003390 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003334:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	e00f      	b.n	800335c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003342:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003346:	d11c      	bne.n	8003382 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003348:	4b11      	ldr	r3, [pc, #68]	; (8003390 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d016      	beq.n	8003382 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003354:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003358:	61bb      	str	r3, [r7, #24]
      break;
 800335a:	e012      	b.n	8003382 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800335c:	e011      	b.n	8003382 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800335e:	f7ff fe85 	bl	800306c <HAL_RCC_GetPCLK2Freq>
 8003362:	4602      	mov	r2, r0
 8003364:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	0b9b      	lsrs	r3, r3, #14
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	3301      	adds	r3, #1
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	fbb2 f3f3 	udiv	r3, r2, r3
 8003376:	61bb      	str	r3, [r7, #24]
      break;
 8003378:	e004      	b.n	8003384 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800337a:	bf00      	nop
 800337c:	e002      	b.n	8003384 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800337e:	bf00      	nop
 8003380:	e000      	b.n	8003384 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003382:	bf00      	nop
    }
  }
  return (frequency);
 8003384:	69bb      	ldr	r3, [r7, #24]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3720      	adds	r7, #32
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40021000 	.word	0x40021000
 8003394:	08004db8 	.word	0x08004db8
 8003398:	08004dc8 	.word	0x08004dc8
 800339c:	007a1200 	.word	0x007a1200
 80033a0:	003d0900 	.word	0x003d0900
 80033a4:	aaaaaaab 	.word	0xaaaaaaab

080033a8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e07a      	b.n	80034b4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	7c5b      	ldrb	r3, [r3, #17]
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d105      	bne.n	80033d4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fd fc4c 	bl	8000c6c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 faea 	bl	80039b4 <HAL_RTC_WaitForSynchro>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d004      	beq.n	80033f0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2204      	movs	r2, #4
 80033ea:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e061      	b.n	80034b4 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 fba3 	bl	8003b3c <RTC_EnterInitMode>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d004      	beq.n	8003406 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2204      	movs	r2, #4
 8003400:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e056      	b.n	80034b4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0207 	bic.w	r2, r2, #7
 8003414:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d005      	beq.n	800342a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800341e:	4b27      	ldr	r3, [pc, #156]	; (80034bc <HAL_RTC_Init+0x114>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	4a26      	ldr	r2, [pc, #152]	; (80034bc <HAL_RTC_Init+0x114>)
 8003424:	f023 0301 	bic.w	r3, r3, #1
 8003428:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800342a:	4b24      	ldr	r3, [pc, #144]	; (80034bc <HAL_RTC_Init+0x114>)
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	4921      	ldr	r1, [pc, #132]	; (80034bc <HAL_RTC_Init+0x114>)
 8003438:	4313      	orrs	r3, r2
 800343a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003444:	d003      	beq.n	800344e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	e00e      	b.n	800346c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800344e:	2001      	movs	r0, #1
 8003450:	f7ff fef4 	bl	800323c <HAL_RCCEx_GetPeriphCLKFreq>
 8003454:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d104      	bne.n	8003466 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2204      	movs	r2, #4
 8003460:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e026      	b.n	80034b4 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	3b01      	subs	r3, #1
 800346a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	0c1a      	lsrs	r2, r3, #16
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f002 020f 	and.w	r2, r2, #15
 8003478:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	b292      	uxth	r2, r2
 8003482:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fb81 	bl	8003b8c <RTC_ExitInitMode>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d004      	beq.n	800349a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2204      	movs	r2, #4
 8003494:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e00c      	b.n	80034b4 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80034b2:	2300      	movs	r3, #0
  }
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40006c00 	.word	0x40006c00

080034c0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80034c0:	b590      	push	{r4, r7, lr}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	2300      	movs	r3, #0
 80034d2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <HAL_RTC_SetTime+0x20>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e080      	b.n	80035e6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	7c1b      	ldrb	r3, [r3, #16]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_RTC_SetTime+0x30>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e07a      	b.n	80035e6 <HAL_RTC_SetTime+0x126>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2201      	movs	r2, #1
 80034f4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2202      	movs	r2, #2
 80034fa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d113      	bne.n	800352a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800350c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	785b      	ldrb	r3, [r3, #1]
 8003514:	4619      	mov	r1, r3
 8003516:	460b      	mov	r3, r1
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	1a5b      	subs	r3, r3, r1
 800351c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800351e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003524:	4413      	add	r3, r2
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	e01e      	b.n	8003568 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fb71 	bl	8003c16 <RTC_Bcd2ToByte>
 8003534:	4603      	mov	r3, r0
 8003536:	461a      	mov	r2, r3
 8003538:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800353c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	785b      	ldrb	r3, [r3, #1]
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fb66 	bl	8003c16 <RTC_Bcd2ToByte>
 800354a:	4603      	mov	r3, r0
 800354c:	461a      	mov	r2, r3
 800354e:	4613      	mov	r3, r2
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	1a9b      	subs	r3, r3, r2
 8003554:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003556:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	789b      	ldrb	r3, [r3, #2]
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fb5a 	bl	8003c16 <RTC_Bcd2ToByte>
 8003562:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003564:	4423      	add	r3, r4
 8003566:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003568:	6979      	ldr	r1, [r7, #20]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 fa7f 	bl	8003a6e <RTC_WriteTimeCounter>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d007      	beq.n	8003586 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2204      	movs	r2, #4
 800357a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e02f      	b.n	80035e6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0205 	bic.w	r2, r2, #5
 8003594:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 fa90 	bl	8003abc <RTC_ReadAlarmCounter>
 800359c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a4:	d018      	beq.n	80035d8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d214      	bcs.n	80035d8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80035b4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80035b8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80035ba:	6939      	ldr	r1, [r7, #16]
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 fa96 	bl	8003aee <RTC_WriteAlarmCounter>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2204      	movs	r2, #4
 80035cc:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e006      	b.n	80035e6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2201      	movs	r2, #1
 80035dc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80035e4:	2300      	movs	r3, #0
  }
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd90      	pop	{r4, r7, pc}
	...

080035f0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61bb      	str	r3, [r7, #24]
 8003600:	2300      	movs	r3, #0
 8003602:	61fb      	str	r3, [r7, #28]
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	2300      	movs	r3, #0
 800360a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <HAL_RTC_GetTime+0x28>
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0b5      	b.n	8003788 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e0ac      	b.n	8003788 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f9ed 	bl	8003a0e <RTC_ReadTimeCounter>
 8003634:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	4a55      	ldr	r2, [pc, #340]	; (8003790 <HAL_RTC_GetTime+0x1a0>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	0adb      	lsrs	r3, r3, #11
 8003640:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4b52      	ldr	r3, [pc, #328]	; (8003790 <HAL_RTC_GetTime+0x1a0>)
 8003646:	fba3 1302 	umull	r1, r3, r3, r2
 800364a:	0adb      	lsrs	r3, r3, #11
 800364c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003650:	fb01 f303 	mul.w	r3, r1, r3
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	4a4f      	ldr	r2, [pc, #316]	; (8003794 <HAL_RTC_GetTime+0x1a4>)
 8003658:	fba2 2303 	umull	r2, r3, r2, r3
 800365c:	095b      	lsrs	r3, r3, #5
 800365e:	b2da      	uxtb	r2, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	4a4a      	ldr	r2, [pc, #296]	; (8003790 <HAL_RTC_GetTime+0x1a0>)
 8003668:	fba2 1203 	umull	r1, r2, r2, r3
 800366c:	0ad2      	lsrs	r2, r2, #11
 800366e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003672:	fb01 f202 	mul.w	r2, r1, r2
 8003676:	1a9a      	subs	r2, r3, r2
 8003678:	4b46      	ldr	r3, [pc, #280]	; (8003794 <HAL_RTC_GetTime+0x1a4>)
 800367a:	fba3 1302 	umull	r1, r3, r3, r2
 800367e:	0959      	lsrs	r1, r3, #5
 8003680:	460b      	mov	r3, r1
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	1a5b      	subs	r3, r3, r1
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	1ad1      	subs	r1, r2, r3
 800368a:	b2ca      	uxtb	r2, r1
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	2b17      	cmp	r3, #23
 8003694:	d955      	bls.n	8003742 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4a3f      	ldr	r2, [pc, #252]	; (8003798 <HAL_RTC_GetTime+0x1a8>)
 800369a:	fba2 2303 	umull	r2, r3, r2, r3
 800369e:	091b      	lsrs	r3, r3, #4
 80036a0:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80036a2:	6939      	ldr	r1, [r7, #16]
 80036a4:	4b3c      	ldr	r3, [pc, #240]	; (8003798 <HAL_RTC_GetTime+0x1a8>)
 80036a6:	fba3 2301 	umull	r2, r3, r3, r1
 80036aa:	091a      	lsrs	r2, r3, #4
 80036ac:	4613      	mov	r3, r2
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	4413      	add	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	1aca      	subs	r2, r1, r3
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f9fd 	bl	8003abc <RTC_ReadAlarmCounter>
 80036c2:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ca:	d008      	beq.n	80036de <HAL_RTC_GetTime+0xee>
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d904      	bls.n	80036de <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	61fb      	str	r3, [r7, #28]
 80036dc:	e002      	b.n	80036e4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80036de:	f04f 33ff 	mov.w	r3, #4294967295
 80036e2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	4a2d      	ldr	r2, [pc, #180]	; (800379c <HAL_RTC_GetTime+0x1ac>)
 80036e8:	fb02 f303 	mul.w	r3, r2, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80036f2:	69b9      	ldr	r1, [r7, #24]
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 f9ba 	bl	8003a6e <RTC_WriteTimeCounter>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e041      	b.n	8003788 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370a:	d00c      	beq.n	8003726 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800370c:	69fa      	ldr	r2, [r7, #28]
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	4413      	add	r3, r2
 8003712:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003714:	69f9      	ldr	r1, [r7, #28]
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f9e9 	bl	8003aee <RTC_WriteAlarmCounter>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e030      	b.n	8003788 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003726:	69f9      	ldr	r1, [r7, #28]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f9e0 	bl	8003aee <RTC_WriteAlarmCounter>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e027      	b.n	8003788 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003738:	6979      	ldr	r1, [r7, #20]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fa88 	bl	8003c50 <RTC_DateUpdate>
 8003740:	e003      	b.n	800374a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	b2da      	uxtb	r2, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01a      	beq.n	8003786 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f000 fa41 	bl	8003bdc <RTC_ByteToBcd2>
 800375a:	4603      	mov	r3, r0
 800375c:	461a      	mov	r2, r3
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	785b      	ldrb	r3, [r3, #1]
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fa38 	bl	8003bdc <RTC_ByteToBcd2>
 800376c:	4603      	mov	r3, r0
 800376e:	461a      	mov	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	789b      	ldrb	r3, [r3, #2]
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fa2f 	bl	8003bdc <RTC_ByteToBcd2>
 800377e:	4603      	mov	r3, r0
 8003780:	461a      	mov	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3720      	adds	r7, #32
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	91a2b3c5 	.word	0x91a2b3c5
 8003794:	88888889 	.word	0x88888889
 8003798:	aaaaaaab 	.word	0xaaaaaaab
 800379c:	00015180 	.word	0x00015180

080037a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	61fb      	str	r3, [r7, #28]
 80037b0:	2300      	movs	r3, #0
 80037b2:	61bb      	str	r3, [r7, #24]
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_RTC_SetDate+0x24>
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e097      	b.n	80038f8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	7c1b      	ldrb	r3, [r3, #16]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_RTC_SetDate+0x34>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e091      	b.n	80038f8 <HAL_RTC_SetDate+0x158>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2202      	movs	r2, #2
 80037de:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10c      	bne.n	8003800 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	78da      	ldrb	r2, [r3, #3]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	785a      	ldrb	r2, [r3, #1]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	789a      	ldrb	r2, [r3, #2]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	739a      	strb	r2, [r3, #14]
 80037fe:	e01a      	b.n	8003836 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	78db      	ldrb	r3, [r3, #3]
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fa06 	bl	8003c16 <RTC_Bcd2ToByte>
 800380a:	4603      	mov	r3, r0
 800380c:	461a      	mov	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	785b      	ldrb	r3, [r3, #1]
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f9fd 	bl	8003c16 <RTC_Bcd2ToByte>
 800381c:	4603      	mov	r3, r0
 800381e:	461a      	mov	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	789b      	ldrb	r3, [r3, #2]
 8003828:	4618      	mov	r0, r3
 800382a:	f000 f9f4 	bl	8003c16 <RTC_Bcd2ToByte>
 800382e:	4603      	mov	r3, r0
 8003830:	461a      	mov	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	7bdb      	ldrb	r3, [r3, #15]
 800383a:	4618      	mov	r0, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	7b59      	ldrb	r1, [r3, #13]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	7b9b      	ldrb	r3, [r3, #14]
 8003844:	461a      	mov	r2, r3
 8003846:	f000 fadf 	bl	8003e08 <RTC_WeekDayNum>
 800384a:	4603      	mov	r3, r0
 800384c:	461a      	mov	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	7b1a      	ldrb	r2, [r3, #12]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f8d7 	bl	8003a0e <RTC_ReadTimeCounter>
 8003860:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	4a26      	ldr	r2, [pc, #152]	; (8003900 <HAL_RTC_SetDate+0x160>)
 8003866:	fba2 2303 	umull	r2, r3, r2, r3
 800386a:	0adb      	lsrs	r3, r3, #11
 800386c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2b18      	cmp	r3, #24
 8003872:	d93a      	bls.n	80038ea <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	4a23      	ldr	r2, [pc, #140]	; (8003904 <HAL_RTC_SetDate+0x164>)
 8003878:	fba2 2303 	umull	r2, r3, r2, r3
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	4a22      	ldr	r2, [pc, #136]	; (8003908 <HAL_RTC_SetDate+0x168>)
 8003880:	fb02 f303 	mul.w	r3, r2, r3
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800388a:	69f9      	ldr	r1, [r7, #28]
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 f8ee 	bl	8003a6e <RTC_WriteTimeCounter>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d007      	beq.n	80038a8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2204      	movs	r2, #4
 800389c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e027      	b.n	80038f8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 f907 	bl	8003abc <RTC_ReadAlarmCounter>
 80038ae:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b6:	d018      	beq.n	80038ea <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d214      	bcs.n	80038ea <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80038c6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80038ca:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80038cc:	69b9      	ldr	r1, [r7, #24]
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 f90d 	bl	8003aee <RTC_WriteAlarmCounter>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d007      	beq.n	80038ea <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2204      	movs	r2, #4
 80038de:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e006      	b.n	80038f8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2201      	movs	r2, #1
 80038ee:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3720      	adds	r7, #32
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	91a2b3c5 	.word	0x91a2b3c5
 8003904:	aaaaaaab 	.word	0xaaaaaaab
 8003908:	00015180 	.word	0x00015180

0800390c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8003918:	f107 0314 	add.w	r3, r7, #20
 800391c:	2100      	movs	r1, #0
 800391e:	460a      	mov	r2, r1
 8003920:	801a      	strh	r2, [r3, #0]
 8003922:	460a      	mov	r2, r1
 8003924:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <HAL_RTC_GetDate+0x26>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e03a      	b.n	80039ac <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003936:	f107 0314 	add.w	r3, r7, #20
 800393a:	2200      	movs	r2, #0
 800393c:	4619      	mov	r1, r3
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f7ff fe56 	bl	80035f0 <HAL_RTC_GetTime>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e02e      	b.n	80039ac <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	7b1a      	ldrb	r2, [r3, #12]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	7bda      	ldrb	r2, [r3, #15]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	7b5a      	ldrb	r2, [r3, #13]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	7b9a      	ldrb	r2, [r3, #14]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d01a      	beq.n	80039aa <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	78db      	ldrb	r3, [r3, #3]
 8003978:	4618      	mov	r0, r3
 800397a:	f000 f92f 	bl	8003bdc <RTC_ByteToBcd2>
 800397e:	4603      	mov	r3, r0
 8003980:	461a      	mov	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	785b      	ldrb	r3, [r3, #1]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f926 	bl	8003bdc <RTC_ByteToBcd2>
 8003990:	4603      	mov	r3, r0
 8003992:	461a      	mov	r2, r3
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	789b      	ldrb	r3, [r3, #2]
 800399c:	4618      	mov	r0, r3
 800399e:	f000 f91d 	bl	8003bdc <RTC_ByteToBcd2>
 80039a2:	4603      	mov	r3, r0
 80039a4:	461a      	mov	r2, r3
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e01d      	b.n	8003a06 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0208 	bic.w	r2, r2, #8
 80039d8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80039da:	f7fd fab3 	bl	8000f44 <HAL_GetTick>
 80039de:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80039e0:	e009      	b.n	80039f6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80039e2:	f7fd faaf 	bl	8000f44 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039f0:	d901      	bls.n	80039f6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e007      	b.n	8003a06 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0ee      	beq.n	80039e2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b087      	sub	sp, #28
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	827b      	strh	r3, [r7, #18]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	823b      	strh	r3, [r7, #16]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003a3e:	8a7a      	ldrh	r2, [r7, #18]
 8003a40:	8a3b      	ldrh	r3, [r7, #16]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d008      	beq.n	8003a58 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003a46:	8a3b      	ldrh	r3, [r7, #16]
 8003a48:	041a      	lsls	r2, r3, #16
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	4313      	orrs	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	e004      	b.n	8003a62 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003a58:	8a7b      	ldrh	r3, [r7, #18]
 8003a5a:	041a      	lsls	r2, r3, #16
 8003a5c:	89fb      	ldrh	r3, [r7, #14]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003a62:	697b      	ldr	r3, [r7, #20]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	371c      	adds	r7, #28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bc80      	pop	{r7}
 8003a6c:	4770      	bx	lr

08003a6e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f85d 	bl	8003b3c <RTC_EnterInitMode>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
 8003a8c:	e011      	b.n	8003ab2 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	0c12      	lsrs	r2, r2, #16
 8003a96:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	b292      	uxth	r2, r2
 8003aa0:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f872 	bl	8003b8c <RTC_ExitInitMode>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	81fb      	strh	r3, [r7, #14]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003adc:	89fb      	ldrh	r3, [r7, #14]
 8003ade:	041a      	lsls	r2, r3, #16
 8003ae0:	89bb      	ldrh	r3, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr

08003aee <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f81d 	bl	8003b3c <RTC_EnterInitMode>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	73fb      	strb	r3, [r7, #15]
 8003b0c:	e011      	b.n	8003b32 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	0c12      	lsrs	r2, r2, #16
 8003b16:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	b292      	uxth	r2, r2
 8003b20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f832 	bl	8003b8c <RTC_ExitInitMode>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003b48:	f7fd f9fc 	bl	8000f44 <HAL_GetTick>
 8003b4c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b4e:	e009      	b.n	8003b64 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b50:	f7fd f9f8 	bl	8000f44 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b5e:	d901      	bls.n	8003b64 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e00f      	b.n	8003b84 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0ee      	beq.n	8003b50 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0210 	orr.w	r2, r2, #16
 8003b80:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0210 	bic.w	r2, r2, #16
 8003ba6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003ba8:	f7fd f9cc 	bl	8000f44 <HAL_GetTick>
 8003bac:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003bae:	e009      	b.n	8003bc4 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003bb0:	f7fd f9c8 	bl	8000f44 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bbe:	d901      	bls.n	8003bc4 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e007      	b.n	8003bd4 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f003 0320 	and.w	r3, r3, #32
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0ee      	beq.n	8003bb0 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	4603      	mov	r3, r0
 8003be4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003bea:	e005      	b.n	8003bf8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	3b0a      	subs	r3, #10
 8003bf6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	2b09      	cmp	r3, #9
 8003bfc:	d8f6      	bhi.n	8003bec <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	b2db      	uxtb	r3, r3
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bc80      	pop	{r7}
 8003c14:	4770      	bx	lr

08003c16 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b085      	sub	sp, #20
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003c24:	79fb      	ldrb	r3, [r7, #7]
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	4413      	add	r3, r2
 8003c44:	b2db      	uxtb	r3, r3
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr

08003c50 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	7bdb      	ldrb	r3, [r3, #15]
 8003c6e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	7b5b      	ldrb	r3, [r3, #13]
 8003c74:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	7b9b      	ldrb	r3, [r3, #14]
 8003c7a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60bb      	str	r3, [r7, #8]
 8003c80:	e06f      	b.n	8003d62 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d011      	beq.n	8003cac <RTC_DateUpdate+0x5c>
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d00e      	beq.n	8003cac <RTC_DateUpdate+0x5c>
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2b05      	cmp	r3, #5
 8003c92:	d00b      	beq.n	8003cac <RTC_DateUpdate+0x5c>
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	2b07      	cmp	r3, #7
 8003c98:	d008      	beq.n	8003cac <RTC_DateUpdate+0x5c>
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d005      	beq.n	8003cac <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	2b0a      	cmp	r3, #10
 8003ca4:	d002      	beq.n	8003cac <RTC_DateUpdate+0x5c>
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	2b0c      	cmp	r3, #12
 8003caa:	d117      	bne.n	8003cdc <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b1e      	cmp	r3, #30
 8003cb0:	d803      	bhi.n	8003cba <RTC_DateUpdate+0x6a>
      {
        day++;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003cb8:	e050      	b.n	8003d5c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	2b0c      	cmp	r3, #12
 8003cbe:	d005      	beq.n	8003ccc <RTC_DateUpdate+0x7c>
        {
          month++;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003cca:	e047      	b.n	8003d5c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	60fb      	str	r3, [r7, #12]
          year++;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8003cda:	e03f      	b.n	8003d5c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d008      	beq.n	8003cf4 <RTC_DateUpdate+0xa4>
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	2b06      	cmp	r3, #6
 8003ce6:	d005      	beq.n	8003cf4 <RTC_DateUpdate+0xa4>
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	2b09      	cmp	r3, #9
 8003cec:	d002      	beq.n	8003cf4 <RTC_DateUpdate+0xa4>
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	2b0b      	cmp	r3, #11
 8003cf2:	d10c      	bne.n	8003d0e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b1d      	cmp	r3, #29
 8003cf8:	d803      	bhi.n	8003d02 <RTC_DateUpdate+0xb2>
      {
        day++;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003d00:	e02c      	b.n	8003d5c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	3301      	adds	r3, #1
 8003d06:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003d0c:	e026      	b.n	8003d5c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d123      	bne.n	8003d5c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b1b      	cmp	r3, #27
 8003d18:	d803      	bhi.n	8003d22 <RTC_DateUpdate+0xd2>
      {
        day++;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	e01c      	b.n	8003d5c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2b1c      	cmp	r3, #28
 8003d26:	d111      	bne.n	8003d4c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 f839 	bl	8003da4 <RTC_IsLeapYear>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <RTC_DateUpdate+0xf0>
        {
          day++;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	e00d      	b.n	8003d5c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	3301      	adds	r3, #1
 8003d44:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003d46:	2301      	movs	r3, #1
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	e007      	b.n	8003d5c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2b1d      	cmp	r3, #29
 8003d50:	d104      	bne.n	8003d5c <RTC_DateUpdate+0x10c>
      {
        month++;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	3301      	adds	r3, #1
 8003d56:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	60bb      	str	r3, [r7, #8]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d38b      	bcc.n	8003c82 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	6978      	ldr	r0, [r7, #20]
 8003d8e:	f000 f83b 	bl	8003e08 <RTC_WeekDayNum>
 8003d92:	4603      	mov	r3, r0
 8003d94:	461a      	mov	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	731a      	strb	r2, [r3, #12]
}
 8003d9a:	bf00      	nop
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e01d      	b.n	8003dfa <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	4a10      	ldr	r2, [pc, #64]	; (8003e04 <RTC_IsLeapYear+0x60>)
 8003dc2:	fba2 1203 	umull	r1, r2, r2, r3
 8003dc6:	0952      	lsrs	r2, r2, #5
 8003dc8:	2164      	movs	r1, #100	; 0x64
 8003dca:	fb01 f202 	mul.w	r2, r1, r2
 8003dce:	1a9b      	subs	r3, r3, r2
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e00f      	b.n	8003dfa <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8003dda:	88fb      	ldrh	r3, [r7, #6]
 8003ddc:	4a09      	ldr	r2, [pc, #36]	; (8003e04 <RTC_IsLeapYear+0x60>)
 8003dde:	fba2 1203 	umull	r1, r2, r2, r3
 8003de2:	09d2      	lsrs	r2, r2, #7
 8003de4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003de8:	fb01 f202 	mul.w	r2, r1, r2
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e000      	b.n	8003dfa <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003df8:	2300      	movs	r3, #0
  }
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr
 8003e04:	51eb851f 	.word	0x51eb851f

08003e08 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	70fb      	strb	r3, [r7, #3]
 8003e14:	4613      	mov	r3, r2
 8003e16:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003e26:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d82d      	bhi.n	8003e8a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003e2e:	78fa      	ldrb	r2, [r7, #3]
 8003e30:	4613      	mov	r3, r2
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	4413      	add	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	4a2c      	ldr	r2, [pc, #176]	; (8003eec <RTC_WeekDayNum+0xe4>)
 8003e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e40:	085a      	lsrs	r2, r3, #1
 8003e42:	78bb      	ldrb	r3, [r7, #2]
 8003e44:	441a      	add	r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	441a      	add	r2, r3
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	089b      	lsrs	r3, r3, #2
 8003e50:	441a      	add	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	3b01      	subs	r3, #1
 8003e56:	4926      	ldr	r1, [pc, #152]	; (8003ef0 <RTC_WeekDayNum+0xe8>)
 8003e58:	fba1 1303 	umull	r1, r3, r1, r3
 8003e5c:	095b      	lsrs	r3, r3, #5
 8003e5e:	1ad2      	subs	r2, r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	4922      	ldr	r1, [pc, #136]	; (8003ef0 <RTC_WeekDayNum+0xe8>)
 8003e66:	fba1 1303 	umull	r1, r3, r1, r3
 8003e6a:	09db      	lsrs	r3, r3, #7
 8003e6c:	4413      	add	r3, r2
 8003e6e:	1d1a      	adds	r2, r3, #4
 8003e70:	4b20      	ldr	r3, [pc, #128]	; (8003ef4 <RTC_WeekDayNum+0xec>)
 8003e72:	fba3 1302 	umull	r1, r3, r3, r2
 8003e76:	1ad1      	subs	r1, r2, r3
 8003e78:	0849      	lsrs	r1, r1, #1
 8003e7a:	440b      	add	r3, r1
 8003e7c:	0899      	lsrs	r1, r3, #2
 8003e7e:	460b      	mov	r3, r1
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	1a5b      	subs	r3, r3, r1
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	e029      	b.n	8003ede <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003e8a:	78fa      	ldrb	r2, [r7, #3]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	4413      	add	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	1a9b      	subs	r3, r3, r2
 8003e96:	4a15      	ldr	r2, [pc, #84]	; (8003eec <RTC_WeekDayNum+0xe4>)
 8003e98:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9c:	085a      	lsrs	r2, r3, #1
 8003e9e:	78bb      	ldrb	r3, [r7, #2]
 8003ea0:	441a      	add	r2, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	441a      	add	r2, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	089b      	lsrs	r3, r3, #2
 8003eaa:	441a      	add	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4910      	ldr	r1, [pc, #64]	; (8003ef0 <RTC_WeekDayNum+0xe8>)
 8003eb0:	fba1 1303 	umull	r1, r3, r1, r3
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	1ad2      	subs	r2, r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	490d      	ldr	r1, [pc, #52]	; (8003ef0 <RTC_WeekDayNum+0xe8>)
 8003ebc:	fba1 1303 	umull	r1, r3, r1, r3
 8003ec0:	09db      	lsrs	r3, r3, #7
 8003ec2:	4413      	add	r3, r2
 8003ec4:	1c9a      	adds	r2, r3, #2
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <RTC_WeekDayNum+0xec>)
 8003ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ecc:	1ad1      	subs	r1, r2, r3
 8003ece:	0849      	lsrs	r1, r1, #1
 8003ed0:	440b      	add	r3, r1
 8003ed2:	0899      	lsrs	r1, r3, #2
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	1a5b      	subs	r3, r3, r1
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	b2db      	uxtb	r3, r3
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr
 8003eec:	38e38e39 	.word	0x38e38e39
 8003ef0:	51eb851f 	.word	0x51eb851f
 8003ef4:	24924925 	.word	0x24924925

08003ef8 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d027      	beq.n	8003f5e <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d020      	beq.n	8003f5e <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00b      	beq.n	8003f42 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f824 	bl	8003f78 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0204 	mvn.w	r2, #4
 8003f38:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	745a      	strb	r2, [r3, #17]
 8003f40:	e005      	b.n	8003f4e <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f80f 	bl	8003f66 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0201 	bic.w	r2, r2, #1
 8003f5c:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr

08003f78 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr

08003f8a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e042      	b.n	8004022 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d106      	bne.n	8003fb6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7fc fe87 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2224      	movs	r2, #36	; 0x24
 8003fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fcc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f82c 	bl	800402c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fe2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695a      	ldr	r2, [r3, #20]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ff2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004002:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004066:	f023 030c 	bic.w	r3, r3, #12
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6812      	ldr	r2, [r2, #0]
 800406e:	68b9      	ldr	r1, [r7, #8]
 8004070:	430b      	orrs	r3, r1
 8004072:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a2c      	ldr	r2, [pc, #176]	; (8004140 <UART_SetConfig+0x114>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d103      	bne.n	800409c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004094:	f7fe ffea 	bl	800306c <HAL_RCC_GetPCLK2Freq>
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	e002      	b.n	80040a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800409c:	f7fe ffd2 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 80040a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	009a      	lsls	r2, r3, #2
 80040ac:	441a      	add	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	4a22      	ldr	r2, [pc, #136]	; (8004144 <UART_SetConfig+0x118>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	0119      	lsls	r1, r3, #4
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	009a      	lsls	r2, r3, #2
 80040cc:	441a      	add	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80040d8:	4b1a      	ldr	r3, [pc, #104]	; (8004144 <UART_SetConfig+0x118>)
 80040da:	fba3 0302 	umull	r0, r3, r3, r2
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2064      	movs	r0, #100	; 0x64
 80040e2:	fb00 f303 	mul.w	r3, r0, r3
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	3332      	adds	r3, #50	; 0x32
 80040ec:	4a15      	ldr	r2, [pc, #84]	; (8004144 <UART_SetConfig+0x118>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040f8:	4419      	add	r1, r3
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009a      	lsls	r2, r3, #2
 8004104:	441a      	add	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004110:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <UART_SetConfig+0x118>)
 8004112:	fba3 0302 	umull	r0, r3, r3, r2
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	2064      	movs	r0, #100	; 0x64
 800411a:	fb00 f303 	mul.w	r3, r0, r3
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	3332      	adds	r3, #50	; 0x32
 8004124:	4a07      	ldr	r2, [pc, #28]	; (8004144 <UART_SetConfig+0x118>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	f003 020f 	and.w	r2, r3, #15
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	440a      	add	r2, r1
 8004136:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40013800 	.word	0x40013800
 8004144:	51eb851f 	.word	0x51eb851f

08004148 <lcd_send_cmd>:
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include "LiquidCrystal_I2C.h"
static void lcd_send_cmd (LiquidCrystal_I2C *lcd, uint8_t cmd)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af02      	add	r7, sp, #8
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	70fb      	strb	r3, [r7, #3]
  uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (cmd&0xf0);
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	f023 030f 	bic.w	r3, r3, #15
 800415a:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	7a5a      	ldrb	r2, [r3, #9]
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	4313      	orrs	r3, r2
 800416a:	b2db      	uxtb	r3, r3
 800416c:	f043 0304 	orr.w	r3, r3, #4
 8004170:	b2db      	uxtb	r3, r3
 8004172:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	7a5a      	ldrb	r2, [r3, #9]
 8004178:	7bfb      	ldrb	r3, [r7, #15]
 800417a:	4313      	orrs	r3, r2
 800417c:	b2db      	uxtb	r3, r3
 800417e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_SET); //0xXXXX.1100  en=1, rs=0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	7a5a      	ldrb	r2, [r3, #9]
 8004184:	7bbb      	ldrb	r3, [r7, #14]
 8004186:	4313      	orrs	r3, r2
 8004188:	b2db      	uxtb	r3, r3
 800418a:	f043 0304 	orr.w	r3, r3, #4
 800418e:	b2db      	uxtb	r3, r3
 8004190:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_CLEAR|LCD_EN_CLEAR); //0xXXXX.1000  en=0, rs=0
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	7a5a      	ldrb	r2, [r3, #9]
 8004196:	7bbb      	ldrb	r3, [r7, #14]
 8004198:	4313      	orrs	r3, r2
 800419a:	b2db      	uxtb	r3, r3
 800419c:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(lcd->pI2c, lcd->Addr,(uint8_t *) data_t, 4, 100);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6858      	ldr	r0, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	b299      	uxth	r1, r3
 80041a8:	f107 0208 	add.w	r2, r7, #8
 80041ac:	2364      	movs	r3, #100	; 0x64
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	2304      	movs	r3, #4
 80041b2:	f7fe f819 	bl	80021e8 <HAL_I2C_Master_Transmit>
}
 80041b6:	bf00      	nop
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <lcd_send_data>:

static void lcd_send_data(LiquidCrystal_I2C *lcd,uint8_t data)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b086      	sub	sp, #24
 80041c2:	af02      	add	r7, sp, #8
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	460b      	mov	r3, r1
 80041c8:	70fb      	strb	r3, [r7, #3]
	uint8_t data_h, data_l;
	uint8_t data_t[4];
	data_h = (data&0xf0);
 80041ca:	78fb      	ldrb	r3, [r7, #3]
 80041cc:	f023 030f 	bic.w	r3, r3, #15
 80041d0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	7a5a      	ldrb	r2, [r3, #9]
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	4313      	orrs	r3, r2
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	f043 0305 	orr.w	r3, r3, #5
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	7a5a      	ldrb	r2, [r3, #9]
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_SET); //0xXXXX.1101  en=1, rs=1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	7a5a      	ldrb	r2, [r3, #9]
 8004200:	7bbb      	ldrb	r3, [r7, #14]
 8004202:	4313      	orrs	r3, r2
 8004204:	b2db      	uxtb	r3, r3
 8004206:	f043 0305 	orr.w	r3, r3, #5
 800420a:	b2db      	uxtb	r3, r3
 800420c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|(lcd->Backlightval|LCD_RS_SET|LCD_EN_CLEAR); //0xXXXX.1001  en=0, rs=1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	7a5a      	ldrb	r2, [r3, #9]
 8004212:	7bbb      	ldrb	r3, [r7, #14]
 8004214:	4313      	orrs	r3, r2
 8004216:	b2db      	uxtb	r3, r3
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	b2db      	uxtb	r3, r3
 800421e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (lcd->pI2c, lcd->Addr,(uint8_t *) data_t, 4, 100);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6858      	ldr	r0, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	b299      	uxth	r1, r3
 800422a:	f107 0208 	add.w	r2, r7, #8
 800422e:	2364      	movs	r3, #100	; 0x64
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	2304      	movs	r3, #4
 8004234:	f7fd ffd8 	bl	80021e8 <HAL_I2C_Master_Transmit>
}
 8004238:	bf00      	nop
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <lcd_clear_display>:
{
	lcd_send_data(lcd,data);
}

void lcd_clear_display (LiquidCrystal_I2C *lcd)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
	lcd_send_cmd (lcd,LCD_CLEARDISPLAY);
 8004248:	2101      	movs	r1, #1
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff ff7c 	bl	8004148 <lcd_send_cmd>
	HAL_Delay(10);
 8004250:	200a      	movs	r0, #10
 8004252:	f7fc fe81 	bl	8000f58 <HAL_Delay>
}
 8004256:	bf00      	nop
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <lcd_set_cursor>:
	lcd->Backlightval = LCD_NOBACKLIGHT;
	HAL_I2C_Master_Transmit (lcd->pI2c, lcd->Addr,&lcd->Backlightval, 1, 100);
}

void lcd_set_cursor(LiquidCrystal_I2C *lcd,uint8_t row, uint8_t col)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	460b      	mov	r3, r1
 800426a:	70fb      	strb	r3, [r7, #3]
 800426c:	4613      	mov	r3, r2
 800426e:	70bb      	strb	r3, [r7, #2]
	uint8_t row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8004270:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <lcd_set_cursor+0x40>)
 8004272:	60fb      	str	r3, [r7, #12]
	lcd_send_cmd(lcd,LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8004274:	78fb      	ldrb	r3, [r7, #3]
 8004276:	3310      	adds	r3, #16
 8004278:	443b      	add	r3, r7
 800427a:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 800427e:	78bb      	ldrb	r3, [r7, #2]
 8004280:	4413      	add	r3, r2
 8004282:	b2db      	uxtb	r3, r3
 8004284:	b25b      	sxtb	r3, r3
 8004286:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800428a:	b25b      	sxtb	r3, r3
 800428c:	b2db      	uxtb	r3, r3
 800428e:	4619      	mov	r1, r3
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff ff59 	bl	8004148 <lcd_send_cmd>
}
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	54144000 	.word	0x54144000

080042a4 <lcd_set_cursor_blink_off>:
	
	lcd->DisplayControl |= LCD_BLINKON;
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
}
void lcd_set_cursor_blink_off(LiquidCrystal_I2C *lcd) 
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
	lcd->DisplayControl &= ~LCD_BLINKON;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	7a1b      	ldrb	r3, [r3, #8]
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	721a      	strb	r2, [r3, #8]
	lcd_send_cmd(lcd,LCD_DISPLAYCONTROL | lcd->DisplayControl);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	7a1b      	ldrb	r3, [r3, #8]
 80042be:	f043 0308 	orr.w	r3, r3, #8
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	4619      	mov	r1, r3
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7ff ff3e 	bl	8004148 <lcd_send_cmd>
}
 80042cc:	bf00      	nop
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <lcd_printf>:
void lcd_write(LiquidCrystal_I2C *lcd,uint8_t location)
{
	lcd_send_data(lcd,location);
}
void lcd_printf(LiquidCrystal_I2C *lcd,const char* str, ...)
{
 80042d4:	b40e      	push	{r1, r2, r3}
 80042d6:	b590      	push	{r4, r7, lr}
 80042d8:	b08a      	sub	sp, #40	; 0x28
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  char stringArray[20];
	
  va_list args;
  va_start(args, str);
 80042de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80042e2:	60fb      	str	r3, [r7, #12]
  vsprintf(stringArray, str, args);
 80042e4:	f107 0310 	add.w	r3, r7, #16
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 f883 	bl	80043f8 <vsiprintf>
  va_end(args);
	
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80042f2:	2300      	movs	r3, #0
 80042f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80042f8:	e00e      	b.n	8004318 <lcd_printf+0x44>
  {
    lcd_send_data(lcd,(uint8_t)stringArray[i]);
 80042fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042fe:	3328      	adds	r3, #40	; 0x28
 8004300:	443b      	add	r3, r7
 8004302:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004306:	4619      	mov	r1, r3
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff ff58 	bl	80041be <lcd_send_data>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 800430e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004312:	3301      	adds	r3, #1
 8004314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004318:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 800431c:	f107 0310 	add.w	r3, r7, #16
 8004320:	4618      	mov	r0, r3
 8004322:	f7fb ff13 	bl	800014c <strlen>
 8004326:	4603      	mov	r3, r0
 8004328:	429c      	cmp	r4, r3
 800432a:	d203      	bcs.n	8004334 <lcd_printf+0x60>
 800432c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004330:	2b0f      	cmp	r3, #15
 8004332:	d9e2      	bls.n	80042fa <lcd_printf+0x26>
  }
}
 8004334:	bf00      	nop
 8004336:	3728      	adds	r7, #40	; 0x28
 8004338:	46bd      	mov	sp, r7
 800433a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800433e:	b003      	add	sp, #12
 8004340:	4770      	bx	lr

08004342 <lcd_init>:
void lcd_init (LiquidCrystal_I2C *lcd,I2C_HandleTypeDef *_hi2c,uint8_t addr)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b084      	sub	sp, #16
 8004346:	af00      	add	r7, sp, #0
 8004348:	60f8      	str	r0, [r7, #12]
 800434a:	60b9      	str	r1, [r7, #8]
 800434c:	4613      	mov	r3, r2
 800434e:	71fb      	strb	r3, [r7, #7]
	lcd->pI2c = _hi2c;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	605a      	str	r2, [r3, #4]
	lcd->Addr = addr<<1;
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	b2da      	uxtb	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	701a      	strb	r2, [r3, #0]
	lcd->DisplayControl |= LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	7a1b      	ldrb	r3, [r3, #8]
 8004364:	f043 0304 	orr.w	r3, r3, #4
 8004368:	b2da      	uxtb	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	721a      	strb	r2, [r3, #8]
	lcd_send_cmd (lcd,0x33); 
 800436e:	2133      	movs	r1, #51	; 0x33
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f7ff fee9 	bl	8004148 <lcd_send_cmd>
	lcd_send_cmd (lcd,0x32);
 8004376:	2132      	movs	r1, #50	; 0x32
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f7ff fee5 	bl	8004148 <lcd_send_cmd>
	HAL_Delay(5);
 800437e:	2005      	movs	r0, #5
 8004380:	f7fc fdea 	bl	8000f58 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_CLEARDISPLAY); 
 8004384:	2101      	movs	r1, #1
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f7ff fede 	bl	8004148 <lcd_send_cmd>
	HAL_Delay(5);
 800438c:	2005      	movs	r0, #5
 800438e:	f7fc fde3 	bl	8000f58 <HAL_Delay>
	lcd_send_cmd (lcd,0x0c); 	
 8004392:	210c      	movs	r1, #12
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f7ff fed7 	bl	8004148 <lcd_send_cmd>
	HAL_Delay(5);
 800439a:	2005      	movs	r0, #5
 800439c:	f7fc fddc 	bl	8000f58 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_RETURNHOME); 
 80043a0:	2102      	movs	r1, #2
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f7ff fed0 	bl	8004148 <lcd_send_cmd>
	HAL_Delay(5);
 80043a8:	2005      	movs	r0, #5
 80043aa:	f7fc fdd5 	bl	8000f58 <HAL_Delay>
	lcd_send_cmd (lcd,LCD_SETDDRAMADDR);
 80043ae:	2180      	movs	r1, #128	; 0x80
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f7ff fec9 	bl	8004148 <lcd_send_cmd>
	lcd_set_cursor_blink_off(lcd);
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f7ff ff74 	bl	80042a4 <lcd_set_cursor_blink_off>
	lcd->Backlightval = LCD_BACKLIGHT;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2208      	movs	r2, #8
 80043c0:	725a      	strb	r2, [r3, #9]
}
 80043c2:	bf00      	nop
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <_vsiprintf_r>:
 80043cc:	b500      	push	{lr}
 80043ce:	b09b      	sub	sp, #108	; 0x6c
 80043d0:	9100      	str	r1, [sp, #0]
 80043d2:	9104      	str	r1, [sp, #16]
 80043d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043d8:	9105      	str	r1, [sp, #20]
 80043da:	9102      	str	r1, [sp, #8]
 80043dc:	4905      	ldr	r1, [pc, #20]	; (80043f4 <_vsiprintf_r+0x28>)
 80043de:	9103      	str	r1, [sp, #12]
 80043e0:	4669      	mov	r1, sp
 80043e2:	f000 f995 	bl	8004710 <_svfiprintf_r>
 80043e6:	2200      	movs	r2, #0
 80043e8:	9b00      	ldr	r3, [sp, #0]
 80043ea:	701a      	strb	r2, [r3, #0]
 80043ec:	b01b      	add	sp, #108	; 0x6c
 80043ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80043f2:	bf00      	nop
 80043f4:	ffff0208 	.word	0xffff0208

080043f8 <vsiprintf>:
 80043f8:	4613      	mov	r3, r2
 80043fa:	460a      	mov	r2, r1
 80043fc:	4601      	mov	r1, r0
 80043fe:	4802      	ldr	r0, [pc, #8]	; (8004408 <vsiprintf+0x10>)
 8004400:	6800      	ldr	r0, [r0, #0]
 8004402:	f7ff bfe3 	b.w	80043cc <_vsiprintf_r>
 8004406:	bf00      	nop
 8004408:	20000058 	.word	0x20000058

0800440c <memset>:
 800440c:	4603      	mov	r3, r0
 800440e:	4402      	add	r2, r0
 8004410:	4293      	cmp	r3, r2
 8004412:	d100      	bne.n	8004416 <memset+0xa>
 8004414:	4770      	bx	lr
 8004416:	f803 1b01 	strb.w	r1, [r3], #1
 800441a:	e7f9      	b.n	8004410 <memset+0x4>

0800441c <__errno>:
 800441c:	4b01      	ldr	r3, [pc, #4]	; (8004424 <__errno+0x8>)
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	20000058 	.word	0x20000058

08004428 <__libc_init_array>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	2600      	movs	r6, #0
 800442c:	4d0c      	ldr	r5, [pc, #48]	; (8004460 <__libc_init_array+0x38>)
 800442e:	4c0d      	ldr	r4, [pc, #52]	; (8004464 <__libc_init_array+0x3c>)
 8004430:	1b64      	subs	r4, r4, r5
 8004432:	10a4      	asrs	r4, r4, #2
 8004434:	42a6      	cmp	r6, r4
 8004436:	d109      	bne.n	800444c <__libc_init_array+0x24>
 8004438:	f000 fc7a 	bl	8004d30 <_init>
 800443c:	2600      	movs	r6, #0
 800443e:	4d0a      	ldr	r5, [pc, #40]	; (8004468 <__libc_init_array+0x40>)
 8004440:	4c0a      	ldr	r4, [pc, #40]	; (800446c <__libc_init_array+0x44>)
 8004442:	1b64      	subs	r4, r4, r5
 8004444:	10a4      	asrs	r4, r4, #2
 8004446:	42a6      	cmp	r6, r4
 8004448:	d105      	bne.n	8004456 <__libc_init_array+0x2e>
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004450:	4798      	blx	r3
 8004452:	3601      	adds	r6, #1
 8004454:	e7ee      	b.n	8004434 <__libc_init_array+0xc>
 8004456:	f855 3b04 	ldr.w	r3, [r5], #4
 800445a:	4798      	blx	r3
 800445c:	3601      	adds	r6, #1
 800445e:	e7f2      	b.n	8004446 <__libc_init_array+0x1e>
 8004460:	08004e00 	.word	0x08004e00
 8004464:	08004e00 	.word	0x08004e00
 8004468:	08004e00 	.word	0x08004e00
 800446c:	08004e04 	.word	0x08004e04

08004470 <__retarget_lock_acquire_recursive>:
 8004470:	4770      	bx	lr

08004472 <__retarget_lock_release_recursive>:
 8004472:	4770      	bx	lr

08004474 <_free_r>:
 8004474:	b538      	push	{r3, r4, r5, lr}
 8004476:	4605      	mov	r5, r0
 8004478:	2900      	cmp	r1, #0
 800447a:	d040      	beq.n	80044fe <_free_r+0x8a>
 800447c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004480:	1f0c      	subs	r4, r1, #4
 8004482:	2b00      	cmp	r3, #0
 8004484:	bfb8      	it	lt
 8004486:	18e4      	addlt	r4, r4, r3
 8004488:	f000 f8dc 	bl	8004644 <__malloc_lock>
 800448c:	4a1c      	ldr	r2, [pc, #112]	; (8004500 <_free_r+0x8c>)
 800448e:	6813      	ldr	r3, [r2, #0]
 8004490:	b933      	cbnz	r3, 80044a0 <_free_r+0x2c>
 8004492:	6063      	str	r3, [r4, #4]
 8004494:	6014      	str	r4, [r2, #0]
 8004496:	4628      	mov	r0, r5
 8004498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800449c:	f000 b8d8 	b.w	8004650 <__malloc_unlock>
 80044a0:	42a3      	cmp	r3, r4
 80044a2:	d908      	bls.n	80044b6 <_free_r+0x42>
 80044a4:	6820      	ldr	r0, [r4, #0]
 80044a6:	1821      	adds	r1, r4, r0
 80044a8:	428b      	cmp	r3, r1
 80044aa:	bf01      	itttt	eq
 80044ac:	6819      	ldreq	r1, [r3, #0]
 80044ae:	685b      	ldreq	r3, [r3, #4]
 80044b0:	1809      	addeq	r1, r1, r0
 80044b2:	6021      	streq	r1, [r4, #0]
 80044b4:	e7ed      	b.n	8004492 <_free_r+0x1e>
 80044b6:	461a      	mov	r2, r3
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	b10b      	cbz	r3, 80044c0 <_free_r+0x4c>
 80044bc:	42a3      	cmp	r3, r4
 80044be:	d9fa      	bls.n	80044b6 <_free_r+0x42>
 80044c0:	6811      	ldr	r1, [r2, #0]
 80044c2:	1850      	adds	r0, r2, r1
 80044c4:	42a0      	cmp	r0, r4
 80044c6:	d10b      	bne.n	80044e0 <_free_r+0x6c>
 80044c8:	6820      	ldr	r0, [r4, #0]
 80044ca:	4401      	add	r1, r0
 80044cc:	1850      	adds	r0, r2, r1
 80044ce:	4283      	cmp	r3, r0
 80044d0:	6011      	str	r1, [r2, #0]
 80044d2:	d1e0      	bne.n	8004496 <_free_r+0x22>
 80044d4:	6818      	ldr	r0, [r3, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	4408      	add	r0, r1
 80044da:	6010      	str	r0, [r2, #0]
 80044dc:	6053      	str	r3, [r2, #4]
 80044de:	e7da      	b.n	8004496 <_free_r+0x22>
 80044e0:	d902      	bls.n	80044e8 <_free_r+0x74>
 80044e2:	230c      	movs	r3, #12
 80044e4:	602b      	str	r3, [r5, #0]
 80044e6:	e7d6      	b.n	8004496 <_free_r+0x22>
 80044e8:	6820      	ldr	r0, [r4, #0]
 80044ea:	1821      	adds	r1, r4, r0
 80044ec:	428b      	cmp	r3, r1
 80044ee:	bf01      	itttt	eq
 80044f0:	6819      	ldreq	r1, [r3, #0]
 80044f2:	685b      	ldreq	r3, [r3, #4]
 80044f4:	1809      	addeq	r1, r1, r0
 80044f6:	6021      	streq	r1, [r4, #0]
 80044f8:	6063      	str	r3, [r4, #4]
 80044fa:	6054      	str	r4, [r2, #4]
 80044fc:	e7cb      	b.n	8004496 <_free_r+0x22>
 80044fe:	bd38      	pop	{r3, r4, r5, pc}
 8004500:	20000350 	.word	0x20000350

08004504 <sbrk_aligned>:
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	4e0e      	ldr	r6, [pc, #56]	; (8004540 <sbrk_aligned+0x3c>)
 8004508:	460c      	mov	r4, r1
 800450a:	6831      	ldr	r1, [r6, #0]
 800450c:	4605      	mov	r5, r0
 800450e:	b911      	cbnz	r1, 8004516 <sbrk_aligned+0x12>
 8004510:	f000 fbaa 	bl	8004c68 <_sbrk_r>
 8004514:	6030      	str	r0, [r6, #0]
 8004516:	4621      	mov	r1, r4
 8004518:	4628      	mov	r0, r5
 800451a:	f000 fba5 	bl	8004c68 <_sbrk_r>
 800451e:	1c43      	adds	r3, r0, #1
 8004520:	d00a      	beq.n	8004538 <sbrk_aligned+0x34>
 8004522:	1cc4      	adds	r4, r0, #3
 8004524:	f024 0403 	bic.w	r4, r4, #3
 8004528:	42a0      	cmp	r0, r4
 800452a:	d007      	beq.n	800453c <sbrk_aligned+0x38>
 800452c:	1a21      	subs	r1, r4, r0
 800452e:	4628      	mov	r0, r5
 8004530:	f000 fb9a 	bl	8004c68 <_sbrk_r>
 8004534:	3001      	adds	r0, #1
 8004536:	d101      	bne.n	800453c <sbrk_aligned+0x38>
 8004538:	f04f 34ff 	mov.w	r4, #4294967295
 800453c:	4620      	mov	r0, r4
 800453e:	bd70      	pop	{r4, r5, r6, pc}
 8004540:	20000354 	.word	0x20000354

08004544 <_malloc_r>:
 8004544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004548:	1ccd      	adds	r5, r1, #3
 800454a:	f025 0503 	bic.w	r5, r5, #3
 800454e:	3508      	adds	r5, #8
 8004550:	2d0c      	cmp	r5, #12
 8004552:	bf38      	it	cc
 8004554:	250c      	movcc	r5, #12
 8004556:	2d00      	cmp	r5, #0
 8004558:	4607      	mov	r7, r0
 800455a:	db01      	blt.n	8004560 <_malloc_r+0x1c>
 800455c:	42a9      	cmp	r1, r5
 800455e:	d905      	bls.n	800456c <_malloc_r+0x28>
 8004560:	230c      	movs	r3, #12
 8004562:	2600      	movs	r6, #0
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	4630      	mov	r0, r6
 8004568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800456c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004640 <_malloc_r+0xfc>
 8004570:	f000 f868 	bl	8004644 <__malloc_lock>
 8004574:	f8d8 3000 	ldr.w	r3, [r8]
 8004578:	461c      	mov	r4, r3
 800457a:	bb5c      	cbnz	r4, 80045d4 <_malloc_r+0x90>
 800457c:	4629      	mov	r1, r5
 800457e:	4638      	mov	r0, r7
 8004580:	f7ff ffc0 	bl	8004504 <sbrk_aligned>
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	4604      	mov	r4, r0
 8004588:	d155      	bne.n	8004636 <_malloc_r+0xf2>
 800458a:	f8d8 4000 	ldr.w	r4, [r8]
 800458e:	4626      	mov	r6, r4
 8004590:	2e00      	cmp	r6, #0
 8004592:	d145      	bne.n	8004620 <_malloc_r+0xdc>
 8004594:	2c00      	cmp	r4, #0
 8004596:	d048      	beq.n	800462a <_malloc_r+0xe6>
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	4631      	mov	r1, r6
 800459c:	4638      	mov	r0, r7
 800459e:	eb04 0903 	add.w	r9, r4, r3
 80045a2:	f000 fb61 	bl	8004c68 <_sbrk_r>
 80045a6:	4581      	cmp	r9, r0
 80045a8:	d13f      	bne.n	800462a <_malloc_r+0xe6>
 80045aa:	6821      	ldr	r1, [r4, #0]
 80045ac:	4638      	mov	r0, r7
 80045ae:	1a6d      	subs	r5, r5, r1
 80045b0:	4629      	mov	r1, r5
 80045b2:	f7ff ffa7 	bl	8004504 <sbrk_aligned>
 80045b6:	3001      	adds	r0, #1
 80045b8:	d037      	beq.n	800462a <_malloc_r+0xe6>
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	442b      	add	r3, r5
 80045be:	6023      	str	r3, [r4, #0]
 80045c0:	f8d8 3000 	ldr.w	r3, [r8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d038      	beq.n	800463a <_malloc_r+0xf6>
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	42a2      	cmp	r2, r4
 80045cc:	d12b      	bne.n	8004626 <_malloc_r+0xe2>
 80045ce:	2200      	movs	r2, #0
 80045d0:	605a      	str	r2, [r3, #4]
 80045d2:	e00f      	b.n	80045f4 <_malloc_r+0xb0>
 80045d4:	6822      	ldr	r2, [r4, #0]
 80045d6:	1b52      	subs	r2, r2, r5
 80045d8:	d41f      	bmi.n	800461a <_malloc_r+0xd6>
 80045da:	2a0b      	cmp	r2, #11
 80045dc:	d917      	bls.n	800460e <_malloc_r+0xca>
 80045de:	1961      	adds	r1, r4, r5
 80045e0:	42a3      	cmp	r3, r4
 80045e2:	6025      	str	r5, [r4, #0]
 80045e4:	bf18      	it	ne
 80045e6:	6059      	strne	r1, [r3, #4]
 80045e8:	6863      	ldr	r3, [r4, #4]
 80045ea:	bf08      	it	eq
 80045ec:	f8c8 1000 	streq.w	r1, [r8]
 80045f0:	5162      	str	r2, [r4, r5]
 80045f2:	604b      	str	r3, [r1, #4]
 80045f4:	4638      	mov	r0, r7
 80045f6:	f104 060b 	add.w	r6, r4, #11
 80045fa:	f000 f829 	bl	8004650 <__malloc_unlock>
 80045fe:	f026 0607 	bic.w	r6, r6, #7
 8004602:	1d23      	adds	r3, r4, #4
 8004604:	1af2      	subs	r2, r6, r3
 8004606:	d0ae      	beq.n	8004566 <_malloc_r+0x22>
 8004608:	1b9b      	subs	r3, r3, r6
 800460a:	50a3      	str	r3, [r4, r2]
 800460c:	e7ab      	b.n	8004566 <_malloc_r+0x22>
 800460e:	42a3      	cmp	r3, r4
 8004610:	6862      	ldr	r2, [r4, #4]
 8004612:	d1dd      	bne.n	80045d0 <_malloc_r+0x8c>
 8004614:	f8c8 2000 	str.w	r2, [r8]
 8004618:	e7ec      	b.n	80045f4 <_malloc_r+0xb0>
 800461a:	4623      	mov	r3, r4
 800461c:	6864      	ldr	r4, [r4, #4]
 800461e:	e7ac      	b.n	800457a <_malloc_r+0x36>
 8004620:	4634      	mov	r4, r6
 8004622:	6876      	ldr	r6, [r6, #4]
 8004624:	e7b4      	b.n	8004590 <_malloc_r+0x4c>
 8004626:	4613      	mov	r3, r2
 8004628:	e7cc      	b.n	80045c4 <_malloc_r+0x80>
 800462a:	230c      	movs	r3, #12
 800462c:	4638      	mov	r0, r7
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	f000 f80e 	bl	8004650 <__malloc_unlock>
 8004634:	e797      	b.n	8004566 <_malloc_r+0x22>
 8004636:	6025      	str	r5, [r4, #0]
 8004638:	e7dc      	b.n	80045f4 <_malloc_r+0xb0>
 800463a:	605b      	str	r3, [r3, #4]
 800463c:	deff      	udf	#255	; 0xff
 800463e:	bf00      	nop
 8004640:	20000350 	.word	0x20000350

08004644 <__malloc_lock>:
 8004644:	4801      	ldr	r0, [pc, #4]	; (800464c <__malloc_lock+0x8>)
 8004646:	f7ff bf13 	b.w	8004470 <__retarget_lock_acquire_recursive>
 800464a:	bf00      	nop
 800464c:	2000034c 	.word	0x2000034c

08004650 <__malloc_unlock>:
 8004650:	4801      	ldr	r0, [pc, #4]	; (8004658 <__malloc_unlock+0x8>)
 8004652:	f7ff bf0e 	b.w	8004472 <__retarget_lock_release_recursive>
 8004656:	bf00      	nop
 8004658:	2000034c 	.word	0x2000034c

0800465c <__ssputs_r>:
 800465c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004660:	461f      	mov	r7, r3
 8004662:	688e      	ldr	r6, [r1, #8]
 8004664:	4682      	mov	sl, r0
 8004666:	42be      	cmp	r6, r7
 8004668:	460c      	mov	r4, r1
 800466a:	4690      	mov	r8, r2
 800466c:	680b      	ldr	r3, [r1, #0]
 800466e:	d82c      	bhi.n	80046ca <__ssputs_r+0x6e>
 8004670:	898a      	ldrh	r2, [r1, #12]
 8004672:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004676:	d026      	beq.n	80046c6 <__ssputs_r+0x6a>
 8004678:	6965      	ldr	r5, [r4, #20]
 800467a:	6909      	ldr	r1, [r1, #16]
 800467c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004680:	eba3 0901 	sub.w	r9, r3, r1
 8004684:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004688:	1c7b      	adds	r3, r7, #1
 800468a:	444b      	add	r3, r9
 800468c:	106d      	asrs	r5, r5, #1
 800468e:	429d      	cmp	r5, r3
 8004690:	bf38      	it	cc
 8004692:	461d      	movcc	r5, r3
 8004694:	0553      	lsls	r3, r2, #21
 8004696:	d527      	bpl.n	80046e8 <__ssputs_r+0x8c>
 8004698:	4629      	mov	r1, r5
 800469a:	f7ff ff53 	bl	8004544 <_malloc_r>
 800469e:	4606      	mov	r6, r0
 80046a0:	b360      	cbz	r0, 80046fc <__ssputs_r+0xa0>
 80046a2:	464a      	mov	r2, r9
 80046a4:	6921      	ldr	r1, [r4, #16]
 80046a6:	f000 fafd 	bl	8004ca4 <memcpy>
 80046aa:	89a3      	ldrh	r3, [r4, #12]
 80046ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b4:	81a3      	strh	r3, [r4, #12]
 80046b6:	6126      	str	r6, [r4, #16]
 80046b8:	444e      	add	r6, r9
 80046ba:	6026      	str	r6, [r4, #0]
 80046bc:	463e      	mov	r6, r7
 80046be:	6165      	str	r5, [r4, #20]
 80046c0:	eba5 0509 	sub.w	r5, r5, r9
 80046c4:	60a5      	str	r5, [r4, #8]
 80046c6:	42be      	cmp	r6, r7
 80046c8:	d900      	bls.n	80046cc <__ssputs_r+0x70>
 80046ca:	463e      	mov	r6, r7
 80046cc:	4632      	mov	r2, r6
 80046ce:	4641      	mov	r1, r8
 80046d0:	6820      	ldr	r0, [r4, #0]
 80046d2:	f000 faaf 	bl	8004c34 <memmove>
 80046d6:	2000      	movs	r0, #0
 80046d8:	68a3      	ldr	r3, [r4, #8]
 80046da:	1b9b      	subs	r3, r3, r6
 80046dc:	60a3      	str	r3, [r4, #8]
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	4433      	add	r3, r6
 80046e2:	6023      	str	r3, [r4, #0]
 80046e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e8:	462a      	mov	r2, r5
 80046ea:	f000 fae9 	bl	8004cc0 <_realloc_r>
 80046ee:	4606      	mov	r6, r0
 80046f0:	2800      	cmp	r0, #0
 80046f2:	d1e0      	bne.n	80046b6 <__ssputs_r+0x5a>
 80046f4:	4650      	mov	r0, sl
 80046f6:	6921      	ldr	r1, [r4, #16]
 80046f8:	f7ff febc 	bl	8004474 <_free_r>
 80046fc:	230c      	movs	r3, #12
 80046fe:	f8ca 3000 	str.w	r3, [sl]
 8004702:	89a3      	ldrh	r3, [r4, #12]
 8004704:	f04f 30ff 	mov.w	r0, #4294967295
 8004708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800470c:	81a3      	strh	r3, [r4, #12]
 800470e:	e7e9      	b.n	80046e4 <__ssputs_r+0x88>

08004710 <_svfiprintf_r>:
 8004710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004714:	4698      	mov	r8, r3
 8004716:	898b      	ldrh	r3, [r1, #12]
 8004718:	4607      	mov	r7, r0
 800471a:	061b      	lsls	r3, r3, #24
 800471c:	460d      	mov	r5, r1
 800471e:	4614      	mov	r4, r2
 8004720:	b09d      	sub	sp, #116	; 0x74
 8004722:	d50e      	bpl.n	8004742 <_svfiprintf_r+0x32>
 8004724:	690b      	ldr	r3, [r1, #16]
 8004726:	b963      	cbnz	r3, 8004742 <_svfiprintf_r+0x32>
 8004728:	2140      	movs	r1, #64	; 0x40
 800472a:	f7ff ff0b 	bl	8004544 <_malloc_r>
 800472e:	6028      	str	r0, [r5, #0]
 8004730:	6128      	str	r0, [r5, #16]
 8004732:	b920      	cbnz	r0, 800473e <_svfiprintf_r+0x2e>
 8004734:	230c      	movs	r3, #12
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	f04f 30ff 	mov.w	r0, #4294967295
 800473c:	e0d0      	b.n	80048e0 <_svfiprintf_r+0x1d0>
 800473e:	2340      	movs	r3, #64	; 0x40
 8004740:	616b      	str	r3, [r5, #20]
 8004742:	2300      	movs	r3, #0
 8004744:	9309      	str	r3, [sp, #36]	; 0x24
 8004746:	2320      	movs	r3, #32
 8004748:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800474c:	2330      	movs	r3, #48	; 0x30
 800474e:	f04f 0901 	mov.w	r9, #1
 8004752:	f8cd 800c 	str.w	r8, [sp, #12]
 8004756:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80048f8 <_svfiprintf_r+0x1e8>
 800475a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800475e:	4623      	mov	r3, r4
 8004760:	469a      	mov	sl, r3
 8004762:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004766:	b10a      	cbz	r2, 800476c <_svfiprintf_r+0x5c>
 8004768:	2a25      	cmp	r2, #37	; 0x25
 800476a:	d1f9      	bne.n	8004760 <_svfiprintf_r+0x50>
 800476c:	ebba 0b04 	subs.w	fp, sl, r4
 8004770:	d00b      	beq.n	800478a <_svfiprintf_r+0x7a>
 8004772:	465b      	mov	r3, fp
 8004774:	4622      	mov	r2, r4
 8004776:	4629      	mov	r1, r5
 8004778:	4638      	mov	r0, r7
 800477a:	f7ff ff6f 	bl	800465c <__ssputs_r>
 800477e:	3001      	adds	r0, #1
 8004780:	f000 80a9 	beq.w	80048d6 <_svfiprintf_r+0x1c6>
 8004784:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004786:	445a      	add	r2, fp
 8004788:	9209      	str	r2, [sp, #36]	; 0x24
 800478a:	f89a 3000 	ldrb.w	r3, [sl]
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 80a1 	beq.w	80048d6 <_svfiprintf_r+0x1c6>
 8004794:	2300      	movs	r3, #0
 8004796:	f04f 32ff 	mov.w	r2, #4294967295
 800479a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800479e:	f10a 0a01 	add.w	sl, sl, #1
 80047a2:	9304      	str	r3, [sp, #16]
 80047a4:	9307      	str	r3, [sp, #28]
 80047a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047aa:	931a      	str	r3, [sp, #104]	; 0x68
 80047ac:	4654      	mov	r4, sl
 80047ae:	2205      	movs	r2, #5
 80047b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047b4:	4850      	ldr	r0, [pc, #320]	; (80048f8 <_svfiprintf_r+0x1e8>)
 80047b6:	f000 fa67 	bl	8004c88 <memchr>
 80047ba:	9a04      	ldr	r2, [sp, #16]
 80047bc:	b9d8      	cbnz	r0, 80047f6 <_svfiprintf_r+0xe6>
 80047be:	06d0      	lsls	r0, r2, #27
 80047c0:	bf44      	itt	mi
 80047c2:	2320      	movmi	r3, #32
 80047c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047c8:	0711      	lsls	r1, r2, #28
 80047ca:	bf44      	itt	mi
 80047cc:	232b      	movmi	r3, #43	; 0x2b
 80047ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047d2:	f89a 3000 	ldrb.w	r3, [sl]
 80047d6:	2b2a      	cmp	r3, #42	; 0x2a
 80047d8:	d015      	beq.n	8004806 <_svfiprintf_r+0xf6>
 80047da:	4654      	mov	r4, sl
 80047dc:	2000      	movs	r0, #0
 80047de:	f04f 0c0a 	mov.w	ip, #10
 80047e2:	9a07      	ldr	r2, [sp, #28]
 80047e4:	4621      	mov	r1, r4
 80047e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047ea:	3b30      	subs	r3, #48	; 0x30
 80047ec:	2b09      	cmp	r3, #9
 80047ee:	d94d      	bls.n	800488c <_svfiprintf_r+0x17c>
 80047f0:	b1b0      	cbz	r0, 8004820 <_svfiprintf_r+0x110>
 80047f2:	9207      	str	r2, [sp, #28]
 80047f4:	e014      	b.n	8004820 <_svfiprintf_r+0x110>
 80047f6:	eba0 0308 	sub.w	r3, r0, r8
 80047fa:	fa09 f303 	lsl.w	r3, r9, r3
 80047fe:	4313      	orrs	r3, r2
 8004800:	46a2      	mov	sl, r4
 8004802:	9304      	str	r3, [sp, #16]
 8004804:	e7d2      	b.n	80047ac <_svfiprintf_r+0x9c>
 8004806:	9b03      	ldr	r3, [sp, #12]
 8004808:	1d19      	adds	r1, r3, #4
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	9103      	str	r1, [sp, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	bfbb      	ittet	lt
 8004812:	425b      	neglt	r3, r3
 8004814:	f042 0202 	orrlt.w	r2, r2, #2
 8004818:	9307      	strge	r3, [sp, #28]
 800481a:	9307      	strlt	r3, [sp, #28]
 800481c:	bfb8      	it	lt
 800481e:	9204      	strlt	r2, [sp, #16]
 8004820:	7823      	ldrb	r3, [r4, #0]
 8004822:	2b2e      	cmp	r3, #46	; 0x2e
 8004824:	d10c      	bne.n	8004840 <_svfiprintf_r+0x130>
 8004826:	7863      	ldrb	r3, [r4, #1]
 8004828:	2b2a      	cmp	r3, #42	; 0x2a
 800482a:	d134      	bne.n	8004896 <_svfiprintf_r+0x186>
 800482c:	9b03      	ldr	r3, [sp, #12]
 800482e:	3402      	adds	r4, #2
 8004830:	1d1a      	adds	r2, r3, #4
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	9203      	str	r2, [sp, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	bfb8      	it	lt
 800483a:	f04f 33ff 	movlt.w	r3, #4294967295
 800483e:	9305      	str	r3, [sp, #20]
 8004840:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80048fc <_svfiprintf_r+0x1ec>
 8004844:	2203      	movs	r2, #3
 8004846:	4650      	mov	r0, sl
 8004848:	7821      	ldrb	r1, [r4, #0]
 800484a:	f000 fa1d 	bl	8004c88 <memchr>
 800484e:	b138      	cbz	r0, 8004860 <_svfiprintf_r+0x150>
 8004850:	2240      	movs	r2, #64	; 0x40
 8004852:	9b04      	ldr	r3, [sp, #16]
 8004854:	eba0 000a 	sub.w	r0, r0, sl
 8004858:	4082      	lsls	r2, r0
 800485a:	4313      	orrs	r3, r2
 800485c:	3401      	adds	r4, #1
 800485e:	9304      	str	r3, [sp, #16]
 8004860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004864:	2206      	movs	r2, #6
 8004866:	4826      	ldr	r0, [pc, #152]	; (8004900 <_svfiprintf_r+0x1f0>)
 8004868:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800486c:	f000 fa0c 	bl	8004c88 <memchr>
 8004870:	2800      	cmp	r0, #0
 8004872:	d038      	beq.n	80048e6 <_svfiprintf_r+0x1d6>
 8004874:	4b23      	ldr	r3, [pc, #140]	; (8004904 <_svfiprintf_r+0x1f4>)
 8004876:	bb1b      	cbnz	r3, 80048c0 <_svfiprintf_r+0x1b0>
 8004878:	9b03      	ldr	r3, [sp, #12]
 800487a:	3307      	adds	r3, #7
 800487c:	f023 0307 	bic.w	r3, r3, #7
 8004880:	3308      	adds	r3, #8
 8004882:	9303      	str	r3, [sp, #12]
 8004884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004886:	4433      	add	r3, r6
 8004888:	9309      	str	r3, [sp, #36]	; 0x24
 800488a:	e768      	b.n	800475e <_svfiprintf_r+0x4e>
 800488c:	460c      	mov	r4, r1
 800488e:	2001      	movs	r0, #1
 8004890:	fb0c 3202 	mla	r2, ip, r2, r3
 8004894:	e7a6      	b.n	80047e4 <_svfiprintf_r+0xd4>
 8004896:	2300      	movs	r3, #0
 8004898:	f04f 0c0a 	mov.w	ip, #10
 800489c:	4619      	mov	r1, r3
 800489e:	3401      	adds	r4, #1
 80048a0:	9305      	str	r3, [sp, #20]
 80048a2:	4620      	mov	r0, r4
 80048a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048a8:	3a30      	subs	r2, #48	; 0x30
 80048aa:	2a09      	cmp	r2, #9
 80048ac:	d903      	bls.n	80048b6 <_svfiprintf_r+0x1a6>
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0c6      	beq.n	8004840 <_svfiprintf_r+0x130>
 80048b2:	9105      	str	r1, [sp, #20]
 80048b4:	e7c4      	b.n	8004840 <_svfiprintf_r+0x130>
 80048b6:	4604      	mov	r4, r0
 80048b8:	2301      	movs	r3, #1
 80048ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80048be:	e7f0      	b.n	80048a2 <_svfiprintf_r+0x192>
 80048c0:	ab03      	add	r3, sp, #12
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	462a      	mov	r2, r5
 80048c6:	4638      	mov	r0, r7
 80048c8:	4b0f      	ldr	r3, [pc, #60]	; (8004908 <_svfiprintf_r+0x1f8>)
 80048ca:	a904      	add	r1, sp, #16
 80048cc:	f3af 8000 	nop.w
 80048d0:	1c42      	adds	r2, r0, #1
 80048d2:	4606      	mov	r6, r0
 80048d4:	d1d6      	bne.n	8004884 <_svfiprintf_r+0x174>
 80048d6:	89ab      	ldrh	r3, [r5, #12]
 80048d8:	065b      	lsls	r3, r3, #25
 80048da:	f53f af2d 	bmi.w	8004738 <_svfiprintf_r+0x28>
 80048de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048e0:	b01d      	add	sp, #116	; 0x74
 80048e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e6:	ab03      	add	r3, sp, #12
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	462a      	mov	r2, r5
 80048ec:	4638      	mov	r0, r7
 80048ee:	4b06      	ldr	r3, [pc, #24]	; (8004908 <_svfiprintf_r+0x1f8>)
 80048f0:	a904      	add	r1, sp, #16
 80048f2:	f000 f87d 	bl	80049f0 <_printf_i>
 80048f6:	e7eb      	b.n	80048d0 <_svfiprintf_r+0x1c0>
 80048f8:	08004dca 	.word	0x08004dca
 80048fc:	08004dd0 	.word	0x08004dd0
 8004900:	08004dd4 	.word	0x08004dd4
 8004904:	00000000 	.word	0x00000000
 8004908:	0800465d 	.word	0x0800465d

0800490c <_printf_common>:
 800490c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004910:	4616      	mov	r6, r2
 8004912:	4699      	mov	r9, r3
 8004914:	688a      	ldr	r2, [r1, #8]
 8004916:	690b      	ldr	r3, [r1, #16]
 8004918:	4607      	mov	r7, r0
 800491a:	4293      	cmp	r3, r2
 800491c:	bfb8      	it	lt
 800491e:	4613      	movlt	r3, r2
 8004920:	6033      	str	r3, [r6, #0]
 8004922:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004926:	460c      	mov	r4, r1
 8004928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800492c:	b10a      	cbz	r2, 8004932 <_printf_common+0x26>
 800492e:	3301      	adds	r3, #1
 8004930:	6033      	str	r3, [r6, #0]
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	0699      	lsls	r1, r3, #26
 8004936:	bf42      	ittt	mi
 8004938:	6833      	ldrmi	r3, [r6, #0]
 800493a:	3302      	addmi	r3, #2
 800493c:	6033      	strmi	r3, [r6, #0]
 800493e:	6825      	ldr	r5, [r4, #0]
 8004940:	f015 0506 	ands.w	r5, r5, #6
 8004944:	d106      	bne.n	8004954 <_printf_common+0x48>
 8004946:	f104 0a19 	add.w	sl, r4, #25
 800494a:	68e3      	ldr	r3, [r4, #12]
 800494c:	6832      	ldr	r2, [r6, #0]
 800494e:	1a9b      	subs	r3, r3, r2
 8004950:	42ab      	cmp	r3, r5
 8004952:	dc2b      	bgt.n	80049ac <_printf_common+0xa0>
 8004954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004958:	1e13      	subs	r3, r2, #0
 800495a:	6822      	ldr	r2, [r4, #0]
 800495c:	bf18      	it	ne
 800495e:	2301      	movne	r3, #1
 8004960:	0692      	lsls	r2, r2, #26
 8004962:	d430      	bmi.n	80049c6 <_printf_common+0xba>
 8004964:	4649      	mov	r1, r9
 8004966:	4638      	mov	r0, r7
 8004968:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800496c:	47c0      	blx	r8
 800496e:	3001      	adds	r0, #1
 8004970:	d023      	beq.n	80049ba <_printf_common+0xae>
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	6922      	ldr	r2, [r4, #16]
 8004976:	f003 0306 	and.w	r3, r3, #6
 800497a:	2b04      	cmp	r3, #4
 800497c:	bf14      	ite	ne
 800497e:	2500      	movne	r5, #0
 8004980:	6833      	ldreq	r3, [r6, #0]
 8004982:	f04f 0600 	mov.w	r6, #0
 8004986:	bf08      	it	eq
 8004988:	68e5      	ldreq	r5, [r4, #12]
 800498a:	f104 041a 	add.w	r4, r4, #26
 800498e:	bf08      	it	eq
 8004990:	1aed      	subeq	r5, r5, r3
 8004992:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004996:	bf08      	it	eq
 8004998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800499c:	4293      	cmp	r3, r2
 800499e:	bfc4      	itt	gt
 80049a0:	1a9b      	subgt	r3, r3, r2
 80049a2:	18ed      	addgt	r5, r5, r3
 80049a4:	42b5      	cmp	r5, r6
 80049a6:	d11a      	bne.n	80049de <_printf_common+0xd2>
 80049a8:	2000      	movs	r0, #0
 80049aa:	e008      	b.n	80049be <_printf_common+0xb2>
 80049ac:	2301      	movs	r3, #1
 80049ae:	4652      	mov	r2, sl
 80049b0:	4649      	mov	r1, r9
 80049b2:	4638      	mov	r0, r7
 80049b4:	47c0      	blx	r8
 80049b6:	3001      	adds	r0, #1
 80049b8:	d103      	bne.n	80049c2 <_printf_common+0xb6>
 80049ba:	f04f 30ff 	mov.w	r0, #4294967295
 80049be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049c2:	3501      	adds	r5, #1
 80049c4:	e7c1      	b.n	800494a <_printf_common+0x3e>
 80049c6:	2030      	movs	r0, #48	; 0x30
 80049c8:	18e1      	adds	r1, r4, r3
 80049ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049d4:	4422      	add	r2, r4
 80049d6:	3302      	adds	r3, #2
 80049d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049dc:	e7c2      	b.n	8004964 <_printf_common+0x58>
 80049de:	2301      	movs	r3, #1
 80049e0:	4622      	mov	r2, r4
 80049e2:	4649      	mov	r1, r9
 80049e4:	4638      	mov	r0, r7
 80049e6:	47c0      	blx	r8
 80049e8:	3001      	adds	r0, #1
 80049ea:	d0e6      	beq.n	80049ba <_printf_common+0xae>
 80049ec:	3601      	adds	r6, #1
 80049ee:	e7d9      	b.n	80049a4 <_printf_common+0x98>

080049f0 <_printf_i>:
 80049f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049f4:	7e0f      	ldrb	r7, [r1, #24]
 80049f6:	4691      	mov	r9, r2
 80049f8:	2f78      	cmp	r7, #120	; 0x78
 80049fa:	4680      	mov	r8, r0
 80049fc:	460c      	mov	r4, r1
 80049fe:	469a      	mov	sl, r3
 8004a00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a06:	d807      	bhi.n	8004a18 <_printf_i+0x28>
 8004a08:	2f62      	cmp	r7, #98	; 0x62
 8004a0a:	d80a      	bhi.n	8004a22 <_printf_i+0x32>
 8004a0c:	2f00      	cmp	r7, #0
 8004a0e:	f000 80d5 	beq.w	8004bbc <_printf_i+0x1cc>
 8004a12:	2f58      	cmp	r7, #88	; 0x58
 8004a14:	f000 80c1 	beq.w	8004b9a <_printf_i+0x1aa>
 8004a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a20:	e03a      	b.n	8004a98 <_printf_i+0xa8>
 8004a22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a26:	2b15      	cmp	r3, #21
 8004a28:	d8f6      	bhi.n	8004a18 <_printf_i+0x28>
 8004a2a:	a101      	add	r1, pc, #4	; (adr r1, 8004a30 <_printf_i+0x40>)
 8004a2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a30:	08004a89 	.word	0x08004a89
 8004a34:	08004a9d 	.word	0x08004a9d
 8004a38:	08004a19 	.word	0x08004a19
 8004a3c:	08004a19 	.word	0x08004a19
 8004a40:	08004a19 	.word	0x08004a19
 8004a44:	08004a19 	.word	0x08004a19
 8004a48:	08004a9d 	.word	0x08004a9d
 8004a4c:	08004a19 	.word	0x08004a19
 8004a50:	08004a19 	.word	0x08004a19
 8004a54:	08004a19 	.word	0x08004a19
 8004a58:	08004a19 	.word	0x08004a19
 8004a5c:	08004ba3 	.word	0x08004ba3
 8004a60:	08004ac9 	.word	0x08004ac9
 8004a64:	08004b5d 	.word	0x08004b5d
 8004a68:	08004a19 	.word	0x08004a19
 8004a6c:	08004a19 	.word	0x08004a19
 8004a70:	08004bc5 	.word	0x08004bc5
 8004a74:	08004a19 	.word	0x08004a19
 8004a78:	08004ac9 	.word	0x08004ac9
 8004a7c:	08004a19 	.word	0x08004a19
 8004a80:	08004a19 	.word	0x08004a19
 8004a84:	08004b65 	.word	0x08004b65
 8004a88:	682b      	ldr	r3, [r5, #0]
 8004a8a:	1d1a      	adds	r2, r3, #4
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	602a      	str	r2, [r5, #0]
 8004a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e0a0      	b.n	8004bde <_printf_i+0x1ee>
 8004a9c:	6820      	ldr	r0, [r4, #0]
 8004a9e:	682b      	ldr	r3, [r5, #0]
 8004aa0:	0607      	lsls	r7, r0, #24
 8004aa2:	f103 0104 	add.w	r1, r3, #4
 8004aa6:	6029      	str	r1, [r5, #0]
 8004aa8:	d501      	bpl.n	8004aae <_printf_i+0xbe>
 8004aaa:	681e      	ldr	r6, [r3, #0]
 8004aac:	e003      	b.n	8004ab6 <_printf_i+0xc6>
 8004aae:	0646      	lsls	r6, r0, #25
 8004ab0:	d5fb      	bpl.n	8004aaa <_printf_i+0xba>
 8004ab2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004ab6:	2e00      	cmp	r6, #0
 8004ab8:	da03      	bge.n	8004ac2 <_printf_i+0xd2>
 8004aba:	232d      	movs	r3, #45	; 0x2d
 8004abc:	4276      	negs	r6, r6
 8004abe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ac2:	230a      	movs	r3, #10
 8004ac4:	4859      	ldr	r0, [pc, #356]	; (8004c2c <_printf_i+0x23c>)
 8004ac6:	e012      	b.n	8004aee <_printf_i+0xfe>
 8004ac8:	682b      	ldr	r3, [r5, #0]
 8004aca:	6820      	ldr	r0, [r4, #0]
 8004acc:	1d19      	adds	r1, r3, #4
 8004ace:	6029      	str	r1, [r5, #0]
 8004ad0:	0605      	lsls	r5, r0, #24
 8004ad2:	d501      	bpl.n	8004ad8 <_printf_i+0xe8>
 8004ad4:	681e      	ldr	r6, [r3, #0]
 8004ad6:	e002      	b.n	8004ade <_printf_i+0xee>
 8004ad8:	0641      	lsls	r1, r0, #25
 8004ada:	d5fb      	bpl.n	8004ad4 <_printf_i+0xe4>
 8004adc:	881e      	ldrh	r6, [r3, #0]
 8004ade:	2f6f      	cmp	r7, #111	; 0x6f
 8004ae0:	bf0c      	ite	eq
 8004ae2:	2308      	moveq	r3, #8
 8004ae4:	230a      	movne	r3, #10
 8004ae6:	4851      	ldr	r0, [pc, #324]	; (8004c2c <_printf_i+0x23c>)
 8004ae8:	2100      	movs	r1, #0
 8004aea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004aee:	6865      	ldr	r5, [r4, #4]
 8004af0:	2d00      	cmp	r5, #0
 8004af2:	bfa8      	it	ge
 8004af4:	6821      	ldrge	r1, [r4, #0]
 8004af6:	60a5      	str	r5, [r4, #8]
 8004af8:	bfa4      	itt	ge
 8004afa:	f021 0104 	bicge.w	r1, r1, #4
 8004afe:	6021      	strge	r1, [r4, #0]
 8004b00:	b90e      	cbnz	r6, 8004b06 <_printf_i+0x116>
 8004b02:	2d00      	cmp	r5, #0
 8004b04:	d04b      	beq.n	8004b9e <_printf_i+0x1ae>
 8004b06:	4615      	mov	r5, r2
 8004b08:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b0c:	fb03 6711 	mls	r7, r3, r1, r6
 8004b10:	5dc7      	ldrb	r7, [r0, r7]
 8004b12:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b16:	4637      	mov	r7, r6
 8004b18:	42bb      	cmp	r3, r7
 8004b1a:	460e      	mov	r6, r1
 8004b1c:	d9f4      	bls.n	8004b08 <_printf_i+0x118>
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d10b      	bne.n	8004b3a <_printf_i+0x14a>
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	07de      	lsls	r6, r3, #31
 8004b26:	d508      	bpl.n	8004b3a <_printf_i+0x14a>
 8004b28:	6923      	ldr	r3, [r4, #16]
 8004b2a:	6861      	ldr	r1, [r4, #4]
 8004b2c:	4299      	cmp	r1, r3
 8004b2e:	bfde      	ittt	le
 8004b30:	2330      	movle	r3, #48	; 0x30
 8004b32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b3a:	1b52      	subs	r2, r2, r5
 8004b3c:	6122      	str	r2, [r4, #16]
 8004b3e:	464b      	mov	r3, r9
 8004b40:	4621      	mov	r1, r4
 8004b42:	4640      	mov	r0, r8
 8004b44:	f8cd a000 	str.w	sl, [sp]
 8004b48:	aa03      	add	r2, sp, #12
 8004b4a:	f7ff fedf 	bl	800490c <_printf_common>
 8004b4e:	3001      	adds	r0, #1
 8004b50:	d14a      	bne.n	8004be8 <_printf_i+0x1f8>
 8004b52:	f04f 30ff 	mov.w	r0, #4294967295
 8004b56:	b004      	add	sp, #16
 8004b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	f043 0320 	orr.w	r3, r3, #32
 8004b62:	6023      	str	r3, [r4, #0]
 8004b64:	2778      	movs	r7, #120	; 0x78
 8004b66:	4832      	ldr	r0, [pc, #200]	; (8004c30 <_printf_i+0x240>)
 8004b68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	6829      	ldr	r1, [r5, #0]
 8004b70:	061f      	lsls	r7, r3, #24
 8004b72:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b76:	d402      	bmi.n	8004b7e <_printf_i+0x18e>
 8004b78:	065f      	lsls	r7, r3, #25
 8004b7a:	bf48      	it	mi
 8004b7c:	b2b6      	uxthmi	r6, r6
 8004b7e:	07df      	lsls	r7, r3, #31
 8004b80:	bf48      	it	mi
 8004b82:	f043 0320 	orrmi.w	r3, r3, #32
 8004b86:	6029      	str	r1, [r5, #0]
 8004b88:	bf48      	it	mi
 8004b8a:	6023      	strmi	r3, [r4, #0]
 8004b8c:	b91e      	cbnz	r6, 8004b96 <_printf_i+0x1a6>
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	f023 0320 	bic.w	r3, r3, #32
 8004b94:	6023      	str	r3, [r4, #0]
 8004b96:	2310      	movs	r3, #16
 8004b98:	e7a6      	b.n	8004ae8 <_printf_i+0xf8>
 8004b9a:	4824      	ldr	r0, [pc, #144]	; (8004c2c <_printf_i+0x23c>)
 8004b9c:	e7e4      	b.n	8004b68 <_printf_i+0x178>
 8004b9e:	4615      	mov	r5, r2
 8004ba0:	e7bd      	b.n	8004b1e <_printf_i+0x12e>
 8004ba2:	682b      	ldr	r3, [r5, #0]
 8004ba4:	6826      	ldr	r6, [r4, #0]
 8004ba6:	1d18      	adds	r0, r3, #4
 8004ba8:	6961      	ldr	r1, [r4, #20]
 8004baa:	6028      	str	r0, [r5, #0]
 8004bac:	0635      	lsls	r5, r6, #24
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	d501      	bpl.n	8004bb6 <_printf_i+0x1c6>
 8004bb2:	6019      	str	r1, [r3, #0]
 8004bb4:	e002      	b.n	8004bbc <_printf_i+0x1cc>
 8004bb6:	0670      	lsls	r0, r6, #25
 8004bb8:	d5fb      	bpl.n	8004bb2 <_printf_i+0x1c2>
 8004bba:	8019      	strh	r1, [r3, #0]
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	4615      	mov	r5, r2
 8004bc0:	6123      	str	r3, [r4, #16]
 8004bc2:	e7bc      	b.n	8004b3e <_printf_i+0x14e>
 8004bc4:	682b      	ldr	r3, [r5, #0]
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	1d1a      	adds	r2, r3, #4
 8004bca:	602a      	str	r2, [r5, #0]
 8004bcc:	681d      	ldr	r5, [r3, #0]
 8004bce:	6862      	ldr	r2, [r4, #4]
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	f000 f859 	bl	8004c88 <memchr>
 8004bd6:	b108      	cbz	r0, 8004bdc <_printf_i+0x1ec>
 8004bd8:	1b40      	subs	r0, r0, r5
 8004bda:	6060      	str	r0, [r4, #4]
 8004bdc:	6863      	ldr	r3, [r4, #4]
 8004bde:	6123      	str	r3, [r4, #16]
 8004be0:	2300      	movs	r3, #0
 8004be2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be6:	e7aa      	b.n	8004b3e <_printf_i+0x14e>
 8004be8:	462a      	mov	r2, r5
 8004bea:	4649      	mov	r1, r9
 8004bec:	4640      	mov	r0, r8
 8004bee:	6923      	ldr	r3, [r4, #16]
 8004bf0:	47d0      	blx	sl
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	d0ad      	beq.n	8004b52 <_printf_i+0x162>
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	079b      	lsls	r3, r3, #30
 8004bfa:	d413      	bmi.n	8004c24 <_printf_i+0x234>
 8004bfc:	68e0      	ldr	r0, [r4, #12]
 8004bfe:	9b03      	ldr	r3, [sp, #12]
 8004c00:	4298      	cmp	r0, r3
 8004c02:	bfb8      	it	lt
 8004c04:	4618      	movlt	r0, r3
 8004c06:	e7a6      	b.n	8004b56 <_printf_i+0x166>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	4632      	mov	r2, r6
 8004c0c:	4649      	mov	r1, r9
 8004c0e:	4640      	mov	r0, r8
 8004c10:	47d0      	blx	sl
 8004c12:	3001      	adds	r0, #1
 8004c14:	d09d      	beq.n	8004b52 <_printf_i+0x162>
 8004c16:	3501      	adds	r5, #1
 8004c18:	68e3      	ldr	r3, [r4, #12]
 8004c1a:	9903      	ldr	r1, [sp, #12]
 8004c1c:	1a5b      	subs	r3, r3, r1
 8004c1e:	42ab      	cmp	r3, r5
 8004c20:	dcf2      	bgt.n	8004c08 <_printf_i+0x218>
 8004c22:	e7eb      	b.n	8004bfc <_printf_i+0x20c>
 8004c24:	2500      	movs	r5, #0
 8004c26:	f104 0619 	add.w	r6, r4, #25
 8004c2a:	e7f5      	b.n	8004c18 <_printf_i+0x228>
 8004c2c:	08004ddb 	.word	0x08004ddb
 8004c30:	08004dec 	.word	0x08004dec

08004c34 <memmove>:
 8004c34:	4288      	cmp	r0, r1
 8004c36:	b510      	push	{r4, lr}
 8004c38:	eb01 0402 	add.w	r4, r1, r2
 8004c3c:	d902      	bls.n	8004c44 <memmove+0x10>
 8004c3e:	4284      	cmp	r4, r0
 8004c40:	4623      	mov	r3, r4
 8004c42:	d807      	bhi.n	8004c54 <memmove+0x20>
 8004c44:	1e43      	subs	r3, r0, #1
 8004c46:	42a1      	cmp	r1, r4
 8004c48:	d008      	beq.n	8004c5c <memmove+0x28>
 8004c4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c52:	e7f8      	b.n	8004c46 <memmove+0x12>
 8004c54:	4601      	mov	r1, r0
 8004c56:	4402      	add	r2, r0
 8004c58:	428a      	cmp	r2, r1
 8004c5a:	d100      	bne.n	8004c5e <memmove+0x2a>
 8004c5c:	bd10      	pop	{r4, pc}
 8004c5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c66:	e7f7      	b.n	8004c58 <memmove+0x24>

08004c68 <_sbrk_r>:
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	4d05      	ldr	r5, [pc, #20]	; (8004c84 <_sbrk_r+0x1c>)
 8004c6e:	4604      	mov	r4, r0
 8004c70:	4608      	mov	r0, r1
 8004c72:	602b      	str	r3, [r5, #0]
 8004c74:	f7fc f8ac 	bl	8000dd0 <_sbrk>
 8004c78:	1c43      	adds	r3, r0, #1
 8004c7a:	d102      	bne.n	8004c82 <_sbrk_r+0x1a>
 8004c7c:	682b      	ldr	r3, [r5, #0]
 8004c7e:	b103      	cbz	r3, 8004c82 <_sbrk_r+0x1a>
 8004c80:	6023      	str	r3, [r4, #0]
 8004c82:	bd38      	pop	{r3, r4, r5, pc}
 8004c84:	20000348 	.word	0x20000348

08004c88 <memchr>:
 8004c88:	4603      	mov	r3, r0
 8004c8a:	b510      	push	{r4, lr}
 8004c8c:	b2c9      	uxtb	r1, r1
 8004c8e:	4402      	add	r2, r0
 8004c90:	4293      	cmp	r3, r2
 8004c92:	4618      	mov	r0, r3
 8004c94:	d101      	bne.n	8004c9a <memchr+0x12>
 8004c96:	2000      	movs	r0, #0
 8004c98:	e003      	b.n	8004ca2 <memchr+0x1a>
 8004c9a:	7804      	ldrb	r4, [r0, #0]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	428c      	cmp	r4, r1
 8004ca0:	d1f6      	bne.n	8004c90 <memchr+0x8>
 8004ca2:	bd10      	pop	{r4, pc}

08004ca4 <memcpy>:
 8004ca4:	440a      	add	r2, r1
 8004ca6:	4291      	cmp	r1, r2
 8004ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cac:	d100      	bne.n	8004cb0 <memcpy+0xc>
 8004cae:	4770      	bx	lr
 8004cb0:	b510      	push	{r4, lr}
 8004cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cb6:	4291      	cmp	r1, r2
 8004cb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cbc:	d1f9      	bne.n	8004cb2 <memcpy+0xe>
 8004cbe:	bd10      	pop	{r4, pc}

08004cc0 <_realloc_r>:
 8004cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc4:	4680      	mov	r8, r0
 8004cc6:	4614      	mov	r4, r2
 8004cc8:	460e      	mov	r6, r1
 8004cca:	b921      	cbnz	r1, 8004cd6 <_realloc_r+0x16>
 8004ccc:	4611      	mov	r1, r2
 8004cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd2:	f7ff bc37 	b.w	8004544 <_malloc_r>
 8004cd6:	b92a      	cbnz	r2, 8004ce4 <_realloc_r+0x24>
 8004cd8:	f7ff fbcc 	bl	8004474 <_free_r>
 8004cdc:	4625      	mov	r5, r4
 8004cde:	4628      	mov	r0, r5
 8004ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ce4:	f000 f81b 	bl	8004d1e <_malloc_usable_size_r>
 8004ce8:	4284      	cmp	r4, r0
 8004cea:	4607      	mov	r7, r0
 8004cec:	d802      	bhi.n	8004cf4 <_realloc_r+0x34>
 8004cee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004cf2:	d812      	bhi.n	8004d1a <_realloc_r+0x5a>
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	4640      	mov	r0, r8
 8004cf8:	f7ff fc24 	bl	8004544 <_malloc_r>
 8004cfc:	4605      	mov	r5, r0
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	d0ed      	beq.n	8004cde <_realloc_r+0x1e>
 8004d02:	42bc      	cmp	r4, r7
 8004d04:	4622      	mov	r2, r4
 8004d06:	4631      	mov	r1, r6
 8004d08:	bf28      	it	cs
 8004d0a:	463a      	movcs	r2, r7
 8004d0c:	f7ff ffca 	bl	8004ca4 <memcpy>
 8004d10:	4631      	mov	r1, r6
 8004d12:	4640      	mov	r0, r8
 8004d14:	f7ff fbae 	bl	8004474 <_free_r>
 8004d18:	e7e1      	b.n	8004cde <_realloc_r+0x1e>
 8004d1a:	4635      	mov	r5, r6
 8004d1c:	e7df      	b.n	8004cde <_realloc_r+0x1e>

08004d1e <_malloc_usable_size_r>:
 8004d1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d22:	1f18      	subs	r0, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	bfbc      	itt	lt
 8004d28:	580b      	ldrlt	r3, [r1, r0]
 8004d2a:	18c0      	addlt	r0, r0, r3
 8004d2c:	4770      	bx	lr
	...

08004d30 <_init>:
 8004d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d32:	bf00      	nop
 8004d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d36:	bc08      	pop	{r3}
 8004d38:	469e      	mov	lr, r3
 8004d3a:	4770      	bx	lr

08004d3c <_fini>:
 8004d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3e:	bf00      	nop
 8004d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d42:	bc08      	pop	{r3}
 8004d44:	469e      	mov	lr, r3
 8004d46:	4770      	bx	lr
